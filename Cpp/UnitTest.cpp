#include "pch.h"
#include "CppUnitTest.h"
#include "SDK.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

#define CHEAT_GEAR_CHECK_OFFSET(targetClass, varName, expectedOffset) \
	Assert::AreEqual(uint32_t(expectedOffset), uint32_t(offsetof(targetClass, varName)), L#targetClass" -> "#varName".")

#define CHEAT_GEAR_CHECK_SIZE(targetClass, expectedSize) \
	Assert::AreEqual(uint32_t(expectedSize), uint32_t(sizeof(targetClass)), L#targetClass" Has a wrong size.")

namespace CheatGearCppUnitTests
{
	TEST_CLASS(CheatGear)
	{
	public:

		// class UAudioImportanceComponent : public UActorComponent
		TEST_METHOD(Class__FMODStudio__AudioImportanceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImportanceComponent, UnknownData_G0MH, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioImportanceComponent, 0x00D0);
		}

		// class AFMODAmbientSound : public AActor
		TEST_METHOD(Class__FMODStudio__FMODAmbientSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFMODAmbientSound, AudioComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFMODAmbientSound, 0x0228);
		}

		// class UFMODAsset : public UObject
		TEST_METHOD(Class__FMODStudio__FMODAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODAsset, AssetGuid, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODAsset, bShowAsAsset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODAsset, UnknownData_EFNQ, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODAsset, NamedAsset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODAsset, GuidAsset, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFMODAsset, 0x0050);
		}

		// class UFMODLocalizedAudioTableEntryAsset : public UObject
		TEST_METHOD(Class__FMODStudio__FMODLocalizedAudioTableEntryAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODLocalizedAudioTableEntryAsset, AudioTableEntry, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFMODLocalizedAudioTableEntryAsset, 0x0038);
		}

		// class UFMODAudioComponent : public USceneComponent
		TEST_METHOD(Class__FMODStudio__FMODAudioComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODAudioComponent, Event, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODAudioComponent, AudioTableEntry, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODAudioComponent, UnknownData_1M8B, 0x0221);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFMODAudioComponent, 0x0240);
		}

		// class UFMODBank : public UFMODAsset
		TEST_METHOD(Class__FMODStudio__FMODBank)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFMODBank, 0x0050);
		}

		// class UFMODBlueprintStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__FMODStudio__FMODBlueprintStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFMODBlueprintStatics, 0x0028);
		}

		// class UFMODBus : public UFMODAsset
		TEST_METHOD(Class__FMODStudio__FMODBus)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFMODBus, 0x0050);
		}

		// class UFMODEvent : public UFMODAsset
		TEST_METHOD(Class__FMODStudio__FMODEvent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFMODEvent, 0x0050);
		}

		// class UFMODEventHelpers : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__FMODStudio__FMODEventHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFMODEventHelpers, 0x0028);
		}

		// class UFMODSettings : public UObject
		TEST_METHOD(Class__FMODStudio__FMODSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, bLoadAllBanks, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, bLoadAllSampleData, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, bEnableLiveUpdate, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, bEnableEditorLiveUpdate, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, UnknownData_CGP1, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, BankOutputDirectory, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, OutputFormat, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, bVol0Virtual, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, UnknownData_5KIJ, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, Vol0VirtualLevel, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, SampleRate, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, bMatchHardwareSampleRate, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, UnknownData_HZQU, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, RealChannelCount, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, TotalChannelCount, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, DSPBufferLength, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, DSPBufferCount, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, StudioUpdatePeriod, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, UnknownData_4Y2Y, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, InitialOutputDriverName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, bLockAllBuses, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, UnknownData_SDBT, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, MemoryPoolSizes, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, LiveUpdatePort, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, EditorLiveUpdatePort, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, PluginFiles, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, ContentBrowserPrefix, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, ForcePlatformName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, MasterBankName, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, SourceAudioContentDirectory, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, LocalizedSourceAudioRoot, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, LocalizedBankName, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, LocaleToSuffixMap, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, FallbackLocale, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, LocalizedAudioTableAsset, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, WavWriterPath, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, ImportanceBuckets, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, ImportanceFadetime, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, ImportanceDetectionRadius, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, IdentityScalingFactor, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, DistanceToCenterOfScreenScalingFactor, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, MonsterDramaScalingFactor, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, SkillScalingFactor, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODSettings, ImportantSkillTags, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFMODSettings, 0x01E8);
		}

		// class UFMODSnapshot : public UFMODEvent
		TEST_METHOD(Class__FMODStudio__FMODSnapshot)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFMODSnapshot, 0x0050);
		}

		// class UFMODVCA : public UFMODAsset
		TEST_METHOD(Class__FMODStudio__FMODVCA)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFMODVCA, 0x0050);
		}

		// class ULocalizedAudioTableAsset : public UObject
		TEST_METHOD(Class__FMODStudio__LocalizedAudioTableAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizedAudioTableAsset, AudioTable, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizedAudioTableAsset, MusicEvents, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalizedAudioTableAsset, 0x00C8);
		}

		// class UTLFMODAudioSection : public UMovieSceneSection
		TEST_METHOD(Class__FMODStudio__TLFMODAudioSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLFMODAudioSection, Event, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLFMODAudioSection, StartOffset, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLFMODAudioSection, bStopSoundWhenSequenceStops, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLFMODAudioSection, UnknownData_1QBN, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLFMODAudioSection, EventVolume, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLFMODAudioSection, PitchMultiplier, 0x01A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLFMODAudioSection, 0x0248);
		}

		// class UTLFMODAudioTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__FMODStudio__TLFMODAudioTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLFMODAudioTrack, UnknownData_XS0X, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLFMODAudioTrack, FMODAudioSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLFMODAudioTrack, 0x0090);
		}

		// class AVolumetricSound : public AActor
		TEST_METHOD(Class__FMODStudio__VolumetricSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVolumetricSound, Event, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVolumetricSound, MaxDistanceOverride, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVolumetricSound, NearFieldDistance, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVolumetricSound, UnknownData_D26V, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolumetricSound, 0x0280);
		}

		// class UDatasmithObjectTemplate : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithObjectTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithObjectTemplate, UnknownData_TSZC, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithObjectTemplate, 0x0030);
		}

		// class UDatasmithActorTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithActorTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithActorTemplate, Layers, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithActorTemplate, Tags, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithActorTemplate, 0x00D0);
		}

		// class UDatasmithAdditionalData : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithAdditionalData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAdditionalData, 0x0028);
		}

		// class ADatasmithAreaLightActor : public AActor
		TEST_METHOD(Class__DatasmithContent__DatasmithAreaLightActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, LightType, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, LightShape, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, UnknownData_4EMW, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Dimensions, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Intensity, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, IntensityUnits, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, UnknownData_SPGI, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Color, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Temperature, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, IESTexture, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, bUseIESBrightness, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, UnknownData_9LXO, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, IESBrightnessScale, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Rotation, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SourceRadius, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SourceLength, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, AttenuationRadius, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SpotlightInnerAngle, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SpotlightOuterAngle, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADatasmithAreaLightActor, 0x0278);
		}

		// class UDatasmithAreaLightActorTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithAreaLightActorTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, LightType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, LightShape, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_GYIV, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Dimensions, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Color, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Intensity, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, IntensityUnits, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_MFLZ, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Temperature, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, IESTexture, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, bUseIESBrightness, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_P0GJ, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, IESBrightnessScale, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Rotation, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, SourceRadius, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, SourceLength, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, AttenuationRadius, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAreaLightActorTemplate, 0x00A0);
		}

		// class UDatasmithAssetImportData : public UAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithAssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAssetImportData, 0x0028);
		}

		// class UDatasmithStaticMeshImportData : public UDatasmithAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshImportData, 0x0028);
		}

		// class UDatasmithStaticMeshCADImportData : public UDatasmithStaticMeshImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshCADImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshCADImportData, 0x0028);
		}

		// class UDatasmithSceneImportData : public UAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSceneImportData, 0x0028);
		}

		// class UDatasmithTranslatedSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithTranslatedSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithTranslatedSceneImportData, 0x0028);
		}

		// class UDatasmithCADImportSceneData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithCADImportSceneData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCADImportSceneData, 0x0028);
		}

		// class UDatasmithMDLSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithMDLSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithMDLSceneImportData, 0x0028);
		}

		// class UDatasmithGLTFSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithGLTFSceneImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Generator, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Version, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, UnknownData_J76X, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Author, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, License, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Source, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithGLTFSceneImportData, 0x0070);
		}

		// class UDatasmithStaticMeshGLTFImportData : public UDatasmithStaticMeshImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshGLTFImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshGLTFImportData, SourceMeshName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshGLTFImportData, 0x0038);
		}

		// class UDatasmithFBXSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithFBXSceneImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, bGenerateLightmapUVs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, UnknownData_KGB4, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, TexturesDir, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, IntermediateSerialization, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, bColorizeMaterials, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, UnknownData_16FN, 0x0042);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithFBXSceneImportData, 0x0048);
		}

		// class UDatasmithDeltaGenAssetImportData : public UDatasmithAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithDeltaGenAssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithDeltaGenAssetImportData, 0x0028);
		}

		// class UDatasmithDeltaGenSceneImportData : public UDatasmithFBXSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithDeltaGenSceneImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bMergeNodes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bOptimizeDuplicatedNodes, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bRemoveInvisibleNodes, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bSimplifyNodeHierarchy, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bImportVar, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, UnknownData_NIPJ, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, VarPath, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bImportPos, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, UnknownData_4QE4, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, PosPath, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bImportTml, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, UnknownData_3JSX, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, TmlPath, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithDeltaGenSceneImportData, 0x0090);
		}

		// class UDatasmithVREDAssetImportData : public UDatasmithAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithVREDAssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithVREDAssetImportData, 0x0028);
		}

		// class UDatasmithVREDSceneImportData : public UDatasmithFBXSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithVREDSceneImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bMergeNodes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bOptimizeDuplicatedNodes, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportMats, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_7LLR, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, MatsPath, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportVar, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bCleanVar, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_D1EK, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, VarPath, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportLightInfo, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_WT1J, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, LightInfoPath, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportClipInfo, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_FXVP, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, ClipInfoPath, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithVREDSceneImportData, 0x00A8);
		}

		// class UDatasmithIFCSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithIFCSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithIFCSceneImportData, 0x0028);
		}

		// class UDatasmithStaticMeshIFCImportData : public UDatasmithStaticMeshImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshIFCImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshIFCImportData, SourceGlobalId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshIFCImportData, 0x0038);
		}

		// class UDatasmithAssetUserData : public UAssetUserData
		TEST_METHOD(Class__DatasmithContent__DatasmithAssetUserData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAssetUserData, MetaData, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAssetUserData, 0x0078);
		}

		// class UDatasmithCineCameraActorTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithCineCameraActorTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraActorTemplate, LookatTrackingSettings, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCineCameraActorTemplate, 0x0060);
		}

		// class UDatasmithCineCameraComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithCineCameraComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, FilmbackSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, LensSettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, FocusSettings, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, CurrentFocalLength, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, CurrentAperture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, UnknownData_XRXR, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, PostProcessSettings, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCineCameraComponentTemplate, 0x0090);
		}

		// class UDatasmithContentBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DatasmithContent__DatasmithContentBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithContentBlueprintLibrary, 0x0028);
		}

		// class UDatasmithCustomActionBase : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithCustomActionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCustomActionBase, UnknownData_612J, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCustomActionBase, 0x0030);
		}

		// class UDatasmithDecalComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithDecalComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDecalComponentTemplate, SortOrder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDecalComponentTemplate, DecalSize, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDecalComponentTemplate, Material, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithDecalComponentTemplate, 0x0048);
		}

		// class ADatasmithImportedSequencesActor : public AActor
		TEST_METHOD(Class__DatasmithContent__DatasmithImportedSequencesActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithImportedSequencesActor, ImportedSequences, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADatasmithImportedSequencesActor, 0x0230);
		}

		// class UDatasmithOptionsBase : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithOptionsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithOptionsBase, 0x0028);
		}

		// class UDatasmithCommonTessellationOptions : public UDatasmithOptionsBase
		TEST_METHOD(Class__DatasmithContent__DatasmithCommonTessellationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCommonTessellationOptions, Options, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCommonTessellationOptions, 0x0038);
		}

		// class UDatasmithImportOptions : public UDatasmithOptionsBase
		TEST_METHOD(Class__DatasmithContent__DatasmithImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, SearchPackagePolicy, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, MaterialConflictPolicy, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, TextureConflictPolicy, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, StaticMeshActorImportPolicy, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, LightImportPolicy, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, CameraImportPolicy, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, OtherActorImportPolicy, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, MaterialQuality, 0x002F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_2414, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, BaseOptions, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, ReimportOptions, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_QFDG, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, Filename, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, FilePath, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_4ZL0, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithImportOptions, 0x0078);
		}

		// class UDatasmithLandscapeTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithLandscapeTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLandscapeTemplate, LandscapeMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLandscapeTemplate, StaticLightingLOD, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLandscapeTemplate, UnknownData_9NBO, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithLandscapeTemplate, 0x0040);
		}

		// class UDatasmithLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_712J, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_T146, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, Intensity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, Temperature, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, IESBrightnessScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, LightColor, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_7WU8, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, LightFunctionMaterial, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, IESTexture, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithLightComponentTemplate, 0x0068);
		}

		// class UDatasmithMaterialInstanceTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithMaterialInstanceTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, ParentMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, ScalarParameterValues, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, VectorParameterValues, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, TextureParameterValues, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, StaticParameters, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithMaterialInstanceTemplate, 0x0198);
		}

		// class UDatasmithPointLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithPointLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, IntensityUnits, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, UnknownData_JSQJ, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, SourceRadius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, SourceLength, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, AttenuationRadius, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithPointLightComponentTemplate, 0x0040);
		}

		// class UDatasmithPostProcessVolumeTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithPostProcessVolumeTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPostProcessVolumeTemplate, Settings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPostProcessVolumeTemplate, UnknownData_BI60, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithPostProcessVolumeTemplate, 0x0080);
		}

		// class UDatasmithScene : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithScene)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithScene, UnknownData_D29Q, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithScene, 0x0030);
		}

		// class ADatasmithSceneActor : public AActor
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithSceneActor, Scene, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithSceneActor, RelatedActors, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADatasmithSceneActor, 0x0278);
		}

		// class UDatasmithSceneComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, RelativeTransform, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, Mobility, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, UnknownData_JAHK, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, AttachParent, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, bVisible, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, UnknownData_4E3F, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, Tags, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, UnknownData_XDQ9, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSceneComponentTemplate, 0x00F0);
		}

		// class UDatasmithSkyLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSkyLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, UnknownData_DAV1, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, CubemapResolution, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, Cubemap, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSkyLightComponentTemplate, 0x0040);
		}

		// class UDatasmithSpotLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSpotLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSpotLightComponentTemplate, InnerConeAngle, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSpotLightComponentTemplate, OuterConeAngle, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSpotLightComponentTemplate, 0x0038);
		}

		// class UDatasmithStaticMeshComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshComponentTemplate, StaticMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshComponentTemplate, OverrideMaterials, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshComponentTemplate, 0x0048);
		}

		// class UDatasmithStaticMeshTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, SectionInfoMap, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, LightMapCoordinateIndex, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, LightMapResolution, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, BuildSettings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, StaticMaterials, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshTemplate, 0x00A8);
		}

		// class UGeometryCache : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, UnknownData_TZQL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, Materials, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, Tracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, UnknownData_72BL, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, StartFrame, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, EndFrame, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCache, 0x0068);
		}

		// class AGeometryCacheActor : public AActor
		TEST_METHOD(Class__GeometryCache__GeometryCacheActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCacheActor, GeometryCacheComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCacheActor, 0x0228);
		}

		// class UGeometryCacheCodecBase : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecBase, TopologyRanges, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecBase, 0x0038);
		}

		// class UGeometryCacheCodecRaw : public UGeometryCacheCodecBase
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecRaw)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecRaw, DummyProperty, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecRaw, UnknownData_ZV2P, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecRaw, 0x0040);
		}

		// class UGeometryCacheCodecV1 : public UGeometryCacheCodecBase
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecV1)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecV1, UnknownData_GQZI, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecV1, 0x0040);
		}

		// class UGeometryCacheComponent : public UMeshComponent
		TEST_METHOD(Class__GeometryCache__GeometryCacheComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, GeometryCache, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bRunning, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bLooping, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_HO7F, 0x0472);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, StartTimeOffset, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, PlaybackSpeed, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, NumTracks, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, ElapsedTime, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_71Z0, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, Duration, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bManualTick, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_T9EF, 0x04B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheComponent, 0x04C0);
		}

		// class UGeometryCacheTrack : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack, Duration, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack, UnknownData_DOSH, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack, 0x0058);
		}

		// class UGeometryCacheTrack_FlipbookAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_FlipbookAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_FlipbookAnimation, NumMeshSamples, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_FlipbookAnimation, UnknownData_8RNN, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_FlipbookAnimation, 0x0080);
		}

		// class UGeometryCacheTrackStreamable : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrackStreamable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, Codec, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, UnknownData_DL3G, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, StartSampleTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, UnknownData_G73N, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrackStreamable, 0x00D0);
		}

		// class UGeometryCacheTrack_TransformAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_TransformAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_TransformAnimation, UnknownData_R89S, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_TransformAnimation, 0x0100);
		}

		// class UGeometryCacheTrack_TransformGroupAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_TransformGroupAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_TransformGroupAnimation, UnknownData_LTXL, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_TransformGroupAnimation, 0x0100);
		}

		// class UMovieSceneGeometryCacheSection : public UMovieSceneSection
		TEST_METHOD(Class__GeometryCacheTracks__MovieSceneGeometryCacheSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCacheSection, Params, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCacheSection, 0x0128);
		}

		// class UMovieSceneGeometryCacheTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__GeometryCacheTracks__MovieSceneGeometryCacheTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCacheTrack, UnknownData_WNCS, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCacheTrack, AnimationSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCacheTrack, 0x0090);
		}

		// class UInAppPurchaseComponent : public UActorComponent
		TEST_METHOD(Class__MagicLeap__InAppPurchaseComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, InAppPurchaseLogMessage, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, GetItemsDetailsSuccess, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, GetItemsDetailsFailure, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, PurchaseConfirmationSuccess, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, PurchaseConfirmationFailure, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, GetPurchaseHistorySuccess, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, GetPurchaseHistoryFailure, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, UnknownData_JQS2, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseComponent, 0x0128);
		}

		// class ULuminApplicationLifecycleComponent : public UApplicationLifecycleComponent
		TEST_METHOD(Class__MagicLeap__LuminApplicationLifecycleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminApplicationLifecycleComponent, DeviceHasReactivatedDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminApplicationLifecycleComponent, DeviceWillEnterRealityModeDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminApplicationLifecycleComponent, DeviceWillGoInStandbyDelegate, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminApplicationLifecycleComponent, FocusLostDelegate, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminApplicationLifecycleComponent, FocusGainedDelegate, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminApplicationLifecycleComponent, 0x0190);
		}

		// class UMagicLeapHeadTrackingNotificationsComponent : public UVRNotificationsComponent
		TEST_METHOD(Class__MagicLeap__MagicLeapHeadTrackingNotificationsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapHeadTrackingNotificationsComponent, OnHeadTrackingLost, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapHeadTrackingNotificationsComponent, OnHeadTrackingRecovered, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapHeadTrackingNotificationsComponent, OnHeadTrackingRecoveryFailed, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapHeadTrackingNotificationsComponent, OnHeadTrackingNewSessionStarted, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapHeadTrackingNotificationsComponent, UnknownData_SOD9, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapHeadTrackingNotificationsComponent, 0x01D0);
		}

		// class UMagicLeapHMDFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeap__MagicLeapHMDFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapHMDFunctionLibrary, 0x0028);
		}

		// class UMagicLeapMeshTrackerComponent : public USceneComponent
		TEST_METHOD(Class__MagicLeap__MagicLeapMeshTrackerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_MVGV, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, OnMeshTrackerUpdated, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, ScanWorld, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, MeshType, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_RRNU, 0x0212);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, BoundingVolume, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, LevelOfDetail, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_IAWB, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, PerimeterOfGapsToFill, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, Planarize, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_AMYG, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, DisconnectedSectionArea, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, RequestNormals, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, RequestVertexConfidence, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, VertexColorMode, 0x0232);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_1YNH, 0x0233);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, BlockVertexColors, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, VertexColorFromConfidenceZero, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, VertexColorFromConfidenceOne, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, RemoveOverlappingTriangles, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_1UIK, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, MRMesh, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, BricksPerFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_K06P, 0x027C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapMeshTrackerComponent, 0x0290);
		}

		// class UMagicLeapSettings : public UObject
		TEST_METHOD(Class__MagicLeap__MagicLeapSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSettings, bEnableZI, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSettings, bUseVulkanForZI, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSettings, bUseMLAudioForZI, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSettings, UnknownData_U403, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapSettings, 0x0030);
		}

		// class UMagicLeapMeshBlockSelectorInterface : public UInterface
		TEST_METHOD(Class__MagicLeap__MagicLeapMeshBlockSelectorInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapMeshBlockSelectorInterface, 0x0028);
		}

		// class UMagicLeapRaycastComponent : public UActorComponent
		TEST_METHOD(Class__MagicLeap__MagicLeapRaycastComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapRaycastComponent, UnknownData_KVAL, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapRaycastComponent, 0x0118);
		}

		// class UMagicLeapRaycastFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeap__MagicLeapRaycastFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapRaycastFunctionLibrary, 0x0028);
		}

		// class UVRNotificationsComponent : public UActorComponent
		TEST_METHOD(Class__HeadMountedDisplay__VRNotificationsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDTrackingInitializedDelegate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDRecenteredDelegate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDLostDelegate, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDReconnectedDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDConnectCanceledDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDPutOnHeadDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDRemovedFromHeadDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, VRControllerRecenteredDelegate, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRNotificationsComponent, 0x0140);
		}

		// class UHeadMountedDisplayFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__HeadMountedDisplayFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHeadMountedDisplayFunctionLibrary, 0x0028);
		}

		// class UMotionControllerComponent : public UPrimitiveComponent
		TEST_METHOD(Class__HeadMountedDisplay__MotionControllerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, PlayerIndex, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, Hand, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_RUEW, 0x0445);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, MotionSource, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_V90J, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, CurrentTrackingStatus, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, bDisplayDeviceModel, 0x0455);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_EKZ9, 0x0456);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayModelSource, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, CustomDisplayMesh, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayMeshMaterialOverrides, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_12DP, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayComponent, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_5W1A, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotionControllerComponent, 0x0500);
		}

		// class UMotionTrackedDeviceFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__MotionTrackedDeviceFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotionTrackedDeviceFunctionLibrary, 0x0028);
		}

		// class UXRAssetFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__XRAssetFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UXRAssetFunctionLibrary, 0x0028);
		}

		// class UAsyncTask_LoadXRDeviceVisComponent : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__HeadMountedDisplay__AsyncTask_LoadXRDeviceVisComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, OnModelLoaded, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, OnLoadFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, UnknownData_DL3I, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, SpawnedComponent, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncTask_LoadXRDeviceVisComponent, 0x0060);
		}

		// class UXRLoadingScreenFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__XRLoadingScreenFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UXRLoadingScreenFunctionLibrary, 0x0028);
		}

		// class ULiveLinkMagicLeapHandTrackingSourceFactory : public ULiveLinkSourceFactory
		TEST_METHOD(Class__MagicLeapHandTracking__LiveLinkMagicLeapHandTrackingSourceFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkMagicLeapHandTrackingSourceFactory, 0x0028);
		}

		// class UMagicLeapHandTrackingFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapHandTracking__MagicLeapHandTrackingFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapHandTrackingFunctionLibrary, 0x0028);
		}

		// class UVisual : public UObject
		TEST_METHOD(Class__UMG__Visual)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisual, 0x0028);
		}

		// class UWidget : public UVisual
		TEST_METHOD(Class__UMG__Widget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Slot, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, bIsEnabledDelegate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipText, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipTextDelegate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, TooltipWidget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipWidgetDelegate, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, VisibilityDelegate, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderTransform, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderTransformPivot, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_7QBR, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, AccessibleWidgetData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Cursor, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Clipping, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Visibility, 0x00C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderOpacity, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Navigation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, FlowDirectionPreference, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_DGRO, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, NativeBindings, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget, 0x0108);
		}

		// class UWidgetComponent : public UMeshComponent
		TEST_METHOD(Class__UMG__WidgetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_00FR, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, WidgetClass, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, DrawSize, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bManuallyRedraw, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bRedrawRequested, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_YMVZ, 0x0482);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, RedrawTime, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_A4HH, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, CurrentDrawSize, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bDrawAtDesiredSize, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_WBY1, 0x0499);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Pivot, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bReceiveHardwareInput, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bWindowFocusable, 0x04A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, WindowVisibility, 0x04A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bApplyGammaCorrection, 0x04A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OwnerPlayer, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BackgroundColor, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TintColorAndOpacity, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpacityFromTexture, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BlendMode, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bIsTwoSided, 0x04D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TickWhenOffscreen, 0x04D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_97KH, 0x04D7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BodySetup, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TranslucentMaterial, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TranslucentMaterial_OneSided, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpaqueMaterial, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpaqueMaterial_OneSided, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaskedMaterial, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaskedMaterial_OneSided, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, RenderTarget, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaterialInstance, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bAddedToScreen, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bEditTimeUsable, 0x0521);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_T9NV, 0x0522);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, SharedLayerName, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, LayerZOrder, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, GeometryMode, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_94I2, 0x0531);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, CylinderArcAngle, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TickMode, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_5CN9, 0x0539);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Widget, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_NIXQ, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetComponent, 0x0590);
		}

		// class UUserWidget : public UWidget
		TEST_METHOD(Class__UMG__UserWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_ZJFL, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ColorAndOpacity, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ColorAndOpacityDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ForegroundColor, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ForegroundColorDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, OnVisibilityChanged, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_DPT4, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, Padding, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ActiveSequencePlayers, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, AnimationTickManager, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, StoppedSequencePlayers, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, NamedSlotBindings, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, WidgetTree, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, Priority, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_H7VQ, 0x01E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, TickFrequency, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_NKDO, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, InputComponent, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, AnimationCallbacks, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_X3RD, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserWidget, 0x0260);
		}

		// class UPanelWidget : public UWidget
		TEST_METHOD(Class__UMG__PanelWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, Slots, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, UnknownData_8DW5, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelWidget, 0x0120);
		}

		// class UContentWidget : public UPanelWidget
		TEST_METHOD(Class__UMG__ContentWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContentWidget, 0x0120);
		}

		// class UImage : public UWidget
		TEST_METHOD(Class__UMG__Image)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, Brush, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, BrushDelegate, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, ColorAndOpacity, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, ColorAndOpacityDelegate, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, bFlipForRightToLeftFlowDirection, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, UnknownData_56N4, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, OnMouseButtonDownEvent, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, UnknownData_929O, 0x01D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImage, 0x0210);
		}

		// class UTextLayoutWidget : public UWidget
		TEST_METHOD(Class__UMG__TextLayoutWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, ShapedTextOptions, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, Justification, 0x010B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, WrappingPolicy, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, UnknownData_880F, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, WrapTextAt, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, Margin, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, LineHeightPercentage, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextLayoutWidget, 0x0128);
		}

		// class URichTextBlock : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__RichTextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, TextStyleSet, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, DecoratorClasses, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, bOverrideDefaultStyle, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_P5XJ, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, DefaultTextStyleOverride, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, MinDesiredWidth, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, TextTransformPolicy, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_QIAN, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, DefaultTextStyle, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, InstanceDecorators, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_WQJY, 0x0658);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlock, 0x0678);
		}

		// class UBorder : public UContentWidget
		TEST_METHOD(Class__UMG__Border)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, HorizontalAlignment, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, VerticalAlignment, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_FCKV, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, ContentColorAndOpacity, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, ContentColorAndOpacityDelegate, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, Padding, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_AB1N, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, Background, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BackgroundDelegate, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BrushColor, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BrushColorDelegate, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, DesiredSizeScale, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, bFlipForRightToLeftFlowDirection, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_J009, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseButtonDownEvent, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseButtonUpEvent, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseMoveEvent, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseDoubleClickEvent, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_DV9H, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorder, 0x0270);
		}

		// class UButton : public UContentWidget
		TEST_METHOD(Class__UMG__Button)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, Style, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, ColorAndOpacity, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, BackgroundColor, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, ClickMethod, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, TouchMethod, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, PressMethod, 0x03C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, IsFocusable, 0x03C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, UnknownData_83JA, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnClicked, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnPressed, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnReleased, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnHovered, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnUnhovered, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, UnknownData_SYS1, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButton, 0x0428);
		}

		// class UCheckBox : public UContentWidget
		TEST_METHOD(Class__UMG__CheckBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedState, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_NPPK, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedStateDelegate, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_VLGQ, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, WidgetStyle, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, Style, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedImage, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedHoveredImage, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedPressedImage, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedImage, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedHoveredImage, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedPressedImage, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedImage, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedHoveredImage, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedPressedImage, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, HorizontalAlignment, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_N6NI, 0x0709);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, Padding, 0x070C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_JYY2, 0x071C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, BorderBackgroundColor, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, ClickMethod, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, TouchMethod, 0x0749);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, PressMethod, 0x074A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, IsFocusable, 0x074B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_B1KL, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, OnCheckStateChanged, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_PEAB, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBox, 0x0770);
		}

		// class UComboBoxString : public UWidget
		TEST_METHOD(Class__UMG__ComboBoxString)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, DefaultOptions, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, SelectedOption, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ItemStyle, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ContentPadding, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, MaxListHeight, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, HasDownArrow, 0x0CF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, EnableGamepadNavigationMode, 0x0CF5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_ETT3, 0x0CF6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, Font, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ForegroundColor, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, bIsFocusable, 0x0D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_NW8L, 0x0D79);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnGenerateWidgetEvent, 0x0D7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_HXUC, 0x0D8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnSelectionChanged, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnOpening, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_SHA1, 0x0DB0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxString, 0x0E00);
		}

		// class UEditableTextBox : public UWidget
		TEST_METHOD(Class__UMG__EditableTextBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Text, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, TextDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, WidgetStyle, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Style, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, HintText, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, HintTextDelegate, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Font, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ForegroundColor, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, BackgroundColor, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ReadOnlyForegroundColor, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsReadOnly, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsPassword, 0x09E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_09JJ, 0x09E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, MinimumDesiredWidth, 0x09E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Padding, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsCaretMovedWhenGainFocus, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, SelectAllTextWhenFocused, 0x09F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, RevertTextOnEscape, 0x09FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ClearKeyboardFocusOnCommit, 0x09FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, SelectAllTextOnCommit, 0x09FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, AllowContextMenu, 0x09FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, KeyboardType, 0x09FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardOptions, 0x09FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardTrigger, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardDismissAction, 0x0A01);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Justification, 0x0A02);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ShapedTextOptions, 0x0A03);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_KNWJ, 0x0A06);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, OnTextChanged, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, OnTextCommitted, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_WH6M, 0x0A28);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextBox, 0x0A38);
		}

		// class UProgressBar : public UWidget
		TEST_METHOD(Class__UMG__ProgressBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, WidgetStyle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, Style, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BackgroundImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillImage, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, MarqueeImage, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, Percent, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BarFillType, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, bIsMarquee, 0x02CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_5ZAD, 0x02CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BorderPadding, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, PercentDelegate, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillColorAndOpacity, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillColorAndOpacityDelegate, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_THHB, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressBar, 0x0318);
		}

		// class URichTextBlockDecorator : public UObject
		TEST_METHOD(Class__UMG__RichTextBlockDecorator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlockDecorator, 0x0028);
		}

		// class UScrollBox : public UPanelWidget
		TEST_METHOD(Class__UMG__ScrollBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetStyle, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetBarStyle, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, Style, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, BarStyle, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, Orientation, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollBarVisibility, 0x0829);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ConsumeMouseWheel, 0x082A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_D60D, 0x082B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollbarThickness, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollbarPadding, 0x0834);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AlwaysShowScrollbar, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AlwaysShowScrollbarTrack, 0x0845);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AllowOverscroll, 0x0846);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, bAnimateWheelScrolling, 0x0847);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, NavigationDestination, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_3IVL, 0x0849);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, NavigationScrollPadding, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollWhenFocusChanges, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, bAllowRightClickDragScrolling, 0x0851);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_IYIJ, 0x0852);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WheelScrollMultiplier, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, OnUserScrolled, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_W4L3, 0x0868);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBox, 0x0880);
		}

		// class USlider : public UWidget
		TEST_METHOD(Class__UMG__Slider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Value, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, ValueDelegate, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MinValue, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MaxValue, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_IYR2, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Orientation, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_ILYV, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, SliderBarColor, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, SliderHandleColor, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, IndentHandle, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Locked, 0x048D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MouseUsesStep, 0x048E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, RequiresControllerLock, 0x048F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, StepSize, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, IsFocusable, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_AQTY, 0x0495);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnMouseCaptureBegin, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnMouseCaptureEnd, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnControllerCaptureBegin, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnControllerCaptureEnd, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnValueChanged, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_F3I6, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlider, 0x04F8);
		}

		// class UTextBlock : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__TextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, TextDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ColorAndOpacity, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ColorAndOpacityDelegate, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, Font, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, StrikeBrush, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowOffset, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowColorAndOpacity, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowColorAndOpacityDelegate, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, MinDesiredWidth, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bWrapWithInvalidationPanel, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bAutoWrapText, 0x0295);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, TextTransformPolicy, 0x0296);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bSimpleTextMode, 0x0297);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, UnknownData_GFBC, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBlock, 0x02A8);
		}

		// class UWidgetSwitcher : public UPanelWidget
		TEST_METHOD(Class__UMG__WidgetSwitcher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcher, ActiveWidgetIndex, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcher, UnknownData_QS6R, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetSwitcher, 0x0138);
		}

		// class UCanvasPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__CanvasPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanel, UnknownData_D0AS, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasPanel, 0x0130);
		}

		// class UAsyncTaskDownloadImage : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UMG__AsyncTaskDownloadImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTaskDownloadImage, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTaskDownloadImage, OnFail, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncTaskDownloadImage, 0x0050);
		}

		// class UBackgroundBlur : public UContentWidget
		TEST_METHOD(Class__UMG__BackgroundBlur)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, Padding, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, HorizontalAlignment, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, VerticalAlignment, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, bApplyAlphaToBlur, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_UC85, 0x0133);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, BlurStrength, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, bOverrideAutoRadiusCalculation, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_L2UQ, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, BlurRadius, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, LowQualityFallbackBrush, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_76CI, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBackgroundBlur, 0x01D8);
		}

		// class UPanelSlot : public UVisual
		TEST_METHOD(Class__UMG__PanelSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelSlot, Parent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelSlot, Content, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelSlot, 0x0038);
		}

		// class UBackgroundBlurSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__BackgroundBlurSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, UnknownData_JV2H, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBackgroundBlurSlot, 0x0060);
		}

		// class UPropertyBinding : public UObject
		TEST_METHOD(Class__UMG__PropertyBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, SourceObject, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, SourcePath, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, DestinationProperty, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyBinding, 0x0060);
		}

		// class UBoolBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__BoolBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoolBinding, 0x0060);
		}

		// class UBorderSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__BorderSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, UnknownData_GXIX, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorderSlot, 0x0060);
		}

		// class UBrushBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__BrushBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBinding, UnknownData_712V, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBinding, 0x0068);
		}

		// class UButtonSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ButtonSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, UnknownData_UR6R, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonSlot, 0x0060);
		}

		// class UCanvasPanelSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__CanvasPanelSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, LayoutData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, bAutoSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, UnknownData_YOGO, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, ZOrder, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, UnknownData_VVF6, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasPanelSlot, 0x0070);
		}

		// class UCheckedStateBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__CheckedStateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckedStateBinding, UnknownData_Q6RF, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckedStateBinding, 0x0068);
		}

		// class UCircularThrobber : public UWidget
		TEST_METHOD(Class__UMG__CircularThrobber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, NumberOfPieces, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Period, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Radius, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, UnknownData_I7H8, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, PieceImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Image, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, bEnableRadius, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, UnknownData_ZT4Z, 0x01A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCircularThrobber, 0x01C0);
		}

		// class UColorBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__ColorBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UColorBinding, UnknownData_C92J, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UColorBinding, 0x0068);
		}

		// class UComboBox : public UWidget
		TEST_METHOD(Class__UMG__ComboBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, Items, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, OnGenerateWidgetEvent, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, bIsFocusable, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, UnknownData_MRIG, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBox, 0x0140);
		}

		// class UDragDropOperation : public UObject
		TEST_METHOD(Class__UMG__DragDropOperation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Tag, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Payload, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, DefaultDragVisual, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Pivot, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, UnknownData_N2WR, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Offset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, UnknownData_DI2Z, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDrop, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDragCancelled, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDragged, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDragDropOperation, 0x0088);
		}

		// class UDynamicEntryBoxBase : public UWidget
		TEST_METHOD(Class__UMG__DynamicEntryBoxBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryBoxType, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_RNJM, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntrySpacing, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_1B8N, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, SpacingPattern, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntrySizeRule, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryHorizontalAlignment, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryVerticalAlignment, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_29RX, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, MaxElementSize, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, RadialBoxSettings, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_7BKB, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryWidgetPool, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicEntryBoxBase, 0x01D8);
		}

		// class UDynamicEntryBox : public UDynamicEntryBoxBase
		TEST_METHOD(Class__UMG__DynamicEntryBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntryWidgetClass, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicEntryBox, 0x01E0);
		}

		// class UEditableText : public UWidget
		TEST_METHOD(Class__UMG__EditableText)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Text, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, TextDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, HintText, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, HintTextDelegate, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, WidgetStyle, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Style, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, BackgroundImageSelected, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, BackgroundImageComposing, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, CaretImage, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Font, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ColorAndOpacity, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsReadOnly, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsPassword, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_663P, 0x041A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, MinimumDesiredWidth, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsCaretMovedWhenGainFocus, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, SelectAllTextWhenFocused, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, RevertTextOnEscape, 0x0422);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ClearKeyboardFocusOnCommit, 0x0423);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, SelectAllTextOnCommit, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, AllowContextMenu, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, KeyboardType, 0x0426);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardOptions, 0x0427);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardTrigger, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardDismissAction, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Justification, 0x042A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ShapedTextOptions, 0x042B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_DT1M, 0x042E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, OnTextChanged, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, OnTextCommitted, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_TYQN, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableText, 0x0460);
		}

		// class UExpandableArea : public UWidget
		TEST_METHOD(Class__UMG__ExpandableArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_2I0R, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, Style, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BorderBrush, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BorderColor, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, bIsExpanded, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_2VCY, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, MaxHeight, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, HeaderPadding, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, AreaPadding, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, OnExpansionChanged, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, HeaderContent, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BodyContent, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_JQ5V, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExpandableArea, 0x0338);
		}

		// class UFloatBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__FloatBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatBinding, 0x0060);
		}

		// class UGridPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__GridPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, ColumnFill, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, RowFill, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, UnknownData_X4LB, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridPanel, 0x0150);
		}

		// class UGridSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__GridSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, UnknownData_4OMD, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Row, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, RowSpan, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Column, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, ColumnSpan, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Layer, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Nudge, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, UnknownData_7GMM, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridSlot, 0x0070);
		}

		// class UHorizontalBox : public UPanelWidget
		TEST_METHOD(Class__UMG__HorizontalBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBox, UnknownData_2EX5, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorizontalBox, 0x0130);
		}

		// class UHorizontalBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__HorizontalBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, UnknownData_3JK8, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, Size, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, UnknownData_YSB8, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorizontalBoxSlot, 0x0060);
		}

		// class UInputKeySelector : public UWidget
		TEST_METHOD(Class__UMG__InputKeySelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, WidgetStyle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, TextStyle, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, SelectedKey, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, Font, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, Margin, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, ColorAndOpacity, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, KeySelectionText, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, NoKeySpecifiedText, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, bAllowModifierKeys, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, bAllowGamepadKeys, 0x06B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, UnknownData_58EC, 0x06BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, EscapeKeys, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, OnKeySelected, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, OnIsSelectingKeyChanged, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, UnknownData_AU6D, 0x06F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputKeySelector, 0x0700);
		}

		// class UInt32Binding : public UPropertyBinding
		TEST_METHOD(Class__UMG__Int32Binding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt32Binding, 0x0060);
		}

		// class UInvalidationBox : public UContentWidget
		TEST_METHOD(Class__UMG__InvalidationBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, bCanCache, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, CacheRelativeTransforms, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, UnknownData_2RV1, 0x0122);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInvalidationBox, 0x0138);
		}

		// class UUserListEntry : public UInterface
		TEST_METHOD(Class__UMG__UserListEntry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserListEntry, 0x0028);
		}

		// class UUserListEntryLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__UserListEntryLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserListEntryLibrary, 0x0028);
		}

		// class UUserObjectListEntry : public UUserListEntry
		TEST_METHOD(Class__UMG__UserObjectListEntry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserObjectListEntry, 0x0028);
		}

		// class UUserObjectListEntryLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__UserObjectListEntryLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserObjectListEntryLibrary, 0x0028);
		}

		// class UListViewBase : public UWidget
		TEST_METHOD(Class__UMG__ListViewBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, EntryWidgetClass, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, WheelScrollMultiplier, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, bEnableScrollAnimation, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, bEnableFixedLineOffset, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_RMMS, 0x0116);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, FixedLineScrollOffset, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_GMUK, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, BP_OnEntryGenerated, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, BP_OnEntryReleased, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, EntryWidgetPool, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_2G7L, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListViewBase, 0x0218);
		}

		// class UListView : public UListViewBase
		TEST_METHOD(Class__UMG__ListView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_ANGJ, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, Orientation, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, SelectionMode, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, ConsumeMouseWheel, 0x02DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bClearSelectionOnClick, 0x02DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bIsFocusable, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_1QD8, 0x02DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, EntrySpacing, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bReturnFocusToSelection, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_ZXZH, 0x02E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, ListItems, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_4MHS, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnEntryInitialized, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemClicked, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemDoubleClicked, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemIsHoveredChanged, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemSelectionChanged, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemScrolledIntoView, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListView, 0x0368);
		}

		// class UListViewDesignerPreviewItem : public UObject
		TEST_METHOD(Class__UMG__ListViewDesignerPreviewItem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListViewDesignerPreviewItem, 0x0028);
		}

		// class UMenuAnchor : public UContentWidget
		TEST_METHOD(Class__UMG__MenuAnchor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, MenuClass, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnGetMenuContentEvent, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnGetUserMenuContentEvent, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, placement, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, bFitInWindow, 0x0149);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, ShouldDeferPaintingAfterWindowContent, 0x014A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UseApplicationMenuStack, 0x014B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UnknownData_DLHM, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnMenuOpenChanged, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UnknownData_HSW8, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenuAnchor, 0x0170);
		}

		// class UMouseCursorBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__MouseCursorBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMouseCursorBinding, 0x0060);
		}

		// class UMovieScene2DTransformPropertySystem : public UMovieScenePropertySystem
		TEST_METHOD(Class__UMG__MovieScene2DTransformPropertySystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformPropertySystem, 0x0050);
		}

		// class UMovieScene2DTransformSection : public UMovieSceneSection
		TEST_METHOD(Class__UMG__MovieScene2DTransformSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, UnknownData_3QD5, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, TransformMask, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, UnknownData_KURX, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Translation, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Rotation, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Scale, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Shear, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformSection, 0x0558);
		}

		// class UMovieScene2DTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__UMG__MovieScene2DTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformTrack, 0x00A8);
		}

		// class UMovieSceneMarginSection : public UMovieSceneSection
		TEST_METHOD(Class__UMG__MovieSceneMarginSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, TopCurve, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, LeftCurve, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, RightCurve, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, BottomCurve, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMarginSection, 0x0368);
		}

		// class UMovieSceneMarginTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__UMG__MovieSceneMarginTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginTrack, UnknownData_2OHO, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMarginTrack, 0x00B0);
		}

		// class UMovieSceneWidgetMaterialTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__UMG__MovieSceneWidgetMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, UnknownData_8KSP, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, BrushPropertyNamePath, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, TrackName, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneWidgetMaterialTrack, 0x00A8);
		}

		// class UMultiLineEditableText : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__MultiLineEditableText)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, HintText, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, HintTextDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, WidgetStyle, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, bIsReadOnly, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_02TM, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, Font, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, SelectAllTextWhenFocused, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, ClearTextSelectionOnFocusLoss, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, RevertTextOnEscape, 0x043A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, ClearKeyboardFocusOnCommit, 0x043B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, AllowContextMenu, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, VirtualKeyboardOptions, 0x043D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, VirtualKeyboardDismissAction, 0x043E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_QE20, 0x043F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, OnTextChanged, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, OnTextCommitted, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_PQCY, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiLineEditableText, 0x0470);
		}

		// class UMultiLineEditableTextBox : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__MultiLineEditableTextBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, HintText, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, HintTextDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, WidgetStyle, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, TextStyle, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, bIsReadOnly, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, AllowContextMenu, 0x0BD1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, VirtualKeyboardOptions, 0x0BD2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, VirtualKeyboardDismissAction, 0x0BD3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_GJG2, 0x0BD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Style, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Font, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, ForegroundColor, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, BackgroundColor, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, ReadOnlyForegroundColor, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, OnTextChanged, 0x0C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, OnTextCommitted, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_22VO, 0x0C88);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiLineEditableTextBox, 0x0C98);
		}

		// class UNamedSlot : public UContentWidget
		TEST_METHOD(Class__UMG__NamedSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedSlot, UnknownData_8JSZ, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedSlot, 0x0130);
		}

		// class UNamedSlotInterface : public UInterface
		TEST_METHOD(Class__UMG__NamedSlotInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedSlotInterface, 0x0028);
		}

		// class UNativeWidgetHost : public UWidget
		TEST_METHOD(Class__UMG__NativeWidgetHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNativeWidgetHost, UnknownData_YMP3, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNativeWidgetHost, 0x0118);
		}

		// class UOverlay : public UPanelWidget
		TEST_METHOD(Class__UMG__Overlay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlay, UnknownData_S2R7, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlay, 0x0130);
		}

		// class UOverlaySlot : public UPanelSlot
		TEST_METHOD(Class__UMG__OverlaySlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, UnknownData_M8T3, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, UnknownData_GJ46, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlaySlot, 0x0058);
		}

		// class URetainerBox : public UContentWidget
		TEST_METHOD(Class__UMG__RetainerBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, bRetainRender, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, RenderOnInvalidation, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, RenderOnPhase, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_5JQ5, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, Phase, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, PhaseCount, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_OTUG, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, EffectMaterial, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, TextureParameter, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_KJ5M, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URetainerBox, 0x0150);
		}

		// class URichTextBlockImageDecorator : public URichTextBlockDecorator
		TEST_METHOD(Class__UMG__RichTextBlockImageDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlockImageDecorator, ImageSet, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlockImageDecorator, 0x0030);
		}

		// class USafeZone : public UContentWidget
		TEST_METHOD(Class__UMG__SafeZone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadLeft, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadRight, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadTop, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadBottom, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, UnknownData_IXJU, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USafeZone, 0x0138);
		}

		// class USafeZoneSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__SafeZoneSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, bIsTitleSafe, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, UnknownData_WPUI, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, SafeAreaScale, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, HAlign, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, VAlign, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, UnknownData_OD1C, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, Padding, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USafeZoneSlot, 0x0060);
		}

		// class UScaleBox : public UContentWidget
		TEST_METHOD(Class__UMG__ScaleBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, Stretch, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, StretchDirection, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UnknownData_USF8, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UserSpecifiedScale, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, IgnoreInheritedScale, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UnknownData_CHTZ, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleBox, 0x0140);
		}

		// class UScaleBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ScaleBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, UnknownData_F63L, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleBoxSlot, 0x0060);
		}

		// class UScrollBar : public UWidget
		TEST_METHOD(Class__UMG__ScrollBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, WidgetStyle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Style, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, bAlwaysShowScrollbar, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, bAlwaysShowScrollbarTrack, 0x05E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Orientation, 0x05E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, UnknownData_H0GO, 0x05E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Thickness, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Padding, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, UnknownData_3ZRQ, 0x05FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBar, 0x0610);
		}

		// class UScrollBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ScrollBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, UnknownData_1VWU, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBoxSlot, 0x0058);
		}

		// class USizeBox : public UContentWidget
		TEST_METHOD(Class__UMG__SizeBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, UnknownData_ZFUE, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, WidthOverride, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, HeightOverride, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinDesiredWidth, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinDesiredHeight, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxDesiredWidth, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxDesiredHeight, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinAspectRatio, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxAspectRatio, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, UnknownData_HLI9, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USizeBox, 0x0158);
		}

		// class USizeBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__SizeBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, UnknownData_SDMN, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, UnknownData_NMGP, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USizeBoxSlot, 0x0060);
		}

		// class USlateBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__SlateBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateBlueprintLibrary, 0x0028);
		}

		// class USlateVectorArtData : public UObject
		TEST_METHOD(Class__UMG__SlateVectorArtData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, VertexData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, IndexData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, Material, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, ExtentMin, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, ExtentMax, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateVectorArtData, 0x0060);
		}

		// class USlateAccessibleWidgetData : public UObject
		TEST_METHOD(Class__UMG__SlateAccessibleWidgetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, bCanChildrenBeAccessible, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleBehavior, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleSummaryBehavior, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, UnknownData_I69I, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleTextDelegate, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleSummaryText, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleSummaryTextDelegate, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateAccessibleWidgetData, 0x0080);
		}

		// class USpacer : public UWidget
		TEST_METHOD(Class__UMG__Spacer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpacer, Size, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpacer, UnknownData_ETMU, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpacer, 0x0120);
		}

		// class USpinBox : public UWidget
		TEST_METHOD(Class__UMG__SpinBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Value, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ValueDelegate, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_8ZFF, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, WidgetStyle, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Style, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinFractionalDigits, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxFractionalDigits, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, bAlwaysUsesDeltaSnap, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_6FF3, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Delta, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, SliderExponent, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_8SDB, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Font, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Justification, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_OMC8, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinDesiredWidth, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ClearKeyboardFocusOnCommit, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, SelectAllTextOnCommit, 0x0489);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_ZCEE, 0x048A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ForegroundColor, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnValueChanged, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnValueCommitted, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnBeginSliderMovement, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnEndSliderMovement, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_OU6X, 0x04F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinValue, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxValue, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinSliderValue, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxSliderValue, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_RC7K, 0x050C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinBox, 0x0520);
		}

		// class UTextBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__TextBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBinding, UnknownData_3919, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBinding, 0x0068);
		}

		// class UThrobber : public UWidget
		TEST_METHOD(Class__UMG__Throbber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, NumberOfPieces, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateHorizontally, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateVertically, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateOpacity, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, UnknownData_SYB2, 0x010F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, PieceImage, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, Image, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, UnknownData_FR1Z, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThrobber, 0x01B0);
		}

		// class UTileView : public UListView
		TEST_METHOD(Class__UMG__TileView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, EntryHeight, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, EntryWidth, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, TileAlignment, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, bWrapHorizontalNavigation, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, UnknownData_3SX3, 0x0372);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTileView, 0x0388);
		}

		// class UTreeView : public UListView
		TEST_METHOD(Class__UMG__TreeView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, UnknownData_I498, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, BP_OnGetItemChildren, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, BP_OnItemExpansionChanged, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, UnknownData_0DT0, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTreeView, 0x03C0);
		}

		// class UUMGSequencePlayer : public UObject
		TEST_METHOD(Class__UMG__UMGSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_LJ2H, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, Animation, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_KO8S, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, RootTemplateInstance, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_P7ER, 0x0508);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGSequencePlayer, 0x0578);
		}

		// class UUMGSequenceTickManager : public UObject
		TEST_METHOD(Class__UMG__UMGSequenceTickManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequenceTickManager, WeakUserWidgets, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequenceTickManager, Linker, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequenceTickManager, UnknownData_4OZF, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGSequenceTickManager, 0x0120);
		}

		// class UUniformGridPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__UniformGridPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, SlotPadding, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, MinDesiredSlotWidth, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, MinDesiredSlotHeight, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, UnknownData_1E9D, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformGridPanel, 0x0148);
		}

		// class UUniformGridSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__UniformGridSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, HorizontalAlignment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, VerticalAlignment, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, UnknownData_XW8X, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, Row, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, Column, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, UnknownData_38RL, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformGridSlot, 0x0050);
		}

		// class UVerticalBox : public UPanelWidget
		TEST_METHOD(Class__UMG__VerticalBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBox, UnknownData_6GIP, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVerticalBox, 0x0130);
		}

		// class UVerticalBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__VerticalBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, Size, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, UnknownData_F4GW, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, UnknownData_EQCY, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVerticalBoxSlot, 0x0060);
		}

		// class UViewport : public UContentWidget
		TEST_METHOD(Class__UMG__Viewport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewport, BackgroundColor, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewport, UnknownData_KFOM, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewport, 0x0168);
		}

		// class UVisibilityBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__VisibilityBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisibilityBinding, 0x0060);
		}

		// class UWidgetAnimation : public UMovieSceneSequence
		TEST_METHOD(Class__UMG__WidgetAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, MovieScene, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, AnimationBindings, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, bLegacyFinishOnStop, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, UnknownData_7XVJ, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, DisplayLabel, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimation, 0x0090);
		}

		// class UWidgetAnimationDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__UMG__WidgetAnimationDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimationDelegateBinding, WidgetAnimationDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimationDelegateBinding, 0x0038);
		}

		// class UWidgetAnimationPlayCallbackProxy : public UObject
		TEST_METHOD(Class__UMG__WidgetAnimationPlayCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimationPlayCallbackProxy, Finished, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimationPlayCallbackProxy, UnknownData_ZYAM, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimationPlayCallbackProxy, 0x0048);
		}

		// class UWidgetBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__WidgetBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBinding, 0x0060);
		}

		// class UWidgetBlueprintGeneratedClass : public UBlueprintGeneratedClass
		TEST_METHOD(Class__UMG__WidgetBlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, WidgetTree, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, UnknownData_OSB0, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Bindings, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Animations, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, NamedSlots, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBlueprintGeneratedClass, 0x0368);
		}

		// class UWidgetBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__WidgetBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBlueprintLibrary, 0x0028);
		}

		// class UWidgetInteractionComponent : public USceneComponent
		TEST_METHOD(Class__UMG__WidgetInteractionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, OnHoveredWidgetChanged, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_XYA0, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, VirtualUserIndex, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, PointerIndex, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, TraceChannel, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_PZPB, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, InteractionDistance, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, InteractionSource, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bEnableHitTesting, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bShowDebug, 0x022A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_GTDF, 0x022B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, DebugSphereLineThickness, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, DebugLineThickness, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, DebugColor, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_IZL8, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, CustomHitResult, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LocalHitLocation, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LastLocalHitLocation, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_ZMQP, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, HoveredWidgetComponent, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LastHitResult, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetInteractable, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetFocusable, 0x03F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetHitTestVisible, 0x03F6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_RLRT, 0x03F7);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetInteractionComponent, 0x0400);
		}

		// class UWidgetLayoutLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__WidgetLayoutLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetLayoutLibrary, 0x0028);
		}

		// class UWidgetNavigation : public UObject
		TEST_METHOD(Class__UMG__WidgetNavigation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Up, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Down, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Left, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Right, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Next, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Previous, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetNavigation, 0x0100);
		}

		// class UWidgetSwitcherSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WidgetSwitcherSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, UnknownData_HQAA, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, UnknownData_31NH, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetSwitcherSlot, 0x0058);
		}

		// class UWidgetTree : public UObject
		TEST_METHOD(Class__UMG__WidgetTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetTree, RootWidget, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetTree, 0x0030);
		}

		// class UWindowTitleBarArea : public UContentWidget
		TEST_METHOD(Class__UMG__WindowTitleBarArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, bWindowButtonsEnabled, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, bDoubleClickTogglesFullscreen, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, UnknownData_8WNG, 0x0122);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindowTitleBarArea, 0x0140);
		}

		// class UWindowTitleBarAreaSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WindowTitleBarAreaSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, UnknownData_IC4E, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindowTitleBarAreaSlot, 0x0060);
		}

		// class UWrapBox : public UPanelWidget
		TEST_METHOD(Class__UMG__WrapBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, InnerSlotPadding, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, WrapWidth, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, WrapSize, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, bExplicitWrapWidth, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, bExplicitWrapSize, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, Orientation, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, UnknownData_CP8J, 0x0133);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWrapBox, 0x0148);
		}

		// class UWrapBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WrapBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, bFillEmptySpace, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, UnknownData_QXRU, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, FillSpanWhenLessThan, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, UnknownData_E5JL, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWrapBoxSlot, 0x0060);
		}

		// class UBTNode : public UObject
		TEST_METHOD(Class__AIModule__BTNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, UnknownData_SIOF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, NodeName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, TreeAsset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, ParentNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, UnknownData_IX1H, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTNode, 0x0058);
		}

		// class UBTAuxiliaryNode : public UBTNode
		TEST_METHOD(Class__AIModule__BTAuxiliaryNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTAuxiliaryNode, UnknownData_64L7, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTAuxiliaryNode, 0x0060);
		}

		// class UBTDecorator : public UBTAuxiliaryNode
		TEST_METHOD(Class__AIModule__BTDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, UnknownData_40QL, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, FlowAbortMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, UnknownData_6XSW, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator, 0x0068);
		}

		// class UBTService : public UBTAuxiliaryNode
		TEST_METHOD(Class__AIModule__BTService)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, Interval, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, RandomDeviation, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, UnknownData_IQFD, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService, 0x0070);
		}

		// class UBTDecorator_BlackboardBase : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_BlackboardBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlackboardBase, BlackboardKey, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_BlackboardBase, 0x0090);
		}

		// class UBTTaskNode : public UBTNode
		TEST_METHOD(Class__AIModule__BTTaskNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTaskNode, Services, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTaskNode, UnknownData_4UY0, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTaskNode, 0x0070);
		}

		// class UBTTask_BlackboardBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_BlackboardBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlackboardBase, BlackboardKey, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_BlackboardBase, 0x0098);
		}

		// class UBTDecorator_TimeLimit : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_TimeLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TimeLimit, TimeLimit, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TimeLimit, UnknownData_5KZ1, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_TimeLimit, 0x0070);
		}

		// class AAIController : public AController
		TEST_METHOD(Class__AIModule__AIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_R6HN, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_9RXW, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, PathFollowingComponent, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, BrainComponent, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, PerceptionComponent, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, ActionsComp, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, Blackboard, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, CachedGameplayTasksComponent, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, DefaultNavigationFilterClass, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, ReceiveMoveCompleted, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_RL8A, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController, 0x0328);
		}

		// class UPathFollowingComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__PathFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_ENTV, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, MovementComp, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_R4NN, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, MyNavData, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_HGC6, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingComponent, 0x0250);
		}

		// class UAIAsyncTaskBlueprintProxy : public UObject
		TEST_METHOD(Class__AIModule__AIAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, OnFail, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, UnknownData_64ID, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIAsyncTaskBlueprintProxy, 0x0068);
		}

		// class UAIBlueprintHelperLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AIModule__AIBlueprintHelperLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIBlueprintHelperLibrary, 0x0028);
		}

		// class UAIDataProvider : public UObject
		TEST_METHOD(Class__AIModule__AIDataProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider, 0x0028);
		}

		// class UAIDataProvider_QueryParams : public UAIDataProvider
		TEST_METHOD(Class__AIModule__AIDataProvider_QueryParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, ParamName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, FloatValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, IntValue, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, BoolValue, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, UnknownData_VD7G, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider_QueryParams, 0x0040);
		}

		// class UAIDataProvider_Random : public UAIDataProvider_QueryParams
		TEST_METHOD(Class__AIModule__AIDataProvider_Random)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, Min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, Max, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, UnknownData_V21C, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider_Random, 0x0050);
		}

		// class UAIHotSpotManager : public UObject
		TEST_METHOD(Class__AIModule__AIHotSpotManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIHotSpotManager, 0x0028);
		}

		// class UAIPerceptionComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__AIPerceptionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, SensesConfig, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, DominantSense, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, UnknownData_WM37, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, AIOwner, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, UnknownData_LQ69, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, OnPerceptionUpdated, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, OnTargetPerceptionUpdated, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, OnTargetPerceptionInfoUpdated, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionComponent, 0x0190);
		}

		// class UAIPerceptionListenerInterface : public UInterface
		TEST_METHOD(Class__AIModule__AIPerceptionListenerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionListenerInterface, 0x0028);
		}

		// class UAIPerceptionStimuliSourceComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__AIPerceptionStimuliSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionStimuliSourceComponent, UnknownData_MVQW, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionStimuliSourceComponent, RegisterAsSourceForSenses, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionStimuliSourceComponent, 0x00C8);
		}

		// class UAISubsystem : public UObject
		TEST_METHOD(Class__AIModule__AISubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISubsystem, UnknownData_S369, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISubsystem, AISystem, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISubsystem, 0x0038);
		}

		// class UAIPerceptionSystem : public UAISubsystem
		TEST_METHOD(Class__AIModule__AIPerceptionSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, UnknownData_BMHK, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, Senses, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, PerceptionAgingRate, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, UnknownData_SU96, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionSystem, 0x0130);
		}

		// class UAIResourceInterface : public UInterface
		TEST_METHOD(Class__AIModule__AIResourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResourceInterface, 0x0028);
		}

		// class UAIResource_Movement : public UGameplayTaskResource
		TEST_METHOD(Class__AIModule__AIResource_Movement)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResource_Movement, 0x0038);
		}

		// class UAIResource_Logic : public UGameplayTaskResource
		TEST_METHOD(Class__AIModule__AIResource_Logic)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResource_Logic, 0x0038);
		}

		// class UAISense : public UObject
		TEST_METHOD(Class__AIModule__AISense)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, DefaultExpirationAge, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, NotifyType, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_DIVP, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_42OD, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, PerceptionSystemInstance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_25I7, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense, 0x0080);
		}

		// class UAISense_Blueprint : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, ListenerDataType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, ListenerContainer, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, UnprocessedEvents, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Blueprint, 0x00A8);
		}

		// class UAISense_Damage : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Damage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Damage, RegisteredEvents, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Damage, 0x0090);
		}

		// class UAISense_Hearing : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Hearing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, NoiseEvents, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, SpeedOfSoundSq, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, UnknownData_BPNO, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Hearing, 0x00E8);
		}

		// class UAISense_Prediction : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Prediction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Prediction, RegisteredEvents, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Prediction, 0x0090);
		}

		// class UAISense_Sight : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Sight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_JXMF, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxTracesPerTick, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MinQueriesPerTimeSliceCheck, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxTimeSlicePerTick, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, HighImportanceQueryDistanceThreshold, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_DPUZ, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxQueryImportance, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, SightLimitQueryImportance, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_W0DT, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Sight, 0x0170);
		}

		// class UAISense_Team : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Team)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Team, RegisteredEvents, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Team, 0x0090);
		}

		// class UAISense_Touch : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Touch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Touch, RegisteredEvents, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Touch, 0x0090);
		}

		// class UAISenseBlueprintListener : public UUserDefinedStruct
		TEST_METHOD(Class__AIModule__AISenseBlueprintListener)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseBlueprintListener, 0x0108);
		}

		// class UAISenseConfig : public UObject
		TEST_METHOD(Class__AIModule__AISenseConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, DebugColor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, MaxAge, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, UnknownData_E4VJ, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig, 0x0048);
		}

		// class UAISenseConfig_Blueprint : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Blueprint, Implementation, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Blueprint, 0x0050);
		}

		// class UAISenseConfig_Damage : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Damage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Damage, Implementation, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Damage, 0x0050);
		}

		// class UAISenseConfig_Hearing : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Hearing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, Implementation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, HearingRange, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, LoSHearingRange, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, UnknownData_MY2M, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, DetectionByAffiliation, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Hearing, 0x0060);
		}

		// class UAISenseConfig_Prediction : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Prediction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Prediction, 0x0048);
		}

		// class UAISenseConfig_Sight : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Sight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, Implementation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, SightRadius, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, LoseSightRadius, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, PeripheralVisionAngleDegrees, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, DetectionByAffiliation, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, AutoSuccessRangeFromLastSeenLocation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, PointOfViewBackwardOffset, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, NearClippingRadius, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, UnknownData_9FR9, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Sight, 0x0070);
		}

		// class UAISenseConfig_Team : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Team)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Team, 0x0048);
		}

		// class UAISenseConfig_Touch : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Touch)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Touch, 0x0048);
		}

		// class UAISenseEvent : public UObject
		TEST_METHOD(Class__AIModule__AISenseEvent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent, 0x0028);
		}

		// class UAISenseEvent_Damage : public UAISenseEvent
		TEST_METHOD(Class__AIModule__AISenseEvent_Damage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseEvent_Damage, Event, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent_Damage, 0x0058);
		}

		// class UAISenseEvent_Hearing : public UAISenseEvent
		TEST_METHOD(Class__AIModule__AISenseEvent_Hearing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseEvent_Hearing, Event, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent_Hearing, 0x0058);
		}

		// class UAISightTargetInterface : public UInterface
		TEST_METHOD(Class__AIModule__AISightTargetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISightTargetInterface, 0x0028);
		}

		// class UAISystem : public UAISystemBase
		TEST_METHOD(Class__AIModule__AISystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PerceptionSystemClassName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, HotSpotManagerClassName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, AcceptanceRadius, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PathfollowingRegularPathPointAcceptanceRadius, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PathfollowingNavLinkAcceptanceRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bFinishMoveOnGoalOverlap, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAcceptPartialPaths, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAllowStrafing, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bEnableBTAITasks, 0x0097);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAllowControllersAsEQSQuerier, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bEnableDebuggerPlugin, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bForgetStaleActors, 0x009A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAddBlackboardSelfKey, 0x009B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, DefaultSightCollisionChannel, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, UnknownData_NLHV, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, BehaviorTreeManager, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, EnvironmentQueryManager, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PerceptionSystem, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, AllProxyObjects, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, HotSpotManager, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, NavLocalGrids, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, UnknownData_JGDP, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISystem, 0x0130);
		}

		// class UAITask : public UGameplayTask
		TEST_METHOD(Class__AIModule__AITask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask, OwnerController, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask, 0x0070);
		}

		// class UAITask_LockLogic : public UAITask
		TEST_METHOD(Class__AIModule__AITask_LockLogic)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_LockLogic, 0x0070);
		}

		// class UAITask_MoveTo : public UAITask
		TEST_METHOD(Class__AIModule__AITask_MoveTo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, OnRequestFailed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, OnMoveFinished, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, MoveRequest, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, UnknownData_0XWG, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_MoveTo, 0x0110);
		}

		// class UAITask_RunEQS : public UAITask
		TEST_METHOD(Class__AIModule__AITask_RunEQS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_RunEQS, UnknownData_A2TV, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_RunEQS, 0x00E8);
		}

		// class UBehaviorTree : public UObject
		TEST_METHOD(Class__AIModule__BehaviorTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, UnknownData_5K74, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootNode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, BlackboardAsset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootDecorators, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootDecoratorOps, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, UnknownData_LFP6, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTree, 0x0068);
		}

		// class UBrainComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__BrainComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, UnknownData_Z40S, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, BlackboardComp, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, AIOwner, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, UnknownData_WSLZ, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrainComponent, 0x0108);
		}

		// class UBehaviorTreeComponent : public UBrainComponent
		TEST_METHOD(Class__AIModule__BehaviorTreeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, UnknownData_6AVJ, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, NodeInstances, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, UnknownData_1X9M, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, DefaultBehaviorTreeAsset, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, UnknownData_QLAB, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeComponent, 0x0298);
		}

		// class UBehaviorTreeManager : public UObject
		TEST_METHOD(Class__AIModule__BehaviorTreeManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, MaxDebuggerSteps, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, UnknownData_1YMQ, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, LoadedTemplates, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, ActiveComponents, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeManager, 0x0050);
		}

		// class UBehaviorTreeTypes : public UObject
		TEST_METHOD(Class__AIModule__BehaviorTreeTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeTypes, 0x0028);
		}

		// class UBlackboardAssetProvider : public UInterface
		TEST_METHOD(Class__AIModule__BlackboardAssetProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardAssetProvider, 0x0028);
		}

		// class UBlackboardComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__BlackboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, BrainComp, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, DefaultBlackboardAsset, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, BlackboardAsset, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, UnknownData_WPH2, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, KeyInstances, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, UnknownData_3ZAZ, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardComponent, 0x01B8);
		}

		// class UBlackboardData : public UDataAsset
		TEST_METHOD(Class__AIModule__BlackboardData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, Parent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, Keys, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, UnknownData_R5GO, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardData, 0x0050);
		}

		// class UBlackboardKeyType : public UObject
		TEST_METHOD(Class__AIModule__BlackboardKeyType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType, UnknownData_6C84, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType, 0x0030);
		}

		// class UBlackboardKeyType_Bool : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Bool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Bool, 0x0030);
		}

		// class UBlackboardKeyType_Class : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Class)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Class, BaseClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Class, 0x0038);
		}

		// class UBlackboardKeyType_Enum : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Enum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, EnumType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, EnumName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, UnknownData_7TTZ, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Enum, 0x0050);
		}

		// class UBlackboardKeyType_Float : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Float)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Float, 0x0030);
		}

		// class UBlackboardKeyType_Int : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Int)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Int, 0x0030);
		}

		// class UBlackboardKeyType_Name : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Name)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Name, 0x0030);
		}

		// class UBlackboardKeyType_NativeEnum : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_NativeEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_NativeEnum, EnumName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_NativeEnum, EnumType, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_NativeEnum, 0x0048);
		}

		// class UBlackboardKeyType_Object : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Object)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Object, BaseClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Object, 0x0038);
		}

		// class UBlackboardKeyType_Rotator : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Rotator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Rotator, 0x0030);
		}

		// class UBlackboardKeyType_String : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_String)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_String, StringValue, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_String, 0x0040);
		}

		// class UBlackboardKeyType_Vector : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Vector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Vector, 0x0030);
		}

		// class UBTCompositeNode : public UBTNode
		TEST_METHOD(Class__AIModule__BTCompositeNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, Children, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, Services, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, UnknownData_HR6S, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, UnknownData_L5L8, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTCompositeNode, 0x0090);
		}

		// class UBTComposite_Selector : public UBTCompositeNode
		TEST_METHOD(Class__AIModule__BTComposite_Selector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_Selector, 0x0090);
		}

		// class UBTComposite_Sequence : public UBTCompositeNode
		TEST_METHOD(Class__AIModule__BTComposite_Sequence)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_Sequence, 0x0090);
		}

		// class UBTComposite_SimpleParallel : public UBTCompositeNode
		TEST_METHOD(Class__AIModule__BTComposite_SimpleParallel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTComposite_SimpleParallel, FinishMode, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTComposite_SimpleParallel, UnknownData_3OOI, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_SimpleParallel, 0x0098);
		}

		// class UBTDecorator_Blackboard : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_Blackboard)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, IntValue, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, FloatValue, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, StringValue, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, CachedDescription, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, OperationType, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, NotifyObserver, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, UnknownData_AHPO, 0x00BA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Blackboard, 0x00C0);
		}

		// class UBTDecorator_BlueprintBase : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, AIOwner, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, ActorOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, ObservedKeyNames, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, UnknownData_CDH9, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, UnknownData_XDEB, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_BlueprintBase, 0x00A0);
		}

		// class UBTDecorator_CheckGameplayTagsOnActor : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_CheckGameplayTagsOnActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, ActorToCheck, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, TagsToMatch, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, UnknownData_I14K, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, GameplayTags, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, CachedDescription, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_CheckGameplayTagsOnActor, 0x00C8);
		}

		// class UBTDecorator_CompareBBEntries : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_CompareBBEntries)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, Operator, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, UnknownData_H7QN, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, BlackboardKeyA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, BlackboardKeyB, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_CompareBBEntries, 0x00C0);
		}

		// class UBTDecorator_ConditionalLoop : public UBTDecorator_Blackboard
		TEST_METHOD(Class__AIModule__BTDecorator_ConditionalLoop)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ConditionalLoop, 0x00C0);
		}

		// class UBTDecorator_ConeCheck : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_ConeCheck)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeHalfAngle, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, UnknownData_5I2G, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeOrigin, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeDirection, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, Observed, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, UnknownData_CLAJ, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ConeCheck, 0x00F0);
		}

		// class UBTDecorator_Cooldown : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_Cooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Cooldown, CoolDownTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Cooldown, UnknownData_BQ13, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Cooldown, 0x0070);
		}

		// class UBTDecorator_DoesPathExist : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_DoesPathExist)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, BlackboardKeyA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, BlackboardKeyB, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, UnknownData_X68D, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, PathQueryType, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, UnknownData_M4YW, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, FilterClass, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_DoesPathExist, 0x00C8);
		}

		// class UBTDecorator_ForceSuccess : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_ForceSuccess)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ForceSuccess, 0x0068);
		}

		// class UBTDecorator_IsAtLocation : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_IsAtLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, AcceptableRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_J6TI, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, ParametrizedAcceptableRadius, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, GeometricDistanceType, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_8USB, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_5CQH, 0x00D5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsAtLocation, 0x00D8);
		}

		// class UBTDecorator_IsBBEntryOfClass : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_IsBBEntryOfClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsBBEntryOfClass, TestClass, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsBBEntryOfClass, 0x0098);
		}

		// class UBTDecorator_KeepInCone : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_KeepInCone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, ConeHalfAngle, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, UnknownData_EF2W, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, ConeOrigin, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, Observed, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, UnknownData_NJXP, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_KeepInCone, 0x00C8);
		}

		// class UBTDecorator_Loop : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_Loop)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, NumLoops, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, bInfiniteLoop, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, UnknownData_1KDL, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, InfiniteLoopTimeoutTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, UnknownData_UNM7, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Loop, 0x0078);
		}

		// class UBTDecorator_ReachedMoveGoal : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_ReachedMoveGoal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ReachedMoveGoal, 0x0068);
		}

		// class UBTDecorator_SetTagCooldown : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_SetTagCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, CooldownTag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, CooldownDuration, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, bAddToExistingDuration, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, UnknownData_BBVA, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_SetTagCooldown, 0x0078);
		}

		// class UBTDecorator_TagCooldown : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_TagCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, CooldownTag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, CooldownDuration, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, bAddToExistingDuration, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, bActivatesCooldown, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, UnknownData_2JTN, 0x0076);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_TagCooldown, 0x0078);
		}

		// class UBTFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AIModule__BTFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTFunctionLibrary, 0x0028);
		}

		// class UBTService_BlackboardBase : public UBTService
		TEST_METHOD(Class__AIModule__BTService_BlackboardBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlackboardBase, BlackboardKey, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_BlackboardBase, 0x0098);
		}

		// class UBTService_BlueprintBase : public UBTService
		TEST_METHOD(Class__AIModule__BTService_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, AIOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, ActorOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, UnknownData_ETSF, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, UnknownData_S9Z8, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_BlueprintBase, 0x0098);
		}

		// class UBTService_DefaultFocus : public UBTService_BlackboardBase
		TEST_METHOD(Class__AIModule__BTService_DefaultFocus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_DefaultFocus, FocusPriority, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_DefaultFocus, UnknownData_IU93, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_DefaultFocus, 0x00A0);
		}

		// class UBTService_RunEQS : public UBTService_BlackboardBase
		TEST_METHOD(Class__AIModule__BTService_RunEQS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_RunEQS, EQSRequest, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_RunEQS, UnknownData_WLCH, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_RunEQS, 0x00F0);
		}

		// class UBTTask_BlueprintBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, AIOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, ActorOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, TickInterval, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, UnknownData_UZAM, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, UnknownData_4HX1, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_BlueprintBase, 0x00A8);
		}

		// class UBTTask_FinishWithResult : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_FinishWithResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FinishWithResult, Result, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FinishWithResult, UnknownData_R8OX, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_FinishWithResult, 0x0078);
		}

		// class UBTTask_GameplayTaskBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_GameplayTaskBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_GameplayTaskBase, UnknownData_CDG8, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_GameplayTaskBase, 0x0078);
		}

		// class UBTTask_MakeNoise : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_MakeNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MakeNoise, Loudnes, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MakeNoise, UnknownData_ZTAZ, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MakeNoise, 0x0078);
		}

		// class UBTTask_MoveTo : public UBTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_MoveTo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, AcceptableRadius, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, UnknownData_I4RZ, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, FilterClass, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, ObservedBlackboardValueTolerance, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, UnknownData_EMBW, 0x00AE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MoveTo, 0x00B0);
		}

		// class UBTTask_MoveDirectlyToward : public UBTTask_MoveTo
		TEST_METHOD(Class__AIModule__BTTask_MoveDirectlyToward)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveDirectlyToward, UnknownData_60GW, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MoveDirectlyToward, 0x00B8);
		}

		// class UBTTask_PawnActionBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_PawnActionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PawnActionBase, 0x0070);
		}

		// class UBTTask_PlayAnimation : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_PlayAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, AnimationToPlay, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, UnknownData_KNK0, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, MyOwnerComp, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, CachedSkelMesh, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, UnknownData_BZCX, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PlayAnimation, 0x00B0);
		}

		// class UBTTask_PlaySound : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_PlaySound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlaySound, SoundToPlay, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PlaySound, 0x0078);
		}

		// class UBTTask_PushPawnAction : public UBTTask_PawnActionBase
		TEST_METHOD(Class__AIModule__BTTask_PushPawnAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PushPawnAction, Action, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PushPawnAction, 0x0078);
		}

		// class UBTTask_RotateToFaceBBEntry : public UBTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_RotateToFaceBBEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RotateToFaceBBEntry, Precision, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RotateToFaceBBEntry, UnknownData_GFC0, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RotateToFaceBBEntry, 0x00A0);
		}

		// class UBTTask_RunBehavior : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_RunBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehavior, BehaviorAsset, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunBehavior, 0x0078);
		}

		// class UBTTask_RunBehaviorDynamic : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_RunBehaviorDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, InjectionTag, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, DefaultBehaviorAsset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, BehaviorAsset, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunBehaviorDynamic, 0x0088);
		}

		// class UBTTask_RunEQSQuery : public UBTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_RunEQSQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryTemplate, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryParams, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryConfig, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, RunMode, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_10PF, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, EQSQueryBlackboardKey, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, bUseBBKey, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_BBWX, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, EQSRequest, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_SLBA, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunEQSQuery, 0x0150);
		}

		// class UBTTask_SetTagCooldown : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_SetTagCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, CooldownTag, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, bAddToExistingDuration, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, UnknownData_8BEU, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, CooldownDuration, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_SetTagCooldown, 0x0080);
		}

		// class UBTTask_Wait : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_Wait)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Wait, WaitTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Wait, RandomDeviation, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_Wait, 0x0078);
		}

		// class UBTTask_WaitBlackboardTime : public UBTTask_Wait
		TEST_METHOD(Class__AIModule__BTTask_WaitBlackboardTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_WaitBlackboardTime, BlackboardKey, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_WaitBlackboardTime, 0x00A0);
		}

		// class UCrowdAgentInterface : public UInterface
		TEST_METHOD(Class__AIModule__CrowdAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdAgentInterface, 0x0028);
		}

		// class UCrowdFollowingComponent : public UPathFollowingComponent
		TEST_METHOD(Class__AIModule__CrowdFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, UnknownData_5YG2, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, CrowdAgentMoveDirection, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, UnknownData_ML8A, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdFollowingComponent, 0x0298);
		}

		// class UCrowdManager : public UCrowdManagerBase
		TEST_METHOD(Class__AIModule__CrowdManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MyNavData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, AvoidanceConfig, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, SamplingPatterns, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAgents, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAgentRadius, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAvoidedAgents, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAvoidedWalls, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, NavmeshCheckInterval, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, PathOptimizationInterval, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, SeparationDirClamp, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, PathOffsetRadiusMultiplier, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, UnknownData_ROJJ, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdManager, 0x00F0);
		}

		// class ADetourCrowdAIController : public AAIController
		TEST_METHOD(Class__AIModule__DetourCrowdAIController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADetourCrowdAIController, 0x0328);
		}

		// class UEnvQuery : public UDataAsset
		TEST_METHOD(Class__AIModule__EnvQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQuery, QueryName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQuery, Options, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQuery, 0x0048);
		}

		// class UEnvQueryContext : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryContext)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext, 0x0028);
		}

		// class UEnvQueryContext_BlueprintBase : public UEnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryContext_BlueprintBase, UnknownData_4HS4, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_BlueprintBase, 0x0030);
		}

		// class UEnvQueryContext_Item : public UEnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext_Item)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_Item, 0x0028);
		}

		// class UEnvQueryContext_Querier : public UEnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext_Querier)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_Querier, 0x0028);
		}

		// class UEnvQueryDebugHelpers : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryDebugHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryDebugHelpers, 0x0028);
		}

		// class UEnvQueryNode : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryNode, VerNum, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryNode, UnknownData_DVMJ, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryNode, 0x0030);
		}

		// class UEnvQueryGenerator : public UEnvQueryNode
		TEST_METHOD(Class__AIModule__EnvQueryGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, OptionName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, ItemType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, UnknownData_XCKL, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator, 0x0050);
		}

		// class UEnvQueryGenerator_ActorsOfClass : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_ActorsOfClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchedActorClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, GenerateOnlyActorsInRadius, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchCenter, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_ActorsOfClass, 0x00D0);
		}

		// class UEnvQueryGenerator_BlueprintBase : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, GeneratorsActionDescription, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, Context, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, GeneratedItemType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, UnknownData_T8QR, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_BlueprintBase, 0x0080);
		}

		// class UEnvQueryGenerator_Composite : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Composite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, Generators, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, UnknownData_R9ZJ, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, ForcedItemType, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Composite, 0x0070);
		}

		// class UEnvQueryGenerator_ProjectedPoints : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_ProjectedPoints)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ProjectedPoints, ProjectionData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_ProjectedPoints, 0x0080);
		}

		// class UEnvQueryGenerator_Cone : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Cone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, AlignedPointsDistance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, ConeDegrees, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, AngleStep, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, Range, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, CenterActor, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, UnknownData_Y0PK, 0x0169);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Cone, 0x0170);
		}

		// class UEnvQueryGenerator_CurrentLocation : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_CurrentLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_CurrentLocation, QueryContext, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_CurrentLocation, 0x0058);
		}

		// class UEnvQueryGenerator_Donut : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Donut)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, InnerRadius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, OuterRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, NumberOfRings, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, PointsPerRing, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, ArcDirection, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, ArcAngle, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, bUseSpiralPattern, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, UnknownData_MY6O, 0x01B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, Center, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, UnknownData_X7Y5, 0x01C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Donut, 0x01D0);
		}

		// class UEnvQueryGenerator_OnCircle : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_OnCircle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleRadius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, SpaceBetween, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, NumberOfPoints, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, PointOnCircleSpacingMethod, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_6JTV, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, ArcDirection, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, ArcAngle, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, AngleRadians, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_BK45, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleCenter, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, bIgnoreAnyContextActorsWhenGeneratingCircle, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_E9R2, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleCenterZOffset, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, TraceData, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_GEJS, 0x0209);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_OnCircle, 0x0210);
		}

		// class UEnvQueryGenerator_SimpleGrid : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_SimpleGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, GridSize, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, SpaceBetween, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, GenerateAround, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_SimpleGrid, 0x00F8);
		}

		// class UEnvQueryGenerator_PathingGrid : public UEnvQueryGenerator_SimpleGrid
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_PathingGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, PathToItem, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, NavigationFilter, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, ScanRangeMultiplier, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_PathingGrid, 0x0170);
		}

		// class UEnvQueryInstanceBlueprintWrapper : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryInstanceBlueprintWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_OG2E, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, QueryID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_BVXI, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, ItemType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, OptionIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_VLBF, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, OnQueryFinishedEvent, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryInstanceBlueprintWrapper, 0x0078);
		}

		// class UEnvQueryItemType : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryItemType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryItemType, UnknownData_Q0XD, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType, 0x0030);
		}

		// class UEnvQueryItemType_VectorBase : public UEnvQueryItemType
		TEST_METHOD(Class__AIModule__EnvQueryItemType_VectorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_VectorBase, 0x0030);
		}

		// class UEnvQueryItemType_ActorBase : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_ActorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_ActorBase, 0x0030);
		}

		// class UEnvQueryItemType_Actor : public UEnvQueryItemType_ActorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Actor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Actor, 0x0030);
		}

		// class UEnvQueryItemType_Direction : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Direction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Direction, 0x0030);
		}

		// class UEnvQueryItemType_Point : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Point)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Point, 0x0030);
		}

		// class UEnvQueryManager : public UAISubsystem
		TEST_METHOD(Class__AIModule__EnvQueryManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_FLMN, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, InstanceCache, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, LocalContexts, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, GCShieldedWrappers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_C21C, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, MaxAllowedTestingTime, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, bTestQueriesUsingBreadth, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_WJ6M, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, QueryCountWarningThreshold, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, QueryCountWarningInterval, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryManager, 0x0140);
		}

		// class UEnvQueryOption : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryOption)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryOption, Generator, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryOption, Tests, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryOption, 0x0040);
		}

		// class UEnvQueryTest : public UEnvQueryNode
		TEST_METHOD(Class__AIModule__EnvQueryTest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestOrder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestPurpose, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_SQ8V, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestComment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, MultipleContextFilterOp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, MultipleContextScoreOp, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FilterType, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_PZS1, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, BoolValue, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FloatValueMin, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FloatValueMax, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_YKJP, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoringEquation, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ClampMinType, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ClampMaxType, 0x00FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, NormalizationType, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_74NI, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoreClampMin, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoreClampMax, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoringFactor, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ReferenceValue, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, bDefineReferenceValue, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_D8WZ, 0x01E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_16ZQ, 0x01F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest, 0x01F8);
		}

		// class UEnvQueryTest_Distance : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Distance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, TestMode, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, UnknownData_R8EJ, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, DistanceTo, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Distance, 0x0208);
		}

		// class UEnvQueryTest_Dot : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Dot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, LineA, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, LineB, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, TestMode, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, bAbsoluteValue, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, UnknownData_8Q51, 0x023A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Dot, 0x0240);
		}

		// class UEnvQueryTest_GameplayTags : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_GameplayTags)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, TagQueryToMatch, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, bUpdatedToUseQuery, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, TagsToMatch, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, UnknownData_2WYK, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, GameplayTags, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_GameplayTags, 0x0268);
		}

		// class UEnvQueryTest_Overlap : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Overlap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Overlap, OverlapData, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Overlap, 0x0218);
		}

		// class UEnvQueryTest_Pathfinding : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Pathfinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, TestMode, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, UnknownData_KBJ0, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, Context, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, PathFromContext, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, SkipUnreachable, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, FilterClass, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Pathfinding, 0x0280);
		}

		// class UEnvQueryTest_PathfindingBatch : public UEnvQueryTest_Pathfinding
		TEST_METHOD(Class__AIModule__EnvQueryTest_PathfindingBatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_PathfindingBatch, ScanRangeMultiplier, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_PathfindingBatch, 0x02B8);
		}

		// class UEnvQueryTest_Project : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Project)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Project, ProjectionData, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Project, 0x0228);
		}

		// class UEnvQueryTest_Random : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Random)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Random, 0x01F8);
		}

		// class UEnvQueryTest_Trace : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Trace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, TraceData, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, TraceFromContext, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, ItemHeightOffset, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, ContextHeightOffset, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, Context, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Trace, 0x02D8);
		}

		// class UEnvQueryTest_Volume : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Volume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Volume, VolumeContext, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Volume, VolumeClass, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Volume, UnknownData_721N, 0x0209);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Volume, 0x0210);
		}

		// class UEnvQueryTypes : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTypes, 0x0028);
		}

		// class UEQSQueryResultSourceInterface : public UInterface
		TEST_METHOD(Class__AIModule__EQSQueryResultSourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEQSQueryResultSourceInterface, 0x0028);
		}

		// class UEQSRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__AIModule__EQSRenderingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEQSRenderingComponent, UnknownData_M55E, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEQSRenderingComponent, 0x0480);
		}

		// class AEQSTestingPawn : public ACharacter
		TEST_METHOD(Class__AIModule__EQSTestingPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_CB6L, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryTemplate, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryParams, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryConfig, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, TimeLimitPerStep, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, StepToDebugDraw, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, HighlightMode, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_8DNT, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_TXBV, 0x04F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryingMode, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_1RDR, 0x04F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, NavAgentProperties, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_VI3I, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEQSTestingPawn, 0x0550);
		}

		// class UGenericTeamAgentInterface : public UInterface
		TEST_METHOD(Class__AIModule__GenericTeamAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericTeamAgentInterface, 0x0028);
		}

		// class AGridPathAIController : public AAIController
		TEST_METHOD(Class__AIModule__GridPathAIController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGridPathAIController, 0x0328);
		}

		// class UGridPathFollowingComponent : public UPathFollowingComponent
		TEST_METHOD(Class__AIModule__GridPathFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPathFollowingComponent, GridManager, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPathFollowingComponent, UnknownData_OSXK, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridPathFollowingComponent, 0x0280);
		}

		// class UNavFilter_AIControllerDefault : public UNavigationQueryFilter
		TEST_METHOD(Class__AIModule__NavFilter_AIControllerDefault)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavFilter_AIControllerDefault, 0x0048);
		}

		// class ANavLinkProxy : public AActor
		TEST_METHOD(Class__AIModule__NavLinkProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, UnknownData_CAL4, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, PointLinks, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, SegmentLinks, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, SmartLinkComp, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, bSmartLinkIsRelevant, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, UnknownData_DMHE, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, OnSmartLinkReached, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavLinkProxy, 0x0270);
		}

		// class UNavLocalGridManager : public UObject
		TEST_METHOD(Class__AIModule__NavLocalGridManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLocalGridManager, UnknownData_UCT3, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLocalGridManager, 0x0058);
		}

		// class UPathFollowingManager : public UObject
		TEST_METHOD(Class__AIModule__PathFollowingManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingManager, 0x0028);
		}

		// class UPawnAction : public UObject
		TEST_METHOD(Class__AIModule__PawnAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, ChildAction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, ParentAction, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, OwnerComponent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, Instigator, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, BrainComp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, UnknownData_IV85, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, UnknownData_FK4X, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction, 0x0098);
		}

		// class UPawnAction_BlueprintBase : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_BlueprintBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_BlueprintBase, 0x0098);
		}

		// class UPawnAction_Move : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Move)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, GoalActor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, GoalLocation, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, AcceptableRadius, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, FilterClass, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, UnknownData_NROV, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Move, 0x00E8);
		}

		// class UPawnAction_Repeat : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Repeat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, ActionToRepeat, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, RecentActionCopy, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, ChildFailureHandlingMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, UnknownData_68FB, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Repeat, 0x00B8);
		}

		// class UPawnAction_Sequence : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Sequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, ActionSequence, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, ChildFailureHandlingMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, UnknownData_KSZD, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, RecentActionCopy, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, UnknownData_SEE5, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Sequence, 0x00C0);
		}

		// class UPawnAction_Wait : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Wait)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Wait, TimeToWait, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Wait, UnknownData_1DAV, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Wait, 0x00A8);
		}

		// class UPawnActionsComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__PawnActionsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ControlledPawn, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ActionStacks, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ActionEvents, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, CurrentAction, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, UnknownData_CPZ2, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnActionsComponent, 0x00E8);
		}

		// class UPawnSensingComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__PawnSensingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, HearingThreshold, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, LOSHearingThreshold, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, SightRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, SensingInterval, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, HearingMaxSoundAge, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, UnknownData_VFPP, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, OnSeePawn, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, OnHearNoise, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, PeripheralVisionAngle, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, PeripheralVisionCosine, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnSensingComponent, 0x00F8);
		}

		// class UVisualLoggerExtension : public UObject
		TEST_METHOD(Class__AIModule__VisualLoggerExtension)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerExtension, 0x0028);
		}

		// class AControlPointMeshActor : public AActor
		TEST_METHOD(Class__Landscape__ControlPointMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPointMeshActor, ControlPointMeshComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AControlPointMeshActor, 0x0228);
		}

		// class UControlPointMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Landscape__ControlPointMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlPointMeshComponent, VirtualTextureMainPassMaxDrawDistance, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlPointMeshComponent, UnknownData_OT29, 0x04D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlPointMeshComponent, 0x04E0);
		}

		// class ALandscapeProxy : public AActor
		TEST_METHOD(Class__Landscape__LandscapeProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SplineComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeGuid, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeSectionOffset, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, MaxLODLevel, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODDistanceFactor, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODFalloff, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_HUB1, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, ComponentScreenSizeToUseSubSections, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LOD0ScreenSize, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LOD0DistributionSetting, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODDistributionSetting, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, TessellationComponentScreenSize, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UseTessellationComponentScreenSizeFalloff, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_DFHF, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, TessellationComponentScreenSizeFalloff, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, OccluderGeometryLOD, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StaticLightingLOD, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, DefaultPhysMaterial, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StreamingDistanceMultiplier, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_SBW9, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeMaterial, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_OW38, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeHoleMaterial, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeMaterialsOverride, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bMeshHoles, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, MeshHolesMaxLod, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_AIBW, 0x02C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, RuntimeVirtualTextures, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, VirtualTextureNumLods, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, VirtualTextureLodBias, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, VirtualTextureRenderPassType, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_R7RR, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NegativeZBoundsExtension, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, PositiveZBoundsExtension, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_O1C6, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeComponents, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionComponents, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, FoliageComponents, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_1C54, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bHasLandscapeGrass, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_Y4P2, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StaticLightingResolution, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_W3U5, 0x038D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_SQ1J, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_S9JJ, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_UYDM, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LightingChannels, 0x039D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_T39K, 0x039E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_CTNL, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CustomDepthStencilWriteMask, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_CKNQ, 0x03A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CustomDepthStencilValue, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LDMaxDrawDistance, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LightmassSettings, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionMipLevel, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SimpleCollisionMipLevel, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionThickness, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_G2LT, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, BodyInstance, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_HBLG, 0x0531);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, ComponentSizeQuads, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SubsectionSizeQuads, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NumSubsections, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_YGEB, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bUseDynamicMaterialInstance, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NavigationGeometryGatheringMode, 0x0545);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bUseLandscapeForCullingInvisibleHLODVertices, 0x0546);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bHasLayersContent, 0x0547);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, WeightmapUsageMap, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeProxy, 0x0598);
		}

		// class ALandscape : public ALandscapeProxy
		TEST_METHOD(Class__Landscape__Landscape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscape, 0x0598);
		}

		// class ALandscapeBlueprintBrushBase : public AActor
		TEST_METHOD(Class__Landscape__LandscapeBlueprintBrushBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeBlueprintBrushBase, 0x0220);
		}

		// class ULandscapeLODStreamingProxy : public UStreamableRenderAsset
		TEST_METHOD(Class__Landscape__LandscapeLODStreamingProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLODStreamingProxy, UnknownData_4FZD, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeLODStreamingProxy, 0x0068);
		}

		// class ULandscapeComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SectionBaseX, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SectionBaseY, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, ComponentSizeQuads, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SubsectionSizeQuads, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, NumSubsections, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_BAIE, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideMaterial, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideHoleMaterial, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideMaterials, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialInstances, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialInstancesDynamic, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODIndexToMaterialIndex, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialIndexToDisabledTessellationMaterial, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, XYOffsetmapTexture, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapScaleBias, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapSubsectionOffset, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_FIA2, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, HeightmapScaleBias, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CachedLocalBox, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CollisionComponent, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, HeightmapTexture, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapLayerAllocations, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapTextures, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODStreamingProxy, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MapBuildDataId, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, IrrelevantLights, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CollisionMipLevel, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SimpleCollisionMipLevel, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, NegativeZBoundsExtension, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, PositiveZBoundsExtension, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, StaticLightingResolution, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, ForcedLOD, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODBias, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, StateId, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, BakedTextureMaterialGuid, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_VQ1T, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, GIBakedBaseColorTexture, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileBlendableLayerMask, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_L19P, 0x05C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileMaterialInterface, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileMaterialInterfaces, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileWeightmapTextures, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_YJB3, 0x05F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeComponent, 0x0660);
		}

		// class ALandscapeGizmoActor : public AActor
		TEST_METHOD(Class__Landscape__LandscapeGizmoActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeGizmoActor, 0x0220);
		}

		// class ALandscapeGizmoActiveActor : public ALandscapeGizmoActor
		TEST_METHOD(Class__Landscape__LandscapeGizmoActiveActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeGizmoActiveActor, UnknownData_XIDY, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeGizmoActiveActor, 0x0270);
		}

		// class ULandscapeGizmoRenderComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeGizmoRenderComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeGizmoRenderComponent, 0x0440);
		}

		// class ULandscapeGrassType : public UObject
		TEST_METHOD(Class__Landscape__LandscapeGrassType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassVarieties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, UnknownData_BZ1V, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassDensity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, PlacementJitter, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, StartCullDistance, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, EndCullDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, RandomRotation, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, AlignToSurface, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, UnknownData_D19J, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeGrassType, 0x0060);
		}

		// class ULandscapeHeightfieldCollisionComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeHeightfieldCollisionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, ComponentLayerInfos, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SectionBaseX, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SectionBaseY, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionSizeQuads, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionScale, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SimpleCollisionSizeQuads, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_WRY0, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionQuadFlags, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, HeightfieldGuid, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CachedLocalBox, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, RenderComponent, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_FAP0, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CookedPhysicalMaterials, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_HJZE, 0x04E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeHeightfieldCollisionComponent, 0x0520);
		}

		// class ULandscapeInfo : public UObject
		TEST_METHOD(Class__Landscape__LandscapeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, LandscapeActor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, LandscapeGuid, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, ComponentSizeQuads, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, SubsectionSizeQuads, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, ComponentNumSubsections, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, DrawScale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, UnknownData_PF2U, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, Proxies, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, UnknownData_E6Q4, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeInfo, 0x0210);
		}

		// class ULandscapeInfoMap : public UObject
		TEST_METHOD(Class__Landscape__LandscapeInfoMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfoMap, UnknownData_T84R, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeInfoMap, 0x0080);
		}

		// class ULandscapeLayerInfoObject : public UObject
		TEST_METHOD(Class__Landscape__LandscapeLayerInfoObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, PhysMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, Hardness, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, LayerUsageDebugColor, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, UnknownData_PTWM, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeLayerInfoObject, 0x0050);
		}

		// class ULandscapeMaterialInstanceConstant : public UMaterialInstanceConstant
		TEST_METHOD(Class__Landscape__LandscapeMaterialInstanceConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMaterialInstanceConstant, TextureStreamingInfo, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMaterialInstanceConstant, UnknownData_CBD5, 0x0379);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMaterialInstanceConstant, 0x0380);
		}

		// class ULandscapeMeshCollisionComponent : public ULandscapeHeightfieldCollisionComponent
		TEST_METHOD(Class__Landscape__LandscapeMeshCollisionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshCollisionComponent, MeshGuid, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshCollisionComponent, UnknownData_D64S, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMeshCollisionComponent, 0x0540);
		}

		// class ALandscapeMeshProxyActor : public AActor
		TEST_METHOD(Class__Landscape__LandscapeMeshProxyActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeMeshProxyActor, LandscapeMeshProxyComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeMeshProxyActor, 0x0228);
		}

		// class ULandscapeMeshProxyComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Landscape__LandscapeMeshProxyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, LandscapeGuid, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, ProxyComponentBases, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, ProxyLOD, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, UnknownData_PEGS, 0x04F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMeshProxyComponent, 0x0500);
		}

		// class ULandscapeSettings : public UDeveloperSettings
		TEST_METHOD(Class__Landscape__LandscapeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSettings, MaxNumberOfLayers, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSettings, UnknownData_KJ5K, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSettings, 0x0040);
		}

		// class ULandscapeSplinesComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeSplinesComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, ControlPoints, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, Segments, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, CookedForeignMeshComponents, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplinesComponent, 0x0470);
		}

		// class ULandscapeSplineControlPoint : public UObject
		TEST_METHOD(Class__Landscape__LandscapeSplineControlPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Location, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Rotation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Width, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LayerWidthRatio, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, SideFalloff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LeftSideFalloffFactor, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, RightSideFalloffFactor, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LeftSideLayerFalloffFactor, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, RightSideLayerFalloffFactor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, EndFalloff, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, ConnectedSegments, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Points, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Bounds, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, UnknownData_9JN0, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LocalMeshComponent, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplineControlPoint, 0x00A8);
		}

		// class ULandscapeSplineSegment : public UObject
		TEST_METHOD(Class__Landscape__LandscapeSplineSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Connections, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, SplineInfo, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Points, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Bounds, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, UnknownData_BOIT, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, LocalMeshComponents, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplineSegment, 0x00B0);
		}

		// class ALandscapeStreamingProxy : public ALandscapeProxy
		TEST_METHOD(Class__Landscape__LandscapeStreamingProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeStreamingProxy, LandscapeActor, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeStreamingProxy, UnknownData_39TU, 0x05B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeStreamingProxy, 0x05B8);
		}

		// class ULandscapeSubsystem : public UWorldSubsystem
		TEST_METHOD(Class__Landscape__LandscapeSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSubsystem, UnknownData_5BAS, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSubsystem, 0x0048);
		}

		// class ULandscapeWeightmapUsage : public UObject
		TEST_METHOD(Class__Landscape__LandscapeWeightmapUsage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeWeightmapUsage, ChannelUsage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeWeightmapUsage, LayerGuid, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeWeightmapUsage, 0x0058);
		}

		// class UMaterialExpressionLandscapeGrassOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeGrassOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeGrassOutput, GrassTypes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeGrassOutput, 0x0050);
		}

		// class UMaterialExpressionLandscapeLayerBlend : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerBlend, Layers, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerBlend, ExpressionGUID, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerBlend, 0x0060);
		}

		// class UMaterialExpressionLandscapeLayerCoords : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerCoords)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, CustomUVType, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, UnknownData_F4OB, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingRotation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingPanU, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingPanV, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, UnknownData_EI9O, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerCoords, 0x0058);
		}

		// class UMaterialExpressionLandscapeLayerSample : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, PreviewWeight, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, ExpressionGUID, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, UnknownData_7ZWM, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerSample, 0x0060);
		}

		// class UMaterialExpressionLandscapeLayerSwitch : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, LayerUsed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_UA3T, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, LayerNotUsed, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_K6KB, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, ParameterName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_H1AY, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, ExpressionGUID, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_018S, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerSwitch, 0x0088);
		}

		// class UMaterialExpressionLandscapeLayerWeight : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerWeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, Base, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, UnknownData_C2O7, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, Layer, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, UnknownData_FXI7, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ParameterName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, PreviewWeight, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ConstBase, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ExpressionGUID, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerWeight, 0x0090);
		}

		// class UMaterialExpressionLandscapePhysicalMaterialOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapePhysicalMaterialOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapePhysicalMaterialOutput, Inputs, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapePhysicalMaterialOutput, 0x0050);
		}

		// class UMaterialExpressionLandscapeVisibilityMask : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeVisibilityMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeVisibilityMask, ExpressionGUID, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeVisibilityMask, 0x0050);
		}

		// class UMovieSceneGeometryCollectionSection : public UMovieSceneSection
		TEST_METHOD(Class__GeometryCollectionTracks__MovieSceneGeometryCollectionSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCollectionSection, Params, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCollectionSection, 0x0118);
		}

		// class UMovieSceneGeometryCollectionTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__GeometryCollectionTracks__MovieSceneGeometryCollectionTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCollectionTrack, UnknownData_DMW2, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCollectionTrack, AnimationSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCollectionTrack, 0x0090);
		}

		// class UChaosDestructionListener : public USceneComponent
		TEST_METHOD(Class__GeometryCollectionEngine__ChaosDestructionListener)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, UnknownData_R4SQ, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, CollisionEventRequestSettings, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, BreakingEventRequestSettings, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, TrailingEventRequestSettings, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, UnknownData_O3YC, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, ChaosSolverActors, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, GeometryCollectionActors, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, OnCollisionEvents, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, OnBreakingEvents, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, OnTrailingEvents, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, UnknownData_ILVR, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosDestructionListener, 0x0420);
		}

		// class AGeometryCollectionActor : public AActor
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionActor, GeometryCollectionComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionActor, GeometryCollectionDebugDrawComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCollectionActor, 0x0230);
		}

		// class UGeometryCollectionCache : public UObject
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionCache, RecordedData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionCache, SupportedCollection, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionCache, CompatibleCollectionState, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionCache, 0x0050);
		}

		// class UGeometryCollectionComponent : public UMeshComponent
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_W9QC, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ChaosSolverActor, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_VA9M, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, RestCollection, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitializationFields, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, Simulating, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_H1M2, 0x0571);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ObjectType, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, EnableClustering, 0x0579);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_X2CC, 0x057A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ClusterGroupIndex, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, MaxClusterLevel, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_M0MO, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, DamageThreshold, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ClusterConnectionType, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_O0Y3, 0x0599);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CollisionGroup, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CollisionSampleFraction, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, LinearEtherDrag, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, AngularEtherDrag, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_5CF6, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, PhysicalMaterial, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitialVelocityType, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_4M2D, 0x05B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitialLinearVelocity, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitialAngularVelocity, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_URRG, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, PhysicalMaterialOverride, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CacheParameters, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, NotifyGeometryCollectionPhysicsStateChange, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, NotifyGeometryCollectionPhysicsLoadingStateChange, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_R4D9, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, OnChaosBreakEvent, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, DesiredCacheTime, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CachePlayback, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_VQ9I, 0x067D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, OnChaosPhysicsCollision, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, bNotifyBreaks, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, bNotifyCollisions, 0x0691);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, bEnableReplication, 0x0692);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, bEnableAbandonAfterLevel, 0x0693);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ReplicationAbandonClusterLevel, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, RepData, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_DFFA, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, DummyBodySetup, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_YTCM, 0x08D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionComponent, 0x08F0);
		}

		// class AGeometryCollectionDebugDrawActor : public AActor
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionDebugDrawActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, WarningMessage, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_9IHG, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SelectedRigidBody, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bDebugDrawWholeCollection, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bDebugDrawHierarchy, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bDebugDrawClustering, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, HideGeometry, 0x0243);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyId, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyCollision, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bCollisionAtOrigin, 0x0246);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyTransform, 0x0247);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyInertia, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyVelocity, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyForce, 0x024A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyInfos, 0x024B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowTransformIndex, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowTransform, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowParent, 0x024E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowLevel, 0x024F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowConnectivityEdges, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowGeometryIndex, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowGeometryTransform, 0x0252);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowBoundingBox, 0x0253);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowFaces, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowFaceIndices, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowFaceNormals, 0x0256);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowSingleFace, 0x0257);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SingleFaceIndex, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowVertices, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowVertexIndices, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowVertexNormals, 0x025E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bUseActiveVisualization, 0x025F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, PointThickness, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, LineThickness, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bTextShadow, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_K6VS, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, TextScale, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, NormalScale, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, AxisScale, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, ArrowScale, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyIdColor, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyTransformScale, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyCollisionColor, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyInertiaColor, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyVelocityColor, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyForceColor, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyInfoColor, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, TransformIndexColor, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, TransformScale, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, LevelColor, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, ParentColor, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, ConnectivityEdgeThickness, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, GeometryIndexColor, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, GeometryTransformScale, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, BoundingBoxColor, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, FaceColor, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, FaceIndexColor, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, FaceNormalColor, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SingleFaceColor, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, VertexColor, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, VertexIndexColor, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, VertexNormalColor, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_XM37, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SpriteComponent, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_1P0Z, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCollectionDebugDrawActor, 0x0308);
		}

		// class UGeometryCollectionDebugDrawComponent : public UActorComponent
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionDebugDrawComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, GeometryCollectionDebugDrawActor, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, GeometryCollectionRenderLevelSetActor, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, UnknownData_7FHL, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionDebugDrawComponent, 0x00C8);
		}

		// class UGeometryCollection : public UObject
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_KKZA, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, GeometrySource, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, Materials, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, CollisionType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, ImplicitType, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_PUFR, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MinLevelSetResolution, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MaxLevelSetResolution, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MinClusterLevelSetResolution, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MaxClusterLevelSetResolution, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, CollisionObjectReductionPercentage, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, bMassAsDensity, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_8EJ4, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, Mass, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MinimumMassClamp, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, CollisionParticlesFraction, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MaximumCollisionParticles, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_89Z2, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, SizeSpecificData, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, EnableRemovePiecesOnFracture, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_8UZC, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, RemoveOnFractureMaterials, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, PersistentGuid, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, StateGuid, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, BoneSelectedMaterialIndex, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_JIPB, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollection, 0x00E0);
		}

		// class AGeometryCollectionRenderLevelSetActor : public AActor
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionRenderLevelSetActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, TargetVolumeTexture, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, RayMarchMaterial, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, SurfaceTolerance, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, Isovalue, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, Enabled, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, RenderVolumeBoundingBox, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, UnknownData_0ZWZ, 0x023A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCollectionRenderLevelSetActor, 0x02C0);
		}

		// class USkeletalMeshSimulationComponent : public UActorComponent
		TEST_METHOD(Class__GeometryCollectionEngine__SkeletalMeshSimulationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_U06A, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, PhysicalMaterial, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ChaosSolverActor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, OverridePhysicsAsset, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, bSimulating, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, bNotifyCollisions, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ObjectType, 0x00D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_G617, 0x00D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, Density, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MinMass, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MaxMass, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, CollisionType, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_PPMZ, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ImplicitShapeParticlesPerUnitArea, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ImplicitShapeMinNumParticles, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ImplicitShapeMaxNumParticles, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MinLevelSetResolution, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MaxLevelSetResolution, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, CollisionGroup, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, InitialVelocityType, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_0VHB, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, InitialLinearVelocity, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, InitialAngularVelocity, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, OnChaosPhysicsCollision, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_4YKZ, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSimulationComponent, 0x0138);
		}

		// class UStaticMeshSimulationComponent : public UActorComponent
		TEST_METHOD(Class__GeometryCollectionEngine__StaticMeshSimulationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_DZVO, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, Simulating, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, bNotifyCollisions, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, ObjectType, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_RW58, 0x00BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, Mass, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, CollisionType, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, ImplicitType, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_J253, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, MinLevelSetResolution, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, MaxLevelSetResolution, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, InitialVelocityType, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_8YJP, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, InitialLinearVelocity, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, InitialAngularVelocity, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, DamageThreshold, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_4439, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, PhysicalMaterial, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, ChaosSolverActor, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, OnChaosPhysicsCollision, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_KME0, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, SimulatedComponents, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_XT4Z, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshSimulationComponent, 0x0138);
		}

		// class ULevelSequencePlayer : public UMovieSceneSequencePlayer
		TEST_METHOD(Class__LevelSequence__LevelSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, OnCameraCut, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, UnknownData_6JZI, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequencePlayer, 0x0798);
		}

		// class UAnimSequenceLevelSequenceLink : public UAssetUserData
		TEST_METHOD(Class__LevelSequence__AnimSequenceLevelSequenceLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceLevelSequenceLink, SkelTrackGuid, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceLevelSequenceLink, PathToLevelSequence, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequenceLevelSequenceLink, 0x0050);
		}

		// class UDefaultLevelSequenceInstanceData : public UObject
		TEST_METHOD(Class__LevelSequence__DefaultLevelSequenceInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, UnknownData_UDEE, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, TransformOriginActor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, UnknownData_SEJB, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, TransformOrigin, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultLevelSequenceInstanceData, 0x0070);
		}

		// class ULevelSequenceMetaData : public UInterface
		TEST_METHOD(Class__LevelSequence__LevelSequenceMetaData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceMetaData, 0x0028);
		}

		// class ULevelSequence : public UMovieSceneSequence
		TEST_METHOD(Class__LevelSequence__LevelSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, UnknownData_SQAH, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, MovieScene, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, ObjectReferences, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, BindingReferences, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, PossessedObjects, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, DirectorClass, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, AssetUserData, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequence, 0x01C8);
		}

		// class ULevelSequenceBurnInInitSettings : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnInInitSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnInInitSettings, 0x0028);
		}

		// class ULevelSequenceBurnInOptions : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnInOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, bUseBurnIn, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, UnknownData_6H4H, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, BurnInClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, Settings, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnInOptions, 0x0050);
		}

		// class ALevelSequenceActor : public AActor
		TEST_METHOD(Class__LevelSequence__LevelSequenceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_VNLT, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, PlaybackSettings, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_XFAU, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, SequencePlayer, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, LevelSequence, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, CameraSettings, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_QOHT, 0x026A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BurnInOptions, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BindingOverrides, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_T6WE, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, DefaultInstanceData, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BurnInInstance, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, bShowBurnin, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_V4QW, 0x0299);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelSequenceActor, 0x02A0);
		}

		// class ULevelSequenceAnimSequenceLink : public UAssetUserData
		TEST_METHOD(Class__LevelSequence__LevelSequenceAnimSequenceLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceAnimSequenceLink, AnimSequenceLinks, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceAnimSequenceLink, 0x0038);
		}

		// class ULevelSequenceBurnIn : public UUserWidget
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnIn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnIn, FrameInformation, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnIn, LevelSequenceActor, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnIn, 0x0320);
		}

		// class ULevelSequenceDirector : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceDirector, Player, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceDirector, 0x0030);
		}

		// class ULegacyLevelSequenceDirectorBlueprint : public UBlueprint
		TEST_METHOD(Class__LevelSequence__LegacyLevelSequenceDirectorBlueprint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegacyLevelSequenceDirectorBlueprint, 0x00A0);
		}

		// class ALevelSequenceMediaController : public AActor
		TEST_METHOD(Class__LevelSequence__LevelSequenceMediaController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, UnknownData_BI6K, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, Sequence, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, MediaComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, ServerStartTimeSeconds, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, UnknownData_11IT, 0x023C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelSequenceMediaController, 0x0248);
		}

		// class UEyeTrackerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__EyeTracker__EyeTrackerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEyeTrackerFunctionLibrary, 0x0028);
		}

		// class UMediaSource : public UObject
		TEST_METHOD(Class__MediaAssets__MediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSource, UnknownData_OSKC, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaSource, 0x0080);
		}

		// class UBaseMediaSource : public UMediaSource
		TEST_METHOD(Class__MediaAssets__BaseMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseMediaSource, PlayerName, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseMediaSource, 0x0088);
		}

		// class UFileMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__FileMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, FilePath, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, PrecacheFile, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, UnknownData_THMQ, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFileMediaSource, 0x00B0);
		}

		// class UMediaBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MediaAssets__MediaBlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaBlueprintFunctionLibrary, 0x0028);
		}

		// class UMediaComponent : public UActorComponent
		TEST_METHOD(Class__MediaAssets__MediaComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaComponent, MediaTexture, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaComponent, MediaPlayer, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaComponent, 0x00C0);
		}

		// class UMediaTimeStampInfo : public UObject
		TEST_METHOD(Class__MediaAssets__MediaTimeStampInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTimeStampInfo, Time, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTimeStampInfo, SequenceIndex, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaTimeStampInfo, 0x0038);
		}

		// class UMediaPlayer : public UObject
		TEST_METHOD(Class__MediaAssets__MediaPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnEndReached, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaClosed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaOpened, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaOpenFailed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnPlaybackResumed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnPlaybackSuspended, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnSeekCompleted, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnTracksChanged, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheAhead, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheBehind, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheBehindGame, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, NativeAudioOut, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlayOnOpen, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_FCSV, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_XGZE, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, Playlist, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlaylistIndex, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_27P2, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, TimeDelay, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, HorizontalFieldOfView, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, VerticalFieldOfView, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, ViewRotation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_85O5, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlayerGuid, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_K6VE, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaPlayer, 0x0138);
		}

		// class UMediaPlaylist : public UObject
		TEST_METHOD(Class__MediaAssets__MediaPlaylist)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlaylist, Items, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaPlaylist, 0x0038);
		}

		// class UMediaSoundComponent : public USynthComponent
		TEST_METHOD(Class__MediaAssets__MediaSoundComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, Channels, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_P91S, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, DynamicRateAdjustment, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_O26Q, 0x06C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, RateAdjustmentFactor, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, RateAdjustmentRange, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_PU1D, 0x06DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, MediaPlayer, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_T87I, 0x06E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaSoundComponent, 0x08E0);
		}

		// class UMediaTexture : public UTexture
		TEST_METHOD(Class__MediaAssets__MediaTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AddressX, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AddressY, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AutoClear, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_XNCH, 0x00DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, ClearColor, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, EnableGenMips, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, NumMips, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, NewStyleOutput, 0x00EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, OutputFormat, 0x00EF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, CurrentAspectRatio, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, CurrentOrientation, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_47C5, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, MediaPlayer, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_V05V, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaTexture, 0x01B0);
		}

		// class UPlatformMediaSource : public UMediaSource
		TEST_METHOD(Class__MediaAssets__PlatformMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformMediaSource, MediaSource, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformMediaSource, 0x0088);
		}

		// class UStreamMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__StreamMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamMediaSource, StreamUrl, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamMediaSource, 0x0098);
		}

		// class UTimeSynchronizableMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__TimeSynchronizableMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, bUseTimeSynchronization, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, UnknownData_DQEZ, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, FrameDelay, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, TimeDelay, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeSynchronizableMediaSource, 0x0098);
		}

		// class UMovieSceneCaptureProtocolBase : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureProtocolBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, UnknownData_ZCUA, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, State, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, UnknownData_6U33, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureProtocolBase, 0x0058);
		}

		// class UMovieSceneImageCaptureProtocolBase : public UMovieSceneCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneImageCaptureProtocolBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneImageCaptureProtocolBase, 0x0058);
		}

		// class UFrameGrabberProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__FrameGrabberProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFrameGrabberProtocol, UnknownData_TAMD, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrameGrabberProtocol, 0x0068);
		}

		// class UVideoCaptureProtocol : public UFrameGrabberProtocol
		TEST_METHOD(Class__MovieSceneCapture__VideoCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, bUseCompression, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, UnknownData_NWHT, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, CompressionQuality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, UnknownData_J5N2, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVideoCaptureProtocol, 0x0080);
		}

		// class UMovieSceneAudioCaptureProtocolBase : public UMovieSceneCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneAudioCaptureProtocolBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioCaptureProtocolBase, 0x0058);
		}

		// class UNullAudioCaptureProtocol : public UMovieSceneAudioCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__NullAudioCaptureProtocol)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNullAudioCaptureProtocol, 0x0058);
		}

		// class UMasterAudioSubmixCaptureProtocol : public UMovieSceneAudioCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MasterAudioSubmixCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterAudioSubmixCaptureProtocol, Filename, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterAudioSubmixCaptureProtocol, UnknownData_M9P7, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMasterAudioSubmixCaptureProtocol, 0x0090);
		}

		// class UCompositionGraphCaptureProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__CompositionGraphCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, IncludeRenderPasses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, bCaptureFramesInHDR, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_EXZ6, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, HDRCompressionQuality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, CaptureGamut, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_EHR9, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, PostProcessingMaterial, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, bDisableScreenPercentage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_44TZ, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, PostProcessingMaterialPtr, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_XX2Q, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositionGraphCaptureProtocol, 0x00C0);
		}

		// class UImageSequenceProtocol : public UFrameGrabberProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol, UnknownData_NXYT, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol, 0x00D8);
		}

		// class UCompressedImageSequenceProtocol : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__CompressedImageSequenceProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompressedImageSequenceProtocol, CompressionQuality, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompressedImageSequenceProtocol, UnknownData_F15U, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompressedImageSequenceProtocol, 0x00E0);
		}

		// class UImageSequenceProtocol_BMP : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_BMP)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_BMP, 0x00D8);
		}

		// class UImageSequenceProtocol_PNG : public UCompressedImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_PNG)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_PNG, 0x00E0);
		}

		// class UImageSequenceProtocol_JPG : public UCompressedImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_JPG)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_JPG, 0x00E0);
		}

		// class UImageSequenceProtocol_EXR : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_EXR)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, bCompressed, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, CaptureGamut, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, UnknownData_1LIX, 0x00DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_EXR, 0x00E8);
		}

		// class UMovieSceneCaptureInterface : public UInterface
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureInterface, 0x0028);
		}

		// class UMovieSceneCapture : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_EGN3, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, ImageCaptureProtocolType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AudioCaptureProtocolType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, ImageCaptureProtocol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AudioCaptureProtocol, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, Settings, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, bUseSeparateProcess, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, bCloseEditorWhenCaptureStarts, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_6C3T, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AdditionalCommandLineArguments, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, InheritedCommandLineArguments, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_1LB7, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCapture, 0x0220);
		}

		// class ULevelCapture : public UMovieSceneCapture
		TEST_METHOD(Class__MovieSceneCapture__LevelCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, bAutoStartCapture, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, UnknownData_9554, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, PrerequisiteActorId, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, UnknownData_052K, 0x023C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelCapture, 0x0240);
		}

		// class UMovieSceneCaptureEnvironment : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureEnvironment)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureEnvironment, 0x0028);
		}

		// class UUserDefinedCaptureProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__UserDefinedCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedCaptureProtocol, World, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedCaptureProtocol, UnknownData_QZ2U, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedCaptureProtocol, 0x00D8);
		}

		// class UUserDefinedImageCaptureProtocol : public UUserDefinedCaptureProtocol
		TEST_METHOD(Class__MovieSceneCapture__UserDefinedImageCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, Format, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, bEnableCompression, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, UnknownData_A7R1, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, CompressionQuality, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedImageCaptureProtocol, 0x00E0);
		}

		// class Ucustomcursor_C : public UTLCustomCursor
		TEST_METHOD(WidgetBlueprintGeneratedClass__customcursor__customcursor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucustomcursor_C, CursorImage, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ucustomcursor_C, 0x0270);
		}

		// class UJsonUtilitiesDummyObject : public UObject
		TEST_METHOD(Class__JsonUtilities__JsonUtilitiesDummyObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJsonUtilitiesDummyObject, 0x0028);
		}

		// class UTLGameViewportClientBlueprint_C : public UTLGameViewportClient
		TEST_METHOD(BlueprintGeneratedClass__TLGameViewportClientBlueprint__TLGameViewportClientBlueprint_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLGameViewportClientBlueprint_C, 0x0398);
		}

		// class ATLEffect_champion_indicator_minion_01_C : public ATLEffect
		TEST_METHOD(BlueprintGeneratedClass__TLEffect_champion_indicator_minion_01__TLEffect_champion_indicator_minion_01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLEffect_champion_indicator_minion_01_C, vfx_champion_minion_indicator_light_01_p, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLEffect_champion_indicator_minion_01_C, Decal, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLEffect_champion_indicator_minion_01_C, DefaultSceneRoot, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLEffect_champion_indicator_minion_01_C, DMAT_01, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATLEffect_champion_indicator_minion_01_C, 0x0280);
		}

		// class AMapProxy_BP_C : public AMapProxy
		TEST_METHOD(BlueprintGeneratedClass__MapProxy_BP__MapProxy_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMapProxy_BP_C, 0x0400);
		}

		// class UComboBoxOptionItem_C : public UTLComboBoxItemWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ComboBoxOptionItem__ComboBoxOptionItem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxOptionItem_C, TLTextBlock_1, 0x0658);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxOptionItem_C, 0x0660);
		}

		// class UDefaultCheckBox_C : public UTLCheckBoxStyle
		TEST_METHOD(BlueprintGeneratedClass__DefaultCheckBox__DefaultCheckBox_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultCheckBox_C, 0x05F8);
		}

		// class UGenericMaterialHighlight_BorderStyle_Masked_C : public UTLBorderStyle
		TEST_METHOD(BlueprintGeneratedClass__GenericMaterialHighlight_BorderStyle_Masked__GenericMaterialHighlight_BorderStyle_Masked_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericMaterialHighlight_BorderStyle_Masked_C, 0x00F8);
		}

		// class UPetStoredNoSelect_C : public UPetStored_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__PetStoredNoSelect__PetStoredNoSelect_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPetStoredNoSelect_C, 0x0958);
		}

		// class USkillTierProgressHeader_C : public USkillTabTierWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SkillTierProgressHeader__SkillTierProgressHeader_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierProgressHeader_C, UberGraphFrame, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierProgressHeader_C, InProgressState, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierProgressHeader_C, LockedBG, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierProgressHeader_C, LockedState, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierProgressHeader_C, ProgressBG1, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierProgressHeader_C, ProgressBG2, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierProgressHeader_C, ProgressBG3, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierProgressHeader_C, ProgressBG4, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierProgressHeader_C, ProgressBG5, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierProgressHeader_C, ProgressBlock1, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierProgressHeader_C, ProgressBlock2, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierProgressHeader_C, ProgressBlock3, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierProgressHeader_C, ProgressBlock4, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierProgressHeader_C, ProgressBlock5, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierProgressHeader_C, SkillTierLockedColumn, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierProgressHeader_C, StateSwitcher, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierProgressHeader_C, TierLevel, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierProgressHeader_C, TierUnlockState, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierProgressHeader_C, TLTextBlock_2, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierProgressHeader_C, TotalPointsInProgress, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierProgressHeader_C, TotalPointsRequiredText, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierProgressHeader_C, UnlockedState, 0x0700);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillTierProgressHeader_C, 0x0708);
		}

		// class USkillAssignWidget_C : public USkillAssignWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SkillAssignWidget__SkillAssignWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillAssignWidget_C, MenuAnchor_1, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillAssignWidget_C, SkillIcon, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillAssignWidget_C, 0x06A0);
		}

		// class USkillGroupToggleHotkey_C : public UGamepadSkillGroupToggle
		TEST_METHOD(WidgetBlueprintGeneratedClass__SkillGroupToggleHotkey__SkillGroupToggleHotkey_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillGroupToggleHotkey_C, ButtonBGWidget, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillGroupToggleHotkey_C, TextWidget, 0x06A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillGroupToggleHotkey_C, 0x06A8);
		}

		// class USkillDescription_C : public USkillDescriptionWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SkillDescription__SkillDescription_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescription_C, UberGraphFrame, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescription_C, ActivePassiveText, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescription_C, BonusLevels, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescription_C, BonusList, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescription_C, ButtonWidgetSwitcher, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescription_C, Cooldown, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescription_C, CurrentLevelText, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescription_C, EnergyCost, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescription_C, FiligreeLeft, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescription_C, HeaderText, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescription_C, LevelRequiredBorder, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescription_C, MaxLevelText, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescription_C, NextLevelText, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescription_C, PetAuraText, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescription_C, PointsInTabRequiredText, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescription_C, RefundWithRegretPoint, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescription_C, RelicChargeDescription, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescription_C, RelicChargeDescriptionTest, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescription_C, SkillDescriptionText, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescription_C, SkillTagText, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescription_C, SkillTier1BonusDescription, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescription_C, SkillTier2BonusDescription, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescription_C, SkillTier3BonusDescription, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescription_C, TLImage_1, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescription_C, TLImage_2, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescription_C, TLImage_154, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescription_C, TLImage_169, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescription_C, TLImage_173, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescription_C, TLRichTextBlock_1, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescription_C, UnavailableText, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescription_C, WeaponRequirement, 0x07D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillDescription_C, 0x07D8);
		}

		// class USkillTierBonusDescription_C : public USkillTierBonusWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SkillTierBonusDescription__SkillTierBonusDescription_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierBonusDescription_C, Description, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierBonusDescription_C, PointsRemaining, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierBonusDescription_C, Title, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillTierBonusDescription_C, 0x02B8);
		}

		// class USubduedButtonStyle_C : public UDefaultButtonStyle_C
		TEST_METHOD(BlueprintGeneratedClass__SubduedButtonStyle__SubduedButtonStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubduedButtonStyle_C, 0x0310);
		}

		// class ULegendaryAffixCollectionSlot_C : public ULegendaryAffixSlotWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__LegendaryAffixCollectionSlot__LegendaryAffixCollectionSlot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionSlot_C, UberGraphFrame, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionSlot_C, EquipPreview, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionSlot_C, Equip, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionSlot_C, ArrowBounce, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionSlot_C, AddSkillContainer, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionSlot_C, Button, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionSlot_C, DuplicateWarning, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionSlot_C, EllipsisLoop, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionSlot_C, EquipFlash, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionSlot_C, LegendaryAffixCollectionItem, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionSlot_C, LockedContainer, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionSlot_C, Overlay_3, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionSlot_C, SelectedArrow, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionSlot_C, SelectedText, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionSlot_C, SelectItemContainer, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionSlot_C, TLButton_184, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionSlot_C, TLImage_184, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionSlot_C, UnlockText, 0x0AA0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegendaryAffixCollectionSlot_C, 0x0AA8);
		}

		// class USafeZoneFrame_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SafeZoneFrame__SafeZoneFrame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneFrame_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneFrame_C, pulse, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USafeZoneFrame_C, 0x0270);
		}

		// class ULightHeader1TextStyle1_C : public UTLTextStyle
		TEST_METHOD(BlueprintGeneratedClass__LightHeader1TextStyle1__LightHeader1TextStyle1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightHeader1TextStyle1_C, 0x00A8);
		}

		// class ATLClientBotController_C : public ATLAIController
		TEST_METHOD(BlueprintGeneratedClass__TLClientBotController__TLClientBotController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLClientBotController_C, UberGraphFrame, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATLClientBotController_C, 0x03A0);
		}

		// class UTabbedSubMenuButtonSquare_C : public UTabbedMenuButton
		TEST_METHOD(WidgetBlueprintGeneratedClass__TabbedSubMenuButtonSquare__TabbedSubMenuButtonSquare_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedSubMenuButtonSquare_C, UberGraphFrame, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedSubMenuButtonSquare_C, Button, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedSubMenuButtonSquare_C, ButtonSelected, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedSubMenuButtonSquare_C, ButtonTextTextBlock, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedSubMenuButtonSquare_C, Icon, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedSubMenuButtonSquare_C, SelectedIcon, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedSubMenuButtonSquare_C, TLImage_1, 0x0740);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTabbedSubMenuButtonSquare_C, 0x0748);
		}

		// class UGridInventory_C : public UInventoryWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__GridInventory__GridInventory_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridInventory_C, UberGraphFrame, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridInventory_C, show, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridInventory_C, CheckBox, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridInventory_C, CheckboxFrame, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridInventory_C, EquippedGear, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridInventory_C, EquippedWeapons, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridInventory_C, GamepadButtonLegend, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridInventory_C, InventoryGridWithTabs, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridInventory_C, PetItems, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridInventory_C, PlayerInfo, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridInventory_C, SmallHeader_C_1, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridInventory_C, SmallHeader_C_5, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridInventory_C, StatPopup, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridInventory_C, StatsButton, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridInventory_C, TagSwapCTA, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridInventory_C, ToggleStatsFloatingAction, 0x0930);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridInventory_C, 0x0938);
		}

		// class UFortHelpScreen_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__FortHelpScreen__FortHelpScreen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortHelpScreen_C, UberGraphFrame, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortHelpScreen_C, show, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortHelpScreen_C, Flag, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortHelpScreen_C, TLImage_1, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortHelpScreen_C, TLImage_156, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortHelpScreen_C, TLImage_158, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortHelpScreen_C, TLImage_159, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortHelpScreen_C, TLImage_160, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortHelpScreen_C, TLImage_161, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortHelpScreen_C, TLImage_162, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortHelpScreen_C, TLImage_163, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortHelpScreen_C, TLImage_164, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortHelpScreen_C, TLImage_165, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortHelpScreen_C, TLImage_166, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortHelpScreen_C, TLImage_167, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortHelpScreen_C, TLRichTextBlock_Base, 0x06B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFortHelpScreen_C, 0x06C0);
		}

		// class UStyle_CloseButton_C : public UCloseButtonWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Style_CloseButton__Style_CloseButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStyle_CloseButton_C, UberGraphFrame, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStyle_CloseButton_C, CloseButton, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStyle_CloseButton_C, HorizontalBox_1, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStyle_CloseButton_C, TLImage_1, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStyle_CloseButton_C, OnClosed, 0x0668);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStyle_CloseButton_C, 0x0678);
		}

		// class ULegendaryAffixCollection_C : public ULegendaryAffixCollectionWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__LegendaryAffixCollection__LegendaryAffixCollection_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollection_C, UberGraphFrame, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollection_C, AffixCount, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollection_C, AllItemList, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollection_C, CategoryList, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollection_C, HotkeyWidget, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollection_C, HotkeyWidget_1, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollection_C, LoadingSpinner, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollection_C, MenuButtonList, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollection_C, TabNameText, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollection_C, TLImage_2, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollection_C, TLImage_14, 0x07A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegendaryAffixCollection_C, 0x07A8);
		}

		// class UEllipsisLoop_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__EllipsisLoop__EllipsisLoop_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEllipsisLoop_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEllipsisLoop_C, Scaleloop, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEllipsisLoop_C, 0x0270);
		}

		// class UMapArea_C : public UMapWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MapArea__MapArea_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapArea_C, MapImage, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapArea_C, MapMarkerList, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapArea_C, MarkerVirtualCursorPanel, 0x0790);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapArea_C, 0x0798);
		}

		// class UOptionItem_C : public UOptionWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__OptionItem__OptionItem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionItem_C, UberGraphFrame, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionItem_C, CheckBox, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionItem_C, CheckboxFrame, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionItem_C, ComboBox, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionItem_C, DropdownFrame, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionItem_C, FrameSwitcher, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionItem_C, OptionTextName, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionItem_C, Slider, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionItem_C, SliderFrame, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionItem_C, TLImage_106, 0x07A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOptionItem_C, 0x07A8);
		}

		// class UFrameSubtle_Highlight_Style_DEPRECATED_C : public UFrameSubtle_Style_C
		TEST_METHOD(BlueprintGeneratedClass__FrameSubtle_Highlight_Style_DEPRECATED__FrameSubtle_Highlight_Style_DEPRECATED_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrameSubtle_Highlight_Style_DEPRECATED_C, 0x00F8);
		}

		// class UDefaultButtonStyle_C : public UTLButtonStyle
		TEST_METHOD(BlueprintGeneratedClass__DefaultButtonStyle__DefaultButtonStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultButtonStyle_C, 0x0310);
		}

		// class URightArrowButtonStyle_C : public ULeftArrowButtonStyle_C
		TEST_METHOD(BlueprintGeneratedClass__RightArrowButtonStyle__RightArrowButtonStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URightArrowButtonStyle_C, 0x0310);
		}

		// class USquareButtonStyle_C : public UDefaultButtonStyle_C
		TEST_METHOD(BlueprintGeneratedClass__SquareButtonStyle__SquareButtonStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USquareButtonStyle_C, 0x0310);
		}

		// class UInventoryComparisonOnlyOne_C : public UInventoryComparisonWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InventoryComparisonOnlyOne__InventoryComparisonOnlyOne_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComparisonOnlyOne_C, ComparisonSwitcher, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComparisonOnlyOne_C, SelectedItemTooltip, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComparisonOnlyOne_C, SelectedPetTooltip, 0x06B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryComparisonOnlyOne_C, 0x06C0);
		}

		// class UVendorStoreGrid_C : public UStoreGridWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__VendorStoreGrid__VendorStoreGrid_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorStoreGrid_C, Grid, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorStoreGrid_C, NoItemsText, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorStoreGrid_C, OnlineStoreEntryList, 0x0668);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVendorStoreGrid_C, 0x0670);
		}

		// class UTravelMapWidget_C : public UTravelMapWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TravelMapWidget__TravelMapWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelMapWidget_C, UberGraphFrame, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelMapWidget_C, Hide, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelMapWidget_C, show, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelMapWidget_C, FiligreeLeft, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelMapWidget_C, GamepadButtonLegend, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelMapWidget_C, Image_1, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelMapWidget_C, OneOption, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelMapWidget_C, OptionBackgroundSwitcher, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelMapWidget_C, PartyGroup, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelMapWidget_C, PartyMembersList, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelMapWidget_C, SkillCategoryHeader, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelMapWidget_C, Style_CloseButton, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelMapWidget_C, ThisPlayerList, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelMapWidget_C, TLImage_3, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelMapWidget_C, TLImage_172, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelMapWidget_C, TravelToFort, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelMapWidget_C, TravelToPartyMember1, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelMapWidget_C, TravelToPartyMember2, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelMapWidget_C, TravelToPartyMember3, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelMapWidget_C, TravelToTown, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelMapWidget_C, TwoOptions, 0x0788);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTravelMapWidget_C, 0x0790);
		}

		// class UReceivedNewPetDetails_C : public UPetAcquiredWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ReceivedNewPetDetails__ReceivedNewPetDetails_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, UberGraphFrame, 0x1250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, Hide, 0x1258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, show, 0x1260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, FiligreeLeft, 0x1268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, GamepadButtonLegend, 0x1270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, HeaderText, 0x1278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, HorizontalBox_3, 0x1280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, LargeHeader, 0x1288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, NameField, 0x1290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, PetIconWidget, 0x1298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, PetRarity, 0x12A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, PetStoredSmallInventory, 0x12A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, PreviewAnchorWidget, 0x12B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, RandomizePetName, 0x12B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, Release, 0x12C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, SendHome, 0x12C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, SkillDescriptionList, 0x12D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, SkillTitle, 0x12D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, Swap, 0x12E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, TLBorder_1, 0x12E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, TLImage_1, 0x12F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, TLImage_3, 0x12F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, TLImage_4, 0x1300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, TLImage_5, 0x1308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, TLImage_7, 0x1310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, TLImage_9, 0x1318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, TLImage_18, 0x1320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, TLTextBlock_1, 0x1328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, TLTextBlock_2, 0x1330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, TLTextBlock_3, 0x1338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, TLTextBlock_4, 0x1340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, TLTextBlock_5, 0x1348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, TLTextBlock_6, 0x1350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, TLTextBlock_9, 0x1358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, UnlockedNewSkillGroup, 0x1360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReceivedNewPetDetails_C, white, 0x1368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReceivedNewPetDetails_C, 0x1370);
		}

		// class UKeyBindingsMenu_C : public UKeyBindingsWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__KeyBindingsMenu__KeyBindingsMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingsMenu_C, UberGraphFrame, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingsMenu_C, BindingBox, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingsMenu_C, GamepadButtonLegend, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingsMenu_C, KeyBindingList, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingsMenu_C, ModalFrame, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingsMenu_C, RadioToggleItem, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingsMenu_C, RadioToggleItem_C_2, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingsMenu_C, ResetButton, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingsMenu_C, TLTextBlock_1, 0x0798);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKeyBindingsMenu_C, 0x07A0);
		}

		// class UHelpOnHUD_C : public UHelpTabbedMenu
		TEST_METHOD(WidgetBlueprintGeneratedClass__HelpOnHUD__HelpOnHUD_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHelpOnHUD_C, UberGraphFrame, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHelpOnHUD_C, BasicHeader, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHelpOnHUD_C, DontShowCheckbox, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHelpOnHUD_C, GamepadButtonLegend, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHelpOnHUD_C, glow, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHelpOnHUD_C, HelpButtonsPanel, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHelpOnHUD_C, HelpCategoriesList, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHelpOnHUD_C, LeftButton, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHelpOnHUD_C, MainCanvasPanel, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHelpOnHUD_C, OuterFrame, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHelpOnHUD_C, RightButton, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHelpOnHUD_C, SlotCanvasPanel, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHelpOnHUD_C, Style_CloseButtonSmall, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHelpOnHUD_C, TLImage_1, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHelpOnHUD_C, TLImage_2, 0x08A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHelpOnHUD_C, 0x08B0);
		}

		// class UGenericModalWidgetTwoButtons_C : public UGenericModalWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__GenericModalWidgetTwoButtons__GenericModalWidgetTwoButtons_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidgetTwoButtons_C, UberGraphFrame, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidgetTwoButtons_C, show, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidgetTwoButtons_C, AcceptButton, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidgetTwoButtons_C, AcceptButtonText, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidgetTwoButtons_C, BaseModalWidget, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidgetTwoButtons_C, Blur, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidgetTwoButtons_C, BodyText, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidgetTwoButtons_C, ContentPanel, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidgetTwoButtons_C, ErrorText, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidgetTwoButtons_C, GamepadButtonLegend, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidgetTwoButtons_C, HorizontalBox_2, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidgetTwoButtons_C, RejectButton, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidgetTwoButtons_C, RejectButtonText, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidgetTwoButtons_C, SpecialActionButton, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidgetTwoButtons_C, SpecialActionText, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidgetTwoButtons_C, DefaultBodyText, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidgetTwoButtons_C, DefaultTitleText, 0x0828);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericModalWidgetTwoButtons_C, 0x0840);
		}

		// class UBossName_C : public UMessageWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BossName__BossName_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossName_C, show, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossName_C, TLImage_1, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossName_C, TLImage_2, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossName_C, TLImage_3, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossName_C, TLImage_4, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossName_C, TLImage_5, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossName_C, TLImage_6, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossName_C, TLTextBlock_2, 0x0710);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBossName_C, 0x0718);
		}

		// class UAccountStash_C : public UInventoryStashWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__AccountStash__AccountStash_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountStash_C, UberGraphFrame, 0x0F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountStash_C, show, 0x0F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountStash_C, HotkeyWidget, 0x0F68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountStash_C, HotkeyWidget_1, 0x0F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountStash_C, NavigationHeader, 0x0F78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountStash_C, StashInventory, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountStash_C, StashTabMenu, 0x0F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountStash_C, TLImage_2, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountStash_C, TLImage_3, 0x0F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountStash_C, TwoPanelInventoryWidget, 0x0FA0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAccountStash_C, 0x0FA8);
		}

		// class UPlaceholderBorderStyle_C : public UTLBorderStyle
		TEST_METHOD(BlueprintGeneratedClass__PlaceholderBorderStyle__PlaceholderBorderStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaceholderBorderStyle_C, 0x00F8);
		}

		// class UFortInventoryWidget_C : public UFortInventoryWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__FortInventoryWidget__FortInventoryWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortInventoryWidget_C, UberGraphFrame, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortInventoryWidget_C, Hide, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortInventoryWidget_C, show, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortInventoryWidget_C, CurrencyList, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortInventoryWidget_C, FortInventorySidePanel, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortInventoryWidget_C, GamepadButtonLegend, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortInventoryWidget_C, MainCanvasPanel, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortInventoryWidget_C, NavigationHeader, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortInventoryWidget_C, PreviewAnchorWidget, 0x0838);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFortInventoryWidget_C, 0x0840);
		}

		// class UControlHelpScreen_Switch_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ControlHelpScreen_Switch__ControlHelpScreen_Switch_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlHelpScreen_Switch_C, A, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlHelpScreen_Switch_C, B, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlHelpScreen_Switch_C, TLImage_1, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlHelpScreen_Switch_C, TLImage_247, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlHelpScreen_Switch_C, TLImage_249, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlHelpScreen_Switch_C, TLImage_250, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlHelpScreen_Switch_C, TLImage_251, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlHelpScreen_Switch_C, X, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlHelpScreen_Switch_C, Y, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlHelpScreen_Switch_C, 0x0688);
		}

		// class ULifeboundHelpScreen_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__LifeboundHelpScreen__LifeboundHelpScreen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULifeboundHelpScreen_C, show, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULifeboundHelpScreen_C, TLImage_1, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULifeboundHelpScreen_C, TLRichTextBlock_Base, 0x0650);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULifeboundHelpScreen_C, 0x0658);
		}

		// class UCreditNameSingle_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CreditNameSingle__CreditNameSingle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditNameSingle_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditNameSingle_C, HeaderText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditNameSingle_C, TLImage_1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditNameSingle_C, TLImage_3, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditNameSingle_C, DefaultText, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreditNameSingle_C, 0x0298);
		}

		// class UTabbedSubMenuButtonLarge_C : public UTabbedMenuButton
		TEST_METHOD(WidgetBlueprintGeneratedClass__TabbedSubMenuButtonLarge__TabbedSubMenuButtonLarge_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedSubMenuButtonLarge_C, UberGraphFrame, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedSubMenuButtonLarge_C, Button, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedSubMenuButtonLarge_C, ButtonSelected, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedSubMenuButtonLarge_C, TLTextBlock_1, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedSubMenuButtonLarge_C, TLTextBlock_59, 0x0730);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTabbedSubMenuButtonLarge_C, 0x0738);
		}

		// class UKeybindHelpScreen_Demo_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__KeybindHelpScreen_Demo__KeybindHelpScreen_Demo_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeybindHelpScreen_Demo_C, BigKeyWidget, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeybindHelpScreen_Demo_C, BigKeyWidget_71, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeybindHelpScreen_Demo_C, BigKeyWidget_72, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeybindHelpScreen_Demo_C, BigKeyWidget_73, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeybindHelpScreen_Demo_C, BigKeyWidget_76, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeybindHelpScreen_Demo_C, BigKeyWidget_77, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeybindHelpScreen_Demo_C, TLImage_1, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeybindHelpScreen_Demo_C, TLRichTextBlock_1, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeybindHelpScreen_Demo_C, TLRichTextBlock_8, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeybindHelpScreen_Demo_C, TLRichTextBlock_12, 0x0688);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKeybindHelpScreen_Demo_C, 0x0690);
		}

		// class UInboxEntryWidget_Small_C : public UInboxEntryWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InboxEntryWidget_Small__InboxEntryWidget_Small_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInboxEntryWidget_Small_C, UberGraphFrame, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInboxEntryWidget_Small_C, Attachments, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInboxEntryWidget_Small_C, Claim, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInboxEntryWidget_Small_C, DeleteButton, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInboxEntryWidget_Small_C, ExpirationDate, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInboxEntryWidget_Small_C, TLButton_1, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInboxEntryWidget_Small_C, TLTextBlock_1, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInboxEntryWidget_Small_C, TLTextBlock_2, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInboxEntryWidget_Small_C, TLTextBlock_4, 0x06E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInboxEntryWidget_Small_C, 0x06E8);
		}

		// class UInstanceResetKickedPartyMember_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InstanceResetKickedPartyMember__InstanceResetKickedPartyMember_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetKickedPartyMember_C, KickedText, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInstanceResetKickedPartyMember_C, 0x0268);
		}

		// class ULoadingSpinner_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__LoadingSpinner__LoadingSpinner_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingSpinner_C, UberGraphFrame, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingSpinner_C, Spin, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingSpinner_C, LoadingSpinner, 0x0650);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoadingSpinner_C, 0x0658);
		}

		// class UKeyBindingEntryWidget_C : public UKeyBindingEntryWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__KeyBindingEntryWidget__KeyBindingEntryWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingEntryWidget_C, UberGraphFrame, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingEntryWidget_C, Button1, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingEntryWidget_C, Button2, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingEntryWidget_C, TLImage_106, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingEntryWidget_C, TLTextBlock_1, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingEntryWidget_C, TLTextBlock_2, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingEntryWidget_C, TLTextBlockLMB, 0x0900);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKeyBindingEntryWidget_C, 0x0908);
		}

		// class UNewMapSpoke_Echonok_C : public UMapSpokeWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__NewMapSpoke_Echonok__NewMapSpoke_Echonok_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_Echonok_C, AreaInSpokeBase_C_1, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_Echonok_C, AreaInSpokeBase_C_2, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_Echonok_C, AreaList, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_Echonok_C, ButtonCanvas, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_Echonok_C, EchonokMountains1, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_Echonok_C, EchonokMountains2, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_Echonok_C, EchonokMountains3, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_Echonok_C, EchonokMountains4, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_Echonok_C, EM1_2_pass, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_Echonok_C, IF2_3_pass, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_Echonok_C, IF3_4_Pass, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_Echonok_C, TLImage_1, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_Echonok_C, TownBase, 0x06A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNewMapSpoke_Echonok_C, 0x06A8);
		}

		// class UFeedbackOption_C : public UFeedbackOptionWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__FeedbackOption__FeedbackOption_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackOption_C, UberGraphFrame, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackOption_C, CheckBox, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackOption_C, CheckboxFrame, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackOption_C, ComboBox, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackOption_C, DropdownFrame, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackOption_C, FeedbackText, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackOption_C, FrameSwitcher, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackOption_C, TextFrame, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFeedbackOption_C, 0x06A0);
		}

		// class UAreaInSpokeBase_C : public UAreaInSpokeWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__AreaInSpokeBase__AreaInSpokeBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAreaInSpokeBase_C, UberGraphFrame, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAreaInSpokeBase_C, loopRing, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAreaInSpokeBase_C, AreaName, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAreaInSpokeBase_C, AreaNameWithLevel, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAreaInSpokeBase_C, Button_3, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAreaInSpokeBase_C, NeighborList, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAreaInSpokeBase_C, PortraitFrame, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAreaInSpokeBase_C, QuestIcon, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAreaInSpokeBase_C, TLBorder_1, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAreaInSpokeBase_C, TLImage_1, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAreaInSpokeBase_C, TLImage_108, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAreaInSpokeBase_C, YouAreHere, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAreaInSpokeBase_C, YouAreHereOverlay, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAreaInSpokeBase_C, ButtonStyle, 0x07E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAreaInSpokeBase_C, 0x0A60);
		}

		// class Agob_bfgoblin_prop_d_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_bfgoblin_prop_d_02_bp__gob_bfgoblin_prop_d_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_bfgoblin_prop_d_02_bp_C, 0x0268);
		}

		// class Aio_prop_fencestraight_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_fencestraight_02_bp__io_prop_fencestraight_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_fencestraight_02_bp_C, 0x0268);
		}

		// class Anpcbasevendor_bp_C : public Anpcbasegadget_bp_C
		TEST_METHOD(BlueprintGeneratedClass__npcbasevendor_bp__npcbasevendor_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Anpcbasevendor_bp_C, MapMarker, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Anpcbasevendor_bp_C, Vendor, 0x04C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Anpcbasevendor_bp_C, 0x04C8);
		}

		// class UStatusEffect_GoblinSacrificeProp_1_C : public UStatusEffect_LuckTree_Base_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_GoblinSacrificeProp_2__StatusEffect_GoblinSacrificeProp_1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_GoblinSacrificeProp_1_C, 0x0280);
		}

		// class UDefaultFortPropComponent_C : public UFortPropComponent
		TEST_METHOD(BlueprintGeneratedClass__DefaultFortPropComponent__DefaultFortPropComponent_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultFortPropComponent_C, 0x04E0);
		}

		// class UDungeonPanelClusterReveal_C : public UDungeonClusterRevealPanel
		TEST_METHOD(WidgetBlueprintGeneratedClass__DungeonPanelClusterReveal__DungeonPanelClusterReveal_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelClusterReveal_C, UberGraphFrame, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelClusterReveal_C, Hide, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelClusterReveal_C, Reveal, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelClusterReveal_C, show, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelClusterReveal_C, ClusterAffixAnchor, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelClusterReveal_C, ClusterTitle, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelClusterReveal_C, DungeonChallengeLevelListWidget_46, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelClusterReveal_C, FazeerAnchor, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelClusterReveal_C, NextStateButton, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelClusterReveal_C, RevealButton, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelClusterReveal_C, RulesContainer, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelClusterReveal_C, TLImage_1, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelClusterReveal_C, TLImage_140, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelClusterReveal_C, TLImage_142, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelClusterReveal_C, TLImage_680, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelClusterReveal_C, TLImage_682, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelClusterReveal_C, TLImage_684, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelClusterReveal_C, TLTextBlock_163, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelClusterReveal_C, TLTextBlock_224, 0x0890);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonPanelClusterReveal_C, 0x0898);
		}

		// class Ass_charactercreate_sequencer_C : public ACinematicActor
		TEST_METHOD(BlueprintGeneratedClass__ss_charactercreate_sequencer__ss_charactercreate_sequencer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_charactercreate_sequencer_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_charactercreate_sequencer_C, FakeBow, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_charactercreate_sequencer_C, Digitus, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_charactercreate_sequencer_C, WeaponR, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_charactercreate_sequencer_C, Shoulders, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_charactercreate_sequencer_C, Feet, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_charactercreate_sequencer_C, hands, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_charactercreate_sequencer_C, Head, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_charactercreate_sequencer_C, Pants, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_charactercreate_sequencer_C, Hair, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_charactercreate_sequencer_C, Torso, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_charactercreate_sequencer_C, DefaultRootComponent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_charactercreate_sequencer_C, HairMesh, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_charactercreate_sequencer_C, HeadMesh, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_charactercreate_sequencer_C, TorsoMesh, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_charactercreate_sequencer_C, PantsMesh, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_charactercreate_sequencer_C, WeaponMesh, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_charactercreate_sequencer_C, handsmesh, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_charactercreate_sequencer_C, FeetMesh, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_charactercreate_sequencer_C, ShoulderMesh, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_charactercreate_sequencer_C, DyeSet, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_charactercreate_sequencer_C, Customization, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ass_charactercreate_sequencer_C, 0x02E8);
		}

		// class Agob_bf_props1_f_01bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_bf_props1_f_01bp__gob_bf_props1_f_01bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_bf_props1_f_01bp_C, 0x0268);
		}

		// class Aio_prop_fencebroken_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_fencebroken_01_bp__io_prop_fencebroken_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_fencebroken_01_bp_C, 0x0268);
		}

		// class Anpcsquash_03_bp_C : public Anpcbasevendor_bp_C
		TEST_METHOD(BlueprintGeneratedClass__npcsquash_03_bp__npcsquash_03_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Anpcsquash_03_bp_C, 0x04C8);
		}

		// class Agob_bf_props1_c_03_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_bf_props1_c_03_bp__gob_bf_props1_c_03_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_bf_props1_c_03_bp_C, 0x0268);
		}

		// class Aio_floor_doubledock_03_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_floor_doubledock_03_bp__io_floor_doubledock_03_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_floor_doubledock_03_bp_C, 0x0268);
		}

		// class Ucc_f_startingitems_charactercreate_C : public UPlayerStartingItems_C
		TEST_METHOD(BlueprintGeneratedClass__cc_f_startingitems_charactercreate__cc_f_startingitems_charactercreate_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ucc_f_startingitems_charactercreate_C, 0x0078);
		}

		// class Aio_prop_fishb_animated02_bp_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__io_prop_fishb_animated02_bp__io_prop_fishb_animated02_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_fishb_animated02_bp_C, Box, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_fishb_animated02_bp_C, SkeletalMesh, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_fishb_animated02_bp_C, DefaultSceneRoot, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_fishb_animated02_bp_C, 0x0238);
		}

		// class URelicActiveWidget_C : public USkillActiveWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__RelicActiveWidget__RelicActiveWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicActiveWidget_C, RelicAvailable, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicActiveWidget_C, Backgrnd, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicActiveWidget_C, Background, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicActiveWidget_C, glow, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicActiveWidget_C, GlowTop, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicActiveWidget_C, HotkeyWidget, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicActiveWidget_C, RelicDisabled, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicActiveWidget_C, RelicIcon, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicActiveWidget_C, RelicProgress, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicActiveWidget_C, ResourceBarWidget, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicActiveWidget_C, TLImage_213, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicActiveWidget_C, ShowHotkey, 0x06D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URelicActiveWidget_C, 0x06D1);
		}

		// class UDungeonMenuFrame_C : public UDungeonWidgetBase
		TEST_METHOD(WidgetBlueprintGeneratedClass__DungeonMenuFrame__DungeonMenuFrame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMenuFrame_C, UberGraphFrame, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMenuFrame_C, ReverseBossTransition, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMenuFrame_C, BossTransition, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMenuFrame_C, BossLoop, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMenuFrame_C, RegularLoop, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMenuFrame_C, TLImage_1, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMenuFrame_C, TLImage_76, 0x06C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonMenuFrame_C, 0x06D0);
		}

		// class UFortEditButton_C : public UFortCustomizationButton
		TEST_METHOD(WidgetBlueprintGeneratedClass__FortEditButton__FortEditButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditButton_C, UberGraphFrame, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditButton_C, CustomizeButton, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditButton_C, CustomizeWidget, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditButton_C, CustomizeWidgetold, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditButton_C, HotkeyCustomize, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditButton_C, HotkeyOtherOwner, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditButton_C, OtherOwnerButton, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditButton_C, OtherOwnerWidget, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditButton_C, OtherOwnerWidgetold, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditButton_C, TextBlockOtherOwner, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditButton_C, TLImage_298, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditButton_C, TLImage_300, 0x0910);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFortEditButton_C, 0x0918);
		}

		// class UNotifications_C : public UNotificationsWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Notifications__Notifications_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotifications_C, UberGraphFrame, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotifications_C, NewLegendaryAffix, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotifications_C, AddSkill, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotifications_C, SKILLPlump, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotifications_C, ClaimableCrafting, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotifications_C, ClaimableCraftingBox, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotifications_C, glow, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotifications_C, InboxMail, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotifications_C, InboxNotificationBox, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotifications_C, InvalidationBox_1, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotifications_C, InventoryFull, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotifications_C, InventoryFullBox, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotifications_C, LegendaryAffixAvailableBox, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotifications_C, LegendaryAffixButton, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotifications_C, LegendaryAffixText, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotifications_C, SkillAvailable, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotifications_C, SkillAvailableBox, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotifications_C, SocialHUDNotifyBlueprint, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotifications_C, SocialNotificationBox, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotifications_C, TLButton_1, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotifications_C, TLButton_2, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotifications_C, TLButton_137, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotifications_C, TLImage_2, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotifications_C, TLImage_3, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotifications_C, TLImage_4, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotifications_C, TransmogDyeNoticeBox, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotifications_C, UnclaimedContractRewards, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotifications_C, UnclaimedContractRewardsBox, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotifications_C, SkillAvailableTooltip, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotifications_C, InventoryFullTooltip, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotifications_C, UnreadMailTooltip, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotifications_C, CraftingInProgressTooltip, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotifications_C, EmberSkillAvailableTooltip, 0x07D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNotifications_C, 0x07F0);
		}

		// class UGameMessageContainer_C : public UMessageContainerWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__GameMessageContainer__GameMessageContainer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMessageContainer_C, HidePlaceholder, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMessageContainer_C, CurrencyPickUpWidget, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMessageContainer_C, EmberWeaponMessage, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMessageContainer_C, ItemPIckUpWidget, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMessageContainer_C, LorePlayer, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMessageContainer_C, Overlay_1, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMessageContainer_C, PlayerNotification, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMessageContainer_C, TraitNotificiation, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameMessageContainer_C, 0x0698);
		}

		// class UStatusEffectBar_Debuffs_Monster_C : public UStatusEffectBar
		TEST_METHOD(WidgetBlueprintGeneratedClass__StatusEffectBar_Debuffs_Monster__StatusEffectBar_Debuffs_Monster_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffectBar_Debuffs_Monster_C, StatusEffectList, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffectBar_Debuffs_Monster_C, 0x0680);
		}

		// class UTargetInfoWidget_Harvest_C : public UTargetInfoWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TargetInfoWidget_Harvest__TargetInfoWidget_Harvest_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Harvest_C, DescriptionText, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Harvest_C, GadgetBackground, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Harvest_C, HarvestFrame, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Harvest_C, HPBar, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Harvest_C, Name, 0x06E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTargetInfoWidget_Harvest_C, 0x06F0);
		}

		// class UHPBarFragment_C : public UHPBarFragment
		TEST_METHOD(WidgetBlueprintGeneratedClass__HPBarFragment__HPBarFragment_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHPBarFragment_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHPBarFragment_C, Destroy, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHPBarFragment_C, BarSizebox, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHPBarFragment_C, HPBar, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHPBarFragment_C, HPBarFlash, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHPBarFragment_C, OuterBox, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHPBarFragment_C, 0x02A0);
		}

		// class ULightSubHeader0TextStyle_C : public UTLTextStyle
		TEST_METHOD(BlueprintGeneratedClass__LightSubHeader0TextStyle__LightSubHeader0TextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightSubHeader0TextStyle_C, 0x00A8);
		}

		// class URelicPowerChargeTooltip_C : public UActiveTraitTooltipWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__RelicPowerChargeTooltip__RelicPowerChargeTooltip_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicPowerChargeTooltip_C, CurrentCharge, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicPowerChargeTooltip_C, MaxCharge, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicPowerChargeTooltip_C, TLTextBlock_4, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicPowerChargeTooltip_C, TLTextBlock_5, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URelicPowerChargeTooltip_C, 0x06A0);
		}

		// class UDungeonPanelChallengeSelect_C : public UDungeonChallengeSelectPanel
		TEST_METHOD(WidgetBlueprintGeneratedClass__DungeonPanelChallengeSelect__DungeonPanelChallengeSelect_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelChallengeSelect_C, UberGraphFrame, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelChallengeSelect_C, CardDealingAnimationFromBorder, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelChallengeSelect_C, CardForHidingAnimation, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelChallengeSelect_C, ClusterAnchor, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelChallengeSelect_C, DungeonCardBackShared_C_543, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelChallengeSelect_C, DungeonCardBackShared_C_544, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelChallengeSelect_C, DungeonCardBackShared_C_545, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelChallengeSelect_C, DungeonChallengeRulesCardListWidget_247, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelChallengeSelect_C, DungeonLevelSelector, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelChallengeSelect_C, DungeonRulesCardSet, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelChallengeSelect_C, FazeerAnchor, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelChallengeSelect_C, glow, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelChallengeSelect_C, TLImage_1, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelChallengeSelect_C, TLImage_2, 0x0788);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonPanelChallengeSelect_C, 0x0790);
		}

		// class UDungeonRulesCardSet_C : public UDungeonChallengeRulesCardSet
		TEST_METHOD(WidgetBlueprintGeneratedClass__DungeonRulesCardSet__DungeonRulesCardSet_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonRulesCardSet_C, DungeonChallengeRulesCardListWidget_50, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonRulesCardSet_C, DungeonRulesCard, 0x0660);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonRulesCardSet_C, 0x0668);
		}

		// class ATLPlayerControllerBlueprint_C : public ATLPlayerController
		TEST_METHOD(BlueprintGeneratedClass__TLPlayerControllerBlueprint__TLPlayerControllerBlueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerControllerBlueprint_C, UberGraphFrame, 0x0F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerControllerBlueprint_C, TLTransmogDye, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerControllerBlueprint_C, CritterSpawner, 0x0F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerControllerBlueprint_C, DungeonPlayer, 0x0F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerControllerBlueprint_C, Platform, 0x0F68);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerControllerBlueprint_C, LorePlayer, 0x0F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerControllerBlueprint_C, Friends, 0x0F78);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerControllerBlueprint_C, PlayerUINotification, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerControllerBlueprint_C, DefaultContractComponent, 0x0F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerControllerBlueprint_C, PlayerCrafting, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerControllerBlueprint_C, DefaultFortEditComponent, 0x0F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerControllerBlueprint_C, PlayerDialogue, 0x0FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerControllerBlueprint_C, UILight, 0x0FA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerControllerBlueprint_C, PlayerLevelSequenceWrapper, 0x0FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerControllerBlueprint_C, MetricsLogger, 0x0FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerControllerBlueprint_C, PlayerSave, 0x0FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerControllerBlueprint_C, NarratorTraitMonitorComponent, 0x0FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerControllerBlueprint_C, NarratorComponent, 0x0FD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerControllerBlueprint_C, Chat, 0x0FD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerControllerBlueprint_C, DefaultPlayerPortalComponent, 0x0FE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerControllerBlueprint_C, PlayerQuest, 0x0FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerControllerBlueprint_C, TLTravel, 0x0FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerControllerBlueprint_C, CombatConductorHandler, 0x0FF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerControllerBlueprint_C, BossFight, 0x1000);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerControllerBlueprint_C, MonsterManagerPlayer, 0x1008);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerControllerBlueprint_C, Conductor, 0x1010);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerControllerBlueprint_C, PlayerLevelManager, 0x1018);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerControllerBlueprint_C, CanEditSkills, 0x1020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATLPlayerControllerBlueprint_C, 0x1021);
		}

		// class UCamera_Shake_Pound_C : public UMatineeCameraShake
		TEST_METHOD(BlueprintGeneratedClass__Camera_Shake_Pound__Camera_Shake_Pound_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCamera_Shake_Pound_C, 0x0180);
		}

		// class UCharacterCreatePickClass_C : public UMainMenuCharacterCreatePickClassWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CharacterCreatePickClass__CharacterCreatePickClass_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreatePickClass_C, UberGraphFrame, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreatePickClass_C, FiligreeLeft, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreatePickClass_C, HeaderText, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreatePickClass_C, MainMenuCharacterSlotListWidget_1, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreatePickClass_C, SelectButton, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreatePickClass_C, StartButton, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreatePickClass_C, TLImage_2, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterCreatePickClass_C, 0x0698);
		}

		// class ASFX_Elemental_ELECTRIC_C : public ATLEffect
		TEST_METHOD(BlueprintGeneratedClass__SFX_Elemental_ELECTRIC__SFX_Elemental_ELECTRIC_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASFX_Elemental_ELECTRIC_C, FMODAudio, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASFX_Elemental_ELECTRIC_C, DefaultSceneRoot, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASFX_Elemental_ELECTRIC_C, 0x0270);
		}

		// class UCombatCriticalNotifyComponent_C : public UCombatNotifyWidgetComponent
		TEST_METHOD(BlueprintGeneratedClass__CombatCriticalNotifyComponent__CombatCriticalNotifyComponent_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCombatCriticalNotifyComponent_C, 0x0670);
		}

		// class UCombatDamageNotifyComponent_C : public UCombatNotifyWidgetComponent
		TEST_METHOD(BlueprintGeneratedClass__CombatDamageNotifyComponent__CombatDamageNotifyComponent_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCombatDamageNotifyComponent_C, 0x0670);
		}

		// class UCombatInvulnerableNotifyComponent_C : public UCombatNotifyWidgetComponent
		TEST_METHOD(BlueprintGeneratedClass__CombatInvulnerableNotifyComponent__CombatInvulnerableNotifyComponent_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCombatInvulnerableNotifyComponent_C, 0x0670);
		}

		// class UCombatEvadeNotify_C : public UFloatingTextWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CombatEvadeNotify__CombatEvadeNotify_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombatEvadeNotify_C, UberGraphFrame, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombatEvadeNotify_C, RiseAndFade, 0x0658);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCombatEvadeNotify_C, 0x0660);
		}

		// class UCombatBlockNotify_C : public UFloatingTextWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CombatBlockNotify__CombatBlockNotify_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombatBlockNotify_C, UberGraphFrame, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombatBlockNotify_C, RiseAndFade, 0x0658);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCombatBlockNotify_C, 0x0660);
		}

		// class ACameraLightRig_DuskMage_bp_C : public ACameraLightRig_Base_bp_C
		TEST_METHOD(BlueprintGeneratedClass__CameraLightRig_DuskMage_bp__CameraLightRig_DuskMage_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_DuskMage_bp_C, SceneCaptureComponent2D, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_DuskMage_bp_C, SkeletalMesh, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_DuskMage_bp_C, Chest, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_DuskMage_bp_C, Boots, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_DuskMage_bp_C, Pants, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_DuskMage_bp_C, Helm, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_DuskMage_bp_C, Gloves, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_DuskMage_bp_C, CharacterSetup, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraLightRig_DuskMage_bp_C, 0x0290);
		}

		// class ACameraLightRig_Base_bp_C : public APortraitLighting
		TEST_METHOD(BlueprintGeneratedClass__CameraLightRig_Base_bp__CameraLightRig_Base_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_Base_bp_C, FillLight, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_Base_bp_C, RimLight, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_Base_bp_C, KeyLight, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_Base_bp_C, LightSetup, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_Base_bp_C, DefaultSceneRoot, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraLightRig_Base_bp_C, 0x0250);
		}

		// class APlayerPortrait_CursedCaptain_bp_C : public APlayerPortrait_Base_bp_C
		TEST_METHOD(BlueprintGeneratedClass__PlayerPortrait_CursedCaptain_bp__PlayerPortrait_CursedCaptain_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerPortrait_CursedCaptain_bp_C, UberGraphFrame, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerPortrait_CursedCaptain_bp_C, 0x0418);
		}

		// class UFullScreenVideo_C : public UFullscreenVideoWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__FullScreenVideo__FullScreenVideo_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFullScreenVideo_C, BlackBackground, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFullScreenVideo_C, CinematicConfirmation, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFullScreenVideo_C, Video, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFullScreenVideo_C, 0x0680);
		}

		// class Aio_yappercell_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_yappercell_01_bp__io_yappercell_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_yappercell_01_bp_C, 0x0268);
		}

		// class ABaseMonster_C : public ATLCharacter
		TEST_METHOD(BlueprintGeneratedClass__BaseMonster__BaseMonster_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseMonster_C, UberGraphFrame, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseMonster_C, BlobShadow, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseMonster_C, HitpointBar, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseMonster_C, AudioImportance, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseMonster_C, MaterialManager, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseMonster_C, Spawn_Skills, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseMonster_C, Proc, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseMonster_C, SkillList, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseMonster_C, Base_Skills, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseMonster_C, ClickCapsule, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseMonster_C, AudioEffectMap, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseMonster_C, TLPathFollowing, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseMonster_C, DissolveStatus_Opacity_CE7905594E6BDC3598B8319E9B9BDEF2, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseMonster_C, DissolveStatus_Dissolve_CE7905594E6BDC3598B8319E9B9BDEF2, 0x0794);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseMonster_C, DissolveStatus__Direction_CE7905594E6BDC3598B8319E9B9BDEF2, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseMonster_C, UnknownData_LFDE, 0x0799);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseMonster_C, DissolveStatus, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseMonster_C, Timeline_0_Dissolve_D166019E4B0B676F8A3DF9A121EADBFF, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseMonster_C, Timeline_0__Direction_D166019E4B0B676F8A3DF9A121EADBFF, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseMonster_C, UnknownData_67VJ, 0x07AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseMonster_C, Timeline_1, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseMonster_C, DissolveTimeline_Opacity_4794432846F19E2930A1E8A871C60215, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseMonster_C, DissolveTimeline_Dissolve_4794432846F19E2930A1E8A871C60215, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseMonster_C, DissolveTimeline__Direction_4794432846F19E2930A1E8A871C60215, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseMonster_C, UnknownData_KHZ3, 0x07C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseMonster_C, DissolveTimeline, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseMonster_C, DeathLocation, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseMonster_C, UnknownData_JBB3, 0x07DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseMonster_C, MonsterMaterial, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseMonster_C, MeshLocation, 0x07E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseMonster_C, 0x07F4);
		}

		// class Anpcimperialguard_02_charcreate_01_bp_C : public Anpcimperialguard_01_bp_C
		TEST_METHOD(BlueprintGeneratedClass__npcimperialguard_02_charcreate_01_bp__npcimperialguard_02_charcreate_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Anpcimperialguard_02_charcreate_01_bp_C, 0x07F4);
		}

		// class AEndlessDungeonPortal_C : public AMapWorksPortal_C
		TEST_METHOD(BlueprintGeneratedClass__EndlessDungeonPortal__EndlessDungeonPortal_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEndlessDungeonPortal_C, 0x0690);
		}

		// class USkill_Charge_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_Charge__Skill_Charge_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Charge_C, ChargeSpeed, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Charge_C, DistancePastTarget, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Charge_C, ChargePastTarget, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Charge_C, UseTimeBasedCharge, 0x0549);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Charge_C, UnknownData_GWFY, 0x054A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Charge_C, ChargeTime, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Charge_C, UseRandomizedTarget, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Charge_C, UnknownData_BVST, 0x0551);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Charge_C, RandomizeRadius, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Charge_C, CheckMontageOnTick, 0x0558);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Charge_C, 0x0559);
		}

		// class UStatusEffect_Fear_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Fear__StatusEffect_Fear_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Fear_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Fear_C, 0x0288);
		}

		// class Ugobrider_anim_bp_C : public UTLAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__gobrider_anim_bp__gobrider_anim_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugobrider_anim_bp_C, UberGraphFrame, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugobrider_anim_bp_C, AnimGraphNode_Root, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugobrider_anim_bp_C, AnimGraphNode_BlendSpacePlayer, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugobrider_anim_bp_C, TLAnimGraphNode_Slot, 0x0730);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ugobrider_anim_bp_C, 0x0780);
		}

		// class USkill_MeleeAttack_120cm_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_MeleeAttack_120cm__Skill_MeleeAttack_120cm_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_MeleeAttack_120cm_C, 0x0540);
		}

		// class UQuestRewardChoice_C : public UQuestRewardWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__QuestRewardChoice__QuestRewardChoice_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestRewardChoice_C, UberGraphFrame, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestRewardChoice_C, Button, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestRewardChoice_C, GenericResourceWidget, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestRewardChoice_C, TLBorder_1, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestRewardChoice_C, TLCheckBox_485, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestRewardChoice_C, Highlight, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestRewardChoice_C, Inactive, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestRewardChoice_C, HighlightCheck, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestRewardChoice_C, InactiveCheck, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestRewardChoice_C, OriginalCheckBox, 0x09E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestRewardChoice_C, 0x0F68);
		}

		// class AQuestRewardsChest_C : public ABaseClickableWithAnims_C
		TEST_METHOD(BlueprintGeneratedClass__QuestRewardsChest__QuestRewardsChest_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AQuestRewardsChest_C, UberGraphFrame, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AQuestRewardsChest_C, TLParticleSystem, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AQuestRewardsChest_C, MapMarker, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AQuestRewardsChest_C, QuestId, 0x04D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AQuestRewardsChest_C, 0x04E0);
		}

		// class ACheatRunner_C : public ATLCheatRunner
		TEST_METHOD(BlueprintGeneratedClass__CheatRunner__CheatRunner_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACheatRunner_C, DefaultSceneRoot, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACheatRunner_C, 0x0298);
		}

		// class UPlayerTravelLimbo_C : public UStatusEffectBase_C
		TEST_METHOD(BlueprintGeneratedClass__PlayerTravelLimbo__PlayerTravelLimbo_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerTravelLimbo_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerTravelLimbo_C, 0x0288);
		}

		// class AGamepadAButton_BP_C : public AGamepadInteractButtonWidget
		TEST_METHOD(BlueprintGeneratedClass__GamepadAButton_BP__GamepadAButton_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGamepadAButton_BP_C, 0x0230);
		}

		// class ADefaultWaitForLoadPawn_C : public AWaitForLoadPawn
		TEST_METHOD(BlueprintGeneratedClass__DefaultWaitForLoadPawn__DefaultWaitForLoadPawn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultWaitForLoadPawn_C, PlayerLevel, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultWaitForLoadPawn_C, TLTravel, 0x0738);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADefaultWaitForLoadPawn_C, 0x0740);
		}

		// class UDefaultFortEditComponent_C : public UFortEditComponent
		TEST_METHOD(BlueprintGeneratedClass__DefaultFortEditComponent__DefaultFortEditComponent_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultFortEditComponent_C, 0x0198);
		}

		// class ATLGameModeBlueprint_C : public ATLGameMode
		TEST_METHOD(BlueprintGeneratedClass__TLGameModeBlueprint__TLGameModeBlueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLGameModeBlueprint_C, ServerPerformanceMonitor, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLGameModeBlueprint_C, ZoneInstanceManager, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLGameModeBlueprint_C, TLServerPublisher, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLGameModeBlueprint_C, DefaultSceneRoot, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATLGameModeBlueprint_C, 0x03C8);
		}

		// class Agob_prop_rock_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_prop_rock_02_bp__gob_prop_rock_02_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_rock_02_bp_C, Box, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_prop_rock_02_bp_C, 0x0270);
		}

		// class Agob_prop_fallenlog_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_prop_fallenlog_01_bp__gob_prop_fallenlog_01_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_fallenlog_01_bp_C, Box, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_prop_fallenlog_01_bp_C, 0x0270);
		}

		// class Agob_prop_crategrp_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_prop_crategrp_02_bp__gob_prop_crategrp_02_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_crategrp_02_bp_C, Box3, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_crategrp_02_bp_C, Box2, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_crategrp_02_bp_C, Box1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_crategrp_02_bp_C, Box, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_prop_crategrp_02_bp_C, 0x0288);
		}

		// class USkill_BasicAttack_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_BasicAttack__Skill_BasicAttack_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_BasicAttack_C, 0x0540);
		}

		// class USkill_Spawn_Runout_C : public USkill_Spawn_C
		TEST_METHOD(BlueprintGeneratedClass__Skill_Spawn_Runout__Skill_Spawn_Runout_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Spawn_Runout_C, 0x0540);
		}

		// class Ass_f_charactercreate_C : public ACharacterCreate_Base_C
		TEST_METHOD(BlueprintGeneratedClass__ss_f_charactercreate__ss_f_charactercreate_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_f_charactercreate_C, UberGraphFrame, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_f_charactercreate_C, SkinnedBow, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ass_f_charactercreate_C, 0x0318);
		}

		// class Udm_m_startingitems_charactercreate_C : public Ufor_StartingItems_C
		TEST_METHOD(BlueprintGeneratedClass__dm_m_startingitems_charactercreate__dm_m_startingitems_charactercreate_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Udm_m_startingitems_charactercreate_C, 0x0078);
		}

		// class Adm_f_t1b_boots_bp_C : public Adm_BaseBoots_C
		TEST_METHOD(BlueprintGeneratedClass__dm_f_t1b_boots_bp__dm_f_t1b_boots_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Adm_f_t1b_boots_bp_C, 0x0428);
		}

		// class Adm_f_t1b_gloves_bp_C : public Adm_BaseGloves_C
		TEST_METHOD(BlueprintGeneratedClass__dm_f_t1b_gloves_bp__dm_f_t1b_gloves_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Adm_f_t1b_gloves_bp_C, 0x0438);
		}

		// class Aio_town_intro_2_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__io_town_intro_2_TLInstance_1__io_town_intro_2_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_town_intro_2_C, Hit, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_town_intro_2_C, 0x0229);
		}

		// class ABaseGloves_C : public ABaseArmor_C
		TEST_METHOD(BlueprintGeneratedClass__BaseGloves__BaseGloves_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseGloves_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseGloves_C, SkeletalMesh_left, 0x0430);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseGloves_C, 0x0438);
		}

		// class Acc_m_t1a_boots_bp_C : public Acc_BaseBoots_C
		TEST_METHOD(BlueprintGeneratedClass__cc_m_t1a_boots_bp__cc_m_t1a_boots_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Acc_m_t1a_boots_bp_C, 0x0428);
		}

		// class UCraftingRecipeDetailsWidget_C : public UCraftingRecipeDetailWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CraftingRecipeDetailsWidget__CraftingRecipeDetailsWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeDetailsWidget_C, UberGraphFrame, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeDetailsWidget_C, show, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeDetailsWidget_C, CraftingDetailsWidgetBase, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeDetailsWidget_C, EmberSkillWrapper, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeDetailsWidget_C, EmberWeaponSkills, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeDetailsWidget_C, TLImage_1, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeDetailsWidget_C, TLImage_2, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeDetailsWidget_C, ActionAreaVisibility, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeDetailsWidget_C, DetailsVisibility, 0x09F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeDetailsWidget_C, UnknownData_0S43, 0x09FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeDetailsWidget_C, FrameStyle, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeDetailsWidget_C, RecipeCostsVisibility, 0x0A08);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingRecipeDetailsWidget_C, 0x0A09);
		}

		// class Acc_f_t1a_chest_bp_C : public Acc_BaseChest_C
		TEST_METHOD(BlueprintGeneratedClass__cc_f_t1a_chest_bp__cc_f_t1a_chest_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Acc_f_t1a_chest_bp_C, 0x0428);
		}

		// class Acc_BaseChest_C : public ABaseChest_C
		TEST_METHOD(BlueprintGeneratedClass__cc_BaseChest__cc_BaseChest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Acc_BaseChest_C, 0x0428);
		}

		// class Adm_BaseHelm_C : public ABaseHelm_C
		TEST_METHOD(BlueprintGeneratedClass__dm_BaseHelm__dm_BaseHelm_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Adm_BaseHelm_C, 0x0428);
		}

		// class UDungeonCloudSwirl_C : public UDungeonWidgetBase
		TEST_METHOD(WidgetBlueprintGeneratedClass__DungeonCloudSwirl__DungeonCloudSwirl_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCloudSwirl_C, UberGraphFrame, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCloudSwirl_C, ReverseBossTransition, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCloudSwirl_C, BossTransition, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCloudSwirl_C, CloudSwirlLoop_Boss, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCloudSwirl_C, CloudSwirlLoop, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCloudSwirl_C, TLImage_1, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCloudSwirl_C, TLImage_2, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCloudSwirl_C, TLImage_3, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCloudSwirl_C, TLImage_4, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCloudSwirl_C, TLImage_5, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCloudSwirl_C, TLImage_6, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCloudSwirl_C, TLImage_7, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCloudSwirl_C, TLImage_8, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCloudSwirl_C, TLImage_9, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCloudSwirl_C, TLImage_10, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCloudSwirl_C, TLImage_11, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCloudSwirl_C, TLImage_12, 0x0718);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonCloudSwirl_C, 0x0720);
		}

		// class Arm_f_t0a_helm_bp_C : public Arm_BaseHelm_C
		TEST_METHOD(BlueprintGeneratedClass__rm_f_t0a_helm_bp__rm_f_t0a_helm_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Arm_f_t0a_helm_bp_C, 0x0428);
		}

		// class UButtonSmallTextStyle2_C : public UTLTextStyle
		TEST_METHOD(BlueprintGeneratedClass__ButtonSmallTextStyle2__ButtonSmallTextStyle2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonSmallTextStyle2_C, 0x00A8);
		}

		// class UTargetInfoWidget_Basic_C : public UTargetInfoWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TargetInfoWidget_Basic__TargetInfoWidget_Basic_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Basic_C, Basic, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Basic_C, DecoLeft, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Basic_C, DecoRight, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Basic_C, DescriptionText, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Basic_C, NameText, 0x06E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTargetInfoWidget_Basic_C, 0x06F0);
		}

		// class UCraftingEntryContainer_C : public UCraftingEntryContainerWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CraftingEntryContainer__CraftingEntryContainer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingEntryContainer_C, UberGraphFrame, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingEntryContainer_C, CraftingQueueEntryWidget, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingEntryContainer_C, CraftingRecipeWidget, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingEntryContainer_C, CraftingWidgetSwitcher, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingEntryContainer_C, 0x0680);
		}

		// class UFrameDecorativeA_Highlight_Style_C : public UFrameDecorativeA_Style_C
		TEST_METHOD(BlueprintGeneratedClass__FrameDecorativeA_Highlight_Style__FrameDecorativeA_Highlight_Style_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrameDecorativeA_Highlight_Style_C, 0x00F8);
		}

		// class Ass_BaseBoots_C : public ABaseBoots_C
		TEST_METHOD(BlueprintGeneratedClass__ss_BaseBoots__ss_BaseBoots_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ass_BaseBoots_C, 0x0428);
		}

		// class UPartyMemberWidget_C : public UPartyMemberWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PartyMemberWidget__PartyMemberWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberWidget_C, UberGraphFrame, 0x18D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberWidget_C, AccountNameText, 0x18E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberWidget_C, ContextMenuAnchor, 0x18E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberWidget_C, CurrentArea, 0x18F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberWidget_C, DisplayedName, 0x18F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberWidget_C, InvalidationBox_1, 0x1900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberWidget_C, MiniPetInfoWidget, 0x1908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberWidget_C, PartyMemberHUDInfoWidget, 0x1910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberWidget_C, TLImage_191, 0x1918);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyMemberWidget_C, 0x1920);
		}

		// class Ass_f_t2b_boots_bp_C : public Ass_BaseBoots_C
		TEST_METHOD(BlueprintGeneratedClass__ss_f_t2b_boots_bp__ss_f_t2b_boots_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ass_f_t2b_boots_bp_C, 0x0428);
		}

		// class Ass_f_t2b_pants_bp_C : public Ass_BasePants_C
		TEST_METHOD(BlueprintGeneratedClass__ss_f_t2b_pants_bp__ss_f_t2b_pants_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ass_f_t2b_pants_bp_C, 0x0428);
		}

		// class UCursedCaptainResourcePipFlip_C : public UResourcePip
		TEST_METHOD(WidgetBlueprintGeneratedClass__CursedCaptainResourcePipFlip__CursedCaptainResourcePipFlip_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourcePipFlip_C, FlipSpent, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourcePipFlip_C, Flip, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourcePipFlip_C, glow, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourcePipFlip_C, TLImage_54, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourcePipFlip_C, TLImage_57, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCursedCaptainResourcePipFlip_C, 0x0298);
		}

		// class USkillActiveWidgetBlueprint_C : public USkillActiveWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SkillActiveWidgetBlueprint__SkillActiveWidgetBlueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillActiveWidgetBlueprint_C, UberGraphFrame, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillActiveWidgetBlueprint_C, CannotUseSkillOverlayWidget, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillActiveWidgetBlueprint_C, ChargePips, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillActiveWidgetBlueprint_C, CooldownOverlay, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillActiveWidgetBlueprint_C, CooldownText, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillActiveWidgetBlueprint_C, EDLock, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillActiveWidgetBlueprint_C, HotkeyWidget, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillActiveWidgetBlueprint_C, SkillDisplayWidget, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillActiveWidgetBlueprint_C, ShowHotkey, 0x06B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillActiveWidgetBlueprint_C, 0x06B9);
		}

		// class UDuskMageResourceBar_C : public UDuskMageResourceBar
		TEST_METHOD(WidgetBlueprintGeneratedClass__DuskMageResourceBar__DuskMageResourceBar_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDuskMageResourceBar_C, ChargesBG, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDuskMageResourceBar_C, DarkCharge, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDuskMageResourceBar_C, Filigree, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDuskMageResourceBar_C, LightCharge, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDuskMageResourceBar_C, ResourceGlobe, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDuskMageResourceBar_C, TooltipMenuAnchor, 0x06F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDuskMageResourceBar_C, 0x0700);
		}

		// class UForgedSteamLoop_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ForgedSteamLoop__ForgedSteamLoop_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedSteamLoop_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedSteamLoop_C, Loop, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedSteamLoop_C, TLImage_1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedSteamLoop_C, TLImage_113, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForgedSteamLoop_C, 0x0280);
		}

		// class UStatusEffect_Legendary_ManaOverload_Dark_C : public UStatusEffect_Legendary_ManaOverload_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Legendary_ManaOverload_Dark__StatusEffect_Legendary_ManaOverload_Dark_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Legendary_ManaOverload_Dark_C, 0x0280);
		}

		// class UStatusEffect_ChargeBar_Dark_C : public UStatusEffect_ChargeBar_Master_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_ChargeBar_Dark__StatusEffect_ChargeBar_Dark_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_ChargeBar_Dark_C, 0x0295);
		}

		// class AMissile_DoubleCross_C : public AMissileBase_C
		TEST_METHOD(BlueprintGeneratedClass__Missile_DoubleCross__Missile_DoubleCross_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_DoubleCross_C, UberGraphFrame, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_DoubleCross_C, PointLight, 0x0688);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMissile_DoubleCross_C, 0x0690);
		}

		// class USkill_Sharpshooter_Assassinate_Fallback_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_Sharpshooter_Assassinate_Fallback__Skill_Sharpshooter_Assassinate_Fallback_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Sharpshooter_Assassinate_Fallback_C, FallbackStatus, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Sharpshooter_Assassinate_Fallback_C, 0x0548);
		}

		// class UStatusEffect_Reviving_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Reviving__StatusEffect_Reviving_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Reviving_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Reviving_C, 0x0288);
		}

		// class Anpckenik_intro_bp_C : public Anpc_quest_base_C
		TEST_METHOD(BlueprintGeneratedClass__npckenik_intro_bp__npckenik_intro_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Anpckenik_intro_bp_C, QuipBox, 0x04C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Anpckenik_intro_bp_C, 0x04D0);
		}

		// class UStatusEfect_Sharpshooter_ScoutPoison_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEfect_Sharpshooter_ScoutPoison__StatusEfect_Sharpshooter_ScoutPoison_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEfect_Sharpshooter_ScoutPoison_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEfect_Sharpshooter_ScoutPoison_C, 0x0288);
		}

		// class USkill_Sharpshooter_Legendary_PoisonPopperDamage_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_Sharpshooter_Legendary_PoisonPopperDamage__Skill_Sharpshooter_Legendary_PoisonPopperDamage_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Sharpshooter_Legendary_PoisonPopperDamage_C, 0x0540);
		}

		// class APotionPickupHyvid_C : public ABasePotionPickup_C
		TEST_METHOD(BlueprintGeneratedClass__PotionPickupHyvid__PotionPickupHyvid_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APotionPickupHyvid_C, TLProjectileMovement_1, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APotionPickupHyvid_C, 0x0248);
		}

		// class ABaseAutoPickupItem_C : public AItemBase_C
		TEST_METHOD(BlueprintGeneratedClass__BaseAutoPickupItem__BaseAutoPickupItem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseAutoPickupItem_C, UberGraphFrame, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseAutoPickupItem_C, Capsule, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseAutoPickupItem_C, ParticleSystem_1, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseAutoPickupItem_C, StaticMesh, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseAutoPickupItem_C, SkeletalMesh, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseAutoPickupItem_C, Flippy_Animation, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseAutoPickupItem_C, 0x0428);
		}

		// class Agob_prop_tree_b_01_bp_C : public ABaseHideableObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_prop_tree_b_01_bp__gob_prop_tree_b_01_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_tree_b_01_bp_C, UberGraphFrame, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_tree_b_01_bp_C, BlobShadow7, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_tree_b_01_bp_C, ParticleSystem, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_tree_b_01_bp_C, stump, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_tree_b_01_bp_C, Sphere, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_tree_b_01_bp_C, Leaves, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_tree_b_01_bp_C, LeafMat, 0x0408);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_prop_tree_b_01_bp_C, 0x0410);
		}

		// class Agob_rr_props1_traps_01_bp_C : public ABaseBreakable_C
		TEST_METHOD(BlueprintGeneratedClass__gob_rr_props1_traps_01_bp__gob_rr_props1_traps_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_rr_props1_traps_01_bp_C, 0x0468);
		}

		// class Agob_ash_drop_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_ash_drop_01_bp__gob_ash_drop_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_ash_drop_01_bp_C, 0x0268);
		}

		// class Agob_bf_props2_a_01bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_bf_props2_a_01bp__gob_bf_props2_a_01bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_bf_props2_a_01bp_C, 0x0268);
		}

		// class Agob_prop_tree_01_bp_C : public ABaseHideableObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_prop_tree_01_bp__gob_prop_tree_01_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_tree_01_bp_C, UberGraphFrame, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_tree_01_bp_C, vfx_treeLeaves_01, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_tree_01_bp_C, stump, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_tree_01_bp_C, Sphere, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_tree_01_bp_C, Leaves, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_tree_01_bp_C, LeafMat, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_prop_tree_01_bp_C, 0x0408);
		}

		// class USkill_Scout_C : public USkill_Sharpshooter_Adventurer_Base_C
		TEST_METHOD(BlueprintGeneratedClass__Skill_Scout__Skill_Scout_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Scout_C, UnknownData_XLM7, 0x0559);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Scout_C, damage1, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Scout_C, statuseffect_duration, 0x0560);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Scout_C, 0x0564);
		}

		// class UStatusEffect_Shasta_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Shasta__StatusEffect_Shasta_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Shasta_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Shasta_C, 0x0288);
		}

		// class USharpshooterShasta_inv_C : public UTLInventoryContainerMinions
		TEST_METHOD(BlueprintGeneratedClass__SharpshooterShasta_inv__SharpshooterShasta_inv_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USharpshooterShasta_inv_C, 0x01F8);
		}

		// class Upetstored_inv_C : public UTLInventoryContainerPetsStored
		TEST_METHOD(BlueprintGeneratedClass__petstored_inv__petstored_inv_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Upetstored_inv_C, 0x0298);
		}

		// class AMissile_LegendaryMegaBuster_Stage1_C : public AMissileBase_C
		TEST_METHOD(BlueprintGeneratedClass__Missile_LegendaryMegaBuster_Stage1__Missile_LegendaryMegaBuster_Stage1_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_LegendaryMegaBuster_Stage1_C, UberGraphFrame, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_LegendaryMegaBuster_Stage1_C, FMODAudio, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_LegendaryMegaBuster_Stage1_C, PointLight, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_LegendaryMegaBuster_Stage1_C, ParticleSystem, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_LegendaryMegaBuster_Stage1_C, Rotation, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_LegendaryMegaBuster_Stage1_C, Random, 0x06AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMissile_LegendaryMegaBuster_Stage1_C, 0x06B4);
		}

		// class AMissileBase_C : public AMissile
		TEST_METHOD(BlueprintGeneratedClass__MissileBase__MissileBase_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMissileBase_C, 0x0680);
		}

		// class UStatusEffect_CanBeRevived_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_CanBeRevived__StatusEffect_CanBeRevived_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_CanBeRevived_C, CanBeRevivedEffect, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_CanBeRevived_C, 0x0350);
		}

		// class UStatusEffect_ReviveExpire_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_ReviveExpire__StatusEffect_ReviveExpire_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_ReviveExpire_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_ReviveExpire_C, UnknownData_GL6I, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_ReviveExpire_C, CanBeRevivedEffect, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_ReviveExpire_C, 0x0360);
		}

		// class AMissile_Forged_SlugShot_C : public AMissileBase_C
		TEST_METHOD(BlueprintGeneratedClass__Missile_Forged_SlugShot__Missile_Forged_SlugShot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_Forged_SlugShot_C, UberGraphFrame, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_Forged_SlugShot_C, ParticleSystem, 0x0688);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMissile_Forged_SlugShot_C, 0x0690);
		}

		// class UStatusEffect_BossRoom_Monster_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_BossRoom_Monster__StatusEffect_BossRoom_Monster_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_BossRoom_Monster_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_BossRoom_Monster_C, 0x0288);
		}

		// class UStatusEffect_Forged_PoisonDartDamage_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Forged_PoisonDartDamage__StatusEffect_Forged_PoisonDartDamage_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Forged_PoisonDartDamage_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Forged_PoisonDartDamage_C, 0x0288);
		}

		// class USkill_Legendary_ConsecrationPoisonNova_C : public UBaseProcSkill_C
		TEST_METHOD(BlueprintGeneratedClass__Skill_Legendary_ConsecrationPoisonNova__Skill_Legendary_ConsecrationPoisonNova_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Legendary_ConsecrationPoisonNova_C, 0x0560);
		}

		// class USkill_DuskMageBase_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_DuskMageBase__Skill_DuskMageBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_DuskMageBase_C, CheckForWeapon, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_DuskMageBase_C, 0x0541);
		}

		// class USkill_DuskMageLight_Base_C : public USkill_DuskMageBase_C
		TEST_METHOD(BlueprintGeneratedClass__Skill_DuskMageLight_base__Skill_DuskMageLight_Base_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_DuskMageLight_Base_C, 0x0541);
		}

		// class USkill_Consecration_C : public USkill_DuskMageLight_Base_C
		TEST_METHOD(BlueprintGeneratedClass__Skill_Consecration__Skill_Consecration_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Consecration_C, UnknownData_ZLKE, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Consecration_C, ShapeDuration, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Consecration_C, DAMAGEBONUS, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Consecration_C, OtherPlayerDamageBonus, 0x054C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Consecration_C, 0x0550);
		}

		// class UStatusEffect_Forged_VentFurnaceBlastHeatIncrease_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Forged_VentFurnaceBlastHeatIncrease__StatusEffect_Forged_VentFurnaceBlastHeatIncrease_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Forged_VentFurnaceBlastHeatIncrease_C, 0x0280);
		}

		// class Aio_floor_doubledock_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_floor_doubledock_02_bp__io_floor_doubledock_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_floor_doubledock_02_bp_C, 0x0268);
		}

		// class ASkillShape_Consecration_Larger_C : public ASkillShape_Consecration_C
		TEST_METHOD(BlueprintGeneratedClass__SkillShape_Consecration_Larger__SkillShape_Consecration_Larger_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkillShape_Consecration_Larger_C, 0x02B0);
		}

		// class Aw_hammer_2h_greymallet_t0a_bp_C : public AWeaponHammerBase_C
		TEST_METHOD(BlueprintGeneratedClass__w_hammer_2h_greymallet_t0a_bp__w_hammer_2h_greymallet_t0a_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aw_hammer_2h_greymallet_t0a_bp_C, 0x0450);
		}

		// class UDye_Undies_C : public UDye
		TEST_METHOD(BlueprintGeneratedClass__Dye_Undies__Dye_Undies_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDye_Undies_C, 0x03F8);
		}

		// class Aio_floor_dock_ropes_02b_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_floor_dock_ropes_02b_bp__io_floor_dock_ropes_02b_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_floor_dock_ropes_02b_bp_C, 0x0268);
		}

		// class Aio_wall_trim_05x05_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_wall_trim_05x05_01_bp__io_wall_trim_05x05_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_wall_trim_05x05_01_bp_C, 0x0268);
		}

		// class Aio_wall_trim_05x05_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_wall_trim_05x05_02_bp__io_wall_trim_05x05_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_wall_trim_05x05_02_bp_C, 0x0268);
		}

		// class Adm_f_t1c_pants_bp_C : public Adm_BasePants_C
		TEST_METHOD(BlueprintGeneratedClass__dm_f_t1c_pants_bp__dm_f_t1c_pants_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Adm_f_t1c_pants_bp_C, 0x0428);
		}

		// class Adm_f_t1c_chest_bp_C : public Adm_BaseChest_C
		TEST_METHOD(BlueprintGeneratedClass__dm_f_t1c_chest_bp__dm_f_t1c_chest_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Adm_f_t1c_chest_bp_C, 0x0428);
		}

		// class ASkillShape_Legendary_UppercutLineHit_C : public ASkillShapeSphere_C
		TEST_METHOD(BlueprintGeneratedClass__SkillShape_Legendary_UppercutLineHit__SkillShape_Legendary_UppercutLineHit_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_Legendary_UppercutLineHit_C, breakout, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_Legendary_UppercutLineHit_C, spikes, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_Legendary_UppercutLineHit_C, uppercut_strike, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_Legendary_UppercutLineHit_C, Delta_Time, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkillShape_Legendary_UppercutLineHit_C, 0x02AC);
		}

		// class Aio_prop_treestump_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_treestump_01_bp__io_prop_treestump_01_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_treestump_01_bp_C, Sphere, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_treestump_01_bp_C, 0x0270);
		}

		// class Aio_prop_treestump_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_treestump_02_bp__io_prop_treestump_02_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_treestump_02_bp_C, Sphere, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_treestump_02_bp_C, 0x0270);
		}

		// class Aio_wall_round_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_wall_round_02_bp__io_wall_round_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_wall_round_02_bp_C, 0x0268);
		}

		// class Aio_wall_top_05x05_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_wall_top_05x05_01_bp__io_wall_top_05x05_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_wall_top_05x05_01_bp_C, 0x0268);
		}

		// class Ugobyaprider_anim_bp_C : public UTLAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__gobyaprider_anim_bp__gobyaprider_anim_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugobyaprider_anim_bp_C, UberGraphFrame, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugobyaprider_anim_bp_C, AnimGraphNode_Root, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugobyaprider_anim_bp_C, AnimGraphNode_BlendSpacePlayer, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugobyaprider_anim_bp_C, TLAnimGraphNode_Slot, 0x0730);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ugobyaprider_anim_bp_C, 0x0780);
		}

		// class UStatusEffect_BattleCry_C : public UStatusEffectBase_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_BattleCry__StatusEffect_BattleCry_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_BattleCry_C, 0x0280);
		}

		// class USkill_BattleCry_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_BattleCry__Skill_BattleCry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_BattleCry_C, ShapeDuration, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_BattleCry_C, BonusAmount, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_BattleCry_C, BuffDuration, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_BattleCry_C, UnknownData_DVMD, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_BattleCry_C, NewVar_1, 0x0550);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_BattleCry_C, 0x0560);
		}

		// class Ass_BaseHelm_C : public ABaseHelm_C
		TEST_METHOD(BlueprintGeneratedClass__ss_BaseHelm__ss_BaseHelm_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ass_BaseHelm_C, 0x0428);
		}

		// class Aio_intro_wall_blacksmith_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_intro_wall_blacksmith_01_bp__io_intro_wall_blacksmith_01_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_intro_wall_blacksmith_01_bp_C, Box2, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_intro_wall_blacksmith_01_bp_C, Box1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_intro_wall_blacksmith_01_bp_C, Box, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_intro_wall_blacksmith_01_bp_C, 0x0280);
		}

		// class Aio_terrain_oceancnr_20x20_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_terrain_oceancnr_20x20_01_bp__io_terrain_oceancnr_20x20_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_terrain_oceancnr_20x20_01_bp_C, 0x0268);
		}

		// class Aio_terrain_oceanfloor_20x20_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_terrain_oceanfloor_20x20_01_bp__io_terrain_oceanfloor_20x20_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_terrain_oceanfloor_20x20_01_bp_C, 0x0268);
		}

		// class Aio_prop_towerbanner_06_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_towerbanner_06_bp__io_prop_towerbanner_06_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_towerbanner_06_bp_C, 0x0268);
		}

		// class Aio_prop_tent_03_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_tent_03_bp__io_prop_tent_03_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_tent_03_bp_C, 0x0268);
		}

		// class ATLEffect_blood_red_01_C : public ATLEffect
		TEST_METHOD(BlueprintGeneratedClass__TLEffect_blood_red_01__TLEffect_blood_red_01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLEffect_blood_red_01_C, TLDecal, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLEffect_blood_red_01_C, DefaultSceneRoot, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATLEffect_blood_red_01_C, 0x0270);
		}

		// class Aio_prop_stairs_set_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_stairs_set_02_bp__io_prop_stairs_set_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_stairs_set_02_bp_C, 0x0268);
		}

		// class Aio_prop_stairs_landing_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_stairs_landing_01_bp__io_prop_stairs_landing_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_stairs_landing_01_bp_C, 0x0268);
		}

		// class Aio_terrain_20x20_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_terrain_20x20_01_bp__io_terrain_20x20_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_terrain_20x20_01_bp_C, 0x0268);
		}

		// class Aio_prop_plank_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_plank_01_bp__io_prop_plank_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_plank_01_bp_C, 0x0268);
		}

		// class USequenceDirector_C : public ULevelSequenceDirector
		TEST_METHOD(BlueprintGeneratedClass__Intro_YapperGate_01__SequenceDirector_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequenceDirector_C, 0x0030);
		}

		// class Agob_prop_tree_b_01b_bp_C : public ABaseHideableObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_prop_tree_b_01b_bp__gob_prop_tree_b_01b_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_tree_b_01b_bp_C, UberGraphFrame, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_tree_b_01b_bp_C, ParticleSystem, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_tree_b_01b_bp_C, stump, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_tree_b_01b_bp_C, Sphere, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_tree_b_01b_bp_C, Leaves, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_tree_b_01b_bp_C, LeafMat, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_prop_tree_b_01b_bp_C, 0x0408);
		}

		// class ASkillShape_Damnation_C : public AHazard
		TEST_METHOD(BlueprintGeneratedClass__SkillShape_Damnation__SkillShape_Damnation_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_Damnation_C, UberGraphFrame, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_Damnation_C, Capsule, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_Damnation_C, damnation_decal_small, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_Damnation_C, damnation_decal_01, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_Damnation_C, shadow_decal, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_Damnation_C, Sigil, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkillShape_Damnation_C, 0x0470);
		}

		// class UStatusEffect_WraithForm_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_WraithForm__StatusEffect_WraithForm_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_WraithForm_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_WraithForm_C, 0x0288);
		}

		// class Ass_f_player_C : public APlayer_Base_C
		TEST_METHOD(BlueprintGeneratedClass__ss_f_player__ss_f_player_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_f_player_C, SkillList, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_f_player_C, PlayerFootstep, 0x0848);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ass_f_player_C, 0x0850);
		}

		// class AMissile_TriShot_C : public AMissileBase_C
		TEST_METHOD(BlueprintGeneratedClass__Missile_TriShot__Missile_TriShot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_TriShot_C, ParticleSystem, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMissile_TriShot_C, 0x0688);
		}

		// class UStatusEffect_PetEaseToStop_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_PetEaseToStop__StatusEffect_PetEaseToStop_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_PetEaseToStop_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_PetEaseToStop_C, 0x0288);
		}

		// class UStatusEffect_PetWander_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_PetWander__StatusEffect_PetWander_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_PetWander_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_PetWander_C, CachedSpeed, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_PetWander_C, 0x028C);
		}

		// class UStatusEffect_TriShot_Slow_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_TriShot_Slow__StatusEffect_TriShot_Slow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_TriShot_Slow_C, 0x0280);
		}

		// class ASkillShape_AllyRevive_C : public AAllyReviveShape
		TEST_METHOD(BlueprintGeneratedClass__SkillShape_AllyRevive__SkillShape_AllyRevive_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_AllyRevive_C, vfx_dead_player_indicator_01, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_AllyRevive_C, RevivingDecal, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_AllyRevive_C, ReviveRangeDecal, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_AllyRevive_C, ReviveExpireDecal, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkillShape_AllyRevive_C, 0x0300);
		}

		// class Aio_prop_brickpile_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_brickpile_02_bp__io_prop_brickpile_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_brickpile_02_bp_C, 0x0268);
		}

		// class UEditableMeshAdapter : public UObject
		TEST_METHOD(Class__EditableMesh__EditableMeshAdapter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMeshAdapter, 0x0028);
		}

		// class UEditableGeometryCollectionAdapter : public UEditableMeshAdapter
		TEST_METHOD(Class__EditableMesh__EditableGeometryCollectionAdapter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, GeometryCollection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, OriginalGeometryCollection, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, GeometryCollectionLODIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, UnknownData_9J64, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGeometryCollectionAdapter, 0x00D8);
		}

		// class UEditableMesh : public UObject
		TEST_METHOD(Class__EditableMesh__EditableMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_BXDE, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, Adapters, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_EFYL, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, TextureCoordinateCount, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_C5EJ, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, PendingCompactCounter, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, SubdivisionCount, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_O8IN, 0x0524);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMesh, 0x0708);
		}

		// class UEditableMeshFactory : public UObject
		TEST_METHOD(Class__EditableMesh__EditableMeshFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMeshFactory, 0x0028);
		}

		// class UEditableStaticMeshAdapter : public UEditableMeshAdapter
		TEST_METHOD(Class__EditableMesh__EditableStaticMeshAdapter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, StaticMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, OriginalStaticMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, StaticMeshLODIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, UnknownData_FGWI, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableStaticMeshAdapter, 0x00E0);
		}

		// class UMagicLeapHandMeshingComponent : public UActorComponent
		TEST_METHOD(Class__MagicLeapHandMeshing__MagicLeapHandMeshingComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapHandMeshingComponent, 0x00B0);
		}

		// class UMagicLeapHandMeshingFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapHandMeshing__MagicLeapHandMeshingFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapHandMeshingFunctionLibrary, 0x0028);
		}

		// class UMagicLeapLightingTrackingComponent : public UActorComponent
		TEST_METHOD(Class__MagicLeapLightEstimation__MagicLeapLightingTrackingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapLightingTrackingComponent, UseGlobalAmbience, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapLightingTrackingComponent, UseColorTemp, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapLightingTrackingComponent, UnknownData_K4NE, 0x00B2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapLightingTrackingComponent, 0x00C0);
		}

		// class UMagicLeapLightEstimationFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapLightEstimation__MagicLeapLightEstimationFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapLightEstimationFunctionLibrary, 0x0028);
		}

		// class UMagicLeapSecureStorage : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapSecureStorage__MagicLeapSecureStorage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapSecureStorage, 0x0028);
		}

		// class UAppleImageUtilsBaseAsyncTaskBlueprintProxy : public UObject
		TEST_METHOD(Class__AppleImageUtils__AppleImageUtilsBaseAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, UnknownData_DJ5B, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, UnknownData_XC07, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, ConversionResult, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, UnknownData_TSD8, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, 0x0088);
		}

		// class UAppleImageInterface : public UInterface
		TEST_METHOD(Class__AppleImageUtils__AppleImageInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAppleImageInterface, 0x0028);
		}

		// class UAssetTagsSubsystem : public UEngineSubsystem
		TEST_METHOD(Class__AssetTags__AssetTagsSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetTagsSubsystem, 0x0030);
		}

		// class UFoliageInstancedStaticMeshComponent : public UHierarchicalInstancedStaticMeshComponent
		TEST_METHOD(Class__Foliage__FoliageInstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, OnInstanceTakePointDamage, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, OnInstanceTakeRadialDamage, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, GenerationGuid, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, UnknownData_WHMG, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageInstancedStaticMeshComponent, 0x06A0);
		}

		// class UFoliageStatistics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Foliage__FoliageStatistics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageStatistics, 0x0028);
		}

		// class UFoliageType : public UObject
		TEST_METHOD(Class__Foliage__FoliageType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UpdateGuid, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Density, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DensityAdjustmentFactor, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Radius, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bSingleInstanceModeOverrideRadius, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_86AK, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SingleInstanceModeRadius, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Scaling, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_CRZN, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleX, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleY, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleZ, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMaskByChannel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMask, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_GH35, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMaskThreshold, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_WI5U, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ZOffset, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_SPLW, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, AlignMaxAngle, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_0USK, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, RandomPitchAngle, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, GroundSlopeAngle, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Height, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_8OMG, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LandscapeLayers, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MinimumLayerWeight, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_V90X, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ExclusionLandscapeLayers, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MinimumExclusionLayerWeight, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LandscapeLayer, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_6MWD, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CollisionScale, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MeshBounds, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LowBoundOriginRadius, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Mobility, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_YST2, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CullDistance, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_N0MX, 0x014A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, OverriddenLightMapRes, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LightmapType, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_FSKB, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_FNJW, 0x0155);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, BodyInstance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomNavigableGeometry, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LightingChannels, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_SIYG, 0x02B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_2HFO, 0x02B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomDepthStencilWriteMask, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_AX9T, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomDepthStencilValue, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, TranslucencySortPriority, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CollisionRadius, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ShadeRadius, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, NumSteps, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, InitialSeedDensity, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, AverageSpreadDistance, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SpreadVariance, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SeedsPerStep, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DistributionSeed, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxInitialSeedOffset, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bCanGrowInShade, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bSpawnsInShade, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_Z4RV, 0x02EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxInitialAge, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxAge, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, OverlapPriority, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ProceduralScale, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleCurve, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ChangeCount, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_VJ65, 0x038F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, RuntimeVirtualTextures, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VirtualTextureCullMips, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VirtualTextureRenderPassType, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_NMJF, 0x03A5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType, 0x03A8);
		}

		// class UFoliageType_Actor : public UFoliageType
		TEST_METHOD(Class__Foliage__FoliageType_Actor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_Actor, ActorClass, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_Actor, bShouldAttachToBaseComponent, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_Actor, UnknownData_FC8Q, 0x03B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType_Actor, 0x03B8);
		}

		// class UFoliageType_InstancedStaticMesh : public UFoliageType
		TEST_METHOD(Class__Foliage__FoliageType_InstancedStaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, Mesh, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, OverrideMaterials, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, ComponentClass, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType_InstancedStaticMesh, 0x03C8);
		}

		// class AInstancedFoliageActor : public AActor
		TEST_METHOD(Class__Foliage__InstancedFoliageActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstancedFoliageActor, UnknownData_4NAM, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInstancedFoliageActor, 0x0270);
		}

		// class AInteractiveFoliageActor : public AStaticMeshActor
		TEST_METHOD(Class__Foliage__InteractiveFoliageActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, CapsuleComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, TouchingActorEntryPosition, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageVelocity, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageForce, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliagePosition, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageDamageImpulseScale, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageTouchImpulseScale, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageStiffness, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageStiffnessQuadratic, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageDamping, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxDamageImpulse, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxTouchImpulse, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxForce, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, Mass, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, UnknownData_VIN0, 0x028C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInteractiveFoliageActor, 0x0290);
		}

		// class UInteractiveFoliageComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Foliage__InteractiveFoliageComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveFoliageComponent, UnknownData_AZP6, 0x04D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveFoliageComponent, 0x04E0);
		}

		// class AProceduralFoliageBlockingVolume : public AVolume
		TEST_METHOD(Class__Foliage__ProceduralFoliageBlockingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralFoliageBlockingVolume, ProceduralFoliageVolume, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProceduralFoliageBlockingVolume, 0x0260);
		}

		// class UProceduralFoliageComponent : public UActorComponent
		TEST_METHOD(Class__Foliage__ProceduralFoliageComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, FoliageSpawner, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, TileOverlap, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, UnknownData_8SF3, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, SpawningVolume, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, ProceduralGuid, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageComponent, 0x00D8);
		}

		// class UProceduralFoliageSpawner : public UObject
		TEST_METHOD(Class__Foliage__ProceduralFoliageSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, RandomSeed, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, TileSize, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, NumUniqueTiles, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, MinimumQuadTreeSize, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, UnknownData_JGLR, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, FoliageTypes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, UnknownData_8COW, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageSpawner, 0x0068);
		}

		// class UProceduralFoliageTile : public UObject
		TEST_METHOD(Class__Foliage__ProceduralFoliageTile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, FoliageSpawner, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, UnknownData_VZXP, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, InstancesArray, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, UnknownData_8KN3, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageTile, 0x0158);
		}

		// class AProceduralFoliageVolume : public AVolume
		TEST_METHOD(Class__Foliage__ProceduralFoliageVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralFoliageVolume, ProceduralComponent, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProceduralFoliageVolume, 0x0260);
		}

		// class AConductor_C : public AConductor
		TEST_METHOD(BlueprintGeneratedClass__Conductor__Conductor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AConductor_C, DungeonMaster, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConductor_C, DungeonAssembler, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConductor_C, EntitlementManager, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConductor_C, FortDataManager, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConductor_C, MapWorksManager, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConductor_C, PostProcess, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConductor_C, ExponentialHeightFog, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConductor_C, EditorSkyLight, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConductor_C, DirectionalLight1, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConductor_C, Scene, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConductor_C, RecipeManager, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConductor_C, TLPostProcessManager, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConductor_C, QuestManager, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConductor_C, BossFightManager, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConductor_C, AreaManager, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConductor_C, MonsterManager, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConductor_C, AudioAreaAmbiance, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AConductor_C, 0x02F0);
		}

		// class UGenericFloatingText_C : public UFloatingTextWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__GenericFloatingText__GenericFloatingText_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericFloatingText_C, UberGraphFrame, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericFloatingText_C, RiseAndFade, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericFloatingText_C, bLock, 0x0660);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericFloatingText_C, 0x0668);
		}

		// class UDebugInteractionPanel_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DebugInteractionPanel__DebugInteractionPanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugInteractionPanel_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugInteractionPanel_C, TLButton_313, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugInteractionPanel_C, TLTextBlock_89, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugInteractionPanel_C, TLTextBlock_230, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugInteractionPanel_C, 0x0280);
		}

		// class UTabbedSubMenu_C : public UTabbedMenuWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TabbedSubMenu__TabbedSubMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedSubMenu_C, UberGraphFrame, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedSubMenu_C, MenuButtonList, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedSubMenu_C, WidgetClass, 0x0738);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTabbedSubMenu_C, 0x0740);
		}

		// class UInventoryGridWithTabs_C : public UInventoryGridWithTabsWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InventoryGridWithTabs__InventoryGridWithTabs_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, UberGraphFrame, 0x0EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, RarityTitleFadein, 0x0EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, CategoryMenu, 0x0EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, CurrencyItems, 0x0F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, CurrencyWidget, 0x0F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, EquippedHeader, 0x0F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, EquippedItemsContainer, 0x0F18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, EquippedPotions, 0x0F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, GearList, 0x0F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, HorizontalBox_3, 0x0F30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, HorizontalBox_114, 0x0F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, HotkeyWidget, 0x0F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, HotkeyWidget_1, 0x0F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, InventoryWidgetSwitcher, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, ItemHeader, 0x0F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, ItemHeader2, 0x0F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, Items, 0x0F68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, Items2, 0x0F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, PetAwayBlocker, 0x0F78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, PetFullMessage, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, PetItemList, 0x0F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, PetShoppingListButton, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, PetShoppingListOverlay, 0x0F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, RadioToggleItem, 0x0FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, RadioToggleItem_C_2, 0x0FA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, RadioToggleItem_C_3, 0x0FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, SellAllButton, 0x0FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, SellAllConsumableOverlay, 0x0FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, SellAllPetItemsOverlay, 0x0FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, SendPetToTown, 0x0FD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, SendToTownOverlay, 0x0FD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, SendToTownText, 0x0FE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, SmallHeader, 0x0FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, SmallHeader_C_5, 0x0FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, SortTitle_2, 0x0FF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, TimeRemainingText, 0x1000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, TLBorder_5, 0x1008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, TLButton_1, 0x1010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, TLButton_2, 0x1018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, TLButton_3, 0x1020);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, TLButton_13, 0x1028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, TLButton_539, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, TLImage, 0x1038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, TLImage_2, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, TLImage_141, 0x1048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, TLImage_150, 0x1050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, TLImage_170, 0x1058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, TLImage_172, 0x1060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, TLImage_173, 0x1068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, TLImage_233, 0x1070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, TLTextBlock_2, 0x1078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, TLTextBlock_18, 0x1080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, WeaponList, 0x1088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabs_C, ItemWidget, 0x1090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryGridWithTabs_C, 0x1098);
		}

		// class UBuybackItemWidget_C : public UBuybackItemWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BuybackItemWidget__BuybackItemWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuybackItemWidget_C, InventoryItemButton, 0x0910);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuybackItemWidget_C, 0x0918);
		}

		// class UFrameInnerC_Style_C : public UTLBorderStyle
		TEST_METHOD(BlueprintGeneratedClass__FrameInnerC_Style__FrameInnerC_Style_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrameInnerC_Style_C, 0x00F8);
		}

		// class UAffixTextStyle_C : public ULightHeader5TextStyle_C
		TEST_METHOD(BlueprintGeneratedClass__AffixTextStyle__AffixTextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAffixTextStyle_C, 0x00A8);
		}

		// class UAffix_C : public UAffixWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Affix__Affix_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAffix_C, UberGraphFrame, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAffix_C, AffixRange, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAffix_C, AffixTextBlock, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAffix_C, ContainerSizeBox, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAffix_C, IconImage, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAffix_C, SetName, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAffix_C, SetRequirements, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAffix_C, WrapWidth, 0x06B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAffix_C, 0x06B4);
		}

		// class UAffixRange_C : public UStatRowWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__AffixRange__AffixRange_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAffixRange_C, percentSymbol, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAffixRange_C, Range1, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAffixRange_C, range2, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAffixRange_C, 0x0688);
		}

		// class UPetRecipeUnitWidget_C : public UPetIconWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PetRecipeUnitWidget__PetRecipeUnitWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetRecipeUnitWidget_C, BGFrame, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetRecipeUnitWidget_C, BorderFrameHighlightable, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetRecipeUnitWidget_C, ComparisonMenuAnchor, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetRecipeUnitWidget_C, IconFrame, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetRecipeUnitWidget_C, InnerInfo, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetRecipeUnitWidget_C, ItemContents, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetRecipeUnitWidget_C, PetIcon, 0x0778);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPetRecipeUnitWidget_C, 0x0780);
		}

		// class UAffixNoWrap_C : public UAffix_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__AffixNoWrap__AffixNoWrap_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAffixNoWrap_C, 0x06B4);
		}

		// class UStatSecondaryRow_C : public UStatRowWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__StatSecondaryRow__StatSecondaryRow_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatSecondaryRow_C, AffixRange, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatSecondaryRow_C, Icon, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatSecondaryRow_C, RichTextBlock, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatSecondaryRow_C, TraitValueBlock, 0x0688);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatSecondaryRow_C, 0x0690);
		}

		// class UStatusEffect_Invulnerable_Resurrect_C : public UStatusEffect_Invulnerable_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Invulnerable_Resurrect__StatusEffect_Invulnerable_Resurrect_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Invulnerable_Resurrect_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Invulnerable_Resurrect_C, UnknownData_17J7, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Invulnerable_Resurrect_C, ParticlesEnd_01, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Invulnerable_Resurrect_C, ParticleStart_01, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Invulnerable_Resurrect_C, 0x0370);
		}

		// class UFrameInnerA_Highlight_Style_C : public UFrameInnerA_Style_C
		TEST_METHOD(BlueprintGeneratedClass__FrameInnerA_Highlight_Style__FrameInnerA_Highlight_Style_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrameInnerA_Highlight_Style_C, 0x00F8);
		}

		// class UPreviewAnchorWidget_C : public UPreviewAnchorWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PreviewAnchorWidget__PreviewAnchorWidget_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewAnchorWidget_C, 0x0260);
		}

		// class UTextOnlyButtonStyle_C : public UTLTextStyle
		TEST_METHOD(BlueprintGeneratedClass__TextOnlyButtonStyle__TextOnlyButtonStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextOnlyButtonStyle_C, 0x00A8);
		}

		// class UNewFlag_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__NewFlag__NewFlag_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNewFlag_C, 0x0260);
		}

		// class UFrameBasicB_Style_C : public UTLBorderStyle
		TEST_METHOD(BlueprintGeneratedClass__FrameBasicB_Style__FrameBasicB_Style_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrameBasicB_Style_C, 0x00F8);
		}

		// class USpreadsheetLoaderServerBP_C : public UBaseSpreadsheetLoaderBP_C
		TEST_METHOD(BlueprintGeneratedClass__SpreadsheetLoaderServerBP__SpreadsheetLoaderServerBP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpreadsheetLoaderServerBP_C, 0x0380);
		}

		// class UPlatformTermsManager_C : public UTermsManager
		TEST_METHOD(BlueprintGeneratedClass__PlatformTermsManager__PlatformTermsManager_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformTermsManager_C, 0x0098);
		}

		// class UMainMenuBotBehavior_C : public UPlayerBotBehaviorComponent
		TEST_METHOD(BlueprintGeneratedClass__MainMenuBotBehavior__MainMenuBotBehavior_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuBotBehavior_C, 0x00D8);
		}

		// class ULoginStressBotBehavior_C : public UPlayerBotBehaviorComponent
		TEST_METHOD(BlueprintGeneratedClass__LoginStressBotBehavior__LoginStressBotBehavior_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoginStressBotBehavior_C, 0x00D8);
		}

		// class ULightHeader4TextNoStrokeStyle_C : public ULightHeader1TextStyle_C
		TEST_METHOD(BlueprintGeneratedClass__LightHeader4TextNoStrokeStyle__LightHeader4TextNoStrokeStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightHeader4TextNoStrokeStyle_C, 0x00A8);
		}

		// class UWaypointMap_C : public UTabbedMenuWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WaypointMap__WaypointMap_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaypointMap_C, UberGraphFrame, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaypointMap_C, MapPanelWidget, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaypointMap_C, NavigationHeader, 0x0738);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWaypointMap_C, 0x0740);
		}

		// class UStatusEffect_LuckTree_5_C : public UStatusEffect_LuckTree_Base_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_LuckTree_6__StatusEffect_LuckTree_5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_LuckTree_5_C, 0x0280);
		}

		// class Agob_prop_root_a_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_prop_root_a_bp__gob_prop_root_a_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_prop_root_a_bp_C, 0x0268);
		}

		// class Aio_town_intro_C : public Adrlg_blank_10x10_bp_C
		TEST_METHOD(BlueprintGeneratedClass__io_town_intro__io_town_intro_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_town_intro_C, 0x0290);
		}

		// class Adrlg_blank_10x10_bp_C : public ABaseDRLGDummy_C
		TEST_METHOD(BlueprintGeneratedClass__drlg_blank_10x10_bp__drlg_blank_10x10_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Adrlg_blank_10x10_bp_C, 0x0290);
		}

		// class UFazeerDialogue_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__FazeerDialogue__FazeerDialogue_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazeerDialogue_C, ShowAnimation, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazeerDialogue_C, DialogueText, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazeerDialogue_C, DungeonSpeechBubble, 0x0650);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFazeerDialogue_C, 0x0658);
		}

		// class ASFX_Elemental_WATER_C : public ATLEffect
		TEST_METHOD(BlueprintGeneratedClass__SFX_Elemental_WATER__SFX_Elemental_WATER_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASFX_Elemental_WATER_C, FMODAudio, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASFX_Elemental_WATER_C, DefaultSceneRoot, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASFX_Elemental_WATER_C, 0x0270);
		}

		// class UStatusEffect_CannotUseSkills_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_CannotUseSkills__StatusEffect_CannotUseSkills_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_CannotUseSkills_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_CannotUseSkills_C, 0x0288);
		}

		// class UStatusEffect_MonsterTether_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_MonsterTether__StatusEffect_MonsterTether_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_MonsterTether_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_MonsterTether_C, 0x0288);
		}

		// class UStatusEffect_Knockback_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Knockback__StatusEffect_Knockback_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Knockback_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Knockback_C, 0x0288);
		}

		// class AWeaponStaticBase_C : public AWeaponBase_C
		TEST_METHOD(BlueprintGeneratedClass__WeaponStaticBase__WeaponStaticBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponStaticBase_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponStaticBase_C, SelectionShape, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponStaticBase_C, Flippy, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponStaticBase_C, StaticMesh_1, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponStaticBase_C, FlippyAnim, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWeaponStaticBase_C, 0x0450);
		}

		// class Ammenu_prop_cannon_b_01_bp_C : public ABaseClickableWithAnims_C
		TEST_METHOD(BlueprintGeneratedClass__mmenu_prop_cannon_b_01_bp__mmenu_prop_cannon_b_01_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Ammenu_prop_cannon_b_01_bp_C, Operable, 0x04C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ammenu_prop_cannon_b_01_bp_C, 0x04C8);
		}

		// class USkill_Basic_Sword_Offhand_C : public USkill_Basic_Base_C
		TEST_METHOD(BlueprintGeneratedClass__Skill_Basic_Sword_Offhand__Skill_Basic_Sword_Offhand_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Basic_Sword_Offhand_C, 0x0540);
		}

		// class Udm_anim_bp_C : public UTLAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__dm_anim_bp__dm_anim_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Udm_anim_bp_C, UberGraphFrame, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::Udm_anim_bp_C, AnimGraphNode_Root, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::Udm_anim_bp_C, AnimGraphNode_BlendSpacePlayer_2, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::Udm_anim_bp_C, AnimGraphNode_TwoWayBlend, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::Udm_anim_bp_C, AnimGraphNode_BlendSpacePlayer, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Udm_anim_bp_C, TLAnimGraphNode_Slot, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Udm_anim_bp_C, AnimGraphNode_ModifyBone, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::Udm_anim_bp_C, AnimGraphNode_LocalToComponentSpace, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::Udm_anim_bp_C, AnimGraphNode_ComponentToLocalSpace, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::Udm_anim_bp_C, HeadSize, 0x0A78);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Udm_anim_bp_C, 0x0A84);
		}

		// class Afor_charactercreate_sequencer_C : public ACinematicActor
		TEST_METHOD(BlueprintGeneratedClass__for_charactercreate_sequencer__for_charactercreate_sequencer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Afor_charactercreate_sequencer_C, StaticMesh1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::Afor_charactercreate_sequencer_C, WeaponL, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::Afor_charactercreate_sequencer_C, StaticMesh, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::Afor_charactercreate_sequencer_C, Shoulders, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::Afor_charactercreate_sequencer_C, Feet, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::Afor_charactercreate_sequencer_C, hands, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::Afor_charactercreate_sequencer_C, Head, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::Afor_charactercreate_sequencer_C, Pants, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::Afor_charactercreate_sequencer_C, Hair, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::Afor_charactercreate_sequencer_C, Weapon, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::Afor_charactercreate_sequencer_C, Torso, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::Afor_charactercreate_sequencer_C, DefaultRootComponent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::Afor_charactercreate_sequencer_C, HairMesh, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::Afor_charactercreate_sequencer_C, HeadMesh, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::Afor_charactercreate_sequencer_C, TorsoMesh, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::Afor_charactercreate_sequencer_C, PantsMesh, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::Afor_charactercreate_sequencer_C, WeaponMesh, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Afor_charactercreate_sequencer_C, handsmesh, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Afor_charactercreate_sequencer_C, FeetMesh, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Afor_charactercreate_sequencer_C, ShoulderMesh, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Afor_charactercreate_sequencer_C, 0x02C0);
		}

		// class ASkillShapeCone_C : public ASkillShape
		TEST_METHOD(BlueprintGeneratedClass__SkillShapeCone__SkillShapeCone_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShapeCone_C, Cone, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkillShapeCone_C, 0x0290);
		}

		// class UCraftingCategoryWidget_C : public UCraftingCategoryWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CraftingCategoryWidget__CraftingCategoryWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingCategoryWidget_C, CategoryTextBlock, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingCategoryWidget_C, EntryListWidget, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingCategoryWidget_C, 0x0650);
		}

		// class Aio_prop_boat_01_anim_bp_C : public ABaseSkeletalObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_boat_01_anim_bp__io_prop_boat_01_anim_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_boat_01_anim_bp_C, flaps, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_boat_01_anim_bp_C, FMODAudio, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_boat_01_anim_bp_C, 0x03B8);
		}

		// class UContractMenuWidget_C : public UContractEntryWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ContractMenuWidget__ContractMenuWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractMenuWidget_C, UberGraphFrame, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractMenuWidget_C, AcceptButton, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractMenuWidget_C, ActivationSwitcher, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractMenuWidget_C, ActiveFrame, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractMenuWidget_C, ActiveLabel, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractMenuWidget_C, ContractFameLevelBar_C_1, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractMenuWidget_C, ContractName, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractMenuWidget_C, LockedContractTextBlock, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractMenuWidget_C, MakeActive, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractMenuWidget_C, MakeActiveButton, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractMenuWidget_C, MakeActiveText, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractMenuWidget_C, RemainingTime, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractMenuWidget_C, RolloverFrame, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractMenuWidget_C, SplashImage, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractMenuWidget_C, TLImage_14, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractMenuWidget_C, TLImage_15, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractMenuWidget_C, TLImage_16, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractMenuWidget_C, TLImage_24, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractMenuWidget_C, TLImage_25, 0x0800);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContractMenuWidget_C, 0x0808);
		}

		// class Umossrat_anim_bp_C : public UTLAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__mossrat_anim_bp__mossrat_anim_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Umossrat_anim_bp_C, UberGraphFrame, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::Umossrat_anim_bp_C, AnimGraphNode_Root, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::Umossrat_anim_bp_C, AnimGraphNode_BlendSpacePlayer, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::Umossrat_anim_bp_C, TLAnimGraphNode_Slot, 0x0730);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Umossrat_anim_bp_C, 0x0780);
		}

		// class UTraitNotificiation_C : public UTraitNotificationWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TraitNotificiation__TraitNotificiation_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraitNotificiation_C, HidePickUpAnimation, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraitNotificiation_C, NormalPickUpAnimation, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraitNotificiation_C, BGFrame, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraitNotificiation_C, Icon, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraitNotificiation_C, TextBlock, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTraitNotificiation_C, 0x0680);
		}

		// class UStyle_ScrollBox_Invisible_C : public UStyle_ScrollBox_C
		TEST_METHOD(BlueprintGeneratedClass__Style_ScrollBox_Invisible__Style_ScrollBox_Invisible_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStyle_ScrollBox_Invisible_C, 0x07B0);
		}

		// class UContractMaterialHighlight_Border_Style_C : public UTLBorderStyle
		TEST_METHOD(BlueprintGeneratedClass__ContractMaterialHighlight_Border_Style__ContractMaterialHighlight_Border_Style_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContractMaterialHighlight_Border_Style_C, 0x00F8);
		}

		// class ACameraLightRig_Forged_bp_C : public ACameraLightRig_Base_bp_C
		TEST_METHOD(BlueprintGeneratedClass__CameraLightRig_Forged_bp__CameraLightRig_Forged_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_Forged_bp_C, SceneCaptureComponent2D, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_Forged_bp_C, Scene, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_Forged_bp_C, ShouldersRt, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_Forged_bp_C, ShouldersLt, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_Forged_bp_C, GlovesRt, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_Forged_bp_C, SkeletalMesh, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_Forged_bp_C, Chest, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_Forged_bp_C, Boots, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_Forged_bp_C, Pants, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_Forged_bp_C, Helm, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_Forged_bp_C, GlovesLt, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_Forged_bp_C, CharacterSetup, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraLightRig_Forged_bp_C, 0x02B0);
		}

		// class AWeaponCursedCannonBase_C : public AWeaponStaticBase_C
		TEST_METHOD(BlueprintGeneratedClass__WeaponCursedCannonBase__WeaponCursedCannonBase_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWeaponCursedCannonBase_C, 0x0450);
		}

		// class UDYE_StarterCc_DSEGEN_C : public UDye
		TEST_METHOD(BlueprintGeneratedClass__DYE_StarterCc_DSEGEN__DYE_StarterCc_DSEGEN_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDYE_StarterCc_DSEGEN_C, 0x03F8);
		}

		// class Adm_m_t0a_head_bp_C : public ABaseHead_C
		TEST_METHOD(BlueprintGeneratedClass__dm_m_t0a_head_bp__dm_m_t0a_head_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Adm_m_t0a_head_bp_C, 0x0428);
		}

		// class Acc_BaseHead_C : public ABaseHead_C
		TEST_METHOD(BlueprintGeneratedClass__cc_BaseHead__cc_BaseHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Acc_BaseHead_C, 0x0428);
		}

		// class Acc_BaseHair_C : public ABaseHelm_C
		TEST_METHOD(BlueprintGeneratedClass__cc_BaseHair__cc_BaseHair_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Acc_BaseHair_C, 0x0428);
		}

		// class USharpshooterTrinketSpinner2_C : public UHUDElementNoTick
		TEST_METHOD(WidgetBlueprintGeneratedClass__SharpshooterTrinketSpinner2__SharpshooterTrinketSpinner2_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterTrinketSpinner2_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterTrinketSpinner2_C, Spin, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterTrinketSpinner2_C, TLImage_1, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USharpshooterTrinketSpinner2_C, 0x0278);
		}

		// class UActiveTraitTooltip_C : public UActiveTraitTooltipWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ActiveTraitTooltip__ActiveTraitTooltip_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTraitTooltip_C, CurrentTextBlock, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTraitTooltip_C, MaxTextBlock, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTraitTooltip_C, TraitName, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActiveTraitTooltip_C, 0x0698);
		}

		// class USkill_Basic_Railhammer_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_Basic_Railhammer__Skill_Basic_Railhammer_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Basic_Railhammer_C, 0x0540);
		}

		// class ASkillShape_Railhammer_C : public ASkillShape
		TEST_METHOD(BlueprintGeneratedClass__SkillShape_Railhammer__SkillShape_Railhammer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_Railhammer_C, egg_400_200_201, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_Railhammer_C, Arrow, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkillShape_Railhammer_C, 0x0298);
		}

		// class Aw_bow_2h_branch_t1a_bp_C : public AWeaponBowBase_C
		TEST_METHOD(BlueprintGeneratedClass__w_bow_2h_branch_t1a_bp__w_bow_2h_branch_t1a_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aw_bow_2h_branch_t1a_bp_C, 0x0490);
		}

		// class USkill_Constant_Fire_Hazard_01_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_Constant_Fire_Hazard_01__Skill_Constant_Fire_Hazard_01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Constant_Fire_Hazard_01_C, 0x0540);
		}

		// class Ass_BaseGloves_C : public ABaseGloves_C
		TEST_METHOD(BlueprintGeneratedClass__ss_BaseGloves__ss_BaseGloves_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ass_BaseGloves_C, 0x0438);
		}

		// class UStatusEffect_PetMinionRing_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_PetMinionRing__StatusEffect_PetMinionRing_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_PetMinionRing_C, 0x0280);
		}

		// class UStatusEffect_DoubleCross_Buff_10Stack_C : public UStatusEffect_DoubleCross_Buff_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_DoubleCross_Buff_10Stack__StatusEffect_DoubleCross_Buff_10Stack_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_DoubleCross_Buff_10Stack_C, 0x0280);
		}

		// class AGoblin_Boss_Intro_sphere_C : public AMonsterSpawner_Boss_Triggered_Intro_C
		TEST_METHOD(BlueprintGeneratedClass__Goblin_Boss_Intro_sphere__Goblin_Boss_Intro_sphere_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGoblin_Boss_Intro_sphere_C, 0x0338);
		}

		// class UDye_StarterSs_C : public UDye_Base_C
		TEST_METHOD(BlueprintGeneratedClass__Dye_StarterSs__Dye_StarterSs_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDye_StarterSs_C, 0x03F8);
		}

		// class Aio_floor_025x05_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_floor_025x05_01_bp__io_floor_025x05_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_floor_025x05_01_bp_C, 0x0268);
		}

		// class ABaseTreasureChest_C : public ABaseChestGadget_C
		TEST_METHOD(BlueprintGeneratedClass__BaseTreasureChest__BaseTreasureChest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseTreasureChest_C, 0x04E0);
		}

		// class USkill_Sharpshooter_Shasta_C : public USkill_Sharpshooter_Adventurer_Base_C
		TEST_METHOD(BlueprintGeneratedClass__Skill_Sharpshooter_Shasta__Skill_Sharpshooter_Shasta_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Sharpshooter_Shasta_C, UnknownData_SYNU, 0x0559);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Sharpshooter_Shasta_C, Fear, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Sharpshooter_Shasta_C, Damage, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Sharpshooter_Shasta_C, summonduration, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Sharpshooter_Shasta_C, Bonus, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Sharpshooter_Shasta_C, 0x056C);
		}

		// class UStatusEffect_PetImmobilize_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_PetImmobilize__StatusEffect_PetImmobilize_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_PetImmobilize_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_PetImmobilize_C, 0x0288);
		}

		// class USkill_PetImmobilize_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_PetImmobilize__Skill_PetImmobilize_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_PetImmobilize_C, Chance, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_PetImmobilize_C, immobilizeduration, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_PetImmobilize_C, NewVar_1, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_PetImmobilize_C, 0x0558);
		}

		// class USkill_Basic_Bow_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_Basic_Bow__Skill_Basic_Bow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Basic_Bow_C, 0x0540);
		}

		// class Ass_BasePants_Modular_C : public Ass_BasePants_C
		TEST_METHOD(BlueprintGeneratedClass__ss_BasePants_Modular__ss_BasePants_Modular_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_BasePants_Modular_C, Tabbard_Back_Right, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_BasePants_Modular_C, Tabbard_Back_Left, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_BasePants_Modular_C, Tabbard_Front_Right, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_BasePants_Modular_C, Tabbard_Front_Left, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_BasePants_Modular_C, Relic, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ass_BasePants_Modular_C, 0x0450);
		}

		// class Aio_wall_towerthinbroken_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_wall_towerthinbroken_01_bp__io_wall_towerthinbroken_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_wall_towerthinbroken_01_bp_C, 0x0268);
		}

		// class ABaseMeleePet_C : public ABasePet_C
		TEST_METHOD(BlueprintGeneratedClass__BaseMeleePet__BaseMeleePet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseMeleePet_C, 0x08A0);
		}

		// class Agcave_breakable_crategrp_02_bp_C : public ABaseBreakable_Container_C
		TEST_METHOD(BlueprintGeneratedClass__gcave_breakable_crategrp_02_bp__gcave_breakable_crategrp_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agcave_breakable_crategrp_02_bp_C, 0x0478);
		}

		// class Aio_prop_weaponrack_grp_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_weaponrack_grp_01_bp__io_prop_weaponrack_grp_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_weaponrack_grp_01_bp_C, 0x0268);
		}

		// class Aio_prop_ruins_wall_03_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_ruins_wall_03_bp__io_prop_ruins_wall_03_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_ruins_wall_03_bp_C, 0x0268);
		}

		// class Aio_prop_rubble_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_rubble_01_bp__io_prop_rubble_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_rubble_01_bp_C, 0x0268);
		}

		// class Aio_prop_rugscrollvendor_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_rugscrollvendor_01_bp__io_prop_rugscrollvendor_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_rugscrollvendor_01_bp_C, 0x0268);
		}

		// class Aio_prop_foldablestairs_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_foldablestairs_01_bp__io_prop_foldablestairs_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_foldablestairs_01_bp_C, 0x0268);
		}

		// class Ass_m_t1a_boots_bp_C : public Ass_BaseBoots_C
		TEST_METHOD(BlueprintGeneratedClass__ss_m_t1a_boots_bp__ss_m_t1a_boots_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ass_m_t1a_boots_bp_C, 0x0428);
		}

		// class Ass_m_t0a_head_bp_C : public ABaseHead_C
		TEST_METHOD(BlueprintGeneratedClass__ss_m_t0a_head_bp__ss_m_t0a_head_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ass_m_t0a_head_bp_C, 0x0428);
		}

		// class Ass_m_t0b_pants_bp_C : public Ass_BasePants_C
		TEST_METHOD(BlueprintGeneratedClass__ss_m_t0b_pants_bp__ss_m_t0b_pants_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ass_m_t0b_pants_bp_C, 0x0428);
		}

		// class Aio_prop_rockcliff_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_rockcliff_01_bp__io_prop_rockcliff_01_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_rockcliff_01_bp_C, Box, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_rockcliff_01_bp_C, 0x0270);
		}

		// class Aio_prop_sack_group_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_sack_group_02_bp__io_prop_sack_group_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_sack_group_02_bp_C, 0x0268);
		}

		// class Aio_prop_scrollbarrel_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_scrollbarrel_01_bp__io_prop_scrollbarrel_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_scrollbarrel_01_bp_C, 0x0268);
		}

		// class Aio_prop_scrollvendorglobe_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_scrollvendorglobe_01_bp__io_prop_scrollvendorglobe_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_scrollvendorglobe_01_bp_C, 0x0268);
		}

		// class AMonsterSpawner_BossRoom_Position_Triggered_C : public AMonsterSpawner_BossRoom_Position_C
		TEST_METHOD(BlueprintGeneratedClass__MonsterSpawner_BossRoom_Position_Triggered__MonsterSpawner_BossRoom_Position_Triggered_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner_BossRoom_Position_Triggered_C, MonsterSpawnerTrigger, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMonsterSpawner_BossRoom_Position_Triggered_C, 0x0328);
		}

		// class UStatusEffect_Damnation_Secondary_C : public UStatusEffectBase_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Damnation_Secondary__StatusEffect_Damnation_Secondary_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Damnation_Secondary_C, 0x0280);
		}

		// class UBuildPatchManifest : public UObject
		TEST_METHOD(Class__BuildPatchServices__BuildPatchManifest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, ManifestFileVersion, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, bIsFileData, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, UnknownData_M7JI, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, AppID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, AppName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, BuildVersion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, LaunchExe, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, LaunchCommand, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqIds, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqName, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqPath, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqArgs, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, FileManifestList, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, ChunkList, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, CustomFields, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuildPatchManifest, 0x0120);
		}

		// class UStatusEffect_Champion_Legendary_C : public UStatusEffect_Champion_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Champion_Legendary__StatusEffect_Champion_Legendary_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Champion_Legendary_C, UberGraphFrame, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Champion_Legendary_C, 0x02A8);
		}

		// class UBaseTimeOfDayHandler_C : public UTimeOfDayHandler
		TEST_METHOD(BlueprintGeneratedClass__BaseTimeOfDayHandler__BaseTimeOfDayHandler_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseTimeOfDayHandler_C, 0x0A60);
		}

		// class ULargeHeader_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__LargeHeader__LargeHeader_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULargeHeader_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULargeHeader_C, FiligreeLeft, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULargeHeader_C, HeaderText, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULargeHeader_C, TLImage_2, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULargeHeader_C, DefaultText, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULargeHeader_C, bTextIsSet, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULargeHeader_C, 0x0299);
		}

		// class UFortPropTooltip_C : public UFortPropTooltipWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__FortPropTooltip__FortPropTooltip_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropTooltip_C, Border, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropTooltip_C, Description, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropTooltip_C, LevelLeftImage, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropTooltip_C, LevelRightImage, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropTooltip_C, PropNameText, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropTooltip_C, PropRarityText, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropTooltip_C, PropTypeText, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropTooltip_C, SizeBox_5, 0x0710);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFortPropTooltip_C, 0x0718);
		}

		// class UGenericMaterialHighlight_BorderStyle_C : public UTLBorderStyle
		TEST_METHOD(BlueprintGeneratedClass__GenericMaterialHighlight_BorderStyle__GenericMaterialHighlight_BorderStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericMaterialHighlight_BorderStyle_C, 0x00F8);
		}

		// class UStatusEffect_AllyRevivedRecently_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_AllyRevivedRecently__StatusEffect_AllyRevivedRecently_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_AllyRevivedRecently_C, 0x0280);
		}

		// class UDefaultRadioButton_C : public UTLCheckBoxStyle
		TEST_METHOD(BlueprintGeneratedClass__DefaultRadioButton__DefaultRadioButton_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultRadioButton_C, 0x05F8);
		}

		// class UInventoryEquippedItemWidget_C : public UInventoryItemEquippedWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InventoryEquippedItemWidget__InventoryEquippedItemWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryEquippedItemWidget_C, EmptySlotHighlightable, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryEquippedItemWidget_C, InventoryItemButton1, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryEquippedItemWidget_C, Overlay_1, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryEquippedItemWidget_C, SlotIcon, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryEquippedItemWidget_C, 0x0688);
		}

		// class UTabbedSubMenuButton_C : public UTabbedMenuButton
		TEST_METHOD(WidgetBlueprintGeneratedClass__TabbedSubMenuButton__TabbedSubMenuButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedSubMenuButton_C, UberGraphFrame, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedSubMenuButton_C, Button, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedSubMenuButton_C, ButtonSelected, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedSubMenuButton_C, TLTextBlock_1, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedSubMenuButton_C, TLTextBlock_59, 0x0730);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTabbedSubMenuButton_C, 0x0738);
		}

		// class ULightHeader7TextStyle_C : public ULightHeader6TextStyle_C
		TEST_METHOD(BlueprintGeneratedClass__LightHeader7TextStyle__LightHeader7TextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightHeader7TextStyle_C, 0x00A8);
		}

		// class UDifficultyNormal_C : public UDifficultyStatusEffectBase_C
		TEST_METHOD(BlueprintGeneratedClass__DifficultyNormal__DifficultyNormal_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDifficultyNormal_C, 0x0298);
		}

		// class UDifficultyPainful_C : public UDifficultyStatusEffectBase_C
		TEST_METHOD(BlueprintGeneratedClass__DifficultyPainful__DifficultyPainful_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDifficultyPainful_C, 0x0298);
		}

		// class UDifficultyRidiculous_C : public UDifficultyStatusEffectBase_C
		TEST_METHOD(BlueprintGeneratedClass__DifficultyRidiculous__DifficultyRidiculous_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDifficultyRidiculous_C, 0x0298);
		}

		// class UHazard_Constant_Fire_Status_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__Hazard_Constant_Fire_Status__Hazard_Constant_Fire_Status_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHazard_Constant_Fire_Status_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHazard_Constant_Fire_Status_C, 0x0288);
		}

		// class Agcave_prop_tool_hammer_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gcave_prop_tool_hammer_01_bp__gcave_prop_tool_hammer_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agcave_prop_tool_hammer_01_bp_C, 0x0268);
		}

		// class Agcave_prop_tool_axe_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gcave_prop_tool_axe_01_bp__gcave_prop_tool_axe_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agcave_prop_tool_axe_01_bp_C, 0x0268);
		}

		// class UBaseTrapComponent_C : public UTrapComponent
		TEST_METHOD(BlueprintGeneratedClass__BaseTrapComponent__BaseTrapComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseTrapComponent_C, UberGraphFrame, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseTrapComponent_C, 0x0140);
		}

		// class Unpcsquash_anim_bp_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__npcsquash_anim_bp__npcsquash_anim_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Unpcsquash_anim_bp_C, UnknownData_1YV1, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Unpcsquash_anim_bp_C, UberGraphFrame, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Unpcsquash_anim_bp_C, AnimGraphNode_Root, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Unpcsquash_anim_bp_C, AnimGraphNode_SequencePlayer, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Unpcsquash_anim_bp_C, 0x0378);
		}

		// class AGearIconRenderRig_bp_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__GearIconRenderRig_bp__GearIconRenderRig_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGearIconRenderRig_bp_C, SceneCaptureComponent2D, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGearIconRenderRig_bp_C, SpotLight, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGearIconRenderRig_bp_C, Underlight, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGearIconRenderRig_bp_C, RimL, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGearIconRenderRig_bp_C, RimR, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGearIconRenderRig_bp_C, DefaultSceneRoot1, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGearIconRenderRig_bp_C, 0x0250);
		}

		// class USkill_Basic_CursedCannon_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_Basic_CursedCannon__Skill_Basic_CursedCannon_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Basic_CursedCannon_C, 0x0540);
		}

		// class ABaseArmor_C : public AGenericItemBase_C
		TEST_METHOD(BlueprintGeneratedClass__BaseArmor__BaseArmor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseArmor_C, UberGraphFrame, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseArmor_C, IconCameraPosition, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseArmor_C, IconCameraPositionStart, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseArmor_C, SkeletalMesh, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseArmor_C, Scene, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseArmor_C, ItemOnGround, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseArmor_C, AudioEffectMap, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseArmor_C, SelectionSphere, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseArmor_C, Wardrobe, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseArmor_C, Flippy, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseArmor_C, 0x0428);
		}

		// class UResourceBarWidget_C : public UActiveTraitBarWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ResourceBarWidget__ResourceBarWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UResourceBarWidget_C, UberGraphFrame, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResourceBarWidget_C, BGImage, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResourceBarWidget_C, FrameImage, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResourceBarWidget_C, HitpointBall, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResourceBarWidget_C, MenuAnchor_121, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResourceBarWidget_C, FrameStyle, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResourceBarWidget_C, BarPadding, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResourceBarWidget_C, BGStyle, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResourceBarWidget_C, FrameMaterial, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResourceBarWidget_C, FrameNormalMap, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResourceBarWidget_C, BarInnerPadding, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResourceBarWidget_C, HasTooltip, 0x09D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UResourceBarWidget_C, 0x09D9);
		}

		// class USkill_ForgedBase_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_ForgedBase__Skill_ForgedBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_ForgedBase_C, CheckForWeapon, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_ForgedBase_C, CheckForCannon, 0x0541);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_ForgedBase_C, 0x0542);
		}

		// class Agob_prop_tentdamaged_03_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_prop_tentdamaged_03_bp__gob_prop_tentdamaged_03_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_tentdamaged_03_bp_C, Box, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_prop_tentdamaged_03_bp_C, 0x0270);
		}

		// class Aio_prop_bookstack_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_bookstack_01_bp__io_prop_bookstack_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_bookstack_01_bp_C, 0x0268);
		}

		// class Aio_prop_anvilbase_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_anvilbase_01_bp__io_prop_anvilbase_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_anvilbase_01_bp_C, 0x0268);
		}

		// class Atod_infcave_accentlight_a1_C : public ALightPropActor
		TEST_METHOD(BlueprintGeneratedClass__tod_infcave_accentlight_a1__tod_infcave_accentlight_a1_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Atod_infcave_accentlight_a1_C, PointLight, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::Atod_infcave_accentlight_a1_C, DefaultSceneRoot, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Atod_infcave_accentlight_a1_C, 0x0238);
		}

		// class Aio_prop_bed_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_bed_01_bp__io_prop_bed_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_bed_01_bp_C, 0x0268);
		}

		// class Aio_prop_bigrock_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_bigrock_01_bp__io_prop_bigrock_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_bigrock_01_bp_C, 0x0268);
		}

		// class UBaseArea_C : public UArea
		TEST_METHOD(BlueprintGeneratedClass__BaseArea__BaseArea_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseArea_C, 0x00B8);
		}

		// class ARelicBase_C : public AWeaponStaticBase_C
		TEST_METHOD(BlueprintGeneratedClass__RelicBase__RelicBase_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARelicBase_C, 0x0450);
		}

		// class Upetitems_inv_C : public UTLInventoryContainerPetItems
		TEST_METHOD(BlueprintGeneratedClass__petitems_inv__petitems_inv_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Upetitems_inv_C, 0x01F8);
		}

		// class Uss_f_startingitems_C : public Ufor_StartingItems_C
		TEST_METHOD(BlueprintGeneratedClass__ss_f_startingitems__ss_f_startingitems_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Uss_f_startingitems_C, 0x0078);
		}

		// class Aio_floor_shipramp_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_floor_shipramp_01_bp__io_floor_shipramp_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_floor_shipramp_01_bp_C, 0x0268);
		}

		// class Aio_floor_main_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_floor_main_02_bp__io_floor_main_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_floor_main_02_bp_C, 0x0268);
		}

		// class Anpcimperialguard_attack_bp_C : public Anpcimperialguard_01_bp_C
		TEST_METHOD(BlueprintGeneratedClass__npcimperialguard_attack_bp__npcimperialguard_attack_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Anpcimperialguard_attack_bp_C, 0x07F4);
		}

		// class UNamedInterfaces : public UObject
		TEST_METHOD(Class__OnlineSubsystem__NamedInterfaces)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, NamedInterfaces, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, NamedInterfaceDefs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, UnknownData_P8HT, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedInterfaces, 0x0060);
		}

		// class UTurnBasedMatchInterface : public UInterface
		TEST_METHOD(Class__OnlineSubsystem__TurnBasedMatchInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurnBasedMatchInterface, 0x0028);
		}

		// class UMaterialExpressionSpriteTextureSampler : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Paper2D__MaterialExpressionSpriteTextureSampler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, bSampleAdditionalTextures, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, UnknownData_F5XS, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, AdditionalSlotIndex, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, SlotDisplayName, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSpriteTextureSampler, 0x00A0);
		}

		// class APaperCharacter : public ACharacter
		TEST_METHOD(Class__Paper2D__PaperCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperCharacter, Sprite, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperCharacter, 0x04C0);
		}

		// class UPaperFlipbook : public UObject
		TEST_METHOD(Class__Paper2D__PaperFlipbook)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, FramesPerSecond, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, UnknownData_LUB9, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, KeyFrames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, DefaultMaterial, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, CollisionSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, UnknownData_ZGH7, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperFlipbook, 0x0050);
		}

		// class APaperFlipbookActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperFlipbookActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperFlipbookActor, RenderComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperFlipbookActor, 0x0228);
		}

		// class UPaperFlipbookComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperFlipbookComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, SourceFlipbook, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, Material, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, PlayRate, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, UnknownData_ZQGJ, 0x047D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, AccumulatedTime, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, CachedFrameIndex, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, SpriteColor, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, CachedBodySetup, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, OnFinishedPlaying, 0x04A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperFlipbookComponent, 0x04B0);
		}

		// class APaperGroupedSpriteActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperGroupedSpriteActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperGroupedSpriteActor, RenderComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperGroupedSpriteActor, 0x0228);
		}

		// class UPaperGroupedSpriteComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperGroupedSpriteComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperGroupedSpriteComponent, InstanceMaterials, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperGroupedSpriteComponent, PerInstanceSpriteData, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperGroupedSpriteComponent, UnknownData_UJVG, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperGroupedSpriteComponent, 0x04A0);
		}

		// class UPaperRuntimeSettings : public UObject
		TEST_METHOD(Class__Paper2D__PaperRuntimeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, bEnableSpriteAtlasGroups, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, bEnableTerrainSplineEditing, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, bResizeSpriteDataToMatchTextures, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, UnknownData_I36T, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperRuntimeSettings, 0x0030);
		}

		// class UPaperSprite : public UObject
		TEST_METHOD(Class__Paper2D__PaperSprite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, UnknownData_UXVQ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, AdditionalSourceTextures, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedSourceUV, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedSourceDimension, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedSourceTexture, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, DefaultMaterial, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, AlternateMaterial, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, Sockets, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, SpriteCollisionDomain, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, UnknownData_7HMX, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, PixelsPerUnrealUnit, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BodySetup, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, AlternateMaterialSplitIndex, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, UnknownData_G72I, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedRenderData, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSprite, 0x00A8);
		}

		// class APaperSpriteActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperSpriteActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperSpriteActor, RenderComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperSpriteActor, 0x0228);
		}

		// class UPaperSpriteAtlas : public UObject
		TEST_METHOD(Class__Paper2D__PaperSpriteAtlas)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSpriteAtlas, 0x0028);
		}

		// class UPaperSpriteBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Paper2D__PaperSpriteBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSpriteBlueprintLibrary, 0x0028);
		}

		// class UPaperSpriteComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperSpriteComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, SourceSprite, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, MaterialOverride, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, SpriteColor, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, UnknownData_IMR5, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSpriteComponent, 0x0490);
		}

		// class APaperTerrainActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperTerrainActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTerrainActor, DummyRoot, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTerrainActor, SplineComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTerrainActor, RenderComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperTerrainActor, 0x0238);
		}

		// class UPaperTerrainComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Paper2D__PaperTerrainComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, TerrainMaterial, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, bClosedSpline, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, bFilledSpline, 0x0449);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_NWSZ, 0x044A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, AssociatedSpline, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, RandomSeed, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, SegmentOverlapAmount, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, TerrainColor, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, ReparamStepsPerSegment, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, SpriteCollisionDomain, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_8XQS, 0x0475);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, CollisionThickness, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_8OVL, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, CachedBodySetup, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_3D5P, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTerrainComponent, 0x04A0);
		}

		// class UPaperTerrainMaterial : public UDataAsset
		TEST_METHOD(Class__Paper2D__PaperTerrainMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainMaterial, Rules, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainMaterial, InteriorFill, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTerrainMaterial, 0x0048);
		}

		// class UPaperTerrainSplineComponent : public USplineComponent
		TEST_METHOD(Class__Paper2D__PaperTerrainSplineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainSplineComponent, UnknownData_6RIW, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainSplineComponent, UnknownData_54OK, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTerrainSplineComponent, 0x0550);
		}

		// class UPaperTileLayer : public UObject
		TEST_METHOD(Class__Paper2D__PaperTileLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerWidth, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerHeight, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, UnknownData_EU1U, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, CollisionThicknessOverride, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, CollisionOffsetOverride, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerColor, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedWidth, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedHeight, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, UnknownData_OORL, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedCells, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, TileSet, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedGrid, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileLayer, 0x0098);
		}

		// class UPaperTileMap : public UObject
		TEST_METHOD(Class__Paper2D__PaperTileMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, MapWidth, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, MapHeight, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, TileWidth, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, TileHeight, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, PixelsPerUnrealUnit, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SeparationPerTileX, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SeparationPerTileY, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SeparationPerLayer, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SelectedTileSet, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, Material, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, TileLayers, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, CollisionThickness, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SpriteCollisionDomain, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, ProjectionMode, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, UnknownData_LLBR, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, HexSideLength, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, UnknownData_MDQ7, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, BodySetup, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, LayerNameIndex, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, UnknownData_73LA, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileMap, 0x00A8);
		}

		// class APaperTileMapActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperTileMapActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTileMapActor, RenderComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperTileMapActor, 0x0228);
		}

		// class UPaperTileMapComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperTileMapComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UnknownData_A2D7, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, MapHeight, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileWidth, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileHeight, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, DefaultLayerTileSet, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, Material, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileLayers, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileMapColor, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UseSingleLayerIndex, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, bUseSingleLayer, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UnknownData_GCL5, 0x04AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileMap, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UnknownData_VU77, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileMapComponent, 0x04C0);
		}

		// class UPaperTileSet : public UObject
		TEST_METHOD(Class__Paper2D__PaperTileSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileSheet, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, AdditionalSourceTextures, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, BorderMargin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, PerTileSpacing, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, DrawingOffset, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, WidthInTiles, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, HeightInTiles, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, AllocatedWidth, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, AllocatedHeight, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, PerTileData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, Terrains, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileWidth, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileHeight, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, Margin, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, Spacing, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileSet, 0x00A8);
		}

		// class UTileMapBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Paper2D__TileMapBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTileMapBlueprintLibrary, 0x0028);
		}

		// class UClothConfigCommon : public UClothConfigBase
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothConfigCommon)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothConfigCommon, 0x0028);
		}

		// class UClothSharedConfigCommon : public UClothConfigCommon
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothSharedConfigCommon)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothSharedConfigCommon, 0x0028);
		}

		// class UClothingAssetCustomData : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothingAssetCustomData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetCustomData, 0x0028);
		}

		// class UClothingAssetCommon : public UClothingAssetBase
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothingAssetCommon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, PhysicsAsset, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothConfigs, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothSharedSimConfig, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothSimConfig, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ChaosClothSimConfig, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothLODData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, LODData, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, LodMap, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UsedBoneNames, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UsedBoneIndices, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ReferenceBoneIndex, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UnknownData_S28E, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, CustomData, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothConfig, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UnknownData_1KOS, 0x01EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetCommon, 0x01F0);
		}

		// class UClothLODDataCommon_Legacy : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothLODDataCommon_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, PhysicalMeshData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, ClothPhysicalMeshData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, CollisionData, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, UnknownData_J94G, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothLODDataCommon_Legacy, 0x0188);
		}

		// class UMotoSynthPreset : public UObject
		TEST_METHOD(Class__MotoSynth__MotoSynthPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthPreset, Settings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotoSynthPreset, 0x0090);
		}

		// class UMotoSynthSource : public UObject
		TEST_METHOD(Class__MotoSynth__MotoSynthSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, bConvertTo8Bit, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, UnknownData_RVGD, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, DownSampleFactor, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, RPMCurve, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, SourceData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, SourceDataPCM, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, SourceSampleRate, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, UnknownData_4Y5H, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, GrainTable, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, UnknownData_ZGHO, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotoSynthSource, 0x00F8);
		}

		// class USynthComponentMoto : public USynthComponent
		TEST_METHOD(Class__MotoSynth__SynthComponentMoto)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMoto, MotoSynthPreset, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMoto, RPM, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMoto, UnknownData_DBAY, 0x06CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponentMoto, 0x0780);
		}

		// class UMagicLeapARPinComponent : public USceneComponent
		TEST_METHOD(Class__MagicLeapARPin__MagicLeapARPinComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, ObjectUID, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, UserIndex, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, AutoPinType, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, bShouldPinActor, 0x020D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, UnknownData_FXPH, 0x020E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, PinDataClass, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, SearchPinTypes, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, SearchVolume, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, OnPersistentEntityPinned, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, OnPersistentEntityPinLost, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, OnPinDataLoadAttemptCompleted, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, PinnedCFUID, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, PinnedSceneComponent, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, PinData, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, UnknownData_2L92, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapARPinComponent, 0x03B0);
		}

		// class UMagicLeapARPinFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapARPin__MagicLeapARPinFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapARPinFunctionLibrary, 0x0028);
		}

		// class AMagicLeapARPinInfoActorBase : public AActor
		TEST_METHOD(Class__MagicLeapARPin__MagicLeapARPinInfoActorBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActorBase, PinId, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActorBase, bVisibilityOverride, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActorBase, UnknownData_TQD8, 0x0231);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMagicLeapARPinInfoActorBase, 0x0238);
		}

		// class AMagicLeapARPinRenderer : public AActor
		TEST_METHOD(Class__MagicLeapARPin__MagicLeapARPinRenderer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinRenderer, bInfoActorsVisibilityOverride, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinRenderer, UnknownData_O1U4, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinRenderer, AllInfoActors, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinRenderer, UnknownData_YBQ5, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinRenderer, ClassToSpawn, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMagicLeapARPinRenderer, 0x0288);
		}

		// class UMagicLeapARPinSettings : public UObject
		TEST_METHOD(Class__MagicLeapARPin__MagicLeapARPinSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSettings, UpdateCheckFrequency, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSettings, OnUpdatedEventTriggerDelta, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapARPinSettings, 0x0040);
		}

		// class UMagicLeapARPinSaveGame : public USaveGame
		TEST_METHOD(Class__MagicLeapARPin__MagicLeapARPinSaveGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSaveGame, PinnedID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSaveGame, UnknownData_CAA2, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSaveGame, ComponentWorldTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSaveGame, PinTransform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSaveGame, bShouldPinActor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSaveGame, UnknownData_IOV7, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapARPinSaveGame, 0x00B0);
		}

		// class UMagicLeapARPinContentBindings : public USaveGame
		TEST_METHOD(Class__MagicLeapARPin__MagicLeapARPinContentBindings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinContentBindings, AllContentBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapARPinContentBindings, 0x0078);
		}

		// class UMagicLeapIdentity : public UObject
		TEST_METHOD(Class__MagicLeapIdentity__MagicLeapIdentity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapIdentity, UnknownData_CC3A, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapIdentity, 0x0038);
		}

		// class UMagicLeapImageTrackerComponent : public USceneComponent
		TEST_METHOD(Class__MagicLeapImageTracker__MagicLeapImageTrackerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, TargetImageTexture, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, Name, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, LongerDimension, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, bIsStationary, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, bUseUnreliablePose, 0x0215);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, AxisOrientation, 0x0216);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, UnknownData_YSWV, 0x0217);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, OnSetImageTargetSucceeded, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, OnSetImageTargetFailed, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, OnImageTargetFound, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, OnImageTargetLost, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, OnImageTargetUnreliableTracking, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, UnknownData_TH7L, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapImageTrackerComponent, 0x0270);
		}

		// class UMagicLeapImageTrackerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapImageTracker__MagicLeapImageTrackerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapImageTrackerFunctionLibrary, 0x0028);
		}

		// class UTemplateSequenceSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__TemplateSequence__TemplateSequenceSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequenceSystem, UnknownData_GPBD, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequenceSystem, 0x00B0);
		}

		// class UTemplateSequenceTrack : public UMovieSceneSubTrack
		TEST_METHOD(Class__TemplateSequence__TemplateSequenceTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequenceTrack, 0x0088);
		}

		// class UTemplateSequence : public UMovieSceneSequence
		TEST_METHOD(Class__TemplateSequence__TemplateSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, MovieScene, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, BoundActorClass, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, BoundPreviewActor, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, BoundActorComponents, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequence, 0x0108);
		}

		// class UCameraAnimationSequence : public UTemplateSequence
		TEST_METHOD(Class__TemplateSequence__CameraAnimationSequence)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnimationSequence, 0x0108);
		}

		// class USequenceCameraShakeCameraStandIn : public UObject
		TEST_METHOD(Class__TemplateSequence__SequenceCameraShakeCameraStandIn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeCameraStandIn, UnknownData_KBKI, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeCameraStandIn, FieldOfView, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeCameraStandIn, UnknownData_SBIE, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequenceCameraShakeCameraStandIn, 0x0070);
		}

		// class USequenceCameraShake : public UCameraShakeBase
		TEST_METHOD(Class__TemplateSequence__SequenceCameraShake)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, Sequence, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, PlayRate, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, Scale, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, BlendInTime, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, BlendOutTime, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, RandomSegmentDuration, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, bRandomSegment, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, UnknownData_BA6Y, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, Player, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, CameraStandIn, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, UnknownData_MHRB, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequenceCameraShake, 0x00D0);
		}

		// class USequenceCameraShakeSequencePlayer : public UObject
		TEST_METHOD(Class__TemplateSequence__SequenceCameraShakeSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeSequencePlayer, UnknownData_XK29, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeSequencePlayer, BoundObjectOverride, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeSequencePlayer, Sequence, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeSequencePlayer, RootTemplateInstance, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeSequencePlayer, UnknownData_ZW0C, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequenceCameraShakeSequencePlayer, 0x05D8);
		}

		// class ATemplateSequenceActor : public AActor
		TEST_METHOD(Class__TemplateSequence__TemplateSequenceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, UnknownData_IEP7, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, PlaybackSettings, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, UnknownData_JE9H, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, SequencePlayer, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, TemplateSequence, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, BindingOverride, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, UnknownData_T9VL, 0x026C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATemplateSequenceActor, 0x0270);
		}

		// class UTemplateSequencePlayer : public UMovieSceneSequencePlayer
		TEST_METHOD(Class__TemplateSequence__TemplateSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequencePlayer, UnknownData_9B78, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequencePlayer, 0x0688);
		}

		// class UTemplateSequenceSection : public UMovieSceneSubSection
		TEST_METHOD(Class__TemplateSequence__TemplateSequenceSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequenceSection, UnknownData_6ISO, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequenceSection, 0x0168);
		}

		// class UAudioSynesthesiaNRT : public UAudioAnalyzerNRT
		TEST_METHOD(Class__AudioSynesthesia__AudioSynesthesiaNRT)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioSynesthesiaNRT, 0x0078);
		}

		// class UOnsetNRT : public UAudioSynesthesiaNRT
		TEST_METHOD(Class__AudioSynesthesia__OnsetNRT)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRT, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnsetNRT, 0x0080);
		}

		// class UAudioSynesthesiaNRTSettings : public UAudioAnalyzerNRTSettings
		TEST_METHOD(Class__AudioSynesthesia__AudioSynesthesiaNRTSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioSynesthesiaNRTSettings, 0x0028);
		}

		// class UConstantQNRTSettings : public UAudioSynesthesiaNRTSettings
		TEST_METHOD(Class__AudioSynesthesia__ConstantQNRTSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, StartingFrequency, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, NumBands, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, NumBandsPerOctave, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, AnalysisPeriod, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, bDownmixToMono, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, FFTSize, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, WindowType, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, SpectrumType, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, BandWidthStretch, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, CQTNormalization, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, UnknownData_FCMA, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, NoiseFloorDb, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConstantQNRTSettings, 0x0048);
		}

		// class UConstantQNRT : public UAudioSynesthesiaNRT
		TEST_METHOD(Class__AudioSynesthesia__ConstantQNRT)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRT, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConstantQNRT, 0x0080);
		}

		// class ULoudnessNRTSettings : public UAudioSynesthesiaNRTSettings
		TEST_METHOD(Class__AudioSynesthesia__LoudnessNRTSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, AnalysisPeriod, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, MinimumFrequency, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, MaximumFrequency, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, CurveType, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, UnknownData_HD9N, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, NoiseFloorDb, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, UnknownData_PHT4, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoudnessNRTSettings, 0x0040);
		}

		// class ULoudnessNRT : public UAudioSynesthesiaNRT
		TEST_METHOD(Class__AudioSynesthesia__LoudnessNRT)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRT, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoudnessNRT, 0x0080);
		}

		// class UOnsetNRTSettings : public UAudioSynesthesiaNRTSettings
		TEST_METHOD(Class__AudioSynesthesia__OnsetNRTSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, bDownmixToMono, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, UnknownData_2Y6M, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, GranularityInSeconds, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, Sensitivity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, MinimumFrequency, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, MaximumFrequency, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, UnknownData_X6EE, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnsetNRTSettings, 0x0040);
		}

		// class UBlueprintGameplayTagLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GameplayTags__BlueprintGameplayTagLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintGameplayTagLibrary, 0x0028);
		}

		// class UGameplayTagAssetInterface : public UInterface
		TEST_METHOD(Class__GameplayTags__GameplayTagAssetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagAssetInterface, 0x0028);
		}

		// class UEditableGameplayTagQuery : public UObject
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, UserDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, UnknownData_ZZWM, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, RootExpression, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, TagQueryExportText_Helper, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQuery, 0x0098);
		}

		// class UEditableGameplayTagQueryExpression : public UObject
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression, 0x0028);
		}

		// class UEditableGameplayTagQueryExpression_AnyTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AnyTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AnyTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AnyTagsMatch, 0x0048);
		}

		// class UEditableGameplayTagQueryExpression_AllTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AllTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AllTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AllTagsMatch, 0x0048);
		}

		// class UEditableGameplayTagQueryExpression_NoTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_NoTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_NoTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_NoTagsMatch, 0x0048);
		}

		// class UEditableGameplayTagQueryExpression_AnyExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AnyExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AnyExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AnyExprMatch, 0x0038);
		}

		// class UEditableGameplayTagQueryExpression_AllExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AllExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AllExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AllExprMatch, 0x0038);
		}

		// class UEditableGameplayTagQueryExpression_NoExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_NoExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_NoExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_NoExprMatch, 0x0038);
		}

		// class UGameplayTagsManager : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_UAPI, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, TagSources, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_6W71, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, GameplayTagTables, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_WGUE, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsManager, 0x0210);
		}

		// class UGameplayTagsList : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsList, ConfigFileName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsList, GameplayTagList, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsList, 0x0048);
		}

		// class URestrictedGameplayTagsList : public UObject
		TEST_METHOD(Class__GameplayTags__RestrictedGameplayTagsList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URestrictedGameplayTagsList, ConfigFileName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URestrictedGameplayTagsList, RestrictedGameplayTagList, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URestrictedGameplayTagsList, 0x0048);
		}

		// class UGameplayTagsSettings : public UGameplayTagsList
		TEST_METHOD(Class__GameplayTags__GameplayTagsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, ImportTagsFromConfig, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, WarnOnInvalidTags, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, FastReplication, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, UnknownData_EIJW, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, InvalidTagCharacters, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, CategoryRemapping, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, GameplayTagTableList, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, GameplayTagRedirects, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, CommonlyReplicatedTags, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, NumBitsForContainerSize, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, NetIndexFirstBitSegment, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, RestrictedConfigFiles, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsSettings, 0x00B8);
		}

		// class UGameplayTagsDeveloperSettings : public UDeveloperSettings
		TEST_METHOD(Class__GameplayTags__GameplayTagsDeveloperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsDeveloperSettings, DeveloperConfigName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsDeveloperSettings, FavoriteTagSource, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsDeveloperSettings, 0x0050);
		}

		// class UInputCoreTypes : public UObject
		TEST_METHOD(Class__InputCore__InputCoreTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputCoreTypes, 0x0028);
		}

		// class UBodySetupCore : public UObject
		TEST_METHOD(Class__PhysicsCore__BodySetupCore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetupCore, BoneName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetupCore, PhysicsType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetupCore, CollisionTraceFlag, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetupCore, CollisionReponse, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetupCore, UnknownData_DW4U, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBodySetupCore, 0x0048);
		}

		// class UChaosPhysicalMaterial : public UObject
		TEST_METHOD(Class__PhysicsCore__ChaosPhysicalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, Friction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, StaticFriction, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, Restitution, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, LinearEtherDrag, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, AngularEtherDrag, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, SleepingLinearVelocityThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, SleepingAngularVelocityThreshold, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, UnknownData_6QQO, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosPhysicalMaterial, 0x0048);
		}

		// class UPhysicalMaterial : public UObject
		TEST_METHOD(Class__PhysicsCore__PhysicalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Friction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, StaticFriction, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, FrictionCombineMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, bOverrideFrictionCombineMode, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_99H4, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Restitution, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, RestitutionCombineMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, bOverrideRestitutionCombineMode, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_DDR5, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Density, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, SleepLinearVelocityThreshold, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, SleepAngularVelocityThreshold, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, SleepCounterThreshold, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, RaiseMassToPower, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, DestructibleDamageThresholdScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_D6NH, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, PhysicalMaterialProperty, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, SurfaceType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_4Y78, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterial, 0x0080);
		}

		// class UPhysicalMaterialPropertyBase : public UObject
		TEST_METHOD(Class__PhysicsCore__PhysicalMaterialPropertyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterialPropertyBase, 0x0028);
		}

		// class UPhysicsSettingsCore : public UDeveloperSettings
		TEST_METHOD(Class__PhysicsCore__PhysicsSettingsCore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, DefaultGravityZ, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, DefaultTerminalVelocity, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, DefaultFluidFriction, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, SimulateScratchMemorySize, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, RagdollAggregateThreshold, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, TriangleMeshTriangleMinAreaThreshold, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bEnableShapeSharing, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bEnablePCM, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bEnableStabilization, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bWarnMissingLocks, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bEnable2DPhysics, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bDefaultHasComplexCollision, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, UnknownData_UZPA, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, BounceThresholdVelocity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, FrictionCombineMode, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, RestitutionCombineMode, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, UnknownData_9YLE, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, MaxAngularVelocity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, MaxDepenetrationVelocity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, ContactOffsetMultiplier, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, MinContactOffset, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, MaxContactOffset, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bSimulateSkeletalMeshOnDedicatedServer, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, DefaultShapeComplexity, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, UnknownData_SNNM, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, SolverOptions, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSettingsCore, 0x00E0);
		}

		// class UInputBehavior : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputBehavior, UnknownData_J4EL, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputBehavior, 0x0030);
		}

		// class UInteractiveGizmoBuilder : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveGizmoBuilder, 0x0028);
		}

		// class UAxisAngleGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__AxisAngleGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisAngleGizmoBuilder, 0x0028);
		}

		// class UInteractiveGizmo : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmo, UnknownData_NO2Y, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmo, InputBehaviors, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveGizmo, 0x0038);
		}

		// class UAxisAngleGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__AxisAngleGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, UnknownData_CSQ5, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, AngleSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, HitTarget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, StateTarget, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, bInInteraction, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, UnknownData_3XJ2, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationOrigin, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationAxis, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationPlaneX, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationPlaneY, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionStartPoint, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionCurPoint, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionStartAngle, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionCurAngle, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, UnknownData_8WWH, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisAngleGizmo, 0x00F0);
		}

		// class UAxisPositionGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__AxisPositionGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisPositionGizmoBuilder, 0x0028);
		}

		// class UAxisPositionGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__AxisPositionGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, UnknownData_WPZU, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, ParameterSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, HitTarget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, StateTarget, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, bEnableSignedAxis, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, bInInteraction, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, UnknownData_AO8Y, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionOrigin, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionAxis, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionStartPoint, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionCurPoint, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionStartParameter, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionCurParameter, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, ParameterSign, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, UnknownData_Y6HO, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisPositionGizmo, 0x00D8);
		}

		// class UGizmoConstantAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoConstantAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantAxisSource, UnknownData_J9KQ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantAxisSource, Origin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantAxisSource, Direction, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoConstantAxisSource, 0x0048);
		}

		// class UGizmoConstantFrameAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoConstantFrameAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, UnknownData_702O, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, Origin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, Direction, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, TangentX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, TangentY, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoConstantFrameAxisSource, 0x0060);
		}

		// class UGizmoWorldAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoWorldAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoWorldAxisSource, UnknownData_R5CH, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoWorldAxisSource, Origin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoWorldAxisSource, AxisIndex, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoWorldAxisSource, 0x0040);
		}

		// class UGizmoComponentAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoComponentAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, UnknownData_M6PV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, Component, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, AxisIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, bLocalAxes, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, UnknownData_4XVD, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoComponentAxisSource, 0x0040);
		}

		// class UInteractiveToolPropertySet : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolPropertySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, UnknownData_39YF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, CachedProperties, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, bIsPropertySetEnabled, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, UnknownData_SXQU, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolPropertySet, 0x0060);
		}

		// class UBrushBaseProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__InteractiveToolsFramework__BrushBaseProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, bSpecifyRadius, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, UnknownData_5JG0, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushRadius, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushStrength, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushFalloffAmount, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, bShowStrength, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, bShowFalloff, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, UnknownData_WW6U, 0x0076);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBaseProperties, 0x0078);
		}

		// class UInteractiveTool : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, UnknownData_XZAG, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, InputBehaviors, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, ToolPropertyObjects, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, UnknownData_E8BA, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveTool, 0x0080);
		}

		// class USingleSelectionTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__SingleSelectionTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleSelectionTool, UnknownData_NXBT, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleSelectionTool, 0x0088);
		}

		// class UMeshSurfacePointTool : public USingleSelectionTool
		TEST_METHOD(Class__InteractiveToolsFramework__MeshSurfacePointTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSurfacePointTool, UnknownData_OBKF, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSurfacePointTool, 0x00C0);
		}

		// class UBaseBrushTool : public UMeshSurfacePointTool
		TEST_METHOD(Class__InteractiveToolsFramework__BaseBrushTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, BrushProperties, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, bInBrushStroke, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, UnknownData_VZKP, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, WorldToLocalScale, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, LastBrushStamp, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, UnknownData_7ZNX, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, PropertyClass, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, BrushStampIndicator, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseBrushTool, 0x01C0);
		}

		// class UBrushStampIndicatorBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__BrushStampIndicatorBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushStampIndicatorBuilder, 0x0028);
		}

		// class UBrushStampIndicator : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__BrushStampIndicator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushRadius, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushFalloff, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushNormal, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawIndicatorLines, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawRadiusCircle, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_P2EM, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, SampleStepCount, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, LineColor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, LineThickness, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDepthTested, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawSecondaryLines, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_TRSY, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, SecondaryLineThickness, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, SecondaryLineColor, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_NDRR, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, AttachedComponent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_5L0P, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushStampIndicator, 0x00B0);
		}

		// class UAnyButtonInputBehavior : public UInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__AnyButtonInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnyButtonInputBehavior, UnknownData_XCM0, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnyButtonInputBehavior, 0x0080);
		}

		// class UClickDragInputBehavior : public UAnyButtonInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__ClickDragInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragInputBehavior, UnknownData_HF4K, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragInputBehavior, bUpdateModifiersDuringDrag, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragInputBehavior, UnknownData_JPP6, 0x0121);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClickDragInputBehavior, 0x0140);
		}

		// class ULocalClickDragInputBehavior : public UClickDragInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__LocalClickDragInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalClickDragInputBehavior, UnknownData_ZC8L, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalClickDragInputBehavior, 0x0280);
		}

		// class UInteractiveToolBuilder : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolBuilder, 0x0028);
		}

		// class UClickDragToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__ClickDragToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClickDragToolBuilder, 0x0028);
		}

		// class UClickDragTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__ClickDragTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragTool, UnknownData_PHJ8, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClickDragTool, 0x0088);
		}

		// class AInternalToolFrameworkActor : public AActor
		TEST_METHOD(Class__InteractiveToolsFramework__InternalToolFrameworkActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInternalToolFrameworkActor, 0x0220);
		}

		// class AGizmoActor : public AInternalToolFrameworkActor
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGizmoActor, 0x0220);
		}

		// class UGizmoBaseComponent : public UPrimitiveComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, Color, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, HoverSizeMultiplier, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, PixelHitDistanceThreshold, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, UnknownData_Z4XF, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseComponent, 0x0460);
		}

		// class UGizmoArrowComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoArrowComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Direction, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Gap, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Length, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Thickness, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, UnknownData_9RD6, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoArrowComponent, 0x0480);
		}

		// class UGizmoBoxComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBoxComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, Origin, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, UnknownData_1H1T, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, Rotation, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, Dimensions, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, LineThickness, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, bRemoveHiddenLines, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, bEnableAxisFlip, 0x0491);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, UnknownData_MHIP, 0x0492);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBoxComponent, 0x04A0);
		}

		// class UGizmoCircleComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoCircleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, Normal, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, Radius, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, Thickness, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, NumSides, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, bViewAligned, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, bOnlyAllowFrontFacingHits, 0x0479);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, UnknownData_N2T3, 0x047A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoCircleComponent, 0x0480);
		}

		// class UGizmoTransformSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoTransformSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoTransformSource, 0x0028);
		}

		// class UGizmoAxisSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisSource, 0x0028);
		}

		// class UGizmoClickTarget : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoClickTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoClickTarget, 0x0028);
		}

		// class UGizmoStateTarget : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoStateTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoStateTarget, 0x0028);
		}

		// class UGizmoFloatParameterSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoFloatParameterSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoFloatParameterSource, 0x0028);
		}

		// class UGizmoVec2ParameterSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoVec2ParameterSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoVec2ParameterSource, 0x0028);
		}

		// class UGizmoLineHandleComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLineHandleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Normal, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, HandleSize, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Thickness, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Direction, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Length, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, bImageScale, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, UnknownData_OVOZ, 0x0485);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLineHandleComponent, 0x0490);
		}

		// class UGizmoRectangleComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoRectangleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, DirectionX, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, DirectionY, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, OffsetX, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, OffsetY, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, LengthX, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, LengthY, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, Thickness, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, SegmentFlags, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, UnknownData_BQE1, 0x048D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoRectangleComponent, 0x0490);
		}

		// class UGizmoLambdaHitTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLambdaHitTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLambdaHitTarget, UnknownData_2S03, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLambdaHitTarget, 0x00B0);
		}

		// class UGizmoComponentHitTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoComponentHitTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentHitTarget, UnknownData_Z9C5, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentHitTarget, Component, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentHitTarget, UnknownData_UDQC, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoComponentHitTarget, 0x0080);
		}

		// class UInputBehaviorSet : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InputBehaviorSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputBehaviorSet, Behaviors, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputBehaviorSet, 0x0038);
		}

		// class UInputBehaviorSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__InputBehaviorSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputBehaviorSource, 0x0028);
		}

		// class UInputRouter : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InputRouter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, bAutoInvalidateOnHover, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, bAutoInvalidateOnCapture, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, UnknownData_K46T, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, ActiveInputBehaviors, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, UnknownData_4P2Q, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputRouter, 0x00B0);
		}

		// class UInteractionMechanic : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractionMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionMechanic, UnknownData_W6VI, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractionMechanic, 0x0030);
		}

		// class UInteractiveGizmoManager : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveGizmoManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, UnknownData_CU2D, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, ActiveGizmos, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, UnknownData_YSLR, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, GizmoBuilders, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, UnknownData_9PZQ, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveGizmoManager, 0x00B8);
		}

		// class UToolContextTransactionProvider : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__ToolContextTransactionProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolContextTransactionProvider, 0x0028);
		}

		// class UInteractiveToolManager : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, UnknownData_UOU1, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, ActiveLeftTool, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, ActiveRightTool, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, UnknownData_Y7QG, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, ToolBuilders, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, UnknownData_9SNM, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolManager, 0x0138);
		}

		// class UToolFrameworkComponent : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__ToolFrameworkComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolFrameworkComponent, 0x0028);
		}

		// class UInteractiveToolsContext : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolsContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, UnknownData_DYBB, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, InputRouter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, ToolManager, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, GizmoManager, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, ToolManagerClass, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolsContext, 0x0098);
		}

		// class AIntervalGizmoActor : public AGizmoActor
		TEST_METHOD(Class__InteractiveToolsFramework__IntervalGizmoActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntervalGizmoActor, UpIntervalComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntervalGizmoActor, DownIntervalComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntervalGizmoActor, ForwardIntervalComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AIntervalGizmoActor, 0x0238);
		}

		// class UIntervalGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__IntervalGizmoBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmoBuilder, UnknownData_4218, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntervalGizmoBuilder, 0x00C0);
		}

		// class UIntervalGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__IntervalGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, StateTarget, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, UnknownData_R5PO, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, TransformProxy, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, ActiveComponents, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, ActiveGizmos, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, UnknownData_370K, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, AxisYSource, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, AxisZSource, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, UnknownData_TZ14, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntervalGizmo, 0x0130);
		}

		// class UGizmoBaseFloatParameterSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseFloatParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseFloatParameterSource, UnknownData_HRKS, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseFloatParameterSource, 0x0048);
		}

		// class UGizmoAxisIntervalParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisIntervalParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisIntervalParameterSource, FloatParameterSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisIntervalParameterSource, MinParameter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisIntervalParameterSource, MaxParameter, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisIntervalParameterSource, 0x0060);
		}

		// class UKeyAsModifierInputBehavior : public UInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__KeyAsModifierInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyAsModifierInputBehavior, UnknownData_0LCE, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKeyAsModifierInputBehavior, 0x0110);
		}

		// class UMeshSurfacePointToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__MeshSurfacePointToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSurfacePointToolBuilder, UnknownData_F7FI, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSurfacePointToolBuilder, 0x0030);
		}

		// class UMouseHoverBehavior : public UInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__MouseHoverBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMouseHoverBehavior, UnknownData_DO0F, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMouseHoverBehavior, 0x0098);
		}

		// class UMultiClickSequenceInputBehavior : public UAnyButtonInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__MultiClickSequenceInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiClickSequenceInputBehavior, UnknownData_ZE44, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiClickSequenceInputBehavior, 0x0130);
		}

		// class UMultiSelectionTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__MultiSelectionTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiSelectionTool, UnknownData_CEGW, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiSelectionTool, 0x0090);
		}

		// class UGizmoLocalFloatParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLocalFloatParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalFloatParameterSource, Value, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalFloatParameterSource, LastChange, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalFloatParameterSource, UnknownData_KPMQ, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLocalFloatParameterSource, 0x0058);
		}

		// class UGizmoBaseVec2ParameterSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseVec2ParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseVec2ParameterSource, UnknownData_M8HD, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseVec2ParameterSource, 0x0048);
		}

		// class UGizmoLocalVec2ParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLocalVec2ParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalVec2ParameterSource, Value, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalVec2ParameterSource, LastChange, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLocalVec2ParameterSource, 0x0060);
		}

		// class UGizmoAxisTranslationParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisTranslationParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, UnknownData_C4FJ, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, AxisSource, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, Parameter, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, LastChange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, CurTranslationAxis, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, CurTranslationOrigin, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, UnknownData_SHIG, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, InitialTransform, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisTranslationParameterSource, 0x0110);
		}

		// class UGizmoPlaneTranslationParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoPlaneTranslationParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, UnknownData_3SR8, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, AxisSource, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, Parameter, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, LastChange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationOrigin, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationNormal, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationAxisX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationAxisY, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, UnknownData_AT0M, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, InitialTransform, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoPlaneTranslationParameterSource, 0x0130);
		}

		// class UGizmoAxisRotationParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisRotationParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, UnknownData_RZ1K, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, AxisSource, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, Angle, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, LastChange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, CurRotationAxis, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, CurRotationOrigin, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, UnknownData_B444, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, InitialTransform, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisRotationParameterSource, 0x0110);
		}

		// class UGizmoUniformScaleParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoUniformScaleParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, TransformSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, ScaleMultiplier, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, Parameter, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, LastChange, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleOrigin, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleNormal, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleAxisX, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleAxisY, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, UnknownData_5XGL, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, InitialTransform, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoUniformScaleParameterSource, 0x00F0);
		}

		// class UGizmoAxisScaleParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisScaleParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, TransformSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, ScaleMultiplier, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, Parameter, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, LastChange, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, CurScaleAxis, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, CurScaleOrigin, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, InitialTransform, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisScaleParameterSource, 0x00C0);
		}

		// class UGizmoPlaneScaleParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoPlaneScaleParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, UnknownData_CKS0, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, AxisSource, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, ScaleMultiplier, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, Parameter, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, LastChange, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleOrigin, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleNormal, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleAxisX, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleAxisY, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, UnknownData_Q6SE, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, InitialTransform, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoPlaneScaleParameterSource, 0x0130);
		}

		// class UPlanePositionGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__PlanePositionGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanePositionGizmoBuilder, 0x0028);
		}

		// class UPlanePositionGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__PlanePositionGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, UnknownData_K2M8, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, ParameterSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, HitTarget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, StateTarget, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bEnableSignedAxis, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bFlipX, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bFlipY, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bInInteraction, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionOrigin, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionNormal, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionAxisX, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionAxisY, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionStartPoint, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionCurPoint, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionStartParameter, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionCurParameter, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, ParameterSigns, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, UnknownData_FBEQ, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanePositionGizmo, 0x0100);
		}

		// class USelectionSet : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__SelectionSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USelectionSet, UnknownData_98MP, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelectionSet, 0x0040);
		}

		// class UMeshSelectionSet : public USelectionSet
		TEST_METHOD(Class__InteractiveToolsFramework__MeshSelectionSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Vertices, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Edges, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Faces, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Groups, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionSet, 0x0080);
		}

		// class USingleClickInputBehavior : public UAnyButtonInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__SingleClickInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickInputBehavior, UnknownData_G1YJ, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickInputBehavior, HitTestOnRelease, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickInputBehavior, UnknownData_8P3W, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleClickInputBehavior, 0x0130);
		}

		// class USingleClickToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__SingleClickToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleClickToolBuilder, 0x0028);
		}

		// class USingleClickTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__SingleClickTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickTool, UnknownData_G177, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleClickTool, 0x0088);
		}

		// class UGizmoNilStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoNilStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoNilStateTarget, UnknownData_GYPI, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoNilStateTarget, 0x0030);
		}

		// class UGizmoLambdaStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLambdaStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLambdaStateTarget, UnknownData_505J, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLambdaStateTarget, 0x00B0);
		}

		// class UGizmoObjectModifyStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoObjectModifyStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoObjectModifyStateTarget, UnknownData_3AE4, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoObjectModifyStateTarget, 0x0058);
		}

		// class UGizmoTransformChangeStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoTransformChangeStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformChangeStateTarget, UnknownData_QS89, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformChangeStateTarget, TransactionManager, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformChangeStateTarget, UnknownData_LX24, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoTransformChangeStateTarget, 0x00E0);
		}

		// class ATransformGizmoActor : public AGizmoActor
		TEST_METHOD(Class__InteractiveToolsFramework__TransformGizmoActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateX, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateY, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateZ, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateYZ, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateXZ, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateXY, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, RotateX, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, RotateY, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, RotateZ, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, UniformScale, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, AxisScaleX, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, AxisScaleY, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, AxisScaleZ, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, PlaneScaleYZ, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, PlaneScaleXZ, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, PlaneScaleXY, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATransformGizmoActor, 0x02A0);
		}

		// class UTransformGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__TransformGizmoBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmoBuilder, UnknownData_ZSMP, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformGizmoBuilder, 0x00C0);
		}

		// class UTransformGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__TransformGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_AHM1, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ActiveTarget, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bSnapToWorldGrid, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bGridSizeIsExplicit, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_CFQT, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ExplicitGridSize, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bRotationGridSizeIsExplicit, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_GPA9, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ExplicitRotationGridSize, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bSnapToWorldRotGrid, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bUseContextCoordinateSystem, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_QJWG, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, CurrentCoordinateSystem, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_Y08Y, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_8FQB, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ActiveComponents, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, NonuniformScaleComponents, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ActiveGizmos, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_Z7AS, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, CameraAxisSource, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, AxisXSource, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, AxisYSource, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, AxisZSource, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnitAxisXSource, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnitAxisYSource, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnitAxisZSource, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, StateTarget, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ScaledTransformSource, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_O8LV, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformGizmo, 0x01A0);
		}

		// class UTransformProxy : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__TransformProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, UnknownData_JLBW, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, bRotatePerObject, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, bSetPivotMode, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, UnknownData_P96L, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, SharedTransform, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, InitialSharedTransform, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformProxy, 0x00F0);
		}

		// class UGizmoBaseTransformSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseTransformSource, UnknownData_P5H5, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseTransformSource, 0x0048);
		}

		// class UGizmoComponentWorldTransformSource : public UGizmoBaseTransformSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoComponentWorldTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentWorldTransformSource, Component, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentWorldTransformSource, bModifyComponentOnTransform, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentWorldTransformSource, UnknownData_XHB6, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoComponentWorldTransformSource, 0x0058);
		}

		// class UGizmoScaledTransformSource : public UGizmoBaseTransformSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoScaledTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoScaledTransformSource, ChildTransformSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoScaledTransformSource, UnknownData_IA0Y, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoScaledTransformSource, 0x00E0);
		}

		// class UGizmoTransformProxyTransformSource : public UGizmoBaseTransformSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoTransformProxyTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformProxyTransformSource, Proxy, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoTransformProxyTransformSource, 0x0050);
		}

		// class ULuminRuntimeSettings : public UObject
		TEST_METHOD(Class__LuminRuntimeSettings__LuminRuntimeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, PackageName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, ApplicationDisplayName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, FrameTimingHint, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bProtectedContent, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bManualCallToAppReady, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bUseMobileRendering, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bUseVulkan, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, UnknownData_PYMQ, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, Certificate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, IconModelPath, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, IconPortalPath, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, LocalizedIconInfos, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, VersionCode, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, MinimumAPILevel, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, AppPrivileges, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, ExtraComponentSubElements, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, ExtraComponentElements, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, SpatializationPlugin, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, ReverbPlugin, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, OcclusionPlugin, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, SoundCueCookQualityIndex, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bRemoveDebugInfo, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, UnknownData_FOG5, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, VulkanValidationLayerLibs, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bFrameVignette, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, UnknownData_87SW, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, LocalizedAppNames, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, UnknownData_D1JZ, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminRuntimeSettings, 0x0148);
		}

		// class UMagicLeapEyeTrackerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapEyeTracker__MagicLeapEyeTrackerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapEyeTrackerFunctionLibrary, 0x0028);
		}

		// class UUdpMessagingSettings : public UObject
		TEST_METHOD(Class__UdpMessaging__UdpMessagingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, EnabledByDefault, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, EnableTransport, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, bAutoRepair, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, bStopServiceWhenAppDeactivates, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_I48I, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnicastEndpoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MulticastEndpoint, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MessageFormat, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MulticastTimeToLive, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_HAT7, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, StaticEndpoints, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, EnableTunnel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_8I65, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, TunnelUnicastEndpoint, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, TunnelMulticastEndpoint, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, RemoteTunnelEndpoints, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUdpMessagingSettings, 0x00A0);
		}

		// class UActorSequence : public UMovieSceneSequence
		TEST_METHOD(Class__ActorSequence__ActorSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequence, MovieScene, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequence, ObjectReferences, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequence, 0x0088);
		}

		// class UActorSequenceComponent : public UActorComponent
		TEST_METHOD(Class__ActorSequence__ActorSequenceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, PlaybackSettings, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, UnknownData_EK04, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, Sequence, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, SequencePlayer, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequenceComponent, 0x00D8);
		}

		// class UActorSequencePlayer : public UMovieSceneSequencePlayer
		TEST_METHOD(Class__ActorSequence__ActorSequencePlayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequencePlayer, 0x0680);
		}

		// class UStaticMeshDescription : public UMeshDescriptionBase
		TEST_METHOD(Class__StaticMeshDescription__StaticMeshDescription)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshDescription, 0x0390);
		}

		// class UPropertyAccess : public UInterface
		TEST_METHOD(Class__PropertyAccess__PropertyAccess)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyAccess, 0x0028);
		}

		// class UPropertyEventBroadcaster : public UInterface
		TEST_METHOD(Class__PropertyAccess__PropertyEventBroadcaster)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyEventBroadcaster, 0x0028);
		}

		// class UPropertyEventSubscriber : public UInterface
		TEST_METHOD(Class__PropertyAccess__PropertyEventSubscriber)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyEventSubscriber, 0x0028);
		}

		// class UClothConfigBase : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothConfigBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothConfigBase, 0x0028);
		}

		// class UClothingSimulationFactory : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingSimulationFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationFactory, 0x0028);
		}

		// class UClothingSimulationInteractor : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingSimulationInteractor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingSimulationInteractor, UnknownData_WQHZ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationInteractor, 0x0030);
		}

		// class UClothSharedSimConfigBase : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothSharedSimConfigBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothSharedSimConfigBase, 0x0028);
		}

		// class UClothingAssetBase : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingAssetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetBase, ImportedFilePath, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetBase, AssetGuid, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetBase, 0x0048);
		}

		// class UClothPhysicalMeshDataBase_Legacy : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothPhysicalMeshDataBase_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, Vertices, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, Normals, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, Indices, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, InverseMasses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, BoneData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, NumFixedVerts, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, MaxBoneWeights, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, SelfCollisionIndices, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, UnknownData_REC1, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothPhysicalMeshDataBase_Legacy, 0x00E0);
		}

		// class UMeshDescription : public UObject
		TEST_METHOD(Class__MeshDescription__MeshDescription)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshDescription, 0x0028);
		}

		// class UMeshDescriptionBase : public UObject
		TEST_METHOD(Class__MeshDescription__MeshDescriptionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshDescriptionBase, UnknownData_IC6S, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshDescriptionBase, 0x0390);
		}

		// class USteamAuthComponentModuleInterface : public UHandlerComponentFactory
		TEST_METHOD(Class__OnlineSubsystemSteam__SteamAuthComponentModuleInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamAuthComponentModuleInterface, 0x0028);
		}

		// class USteamNetConnection : public UIpConnection
		TEST_METHOD(Class__OnlineSubsystemSteam__SteamNetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamNetConnection, bIsPassthrough, 0x1B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamNetConnection, UnknownData_N4S0, 0x1B91);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamNetConnection, 0x1B98);
		}

		// class USteamNetDriver : public UIpNetDriver
		TEST_METHOD(Class__OnlineSubsystemSteam__SteamNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamNetDriver, UnknownData_HUEY, 0x07B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamNetDriver, 0x07C0);
		}

		// class UAudioAnalyzerAsset : public UObject
		TEST_METHOD(Class__AudioAnalyzer__AudioAnalyzerAsset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioAnalyzerAsset, 0x0028);
		}

		// class UAudioAnalyzerNRTSettings : public UAudioAnalyzerAsset
		TEST_METHOD(Class__AudioAnalyzer__AudioAnalyzerNRTSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioAnalyzerNRTSettings, 0x0028);
		}

		// class UAudioAnalyzerNRT : public UAudioAnalyzerAsset
		TEST_METHOD(Class__AudioAnalyzer__AudioAnalyzerNRT)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAnalyzerNRT, Sound, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAnalyzerNRT, DurationInSeconds, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAnalyzerNRT, UnknownData_SVY9, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioAnalyzerNRT, 0x0078);
		}

		// class UPartyMemberVoiceWidget_C : public UVoiceChatWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PartyMemberVoiceWidget__PartyMemberVoiceWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberVoiceWidget_C, UberGraphFrame, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberVoiceWidget_C, HideAnimation, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberVoiceWidget_C, ShowAnimation, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberVoiceWidget_C, AccountNameText, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberVoiceWidget_C, InvalidationBox_1, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberVoiceWidget_C, NameAndSpeaker, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberVoiceWidget_C, SpeakerImage, 0x06C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyMemberVoiceWidget_C, 0x06C8);
		}

		// class ATLWorldSettingsBlueprint_C : public ATLWorldSettings
		TEST_METHOD(BlueprintGeneratedClass__TLWorldSettingsBlueprint__TLWorldSettingsBlueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLWorldSettingsBlueprint_C, DefaultSceneRoot, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATLWorldSettingsBlueprint_C, 0x03E0);
		}

		// class UDefaultEditor_TimeOfDay_C : public UBaseTimeOfDayHandler_C
		TEST_METHOD(BlueprintGeneratedClass__DefaultEditor_TimeOfDay__DefaultEditor_TimeOfDay_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultEditor_TimeOfDay_C, 0x0A60);
		}

		// class UOverlayMapWrapper_C : public UOverlayMapWrapper
		TEST_METHOD(WidgetBlueprintGeneratedClass__OverlayMapWrapper__OverlayMapWrapper_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlayMapWrapper_C, OverlayMapWidget, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlayMapWrapper_C, 0x0650);
		}

		// class UOptionsListMenu_C : public UOptionsMenuWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__OptionsListMenu__OptionsListMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsListMenu_C, UberGraphFrame, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsListMenu_C, FrameReveal, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsListMenu_C, ApplyButton, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsListMenu_C, FiligreeLeft, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsListMenu_C, GamepadButtonLegend, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsListMenu_C, glow, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsListMenu_C, HorizontalBox_3, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsListMenu_C, KeybindingsButton, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsListMenu_C, OptionListWidget_2, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsListMenu_C, SafeZoneIllustration, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsListMenu_C, SkillCategoryHeader, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsListMenu_C, Style_CloseButtonSmall_C_1, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsListMenu_C, TLBorderHighlightable_1, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsListMenu_C, TLImage_3, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsListMenu_C, TLImage_4, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsListMenu_C, TLImage_5, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsListMenu_C, TLTextBlock_3, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsListMenu_C, TLTextBlock_5, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsListMenu_C, VideoSettingsButton, 0x08E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOptionsListMenu_C, 0x08E8);
		}

		// class UItemNameplate_C : public UItemNameplateWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ItemNameplate__ItemNameplate_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemNameplate_C, UberGraphFrame, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemNameplate_C, AlreadyShowing, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemNameplate_C, show, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemNameplate_C, BorderFrame, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemNameplate_C, HighlightBorder, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemNameplate_C, NameTextBlock, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemNameplate_C, 0x0680);
		}

		// class UInventoryComparisonWidget_C : public UInventoryComparisonWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InventoryComparisonWidget__InventoryComparisonWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComparisonWidget_C, ComparisonSwitcher, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComparisonWidget_C, EquippedItemTooltip, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComparisonWidget_C, EquippedPetDetailTooltip, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComparisonWidget_C, SelectedItemTooltip, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComparisonWidget_C, SelectedPetDetailTooltip, 0x06C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryComparisonWidget_C, 0x06D0);
		}

		// class UHelpOnHUD_Demo_C : public UHelpTabbedMenu
		TEST_METHOD(WidgetBlueprintGeneratedClass__HelpOnHUD_Demo__HelpOnHUD_Demo_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHelpOnHUD_Demo_C, UberGraphFrame, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHelpOnHUD_Demo_C, BasicHeader, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHelpOnHUD_Demo_C, GamepadButtonLegend, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHelpOnHUD_Demo_C, HelpButtonsPanel, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHelpOnHUD_Demo_C, HelpCategoriesList, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHelpOnHUD_Demo_C, MainCanvasPanel, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHelpOnHUD_Demo_C, OuterFrame, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHelpOnHUD_Demo_C, SlotCanvasPanel, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHelpOnHUD_Demo_C, Style_CloseButton, 0x0878);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHelpOnHUD_Demo_C, 0x0880);
		}

		// class UFortEditWidget_C : public UFortEditWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__FortEditWidget__FortEditWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget_C, UberGraphFrame, 0x18D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget_C, show, 0x18D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget_C, Cursor_Crosshairs, 0x18E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget_C, Cursor_SlashedCircle, 0x18E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget_C, CustomizeButton, 0x18F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget_C, FortInventoryWidget_C_1, 0x18F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget_C, FortPropWidget_BuyOrPlace, 0x1900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget_C, HotkeyWidget, 0x1908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget_C, HoveredPropText, 0x1910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget_C, Overlay_1, 0x1918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget_C, PlaceableArea, 0x1920);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFortEditWidget_C, 0x1928);
		}

		// class UCreditsScreen_C : public UCreditsWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CreditsScreen__CreditsScreen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, show, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, AllPixels, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, Amymazy, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, ArtBully, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, Badgerattack, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, BasicHeader_C_1, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, BasicHeader_C_2, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, Cheiko, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, Christs, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, ConceptArtAndIllustration, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_2, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_3, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_4, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_5, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_6, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_7, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_8, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_9, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_10, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_11, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_12, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_13, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_14, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_15, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_16, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_17, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_18, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_19, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_20, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_21, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_22, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_23, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_24, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_25, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_26, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_27, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_28, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_29, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_30, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_31, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_32, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_33, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_34, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_35, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_36, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_37, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_38, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_39, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_40, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_41, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_42, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_43, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_44, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_45, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_46, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_47, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_48, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_49, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_50, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_51, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_52, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_53, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_54, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_55, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_56, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_57, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_58, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_59, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_60, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_61, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_62, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_63, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_64, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_65, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_66, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_67, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_68, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_69, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_70, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_71, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_72, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_73, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_74, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_75, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_76, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_77, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_78, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_79, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_80, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_81, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_82, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_83, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_84, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_85, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_86, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_87, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_88, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_89, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_90, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_91, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_92, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_93, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_94, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_95, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_96, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_97, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_98, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_99, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_100, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_101, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_102, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_103, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_104, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_105, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_106, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_107, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_108, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_109, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_110, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_111, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_112, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_113, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_114, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_115, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_116, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_117, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_118, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_119, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_120, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_121, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_122, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_123, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_124, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_125, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_126, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_127, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_128, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_129, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_130, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_131, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_132, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_133, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_134, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_135, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_136, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_137, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_138, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_139, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_140, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_141, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_142, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_143, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_144, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_145, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_146, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_147, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_148, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_149, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_150, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_151, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_152, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_153, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_154, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_155, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_167, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_168, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_169, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_170, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_171, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_172, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_173, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_174, 0x0BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_175, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_176, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_177, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_178, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_179, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_194, 0x0BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_195, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_196, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_197, 0x0C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_198, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_199, 0x0C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_200, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_201, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_202, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_203, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_204, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameFirst_C_205, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_2, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_3, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_4, 0x0C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_5, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_6, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_7, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_8, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_9, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_10, 0x0C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_11, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_12, 0x0CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_13, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_14, 0x0CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_15, 0x0CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_16, 0x0CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_17, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_18, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_19, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_20, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_21, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_22, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_23, 0x0D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_24, 0x0D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_25, 0x0D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_26, 0x0D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_27, 0x0D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_28, 0x0D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_29, 0x0D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_30, 0x0D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_31, 0x0D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_32, 0x0D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_33, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_34, 0x0D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_35, 0x0D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_36, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_37, 0x0D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_38, 0x0D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_39, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_40, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_41, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_42, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_43, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_44, 0x0DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_45, 0x0DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_46, 0x0DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_47, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_48, 0x0DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_49, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_50, 0x0DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_51, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_52, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_53, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_54, 0x0DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_55, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_56, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_57, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_58, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_59, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_60, 0x0E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_61, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_62, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_63, 0x0E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_64, 0x0E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_65, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_66, 0x0E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_67, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_68, 0x0E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_69, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_70, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_71, 0x0E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_72, 0x0E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_73, 0x0E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_74, 0x0E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_75, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_76, 0x0EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_77, 0x0EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_78, 0x0EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_79, 0x0EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_80, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_81, 0x0ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_82, 0x0ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_83, 0x0EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_84, 0x0EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_85, 0x0EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_86, 0x0EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_87, 0x0F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_88, 0x0F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_89, 0x0F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_90, 0x0F18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_91, 0x0F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_92, 0x0F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_93, 0x0F30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_94, 0x0F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_95, 0x0F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_96, 0x0F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_97, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_98, 0x0F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_99, 0x0F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_100, 0x0F68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_101, 0x0F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_102, 0x0F78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_103, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_104, 0x0F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_105, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_106, 0x0F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_107, 0x0FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_108, 0x0FA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_109, 0x0FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_110, 0x0FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_111, 0x0FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_112, 0x0FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_113, 0x0FD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_114, 0x0FD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_115, 0x0FE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_116, 0x0FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_117, 0x0FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_118, 0x0FF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_119, 0x1000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_120, 0x1008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_121, 0x1010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_122, 0x1018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_123, 0x1020);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_124, 0x1028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_125, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_126, 0x1038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_127, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_128, 0x1048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_129, 0x1050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_130, 0x1058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_131, 0x1060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_132, 0x1068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_133, 0x1070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_134, 0x1078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_135, 0x1080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_136, 0x1088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_137, 0x1090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_138, 0x1098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_139, 0x10A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_140, 0x10A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_141, 0x10B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_142, 0x10B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_143, 0x10C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_144, 0x10C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_145, 0x10D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_146, 0x10D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_147, 0x10E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_148, 0x10E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_149, 0x10F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_150, 0x10F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_151, 0x1100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_152, 0x1108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_153, 0x1110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_154, 0x1118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_155, 0x1120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_167, 0x1128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_168, 0x1130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_169, 0x1138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_170, 0x1140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_171, 0x1148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_172, 0x1150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_173, 0x1158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_174, 0x1160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_175, 0x1168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_176, 0x1170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_177, 0x1178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_178, 0x1180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_179, 0x1188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_194, 0x1190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_195, 0x1198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_196, 0x11A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_197, 0x11A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_198, 0x11B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_199, 0x11B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_200, 0x11C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_201, 0x11C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_202, 0x11D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_203, 0x11D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_204, 0x11E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, CreditNameLast_C_205, 0x11E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, EchtraGamesTeam, 0x11F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, Elveone, 0x11F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, Fox, 0x1200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, GamepadButtonLegend, 0x1208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, idodmg, 0x1210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, Image_89, 0x1218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, JesterlyJoking, 0x1220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, LionbridgeGamingGroup, 0x1228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, MotionLogicStudios, 0x1230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, MrLlamaSC, 0x1238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, Narfi, 0x1240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, Noki, 0x1248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, Oodle, 0x1250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, Papi, 0x1258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, PerfectWorldEUTeam, 0x1260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, PerfectWorldTeam, 0x1268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, Phanjam, 0x1270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, rdunlap, 0x1278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, rhykker, 0x1280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, Shellface, 0x1288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, SpecialThanks, 0x1290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, Streamline, 0x1298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, Struck, 0x12A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, Style_CloseButtonSmall_C_1, 0x12A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, Sully, 0x12B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, TLImage_56, 0x12B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, TLImage_58, 0x12C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, TLImage_191, 0x12C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, TLImage_193, 0x12D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, TLImage_194, 0x12D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, TLImage_195, 0x12E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, TLImage_196, 0x12E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, TLImage_222, 0x12F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, TLScrollBox_89, 0x12F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, TopSniff, 0x1300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, Webbstre, 0x1308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreen_C, Zattori, 0x1310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreditsScreen_C, 0x1318);
		}

		// class UCraftingConfirmationWidget_C : public UCraftingConfirmationWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CraftingConfirmationWidget__CraftingConfirmationWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingConfirmationWidget_C, UberGraphFrame, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingConfirmationWidget_C, AcceptButton, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingConfirmationWidget_C, AcceptButtonText, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingConfirmationWidget_C, CostList, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingConfirmationWidget_C, DescriptionText, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingConfirmationWidget_C, GamepadButtonLegend, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingConfirmationWidget_C, GoldCost, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingConfirmationWidget_C, GoldLimitWidget, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingConfirmationWidget_C, MouseKeyboardButtons, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingConfirmationWidget_C, RejectButton, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingConfirmationWidget_C, RejectButtonText, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingConfirmationWidget_C, SmallHeader, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingConfirmationWidget_C, TLBorder_2, 0x0780);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingConfirmationWidget_C, 0x0788);
		}

		// class UAccountOptions_C : public UAccountOptionsModalWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__AccountOptions__AccountOptions_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, UberGraphFrame, 0x1208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, MultiplayerLoadingSpinnerAnim, 0x1210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, ShowMultiPlayerReset, 0x1218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, ShowSinglePlayerReset, 0x1220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, ShowMain, 0x1228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, Blur, 0x1230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, Divider, 0x1238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, LoadingSpinner, 0x1240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, LongDescriptionContainer, 0x1248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, MultiPlayerAccountReset, 0x1250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, MultiplayerHeroCountArea, 0x1258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, MultiplayerHeroesCount, 0x1260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, MultiplayerListWidget, 0x1268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, MultiplayerResetButton, 0x1270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, RejectButtonText, 0x1278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, SinglePlayerAccountReset_158, 0x1280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, SinglePlayerHeroesCount, 0x1288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, SinglePlayerListWidget, 0x1290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, SinglePlayerResetButton, 0x1298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, SmallHeader, 0x12A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, SmallHeader_C_1, 0x12A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, SmallHeader_C_3, 0x12B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, SmallHeader_C_4, 0x12B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, Style_CloseButtonSmall, 0x12C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, TLBorder_3, 0x12C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, TLBorder_4, 0x12D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, TLImage_169, 0x12D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, TLRichTextBlock_102, 0x12E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, TLRichTextBlock_258, 0x12E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, TLRichTextBlock_260, 0x12F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, TLRichTextBlock_264, 0x12F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, TLRichTextBlock_266, 0x1300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, TLTextBlock, 0x1308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, TLTextBlock_5, 0x1310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, UnlinkAccountButton, 0x1318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptions_C, UnlinkLIstWidget, 0x1320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAccountOptions_C, 0x1328);
		}

		// class ULightBody1TextStyle_C : public UTLTextStyle
		TEST_METHOD(BlueprintGeneratedClass__LightBody1TextStyle__LightBody1TextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightBody1TextStyle_C, 0x00A8);
		}

		// class UNavigationHeader_C : public UNavigationHeader
		TEST_METHOD(WidgetBlueprintGeneratedClass__NavigationHeader__NavigationHeader_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationHeader_C, UberGraphFrame, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationHeader_C, ButtonsSizeBox, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationHeader_C, CloseMenuButton, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationHeader_C, CurrencySizeBox, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationHeader_C, Header, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationHeader_C, HeaderOverlay, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationHeader_C, LeftNavWidget, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationHeader_C, MenuButtonList, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationHeader_C, MenuHeader, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationHeader_C, RightHandCurrencySlot, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationHeader_C, RightNavWidget, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationHeader_C, SingleHeader, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationHeader_C, TLImage_1, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationHeader_C, TLImage_4, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationHeader_C, TLImage_61, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationHeader_C, bShowCloseButton, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationHeader_C, bMenuHeaderOnly, 0x06B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationHeader_C, 0x06BA);
		}

		// class UGoldLimitWidget_C : public UGoldLimitWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__GoldLimitWidget__GoldLimitWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGoldLimitWidget_C, GoldIcon, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGoldLimitWidget_C, ProgressBar_1, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGoldLimitWidget_C, TLTextBlock_1, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGoldLimitWidget_C, TraitTextBlock_1, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGoldLimitWidget_C, 0x06A0);
		}

		// class ULightHeader3TextStyle_C : public ULightHeader1TextStyle_C
		TEST_METHOD(BlueprintGeneratedClass__LightHeader3TextStyle__LightHeader3TextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightHeader3TextStyle_C, 0x00A8);
		}

		// class UVendorInventoryEntry_C : public UVendorInventoryEntryWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__VendorInventoryEntry__VendorInventoryEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorInventoryEntry_C, TryToEquip, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorInventoryEntry_C, Equip, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorInventoryEntry_C, VendorCatalogEntry, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorInventoryEntry_C, EquipEvent, 0x0920);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVendorInventoryEntry_C, 0x0938);
		}

		// class UGenericResourceWidgetSmall_C : public UGenericResourceWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__GenericResourceWidgetSmall__GenericResourceWidgetSmall_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericResourceWidgetSmall_C, CurrencyWidget_Small, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericResourceWidgetSmall_C, TinyCurrencyCost, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericResourceWidgetSmall_C, TinyInventoryItem, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericResourceWidgetSmall_C, WidgetSwitcher_1, 0x0868);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericResourceWidgetSmall_C, 0x0870);
		}

		// class UInventoryItemTooltip_C : public UInventoryItemDetailsWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InventoryItemTooltip__InventoryItemTooltip_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, UberGraphFrame, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, AttackSpeedIcon, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, BasicAttack, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, Border, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, BreakDownBorder, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, BreakDownResource, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, CannotSacrificeForArborium, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, CannotSacrificeForLuck, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, CannotUseInArea, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, ChallengeBonusText, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, ClassRequiredBorder, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, CraftingMessageBorder, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, CraftingMessageText, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, DamageBox, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, DamageOverTime, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, DamageText, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, Description, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, Divider, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, DPS, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, DPSIcon, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, EnchantList, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, EquippedBorder, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, GoldText, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, HorizontalBox_1, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, HorizontalBox_6, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, HorizontalBox_9, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, HorizontalBox_86, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, InvalidSlotBorder, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, ItemLevel, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, ItemNameText, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, ItemRarityText, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, ItemTypeText, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, LeftFiligree, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, LegendaryAffixes, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, LegendaryAffixesBox, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, LegendaryStars, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, LevelRequiredBorder, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, NewLegendaryFlag, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, PrimaryAffixList, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, RequiredLevel, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, RequiresClass, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, RightFiligree, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, SacrificeForArborium, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, SacrificeForLuck, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, SecondaryAffixList, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, SizeBox_5, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, TLBorder_1, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, TLImage_1, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, TLImage_2, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, TLImage_3, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, TLImage_4, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, TLImage_193, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, TLImage_195, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, TLImage_226, 0x0BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, TLImage_511, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, TLTextBlock_1, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, TLTextBlock_2, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, TLTextBlock_6, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, TLTextBlock_7, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, TLTextBlock_9, 0x0BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, TLTextBlock_10, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, TLTextBlock_11, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, TLTextBlock_295, 0x0C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, TLTextBlock_298, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, TopStats, 0x0C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, TwoHandedGroup, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemTooltip_C, VerticalList, 0x0C20);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryItemTooltip_C, 0x0C28);
		}

		// class USkillDisplayScalableWidget_C : public USkillDisplayWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SkillDisplayScalableWidget__SkillDisplayScalableWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDisplayScalableWidget_C, SkillDisplayBlueprintWidget, 0x0658);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillDisplayScalableWidget_C, 0x0660);
		}

		// class ULightBody4TextStyle_C : public ULightBody1TextStyle_C
		TEST_METHOD(BlueprintGeneratedClass__LightBody4TextStyle__LightBody4TextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightBody4TextStyle_C, 0x00A8);
		}

		// class ULightHeader6TextStyle_C : public ULightHeader1TextStyle_C
		TEST_METHOD(BlueprintGeneratedClass__LightHeader6TextStyle__LightHeader6TextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightHeader6TextStyle_C, 0x00A8);
		}

		// class UInventoryItemIcon_C : public UInventoryItemBaseWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InventoryItemIcon__InventoryItemIcon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemIcon_C, UberGraphFrame, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemIcon_C, TryToEquip, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemIcon_C, Equip, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemIcon_C, BGFrame, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemIcon_C, BorderFrameHighlightable, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemIcon_C, ComparisonMenuAnchor, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemIcon_C, IconFrame, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemIcon_C, InnerInfo, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemIcon_C, ItemContents, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemIcon_C, ItemImage, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemIcon_C, ItemNameText, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemIcon_C, StackCount, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemIcon_C, EquipEvent, 0x0900);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryItemIcon_C, 0x0918);
		}

		// class UNewMapSpoke_GoblinForest_C : public UMapSpokeWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__NewMapSpoke_GoblinForest__NewMapSpoke_GoblinForest_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_GoblinForest_C, UberGraphFrame, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_GoblinForest_C, FishPop, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_GoblinForest_C, AreaList, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_GoblinForest_C, ButtonCanvas, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_GoblinForest_C, Fish, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_GoblinForest_C, GF1_2_pass, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_GoblinForest_C, GF2_3_pass, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_GoblinForest_C, GF3_4_pass, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_GoblinForest_C, GF4_5pass, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_GoblinForest_C, GF5_Forest1a_GC3, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_GoblinForest_C, GoblinForest1, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_GoblinForest_C, GoblinForest2, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_GoblinForest_C, GoblinForest3, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_GoblinForest_C, GoblinForest4, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_GoblinForest_C, GoblinForest5, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_GoblinForest_C, Map, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_GoblinForest_C, TLImage_2, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_GoblinForest_C, TownBase, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_GoblinForest_C, Water, 0x06D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNewMapSpoke_GoblinForest_C, 0x06D8);
		}

		// class UBigHeader1TextStyle_C : public UTLTextStyle
		TEST_METHOD(BlueprintGeneratedClass__BigHeader1TextStyle__BigHeader1TextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBigHeader1TextStyle_C, 0x00A8);
		}

		// class UFrameTooltip_Glass_Style_C : public UFrameTooltip_Style_C
		TEST_METHOD(BlueprintGeneratedClass__FrameTooltip_Glass_Style__FrameTooltip_Glass_Style_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrameTooltip_Glass_Style_C, 0x00F8);
		}

		// class UQuestCategory1_C : public UTLTextStyle
		TEST_METHOD(BlueprintGeneratedClass__QuestCategory1__QuestCategory1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestCategory1_C, 0x00A8);
		}

		// class UTaskWidget_C : public UQuestTaskWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TaskWidget__TaskWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTaskWidget_C, ShowProgress, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTaskWidget_C, Checkmark, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTaskWidget_C, TaskName, 0x06B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTaskWidget_C, 0x06B8);
		}

		// class ULegendaryAffixCollectionItem_C : public ULegendaryAffixCollectionItemWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__LegendaryAffixCollectionItem__LegendaryAffixCollectionItem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItem_C, UberGraphFrame, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItem_C, ActiveInSlot, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItem_C, Affixes, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItem_C, Border, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItem_C, BottomSlot, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItem_C, Button, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItem_C, ClassRequirement, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItem_C, Container, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItem_C, Contents, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItem_C, Dimmer, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItem_C, EquippedArmor, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItem_C, EquippedPet, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItem_C, EquippedStatusSwitcher, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItem_C, EquippedWeapon, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItem_C, InSlotArmor, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItem_C, InSlotPet, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItem_C, InSlotWeapon, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItem_C, InventoryItemIcon, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItem_C, ItemName, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItem_C, NewFlag, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItem_C, ShowBorder, 0x0938);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegendaryAffixCollectionItem_C, 0x0939);
		}

		// class UCinematicConfirmation_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CinematicConfirmation__CinematicConfirmation_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicConfirmation_C, show, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicConfirmation_C, GamepadButtonLegend, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCinematicConfirmation_C, 0x0650);
		}

		// class UKeyBindingModifyWidget_C : public UKeyBindingModifyWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__KeyBindingModifyWidget__KeyBindingModifyWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingModifyWidget_C, TLTextBlock_2, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingModifyWidget_C, UnbindTextBlock, 0x06E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKeyBindingModifyWidget_C, 0x06F0);
		}

		// class UInstanceResetPartyMember_C : public UInstanceResetPartyMember
		TEST_METHOD(WidgetBlueprintGeneratedClass__InstanceResetPartyMember__InstanceResetPartyMember_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyMember_C, PartyMemberHUDInfoWidget, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInstanceResetPartyMember_C, 0x0648);
		}

		// class UOverlayMapWidget_C : public UOverlayMapWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__OverlayMapWidget__OverlayMapWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlayMapWidget_C, UberGraphFrame, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlayMapWidget_C, show, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlayMapWidget_C, FadeIn, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlayMapWidget_C, MapCanvas, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlayMapWidget_C, MapMarkerList, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlayMapWidget_C, Overlay_1, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlayMapWidget_C, OverlayMap, 0x07B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlayMapWidget_C, 0x07B8);
		}

		// class UNewMapSpokeWrapper_C : public UMapSpokeWrapper
		TEST_METHOD(WidgetBlueprintGeneratedClass__NewMapSpokeWrapper__NewMapSpokeWrapper_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpokeWrapper_C, UberGraphFrame, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpokeWrapper_C, EchonokLabel, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpokeWrapper_C, GoblinLabel, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpokeWrapper_C, InfestedLabel2, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpokeWrapper_C, MapArea, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpokeWrapper_C, MapSidebar, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpokeWrapper_C, MapSpoke_Echonok, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpokeWrapper_C, MapSpoke_GoblinForest, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpokeWrapper_C, MapSpoke_InfestedForest, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpokeWrapper_C, SpokePanel, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpokeWrapper_C, TLImage_1, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpokeWrapper_C, TLImage_3, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpokeWrapper_C, TLImage_4, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpokeWrapper_C, TLImage_6, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpokeWrapper_C, TLImage_83, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpokeWrapper_C, TLImage_85, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpokeWrapper_C, TLImage_249, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpokeWrapper_C, TLImage_251, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpokeWrapper_C, TLImage_252, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpokeWrapper_C, TLScrollBox_1, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNewMapSpokeWrapper_C, 0x0768);
		}

		// class ULightSubHeader1TextStyle_C : public UTLTextStyle
		TEST_METHOD(BlueprintGeneratedClass__LightSubHeader1TextStyle__LightSubHeader1TextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightSubHeader1TextStyle_C, 0x00A8);
		}

		// class UFrameInnerA_Style_C : public UTLBorderStyle
		TEST_METHOD(BlueprintGeneratedClass__FrameInnerA_Style__FrameInnerA_Style_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrameInnerA_Style_C, 0x00F8);
		}

		// class UPartyMemberHUDInfoWidget_C : public UAllyInfoWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PartyMemberHUDInfoWidget__PartyMemberHUDInfoWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberHUDInfoWidget_C, UberGraphFrame, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberHUDInfoWidget_C, DeadState, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberHUDInfoWidget_C, Difficulty, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberHUDInfoWidget_C, DifficultyBadge, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberHUDInfoWidget_C, DifficultyLevel, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberHUDInfoWidget_C, glow, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberHUDInfoWidget_C, Health, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberHUDInfoWidget_C, LowHealth, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberHUDInfoWidget_C, NotReadyState, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberHUDInfoWidget_C, PartyMemberBorder, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberHUDInfoWidget_C, Portrait, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberHUDInfoWidget_C, ReadyState, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberHUDInfoWidget_C, ReadyStateSwitcher, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberHUDInfoWidget_C, ResetReadyStates, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberHUDInfoWidget_C, TLImage_156, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberHUDInfoWidget_C, TLImage_501, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberHUDInfoWidget_C, TLRichTextBlock_60, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberHUDInfoWidget_C, X, 0x07A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyMemberHUDInfoWidget_C, 0x07A8);
		}

		// class UDeathWidget_C : public UDeathWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DeathWidget__DeathWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, UberGraphFrame, 0x13E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, DungeonDialogueShow, 0x13F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, AllyReviveExpire, 0x13F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, GiveUp, 0x1400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, Hide, 0x1408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, show, 0x1410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, CannotUse, 0x1418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, CharacterSelect, 0x1420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, Cork, 0x1428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, CorkDisabled, 0x1430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, Count, 0x1438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, DeathOptionListWidget_1, 0x1440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, DeathOptionsBackgroundSwitcher, 0x1448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, DifficultyText, 0x1450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, DungeonFailedContainer, 0x1458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, DungeonFailedMessage, 0x1460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, FiligreeLeft, 0x1468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, GamepadButtonLegend, 0x1470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, GamepadButtonLegend_1, 0x1478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, GamepadButtonLegend_C_1, 0x1480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, GiveUpButton, 0x1488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, GiveUpButtonContainer, 0x1490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, GiveUpFrame, 0x1498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, GiveUpGroup, 0x14A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, GoldLimitWidget, 0x14A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, Hardcore, 0x14B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, HorizontalBox_1, 0x14B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, Image_1, 0x14C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, Items, 0x14C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, MCDungeonDialogue, 0x14D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, NonHardcore, 0x14D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, OneOption, 0x14E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, ProgressBar_1, 0x14E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, SkillCategoryHeader, 0x14F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, ThreeOptions, 0x14F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, TLImage_1, 0x1500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, TLImage_2, 0x1508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, TLImage_3, 0x1510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, TLImage_4, 0x1518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, TLImage_5, 0x1520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, TLImage_6, 0x1528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, TLImage_8, 0x1530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, TLImage_9, 0x1538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, TLTextBlock_4, 0x1540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, TLTextBlock_5, 0x1548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, TLTextBlock_6, 0x1550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, TopImage, 0x1558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, TwoOptions, 0x1560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget_C, WidgetSwitcher_1, 0x1568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeathWidget_C, 0x1570);
		}

		// class UGamepadButtonAction_C : public UGamepadButtonActionWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__GamepadButtonAction__GamepadButtonAction_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamepadButtonAction_C, ButtonDescription, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamepadButtonAction_C, HoldProgress, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamepadButtonAction_C, HotkeyWidget, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGamepadButtonAction_C, 0x0680);
		}

		// class UDefaultSmallButtonStyle_C : public UTLButtonStyle
		TEST_METHOD(BlueprintGeneratedClass__DefaultSmallButtonStyle__DefaultSmallButtonStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultSmallButtonStyle_C, 0x0310);
		}

		// class USubduedButtonStyle_DEPRECATED_C : public UDefaultSmallButtonStyle_C
		TEST_METHOD(BlueprintGeneratedClass__SubduedButtonStyle_DEPRECATED__SubduedButtonStyle_DEPRECATED_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubduedButtonStyle_DEPRECATED_C, 0x0310);
		}

		// class UAlertBadge_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__AlertBadge__AlertBadge_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlertBadge_C, BG, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlertBadge_C, Contents, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAlertBadge_C, 0x0270);
		}

		// class UModalSelectionHighlight_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ModalSelectionHighlight__ModalSelectionHighlight_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalSelectionHighlight_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalSelectionHighlight_C, pulse, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalSelectionHighlight_C, TLImage_82, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModalSelectionHighlight_C, 0x0278);
		}

		// class UUITextConstants_C : public UUITextConstants
		TEST_METHOD(BlueprintGeneratedClass__UITextConstants__UITextConstants_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUITextConstants_C, 0x0C38);
		}

		// class UTLGameInstanceBlueprint_C : public UTLGameInstance
		TEST_METHOD(BlueprintGeneratedClass__TLGameInstanceBlueprint__TLGameInstanceBlueprint_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLGameInstanceBlueprint_C, 0x0530);
		}

		// class USkillCategoryStats_C : public UStatCategoryWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SkillCategoryStats__SkillCategoryStats_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillCategoryStats_C, CategoryHeader, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillCategoryStats_C, StatsRowList, 0x0660);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillCategoryStats_C, 0x0668);
		}

		// class UPhysicalDefenseRow_C : public UStatRowWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PhysicalDefenseRow__PhysicalDefenseRow_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalDefenseRow_C, AffixRange_127, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalDefenseRow_C, DefensePercentTextBlock_1, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalDefenseRow_C, DefenseTextBlock_122, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalDefenseRow_C, TLImage_1, 0x0688);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalDefenseRow_C, 0x0690);
		}

		// class USinglePlayerAccountReset_C : public UAccountResetModalWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SinglePlayerAccountReset__SinglePlayerAccountReset_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USinglePlayerAccountReset_C, UberGraphFrame, 0x0D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::USinglePlayerAccountReset_C, HideConfirmation, 0x0D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::USinglePlayerAccountReset_C, BackgroundBlur_2, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::USinglePlayerAccountReset_C, Blur, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::USinglePlayerAccountReset_C, ConfirmationCancelButton, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::USinglePlayerAccountReset_C, Divider_C_1, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::USinglePlayerAccountReset_C, GamepadButtonLegend, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USinglePlayerAccountReset_C, ResetButton, 0x0DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USinglePlayerAccountReset_C, ResetHeader, 0x0DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USinglePlayerAccountReset_C, ResetProgressBar, 0x0DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USinglePlayerAccountReset_C, Style_CloseButtonSmall_C_1, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USinglePlayerAccountReset_C, TLTextBlock, 0x0DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USinglePlayerAccountReset_C, TLTextBlock_2, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USinglePlayerAccountReset_C, TLTextBlock_6, 0x0DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USinglePlayerAccountReset_C, TLTextBlock_16, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USinglePlayerAccountReset_C, TLTextBlock_18, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USinglePlayerAccountReset_C, IsResetButtonPressed, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USinglePlayerAccountReset_C, UnknownData_UL7W, 0x0DF1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USinglePlayerAccountReset_C, ResetProgress, 0x0DF4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USinglePlayerAccountReset_C, 0x0DF8);
		}

		// class UErrorButtonGreyDisabledStyle_C : public UDefaultButtonStyle_C
		TEST_METHOD(BlueprintGeneratedClass__ErrorButtonGreyDisabledStyle__ErrorButtonGreyDisabledStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UErrorButtonGreyDisabledStyle_C, 0x0310);
		}

		// class UAcceptButtonStyle_DEPRECATED_C : public UDefaultButtonStyle_C
		TEST_METHOD(BlueprintGeneratedClass__AcceptButtonStyle_DEPRECATED__AcceptButtonStyle_DEPRECATED_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAcceptButtonStyle_DEPRECATED_C, 0x0310);
		}

		// class UFortInventorySidePanel_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__FortInventorySidePanel__FortInventorySidePanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortInventorySidePanel_C, show, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortInventorySidePanel_C, EmptyInvText, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortInventorySidePanel_C, FortPropCraftingWidget, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortInventorySidePanel_C, FortPropLimitWidget, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortInventorySidePanel_C, HotkeyWidget_Left, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortInventorySidePanel_C, HotkeyWidget_Right, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortInventorySidePanel_C, InventoryPanel, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortInventorySidePanel_C, PropInfo, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortInventorySidePanel_C, PropList, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortInventorySidePanel_C, PropNameDescription, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortInventorySidePanel_C, PropNameHeader, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortInventorySidePanel_C, SmallHeader_C_1, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortInventorySidePanel_C, SubCategoryHeader, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortInventorySidePanel_C, SubMenuPanel, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortInventorySidePanel_C, TabbedSubMenu, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortInventorySidePanel_C, TLWidgetSwitcher_1, 0x06B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFortInventorySidePanel_C, 0x06C0);
		}

		// class USkillRespecModal_C : public USkillsRespecModal
		TEST_METHOD(WidgetBlueprintGeneratedClass__SkillRespecModal__SkillRespecModal_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillRespecModal_C, UberGraphFrame, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillRespecModal_C, show, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillRespecModal_C, AcceptButton, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillRespecModal_C, AcceptButtonText, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillRespecModal_C, BaseModalWidget, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillRespecModal_C, Blur, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillRespecModal_C, BodyText, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillRespecModal_C, ContentPanel, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillRespecModal_C, GamepadButtonLegend, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillRespecModal_C, HorizontalBox_2, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillRespecModal_C, RejectButton, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillRespecModal_C, RejectButtonText, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillRespecModal_C, SkipButton, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillRespecModal_C, TLTextBlock_1, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillRespecModal_C, DefaultBodyText, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillRespecModal_C, DefaultTitleText, 0x0918);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillRespecModal_C, 0x0930);
		}

		// class UVendorStore_C : public UVendorStoreWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__VendorStore__VendorStore_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorStore_C, UberGraphFrame, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorStore_C, show, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorStore_C, BuybackGridList, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorStore_C, CategoryHeader, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorStore_C, CategoryMenu, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorStore_C, CategorySwitcher, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorStore_C, ForSaleInventory, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorStore_C, GamepadButtonLegend, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorStore_C, GoldLimitWidget, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorStore_C, HotkeyWidget, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorStore_C, HotkeyWidget_1, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorStore_C, InventoryGridWithTabs, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorStore_C, NavigationHeader, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorStore_C, StoreGrid, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorStore_C, StoreGridList, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorStore_C, TLImage_1, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorStore_C, TLImage_2, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorStore_C, TLImage_3, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorStore_C, Purchases, 0x0820);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVendorStore_C, 0x0830);
		}

		// class UTextInputMultiLineWidget_C : public UTextInputWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TextInputMultiLineWidget__TextInputMultiLineWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextInputMultiLineWidget_C, TextInput, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextInputMultiLineWidget_C, 0x0278);
		}

		// class UClassMechanicsHelpScreen_C : public UClassMechanicsTabbedMenu
		TEST_METHOD(WidgetBlueprintGeneratedClass__ClassMechanicsHelpScreen__ClassMechanicsHelpScreen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicsHelpScreen_C, ClassMechanicHelpScreen_CC, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicsHelpScreen_C, ClassMechanicHelpScreen_DM, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicsHelpScreen_C, ClassMechanicHelpScreen_FG, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicsHelpScreen_C, ClassMechanicHelpScreen_RM, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicsHelpScreen_C, ClassMechanicHelpScreen_SS, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicsHelpScreen_C, TLWidgetSwitcher_37, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClassMechanicsHelpScreen_C, 0x0688);
		}

		// class UClassMechanicHelpScreen_RM_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ClassMechanicHelpScreen_RM__ClassMechanicHelpScreen_RM_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicHelpScreen_RM_C, show, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicHelpScreen_RM_C, TLImage_1, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicHelpScreen_RM_C, TLImage_9, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicHelpScreen_RM_C, TLImage_259, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicHelpScreen_RM_C, TLImage_904, 0x0660);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClassMechanicHelpScreen_RM_C, 0x0668);
		}

		// class UClassMechanicHelpScreen_CC_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ClassMechanicHelpScreen_CC__ClassMechanicHelpScreen_CC_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicHelpScreen_CC_C, Hide, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicHelpScreen_CC_C, show, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicHelpScreen_CC_C, TLImage_1, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicHelpScreen_CC_C, TLImage_9, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicHelpScreen_CC_C, TLImage_259, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicHelpScreen_CC_C, TLImage_904, 0x0668);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClassMechanicHelpScreen_CC_C, 0x0670);
		}

		// class Agob_bf_props2_a_07_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_bf_props2_a_07_bp__gob_bf_props2_a_07_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_bf_props2_a_07_bp_C, 0x0268);
		}

		// class UWardrobePropPanel_C : public UWardrobePropWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WardrobePropPanel__WardrobePropPanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropPanel_C, UberGraphFrame, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropPanel_C, show, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropPanel_C, EquippedGear, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropPanel_C, EquippedPetItems, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropPanel_C, EquippedWeapons, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropPanel_C, FemaleButton, 0x0D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropPanel_C, FemaleSelected, 0x0D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropPanel_C, GamepadButtonLegend, 0x0D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropPanel_C, GenderBox, 0x0D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropPanel_C, Header, 0x0D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropPanel_C, InventoryGridWithTabs, 0x0D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropPanel_C, MaleButton, 0x0D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropPanel_C, MaleSelected, 0x0D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropPanel_C, PlayerInfo, 0x0D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropPanel_C, SmallHeader_C_1, 0x0D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropPanel_C, StatPopup, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropPanel_C, Style_CloseButtonSmall_C_1, 0x0D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropPanel_C, SwapAllButton, 0x0D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropPanel_C, SwapAllText, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropPanel_C, SwapArmorButton, 0x0D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropPanel_C, SwapWeaponsButton, 0x0D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropPanel_C, TLImage_1, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropPanel_C, TLTextBlock_2, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropPanel_C, TLTextBlock_3, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropPanel_C, WardrobePropName, 0x0D98);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWardrobePropPanel_C, 0x0DA0);
		}

		// class UStatusEffect_GoblinSacrificeProp_3_C : public UStatusEffect_LuckTree_Base_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_GoblinSacrificeProp_4__StatusEffect_GoblinSacrificeProp_3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_GoblinSacrificeProp_3_C, 0x0280);
		}

		// class UStatusEffect_GoblinSacrificeProp_4_C : public UStatusEffect_LuckTree_Base_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_GoblinSacrificeProp_5__StatusEffect_GoblinSacrificeProp_4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_GoblinSacrificeProp_4_C, 0x0280);
		}

		// class UStatusEffect_GoldSacrificeProp_1_C : public UStatusEffect_LuckTree_Base_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_GoldSacrificeProp_2__StatusEffect_GoldSacrificeProp_1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_GoldSacrificeProp_1_C, 0x0280);
		}

		// class UStatusEffect_GoldSacrificeProp_3_C : public UStatusEffect_LuckTree_Base_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_GoldSacrificeProp_4__StatusEffect_GoldSacrificeProp_3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_GoldSacrificeProp_3_C, 0x0280);
		}

		// class UStatusEffect_GoldSacrificeProp_5_C : public UStatusEffect_LuckTree_Base_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_GoldSacrificeProp_6__StatusEffect_GoldSacrificeProp_5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_GoldSacrificeProp_5_C, 0x0280);
		}

		// class UStatusEffect_HyvidSacrificeProp_1_C : public UStatusEffect_LuckTree_Base_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_HyvidSacrificeProp_2__StatusEffect_HyvidSacrificeProp_1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_HyvidSacrificeProp_1_C, 0x0280);
		}

		// class UStatusEffect_HyvidSacrificeProp_4_C : public UStatusEffect_LuckTree_Base_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_HyvidSacrificeProp_5__StatusEffect_HyvidSacrificeProp_4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_HyvidSacrificeProp_4_C, 0x0280);
		}

		// class UStatusEffect_LuckTree_1_C : public UStatusEffect_LuckTree_Base_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_LuckTree_2__StatusEffect_LuckTree_1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_LuckTree_1_C, 0x0280);
		}

		// class ACharacterCreate_Base_C : public ATLCharacterCreateActor
		TEST_METHOD(BlueprintGeneratedClass__CharacterCreate_Base__CharacterCreate_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterCreate_Base_C, UberGraphFrame, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterCreate_Base_C, BlobShadow, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterCreate_Base_C, CharacterCustomization, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterCreate_Base_C, Traits, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterCreate_Base_C, Nameplate, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterCreate_Base_C, CombatFX, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterCreate_Base_C, Box, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterCreate_Base_C, TLInventory, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterCreate_Base_C, SkeletalMesh, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterCreate_Base_C, DefaultSceneRoot, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACharacterCreate_Base_C, 0x0308);
		}

		// class ACharacterCreatePet_Base_C : public ATLCharacterCreatePetActor
		TEST_METHOD(BlueprintGeneratedClass__CharacterCreatePet_Base__CharacterCreatePet_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterCreatePet_Base_C, UberGraphFrame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterCreatePet_Base_C, BlobShadow, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterCreatePet_Base_C, Nameplate, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterCreatePet_Base_C, CombatFX, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterCreatePet_Base_C, TLInventory, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterCreatePet_Base_C, Box, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterCreatePet_Base_C, SkeletalMesh, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacterCreatePet_Base_C, DefaultSceneRoot, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACharacterCreatePet_Base_C, 0x02F0);
		}

		// class Apetalpaca_charactercreate_02_C : public Apetalpaca_charactercreate_base_C
		TEST_METHOD(BlueprintGeneratedClass__petalpaca_charactercreate_02__petalpaca_charactercreate_02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Apetalpaca_charactercreate_02_C, 0x02F0);
		}

		// class Apetowl_charactercreate_02_C : public Apetowl_charactercreate_base_C
		TEST_METHOD(BlueprintGeneratedClass__petowl_charactercreate_02__petowl_charactercreate_02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Apetowl_charactercreate_02_C, 0x02F0);
		}

		// class Atod_lightprop_C : public ALightPropActor
		TEST_METHOD(BlueprintGeneratedClass__tod_lightprop__tod_lightprop_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Atod_lightprop_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::Atod_lightprop_C, PointLight, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::Atod_lightprop_C, StaticMesh, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::Atod_lightprop_C, DefaultSceneRoot, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Atod_lightprop_C, 0x0248);
		}

		// class USkill_Ranged_GoblinGunner_C : public USkill_Ranged_C
		TEST_METHOD(BlueprintGeneratedClass__Skill_Ranged_GoblinGunner__Skill_Ranged_GoblinGunner_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Ranged_GoblinGunner_C, 0x0540);
		}

		// class Acc_charactercreate_sequencer_C : public ACinematicActor
		TEST_METHOD(BlueprintGeneratedClass__cc_charactercreate_sequencer__cc_charactercreate_sequencer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Acc_charactercreate_sequencer_C, StaticMesh, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::Acc_charactercreate_sequencer_C, Mask, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::Acc_charactercreate_sequencer_C, Shoulders, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::Acc_charactercreate_sequencer_C, Feet, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::Acc_charactercreate_sequencer_C, hands, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::Acc_charactercreate_sequencer_C, Head, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::Acc_charactercreate_sequencer_C, Pants, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::Acc_charactercreate_sequencer_C, Hair, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::Acc_charactercreate_sequencer_C, Weapon, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::Acc_charactercreate_sequencer_C, Torso, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::Acc_charactercreate_sequencer_C, DefaultRootComponent, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::Acc_charactercreate_sequencer_C, HairMesh, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::Acc_charactercreate_sequencer_C, HeadMesh, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::Acc_charactercreate_sequencer_C, TorsoMesh, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::Acc_charactercreate_sequencer_C, PantsMesh, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::Acc_charactercreate_sequencer_C, WeaponMesh, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::Acc_charactercreate_sequencer_C, handsmesh, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Acc_charactercreate_sequencer_C, FeetMesh, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Acc_charactercreate_sequencer_C, ShoulderMesh, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Acc_charactercreate_sequencer_C, HeadMask, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Acc_charactercreate_sequencer_C, 0x02C0);
		}

		// class UCamera_Shake_Rocket_Barrage_Impact_C : public UMatineeCameraShake
		TEST_METHOD(BlueprintGeneratedClass__Camera_Shake_Rocket_Barrage_Impact__Camera_Shake_Rocket_Barrage_Impact_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCamera_Shake_Rocket_Barrage_Impact_C, 0x0180);
		}

		// class UDye_Base_C : public UDye
		TEST_METHOD(BlueprintGeneratedClass__Dye_Base__Dye_Base_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDye_Base_C, 0x03F8);
		}

		// class UPlayerStartingItems_C : public UTLItemSet
		TEST_METHOD(BlueprintGeneratedClass__PlayerStartingItems__PlayerStartingItems_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerStartingItems_C, 0x0078);
		}

		// class UDungeonLevelSelector_C : public UDungeonChallengeLevelSelectorWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DungeonLevelSelector__DungeonLevelSelector_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelSelector_C, UberGraphFrame, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelSelector_C, PageRightAll, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelSelector_C, PageRightEnter, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelSelector_C, PageRightExit, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelSelector_C, PageLeftAll, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelSelector_C, PageLeftExit, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelSelector_C, PageLeftIn, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelSelector_C, NewCluster, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelSelector_C, DungeonChallengeLevelListWidget_46, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelSelector_C, NewClusterGlow, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelSelector_C, NextClusterButton, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelSelector_C, PrevClusterButton, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelSelector_C, TLImage_1, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelSelector_C, TLImage_148, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelSelector_C, TLImage_680, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelSelector_C, TLImage_682, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelSelector_C, TLImage_683, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelSelector_C, TLImage_684, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelSelector_C, TLRichTextBlock_112, 0x08F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonLevelSelector_C, 0x0900);
		}

		// class Agobgeneric_stabby_newbie_b_C : public Agobgeneric_stabby_b_C
		TEST_METHOD(BlueprintGeneratedClass__gobgeneric_stabby_newbie_b__gobgeneric_stabby_newbie_b_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agobgeneric_stabby_newbie_b_C, 0x0800);
		}

		// class Agobyaprider_bp_C : public Agobgeneric_stabby_yapper_b_C
		TEST_METHOD(BlueprintGeneratedClass__gobyaprider_bp__gobyaprider_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agobyaprider_bp_C, 0x0808);
		}

		// class Upetowl_anim_charactercreate_bp_C : public UTLCharacterSelectAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__petowl_anim_charactercreate_bp__petowl_anim_charactercreate_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_25, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_24, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_23, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_22, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_21, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_20, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_19, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_18, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_17, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_16, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_15, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_14, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_13, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_12, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_11, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_10, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_9, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_8, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_7, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_6, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_5, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_4, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_3, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_2, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_14, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_StateResult_14, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_13, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_StateResult_13, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_12, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_StateResult_12, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_11, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_StateResult_11, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_10, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_StateResult_10, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_9, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_StateResult_9, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_8, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_StateResult_8, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_7, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_StateResult_7, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_6, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_StateResult_6, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_5, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_StateResult_5, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_4, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_StateResult_4, 0x0EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_3, 0x0EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_StateResult_3, 0x0F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_2, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_StateResult_2, 0x1010);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_StateResult, 0x10C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_StateMachine, 0x10F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_TwoWayBlend, 0x11A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_PoseSnapshot, 0x1268);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_Slot, 0x12F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_charactercreate_bp_C, AnimGraphNode_Root, 0x1340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Upetowl_anim_charactercreate_bp_C, 0x1370);
		}

		// class UStatusEffect_MainMenu_HighlightedOwl_C : public UStatusEffect_MainMenu_HighlightedCharacter_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_MainMenu_HighlightedOwl__StatusEffect_MainMenu_HighlightedOwl_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_MainMenu_HighlightedOwl_C, 0x0288);
		}

		// class UDungeonMenu_C : public UDungeonMenuPanel
		TEST_METHOD(WidgetBlueprintGeneratedClass__DungeonMenu__DungeonMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMenu_C, UberGraphFrame, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMenu_C, CloudSwirl_Boss, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMenu_C, CouldSwirl, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMenu_C, show, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMenu_C, DungeonCloudSwirl, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMenu_C, DungeonClusterRules, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMenu_C, DungeonHeaderFiligree, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMenu_C, DungeonMenuFrame, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMenu_C, DungeonPanelChallengeSelect, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMenu_C, DungeonPanelClusterReveal, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMenu_C, DungeonPanelConfirmChallenge, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMenu_C, DungeonPanelResults, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMenu_C, FazeerAnimations, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMenu_C, GamepadButtonLegend_C_2, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMenu_C, NavigationHeader_C_1, 0x0A00);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonMenu_C, 0x0A08);
		}

		// class URelicEnergyBar_C : public UEmberWeaponChargeBarWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__RelicEnergyBar__RelicEnergyBar_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicEnergyBar_C, UberGraphFrame, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicEnergyBar_C, NotReady, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicEnergyBar_C, Trigger, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicEnergyBar_C, ActiveLoop, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicEnergyBar_C, ReadyLoop, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicEnergyBar_C, FullFlorish, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicEnergyBar_C, Progress, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicEnergyBar_C, FiligreeLeft, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicEnergyBar_C, Notch, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicEnergyBar_C, ProgressGlow, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicEnergyBar_C, RelicActiveWidget, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicEnergyBar_C, RelicCharge, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicEnergyBar_C, RelicIcon, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicEnergyBar_C, ResourceBarWidget, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicEnergyBar_C, TLImage_2, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicEnergyBar_C, TLImage_122, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicEnergyBar_C, TLImage_197, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicEnergyBar_C, TLImage_198, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicEnergyBar_C, TLImage_200, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicEnergyBar_C, underglow, 0x0748);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URelicEnergyBar_C, 0x0750);
		}

		// class UPlayer_BaseItems_C : public UTLItemSet
		TEST_METHOD(BlueprintGeneratedClass__Player_BaseItems__Player_BaseItems_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayer_BaseItems_C, 0x0078);
		}

		// class ACameraLightRig_CursedCaptain_bp_C : public ACameraLightRig_Base_bp_C
		TEST_METHOD(BlueprintGeneratedClass__CameraLightRig_CursedCaptain_bp__CameraLightRig_CursedCaptain_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_CursedCaptain_bp_C, SceneCaptureComponent2D, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_CursedCaptain_bp_C, Scene, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_CursedCaptain_bp_C, Head, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_CursedCaptain_bp_C, GlovesRt, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_CursedCaptain_bp_C, Cape, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_CursedCaptain_bp_C, Chest_1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_CursedCaptain_bp_C, Boots_1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_CursedCaptain_bp_C, Pants_1, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_CursedCaptain_bp_C, Helm_1, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_CursedCaptain_bp_C, Gloves, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_CursedCaptain_bp_C, CharacterSetup, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraLightRig_CursedCaptain_bp_C, 0x02A8);
		}

		// class UDungeonRulesCardConfirm_C : public UDungeonChallengeRulesCard
		TEST_METHOD(WidgetBlueprintGeneratedClass__DungeonRulesCardConfirm__DungeonRulesCardConfirm_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonRulesCardConfirm_C, UberGraphFrame, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonRulesCardConfirm_C, RaysLoop, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonRulesCardConfirm_C, HoverLoop, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonRulesCardConfirm_C, show, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonRulesCardConfirm_C, DungeonCardArtShared, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonRulesCardConfirm_C, FancyGlowImage, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonRulesCardConfirm_C, glow, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonRulesCardConfirm_C, TLImage_230, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonRulesCardConfirm_C, TLImage_263, 0x0990);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonRulesCardConfirm_C, 0x0998);
		}

		// class Aio_dockwall_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_dockwall_01_bp__io_dockwall_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_dockwall_01_bp_C, 0x0268);
		}

		// class Upropwaterfloat_anim_bp_C : public UTLAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__propwaterfloat_anim_bp__propwaterfloat_anim_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Upropwaterfloat_anim_bp_C, UberGraphFrame, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upropwaterfloat_anim_bp_C, AnimGraphNode_Root, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upropwaterfloat_anim_bp_C, AnimGraphNode_BlendSpacePlayer, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Upropwaterfloat_anim_bp_C, 0x0730);
		}

		// class UContractFameLevelBar_C : public UContractFameLevelBar
		TEST_METHOD(WidgetBlueprintGeneratedClass__ContractFameLevelBar__ContractFameLevelBar_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractFameLevelBar_C, UberGraphFrame, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractFameLevelBar_C, Hide, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractFameLevelBar_C, show, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractFameLevelBar_C, LevelUp, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractFameLevelBar_C, BarBackground, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractFameLevelBar_C, Container, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractFameLevelBar_C, CurrentLevel, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractFameLevelBar_C, FameIcon, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractFameLevelBar_C, InvalidationBox_1, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractFameLevelBar_C, LevelProgressText, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractFameLevelBar_C, TLImage_1, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractFameLevelBar_C, TLImage_2, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractFameLevelBar_C, XPProgressBar, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractFameLevelBar_C, LevelProgressTextVisibility, 0x07A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContractFameLevelBar_C, 0x07A9);
		}

		// class UHitpointBarWidget_C : public UFloatingHitpointBarWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__HitpointBarWidget__HitpointBarWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitpointBarWidget_C, HideAnim, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitpointBarWidget_C, ShowAnim, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitpointBarWidget_C, HitPointProgressBar, 0x0718);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHitpointBarWidget_C, 0x0720);
		}

		// class UStatusEffect_MinionTether_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_MinionTether__StatusEffect_MinionTether_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_MinionTether_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_MinionTether_C, 0x0288);
		}

		// class UCombatDamageNotify_C : public UFloatingTextWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CombatDamageNotify__CombatDamageNotify_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombatDamageNotify_C, UberGraphFrame, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombatDamageNotify_C, RiseAndFade, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombatDamageNotify_C, DamageText, 0x0660);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCombatDamageNotify_C, 0x0668);
		}

		// class UCombatBlockNotifyComponent_C : public UCombatNotifyWidgetComponent
		TEST_METHOD(BlueprintGeneratedClass__CombatBlockNotifyComponent__CombatBlockNotifyComponent_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCombatBlockNotifyComponent_C, 0x0670);
		}

		// class UCombatEvadeNotifyComponent_C : public UCombatNotifyWidgetComponent
		TEST_METHOD(BlueprintGeneratedClass__CombatEvadeNotifyComponent__CombatEvadeNotifyComponent_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCombatEvadeNotifyComponent_C, 0x0670);
		}

		// class USkill_Death_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_Death__Skill_Death_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Death_C, 0x0540);
		}

		// class UThinLightBody5TextStyle_C : public ULightBody1TextStyle_C
		TEST_METHOD(BlueprintGeneratedClass__ThinLightBody5TextStyle__ThinLightBody5TextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThinLightBody5TextStyle_C, 0x00A8);
		}

		// class Aw_sword_1h_newbie_t1a_bp_C : public AWeaponSwordBase_C
		TEST_METHOD(BlueprintGeneratedClass__w_sword_1h_newbie_t1a_bp__w_sword_1h_newbie_t1a_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aw_sword_1h_newbie_t1a_bp_C, 0x0450);
		}

		// class Ammenu_prop_walltorch_02_bp_C : public Atod_lightprop_C
		TEST_METHOD(BlueprintGeneratedClass__mmenu_prop_walltorch_02_bp__mmenu_prop_walltorch_02_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Ammenu_prop_walltorch_02_bp_C, FMODAudio, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ammenu_prop_walltorch_02_bp_C, ParticleSystem, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ammenu_prop_walltorch_02_bp_C, 0x0258);
		}

		// class USkill_Basic_Sword_C : public USkill_Basic_Base_C
		TEST_METHOD(BlueprintGeneratedClass__Skill_Basic_Sword__Skill_Basic_Sword_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Basic_Sword_C, 0x0540);
		}

		// class ASkillShape_Sword_C : public ASkillShapeCone_C
		TEST_METHOD(BlueprintGeneratedClass__SkillShape_Sword__SkillShape_Sword_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkillShape_Sword_C, 0x0290);
		}

		// class Ucc_wardrobe_inv_C : public Uwardrobe_inv_base_C
		TEST_METHOD(BlueprintGeneratedClass__cc_wardrobe_inv__cc_wardrobe_inv_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ucc_wardrobe_inv_C, 0x0310);
		}

		// class USkill_Move_RequireTurn_C : public USkill_Move_C
		TEST_METHOD(BlueprintGeneratedClass__Skill_Move_RequireTurn__Skill_Move_RequireTurn_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Move_RequireTurn_C, 0x0540);
		}

		// class Ucc_anim_charactercreate_bp_C : public UTLCharacterSelectAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__cc_anim_charactercreate_bp__cc_anim_charactercreate_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucc_anim_charactercreate_bp_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucc_anim_charactercreate_bp_C, AnimGraphNode_Root, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucc_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucc_anim_charactercreate_bp_C, AnimGraphNode_TwoWayBlend, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucc_anim_charactercreate_bp_C, AnimGraphNode_PoseSnapshot, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucc_anim_charactercreate_bp_C, AnimGraphNode_Slot, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucc_anim_charactercreate_bp_C, CapeSpeed, 0x05B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ucc_anim_charactercreate_bp_C, 0x05BC);
		}

		// class ABaseGadget_C : public AGadget
		TEST_METHOD(BlueprintGeneratedClass__BaseGadget__BaseGadget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseGadget_C, BlobShadow, 0x04A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseGadget_C, 0x04A8);
		}

		// class Arm_charactercreate_sequencer_C : public ACinematicActor
		TEST_METHOD(BlueprintGeneratedClass__rm_charactercreate_sequencer__rm_charactercreate_sequencer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Arm_charactercreate_sequencer_C, StaticMesh, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::Arm_charactercreate_sequencer_C, Mask, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::Arm_charactercreate_sequencer_C, Shoulders, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::Arm_charactercreate_sequencer_C, Feet, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::Arm_charactercreate_sequencer_C, hands, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::Arm_charactercreate_sequencer_C, Head, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::Arm_charactercreate_sequencer_C, Pants, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::Arm_charactercreate_sequencer_C, Hair, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::Arm_charactercreate_sequencer_C, Weapon, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::Arm_charactercreate_sequencer_C, Torso, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::Arm_charactercreate_sequencer_C, DefaultRootComponent, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::Arm_charactercreate_sequencer_C, HairMesh, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::Arm_charactercreate_sequencer_C, HeadMesh, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::Arm_charactercreate_sequencer_C, TorsoMesh, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::Arm_charactercreate_sequencer_C, PantsMesh, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::Arm_charactercreate_sequencer_C, WeaponMesh, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::Arm_charactercreate_sequencer_C, handsmesh, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Arm_charactercreate_sequencer_C, FeetMesh, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Arm_charactercreate_sequencer_C, ShoulderMesh, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Arm_charactercreate_sequencer_C, HeadMask, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Arm_charactercreate_sequencer_C, 0x02C0);
		}

		// class ASwordIconRenderRig_bp_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__SwordIconRenderRig_bp__SwordIconRenderRig_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwordIconRenderRig_bp_C, Scene, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwordIconRenderRig_bp_C, SceneCaptureComponent2D, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwordIconRenderRig_bp_C, SpotLight, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwordIconRenderRig_bp_C, Underlight, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwordIconRenderRig_bp_C, RimL, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwordIconRenderRig_bp_C, RimR, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwordIconRenderRig_bp_C, DefaultSceneRoot1, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASwordIconRenderRig_bp_C, 0x0258);
		}

		// class UItemPIckUpWidget_C : public UInventoryItemPickUpWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ItemPIckUpWidget__ItemPIckUpWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemPIckUpWidget_C, HidePickUpAnimation, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemPIckUpWidget_C, NormalPickUpAnimation, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemPIckUpWidget_C, BGFrame, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemPIckUpWidget_C, ElementImage, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemPIckUpWidget_C, InventoryItemIcon, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemPIckUpWidget_C, ItemNameTextBlock, 0x08C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemPIckUpWidget_C, 0x08D0);
		}

		// class UCraftingQueueRecipes_C : public UCraftingQueueWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CraftingQueueRecipes__CraftingQueueRecipes_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingQueueRecipes_C, UberGraphFrame, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingQueueRecipes_C, show, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingQueueRecipes_C, CategoryList, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingQueueRecipes_C, Divider, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingQueueRecipes_C, FiligreeLeft, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingQueueRecipes_C, FiligreeRight, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingQueueRecipes_C, LoadingSpinner, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingQueueRecipes_C, LoadingWidgetSwitcher, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingQueueRecipes_C, SkillCategoryHeader, 0x0700);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingQueueRecipes_C, 0x0708);
		}

		// class Uio_prop_fishb_01_anim02_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__io_prop_fishb_01_anim02__io_prop_fishb_01_anim02_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Uio_prop_fishb_01_anim02_C, UnknownData_XR27, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uio_prop_fishb_01_anim02_C, UberGraphFrame, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uio_prop_fishb_01_anim02_C, AnimGraphNode_Root, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uio_prop_fishb_01_anim02_C, AnimGraphNode_SequencePlayer, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Uio_prop_fishb_01_anim02_C, 0x0378);
		}

		// class Ammenu_ship_01b_cannons_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__mmenu_ship_01b_cannons_bp__mmenu_ship_01b_cannons_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ammenu_ship_01b_cannons_bp_C, 0x0268);
		}

		// class Anpcbasegadget_bp_C : public ABaseGadget_C
		TEST_METHOD(BlueprintGeneratedClass__npcbasegadget_bp__npcbasegadget_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Anpcbasegadget_bp_C, Capsule, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Anpcbasegadget_bp_C, SkeletalMesh, 0x04B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Anpcbasegadget_bp_C, 0x04B8);
		}

		// class UCraftingQueueEntryWidget_C : public UCraftingQueueEntryWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CraftingQueueEntryWidget__CraftingQueueEntryWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingQueueEntryWidget_C, UberGraphFrame, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingQueueEntryWidget_C, ClaimButton, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingQueueEntryWidget_C, DecorationButton, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingQueueEntryWidget_C, Duration, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingQueueEntryWidget_C, GadgetBackground, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingQueueEntryWidget_C, GenericResourceWidget, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingQueueEntryWidget_C, ProgressBar_3, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingQueueEntryWidget_C, TLTextBlock_555, 0x06D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingQueueEntryWidget_C, 0x06E0);
		}

		// class UGameMessages_C : public UGameMessageWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__GameMessages__GameMessages_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMessages_C, GameMessageListWidget, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameMessages_C, 0x0648);
		}

		// class Aio_prop_brickpile_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_brickpile_01_bp__io_prop_brickpile_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_brickpile_01_bp_C, 0x0268);
		}

		// class UCurrencyWidget_NavigationHeader_C : public UCurrencyWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CurrencyWidget_NavigationHeader__CurrencyWidget_NavigationHeader_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget_NavigationHeader_C, Amount, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget_NavigationHeader_C, CurrencyIcon, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget_NavigationHeader_C, FixedValue, 0x0708);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurrencyWidget_NavigationHeader_C, 0x0710);
		}

		// class UEmberWeaponMessage_C : public UEmberWeaponMessageWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__EmberWeaponMessage__EmberWeaponMessage_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponMessage_C, Hide, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponMessage_C, show, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponMessage_C, ElementImage, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponMessage_C, InventoryItemIcon, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponMessage_C, ItemLevel, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponMessage_C, ItemNameTextBlock, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponMessage_C, TLRichTextBlock_1, 0x0900);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEmberWeaponMessage_C, 0x0908);
		}

		// class UBaseAllyInfoWidget_C : public UPetInfoWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BaseAllyInfoWidget__BaseAllyInfoWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAllyInfoWidget_C, LowHealthLoop, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAllyInfoWidget_C, HideShow, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAllyInfoWidget_C, Background, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAllyInfoWidget_C, CountdownText, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAllyInfoWidget_C, Health, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAllyInfoWidget_C, InvalidationBox_1, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAllyInfoWidget_C, LowHealthVignette, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAllyInfoWidget_C, PetNameText, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAllyInfoWidget_C, Portrait, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseAllyInfoWidget_C, PortraitBorder, 0x07B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseAllyInfoWidget_C, 0x07C0);
		}

		// class UBasePetInfoWidget_C : public UPetInfoWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BasePetInfoWidget__BasePetInfoWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePetInfoWidget_C, UberGraphFrame, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePetInfoWidget_C, LowHealthLoop, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePetInfoWidget_C, HideShow, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePetInfoWidget_C, Background, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePetInfoWidget_C, CountdownText, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePetInfoWidget_C, Gamepad, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePetInfoWidget_C, Health, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePetInfoWidget_C, HotkeyWidget, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePetInfoWidget_C, InvalidationBox_1, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePetInfoWidget_C, LowHealthVignette, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePetInfoWidget_C, PetNameText, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePetInfoWidget_C, Portrait, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePetInfoWidget_C, PortraitBorder, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePetInfoWidget_C, ProgressRow1, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePetInfoWidget_C, ProgressRow2, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePetInfoWidget_C, ProgressRow3, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePetInfoWidget_C, ProgressRow4, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePetInfoWidget_C, SendHomeButton, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePetInfoWidget_C, SendHomeGamepadIcon, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePetInfoWidget_C, SendHomeKeyboardIcon, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePetInfoWidget_C, TLImage_72, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePetInfoWidget_C, NewVar_1, 0x0818);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasePetInfoWidget_C, 0x0819);
		}

		// class UBossInfoWidget_C : public UBossInfoWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BossInfoWidget__BossInfoWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossInfoWidget_C, UberGraphFrame, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossInfoWidget_C, OverallContainer, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossInfoWidget_C, StatusEffectBar_Buffs_Monster_C_1, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossInfoWidget_C, StatusEffectBar_Debuffs_Monster_C_1, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossInfoWidget_C, WidgetOverlay, 0x0738);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBossInfoWidget_C, 0x0740);
		}

		// class UCharacterMenuHeader_C : public UCharacterMenuHeader
		TEST_METHOD(WidgetBlueprintGeneratedClass__CharacterMenuHeader__CharacterMenuHeader_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuHeader_C, UberGraphFrame, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuHeader_C, Hide, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuHeader_C, show, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuHeader_C, CanvasForTabs, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuHeader_C, EmberWeaponIcon, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuHeader_C, GoldLimitWidget, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuHeader_C, MainCanvas, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuHeader_C, NavigationHeader, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuHeader_C, RelicPointResource, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuHeader_C, SkillPointResource, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuHeader_C, SPIcon, 0x0778);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterMenuHeader_C, 0x0780);
		}

		// class UDebugPanel_C : public UTLDebugPanel
		TEST_METHOD(WidgetBlueprintGeneratedClass__DebugPanel__DebugPanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugPanel_C, AccountId, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugPanel_C, AccountNickname, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugPanel_C, AreaDataRow, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugPanel_C, AreaYaw, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugPanel_C, CharacterID, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugPanel_C, HorizontalBox_237, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugPanel_C, LevelInstance, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugPanel_C, Location, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugPanel_C, Seed, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugPanel_C, TextBlock_3, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugPanel_C, TextBlock_5, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugPanel_C, TextBlock_9, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugPanel_C, TextBlock_11, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugPanel_C, TextBlock_187, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugPanel_C, TextBlock_189, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugPanel_C, TextFrames, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugPanel_C, TextTime, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugPanel_C, TextTime1000s, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugPanel_C, ZIDBlock, 0x0708);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugPanel_C, 0x0710);
		}

		// class UTargetInfoWidget_C : public UTargetInfoWidgetContainer
		TEST_METHOD(WidgetBlueprintGeneratedClass__TargetInfoWidget__TargetInfoWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_C, UberGraphFrame, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_C, InvalidationBox_1, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_C, OverallContainer, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_C, StatusEffectBar_Buffs_Monster, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_C, StatusEffectBar_Debuffs_Monster, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_C, WidgetPanel, 0x0740);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTargetInfoWidget_C, 0x0748);
		}

		// class UDungeonSingleRule_C : public UDungeonChallengeRuleWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DungeonSingleRule__DungeonSingleRule_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonSingleRule_C, RuleDescription, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonSingleRule_C, RuleTitle, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonSingleRule_C, TLImage_148, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonSingleRule_C, 0x0688);
		}

		// class UThinLightBody1TextStyle_C : public UTLTextStyle
		TEST_METHOD(BlueprintGeneratedClass__ThinLightBody1TextStyle__ThinLightBody1TextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThinLightBody1TextStyle_C, 0x00A8);
		}

		// class Aio_prop_fire_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_fire_01_bp__io_prop_fire_01_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_fire_01_bp_C, Decal, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_fire_01_bp_C, Box, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_fire_01_bp_C, FMODAudio, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_fire_01_bp_C, PointLight, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_fire_01_bp_C, vfx_env_campfire_02_p, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_fire_01_bp_C, 0x0290);
		}

		// class UContractItemDescription_C : public UCraftingRecipeDetailWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ContractItemDescription__ContractItemDescription_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractItemDescription_C, Divider, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractItemDescription_C, FiligreeLeft, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractItemDescription_C, HeaderText, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractItemDescription_C, ItemRarityText, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractItemDescription_C, ItemTypeText, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractItemDescription_C, LongDescription, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractItemDescription_C, LongDescriptionContainer, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractItemDescription_C, TLImage_2, 0x09F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContractItemDescription_C, 0x0A00);
		}

		// class USkillBarAll_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SkillBarAll__SkillBarAll_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillBarAll_C, InvalidationBox_1, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillBarAll_C, Skill00, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillBarAll_C, Skill00_gamepad, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillBarAll_C, Skill01, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillBarAll_C, Skill01_gamepad, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillBarAll_C, Skill02, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillBarAll_C, Skill03, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillBarAll_C, Skill04, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillBarAll_C, Skill05, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillBarAll_C, Skill06, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillBarAll_C, Skill07, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillBarAll_C, Skill08, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillBarAll_C, SkillGroupToggleHotkey, 0x06A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillBarAll_C, 0x06A8);
		}

		// class Uss_wardrobe_inv_C : public Uwardrobe_inv_base_C
		TEST_METHOD(BlueprintGeneratedClass__ss_wardrobe_inv__ss_wardrobe_inv_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Uss_wardrobe_inv_C, 0x0310);
		}

		// class Aw_cannon_2h_starter_t1a_bp_C : public AWeaponCursedCannonBase_C
		TEST_METHOD(BlueprintGeneratedClass__w_cannon_2h_starter_t1a_bp__w_cannon_2h_starter_t1a_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aw_cannon_2h_starter_t1a_bp_C, 0x0450);
		}

		// class ACameraLightRig_Sharpshooter_bp_C : public ACameraLightRig_Base_bp_C
		TEST_METHOD(BlueprintGeneratedClass__CameraLightRig_Sharpshooter_bp__CameraLightRig_Sharpshooter_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_Sharpshooter_bp_C, SceneCaptureComponent2D, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_Sharpshooter_bp_C, GlovesRt, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_Sharpshooter_bp_C, SkeletalMesh_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_Sharpshooter_bp_C, Chest_1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_Sharpshooter_bp_C, Boots_1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_Sharpshooter_bp_C, Pants_1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_Sharpshooter_bp_C, Helm_1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_Sharpshooter_bp_C, Gloves, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraLightRig_Sharpshooter_bp_C, CharacterSetup, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraLightRig_Sharpshooter_bp_C, 0x0298);
		}

		// class Uio_prop_fish_01_anim_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__io_prop_fish_01_anim__io_prop_fish_01_anim_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Uio_prop_fish_01_anim_C, UnknownData_8C70, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uio_prop_fish_01_anim_C, UberGraphFrame, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uio_prop_fish_01_anim_C, AnimGraphNode_Root, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uio_prop_fish_01_anim_C, AnimGraphNode_SequencePlayer, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Uio_prop_fish_01_anim_C, 0x0378);
		}

		// class Adm_m_t1b_digitus_bp_C : public ABaseDigitus_C
		TEST_METHOD(BlueprintGeneratedClass__dm_m_t1b_digitus_bp__dm_m_t1b_digitus_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Adm_m_t1b_digitus_bp_C, 0x0448);
		}

		// class Adm_m_t1b_chest_bp_C : public Adm_BaseChest_C
		TEST_METHOD(BlueprintGeneratedClass__dm_m_t1b_chest_bp__dm_m_t1b_chest_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Adm_m_t1b_chest_bp_C, 0x0428);
		}

		// class Acc_BasePants_C : public ABasePants_C
		TEST_METHOD(BlueprintGeneratedClass__cc_BasePants__cc_BasePants_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Acc_BasePants_C, 0x0428);
		}

		// class URailmasterResourcePip_C : public UResourcePip
		TEST_METHOD(WidgetBlueprintGeneratedClass__RailmasterResourcePip__RailmasterResourcePip_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URailmasterResourcePip_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::URailmasterResourcePip_C, ReadyAnimation, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::URailmasterResourcePip_C, SpendAnimation, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::URailmasterResourcePip_C, FullAnimation, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::URailmasterResourcePip_C, FilledPip, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::URailmasterResourcePip_C, PipProgress, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::URailmasterResourcePip_C, ReadyPip, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URailmasterResourcePip_C, FilledImage, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URailmasterResourcePip_C, PipID, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URailmasterResourcePip_C, UnknownData_Q7DC, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URailmasterResourcePip_C, OwningWidget, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URailmasterResourcePip_C, ReadyImage, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URailmasterResourcePip_C, 0x02C8);
		}

		// class Afor_t0a_hatch_bp_C : public ABaseHatch_C
		TEST_METHOD(BlueprintGeneratedClass__for_t0a_hatch_bp__for_t0a_hatch_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Afor_t0a_hatch_bp_C, 0x0428);
		}

		// class Afor_t0a_shoulders_bp_C : public Afor_BaseShoulders_C
		TEST_METHOD(BlueprintGeneratedClass__for_t0a_shoulders_bp__for_t0a_shoulders_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Afor_t0a_shoulders_bp_C, 0x0438);
		}

		// class Arm_BaseHead_C : public ABaseHead_C
		TEST_METHOD(BlueprintGeneratedClass__rm_BaseHead__rm_BaseHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Arm_BaseHead_C, 0x0428);
		}

		// class UMainMenuStateCharacterCreateCustomizePlayer_bp_C : public UMainMenuStateCharacterCreateCustomizePlayer
		TEST_METHOD(BlueprintGeneratedClass__MainMenuStateCharacterCreateCustomizePlayer_bp__MainMenuStateCharacterCreateCustomizePlayer_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuStateCharacterCreateCustomizePlayer_bp_C, 0x02F0);
		}

		// class UThinLightBody6TextStyle_C : public UThinLightBody2TextStyle_C
		TEST_METHOD(BlueprintGeneratedClass__ThinLightBody6TextStyle__ThinLightBody6TextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThinLightBody6TextStyle_C, 0x00A8);
		}

		// class UThinLightBody2TextStyle_C : public ULightBody1TextStyle_C
		TEST_METHOD(BlueprintGeneratedClass__ThinLightBody2TextStyle__ThinLightBody2TextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThinLightBody2TextStyle_C, 0x00A8);
		}

		// class Ass_BasePants_C : public ABasePants_C
		TEST_METHOD(BlueprintGeneratedClass__ss_BasePants__ss_BasePants_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ass_BasePants_C, 0x0428);
		}

		// class UFriendsMenu_C : public UFriendsWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__FriendsMenu__FriendsMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendsMenu_C, UberGraphFrame, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendsMenu_C, FiligreeLeft, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendsMenu_C, FiligreeRight, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendsMenu_C, FriendsList, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendsMenu_C, Profile, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendsMenu_C, SkillCategoryHeader, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendsMenu_C, TLTextBlock_1, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendsMenu_C, ViewProfileButton, 0x0790);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFriendsMenu_C, 0x0798);
		}

		// class AWeaponHammerBase_C : public AWeaponStaticBase_C
		TEST_METHOD(BlueprintGeneratedClass__WeaponHammerBase__WeaponHammerBase_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWeaponHammerBase_C, 0x0450);
		}

		// class ASkillShape_BloodDrinker_DancingDeath_C : public ASkillShapeSphere_C
		TEST_METHOD(BlueprintGeneratedClass__SkillShape_BloodDrinker_DancingDeath__SkillShape_BloodDrinker_DancingDeath_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, LifetimeEvents, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, FMODAudio, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, Blood_FX_Censored3, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, Blood_FX_Censored2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, Blood_FX_Censored1, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, Blood_FX_Censored, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, Scene4, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, Scene3, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, Scene2, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, BloodFX3, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, Sphere4, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, BloodFX1, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, Sphere3, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, BloodFX2, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, Sphere2, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, BloodFX, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, Sphere1, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, Scene1, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, Scene, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, Timeline_2_Opacity_D07CC3B6498EEDED76A9ED87B0126BAA, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, Timeline_2__Direction_D07CC3B6498EEDED76A9ED87B0126BAA, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, UnknownData_6M2H, 0x0335);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, Timeline_3, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, Timeline_1_Opacity_239C8E9F4426161B4C5F4792AD95FB69, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, Timeline_1__Direction_239C8E9F4426161B4C5F4792AD95FB69, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, UnknownData_IQWC, 0x0345);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, Timeline_2, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, Timeline_0_NewTrack_0_83947D0D475478F4A142E68F283E5B05, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, Timeline_0__Direction_83947D0D475478F4A142E68F283E5B05, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, UnknownData_GX08, 0x0355);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, Timeline_1, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, Spheres, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, Particles, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, BladesOffset, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_DancingDeath_C, RotationSpeed, 0x0374);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkillShape_BloodDrinker_DancingDeath_C, 0x0378);
		}

		// class ABaseShoulders_C : public ABaseArmor_C
		TEST_METHOD(BlueprintGeneratedClass__BaseShoulders__BaseShoulders_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseShoulders_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseShoulders_C, SkeletalMesh_left, 0x0430);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseShoulders_C, 0x0438);
		}

		// class ABaseDigitus_C : public ABaseGloves_C
		TEST_METHOD(BlueprintGeneratedClass__BaseDigitus__BaseDigitus_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseDigitus_C, ElementalEffect, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseDigitus_C, SkillList, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseDigitus_C, 0x0448);
		}

		// class Adm_f_t0a_head_bp_C : public Adm_BaseHead_C
		TEST_METHOD(BlueprintGeneratedClass__dm_f_t0a_head_bp__dm_f_t0a_head_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Adm_f_t0a_head_bp_C, 0x0428);
		}

		// class ULightSubHeader3TextStyle_C : public ULightSubHeader2TextStyle_C
		TEST_METHOD(BlueprintGeneratedClass__LightSubHeader3TextStyle__LightSubHeader3TextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightSubHeader3TextStyle_C, 0x00A8);
		}

		// class UForgedResourceBar_C : public UForgedResourceBar
		TEST_METHOD(WidgetBlueprintGeneratedClass__ForgedResourceBar__ForgedResourceBar_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedResourceBar_C, UberGraphFrame, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedResourceBar_C, SteamAnimation, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedResourceBar_C, EnergyAnimation, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedResourceBar_C, ForgedResourceBarFullGowLoop, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedResourceBar_C, ForgedResourceBarSteam, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedResourceBar_C, ForgedSteamFill, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedResourceBar_C, ForgedWhistleSteam, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedResourceBar_C, Piston, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedResourceBar_C, RedSlice1, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedResourceBar_C, RedSlice2, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedResourceBar_C, RedSlice3, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedResourceBar_C, SteamMeter, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedResourceBar_C, TLImage_262, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedResourceBar_C, TooltipMenuAnchor, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedResourceBar_C, TopGlow, 0x0718);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForgedResourceBar_C, 0x0720);
		}

		// class Anpcstretch_TrevailPtVendor_Intro_bp_C : public Anpc_quest_base_C
		TEST_METHOD(BlueprintGeneratedClass__npcstretch_TrevailPtVendor_Intro_bp__npcstretch_TrevailPtVendor_Intro_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Anpcstretch_TrevailPtVendor_Intro_bp_C, 0x04C8);
		}

		// class Upetwolf_anim_bp_C : public UTLAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__petwolf_anim_bp__petwolf_anim_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetwolf_anim_bp_C, UberGraphFrame, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetwolf_anim_bp_C, AnimGraphNode_Root, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetwolf_anim_bp_C, TLAnimGraphNode_Slot, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetwolf_anim_bp_C, AnimGraphNode_BlendSpacePlayer, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Upetwolf_anim_bp_C, 0x0780);
		}

		// class Ass_m_t0e_helm_bp_C : public Ass_BaseHelm_C
		TEST_METHOD(BlueprintGeneratedClass__ss_m_t0e_helm_bp__ss_m_t0e_helm_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ass_m_t0e_helm_bp_C, 0x0428);
		}

		// class ASharpshooter_Shasta_Pet_C : public ABasePlayerMinion_C
		TEST_METHOD(BlueprintGeneratedClass__Sharpshooter_Shasta_Pet__Sharpshooter_Shasta_Pet_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASharpshooter_Shasta_Pet_C, UberGraphFrame, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASharpshooter_Shasta_Pet_C, glow_03, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASharpshooter_Shasta_Pet_C, glow_02, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASharpshooter_Shasta_Pet_C, glow_01, 0x09C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASharpshooter_Shasta_Pet_C, 0x09D0);
		}

		// class USkill_GoblinFear_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_GoblinFear__Skill_GoblinFear_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_GoblinFear_C, 0x0540);
		}

		// class UMeleeDamageReduction_C : public UBaseProcSkill_C
		TEST_METHOD(BlueprintGeneratedClass__MeleeDamageReduction__MeleeDamageReduction_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeleeDamageReduction_C, 0x0560);
		}

		// class UStatusEffect_ShastaBuff_C : public UStatusEffectBase_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_ShastaBuff__StatusEffect_ShastaBuff_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_ShastaBuff_C, 0x0280);
		}

		// class USkill_Charge_Looping_C : public USkill_Charge_C
		TEST_METHOD(BlueprintGeneratedClass__Skill_Charge_Looping__Skill_Charge_Looping_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Charge_Looping_C, UnknownData_Z6SI, 0x0559);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Charge_Looping_C, ChargeShapeClass, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Charge_Looping_C, KnockbackFactor, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Charge_Looping_C, UnknownData_L8JI, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Charge_Looping_C, OnDamageTLEffect, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Charge_Looping_C, StopOnHit, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Charge_Looping_C, 0x0579);
		}

		// class ASkillShape_VespidCharge_C : public ASkillShapeSphere_C
		TEST_METHOD(BlueprintGeneratedClass__SkillShape_VespidCharge__SkillShape_VespidCharge_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_VespidCharge_C, Sphere1, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkillShape_VespidCharge_C, 0x0298);
		}

		// class Ass_m_t0a_gloves_bp_C : public Ass_BaseGloves_C
		TEST_METHOD(BlueprintGeneratedClass__ss_m_t0a_gloves_bp__ss_m_t0a_gloves_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ass_m_t0a_gloves_bp_C, 0x0438);
		}

		// class UStatusEffect_DoubleCross_Buff_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_DoubleCross_Buff__StatusEffect_DoubleCross_Buff_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_DoubleCross_Buff_C, 0x0280);
		}

		// class Arelic_blooddrinker_bp_C : public ARelicBase_C
		TEST_METHOD(BlueprintGeneratedClass__relic_blooddrinker_bp__relic_blooddrinker_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Arelic_blooddrinker_bp_C, vfx_relic_blood_drinker_01_p, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::Arelic_blooddrinker_bp_C, PreviewSize, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Arelic_blooddrinker_bp_C, 0x0460);
		}

		// class AArrowMesh_bp_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__ArrowMesh_bp__ArrowMesh_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AArrowMesh_bp_C, StaticMesh, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArrowMesh_bp_C, DefaultSceneRoot, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AArrowMesh_bp_C, 0x0230);
		}

		// class APlayer_Base_C : public ATLCharacter
		TEST_METHOD(BlueprintGeneratedClass__Player_Base__Player_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, UberGraphFrame, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, CombatNotifyComponentPool, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, AltSkillFallbacks, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, BlobShadow, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, PlayerAffix, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, HitboxCapsule, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, FoliageSoundInteractor, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, DiminishingReturns, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, MaterialManager, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, CharacterCustomization, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, MeshPreview, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, PlayerLevel, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, UIPFInteractor, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, vfx_weather, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, PreviewActor, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, AudioImportance, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, Footsteps_SS, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, PlayGadgetAudio, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, GeneratedIconManager, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, ItemTarget, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, HealthMonitor, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, MapMarker, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, Party, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, PlayerCharacterData, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, Nameplate, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, Default_Skills, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, Base_Skills, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, MulticastFunction, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, Proc, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, AudioEffectMap, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, AutoOperateSphere, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, Camera, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, TLSpringArm, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayer_Base_C, PlayerVisibility, 0x0838);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayer_Base_C, 0x0840);
		}

		// class Aio_floor_bridge_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_floor_bridge_01_bp__io_floor_bridge_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_floor_bridge_01_bp_C, 0x0268);
		}

		// class ATriggerSphereQuest_C : public ATriggerSphere
		TEST_METHOD(BlueprintGeneratedClass__TriggerSphereQuest__TriggerSphereQuest_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggerSphereQuest_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggerSphereQuest_C, QuestObject, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerSphereQuest_C, 0x0238);
		}

		// class USkill_Sharpshooter_Adventurer_Base_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_Sharpshooter_Adventurer_Base__Skill_Sharpshooter_Adventurer_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Sharpshooter_Adventurer_Base_C, RangedBonusStackCount, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Sharpshooter_Adventurer_Base_C, UnknownData_048W, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Sharpshooter_Adventurer_Base_C, RangedBonusStatusEffect, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Sharpshooter_Adventurer_Base_C, RangedBonusStatusTag, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Sharpshooter_Adventurer_Base_C, CheckForWeapon, 0x0558);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Sharpshooter_Adventurer_Base_C, 0x0559);
		}

		// class USkill_Sharpshooter_ShastaTaunt_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_Sharpshooter_ShastaTaunt__Skill_Sharpshooter_ShastaTaunt_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Sharpshooter_ShastaTaunt_C, 0x0540);
		}

		// class UStatusEffect_PetLifeSteal_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_PetLifeSteal__StatusEffect_PetLifeSteal_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_PetLifeSteal_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_PetLifeSteal_C, 0x0288);
		}

		// class UStatusEffect_Immobilize_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Immobilize__StatusEffect_Immobilize_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Immobilize_C, 0x0280);
		}

		// class UStatusEffect_Harvest_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Harvest__StatusEffect_Harvest_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Harvest_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Harvest_C, 0x0288);
		}

		// class UPlayerTravelWarped_C : public UStatusEffectBase_C
		TEST_METHOD(BlueprintGeneratedClass__PlayerTravelWarped__PlayerTravelWarped_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerTravelWarped_C, 0x0280);
		}

		// class USkill_Sharpshooter_Base_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_Sharpshooter_Base__Skill_Sharpshooter_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Sharpshooter_Base_C, CheckForWeapon, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Sharpshooter_Base_C, 0x0541);
		}

		// class USkill_BloodDrinker_ActivationBleed_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_BloodDrinker_ActivationBleed__Skill_BloodDrinker_ActivationBleed_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_BloodDrinker_ActivationBleed_C, BleedDuration, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_BloodDrinker_ActivationBleed_C, 0x0544);
		}

		// class AFrozenShatter_TLEffect_C : public ATLEffect
		TEST_METHOD(BlueprintGeneratedClass__FrozenShatter_TLEffect__FrozenShatter_TLEffect_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrozenShatter_TLEffect_C, FMODAudio, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrozenShatter_TLEffect_C, ParticleSystem, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrozenShatter_TLEffect_C, DefaultSceneRoot, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFrozenShatter_TLEffect_C, 0x0278);
		}

		// class UStatusEffect_Invulnerable_AllyRevived_C : public UStatusEffect_Invulnerable_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Invulnerable_AllyRevived__StatusEffect_Invulnerable_AllyRevived_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Invulnerable_AllyRevived_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Invulnerable_AllyRevived_C, UnknownData_O6CG, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Invulnerable_AllyRevived_C, ParticlesEnd_01, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Invulnerable_AllyRevived_C, ParticleStart_01, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Invulnerable_AllyRevived_C, 0x0370);
		}

		// class UStatusEffect_Forged_SteamBuff_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Forged_SteamBuff__StatusEffect_Forged_SteamBuff_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Forged_SteamBuff_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Forged_SteamBuff_C, 0x0288);
		}

		// class USkill_MeleeAttack_Shasta_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_MeleeAttack_Shasta__Skill_MeleeAttack_Shasta_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_MeleeAttack_Shasta_C, 0x0540);
		}

		// class AMissile_LegendaryMegaBuster_Stage3_C : public AMissile_LegendaryMegaBuster_Stage1_C
		TEST_METHOD(BlueprintGeneratedClass__Missile_LegendaryMegaBuster_Stage3__Missile_LegendaryMegaBuster_Stage3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMissile_LegendaryMegaBuster_Stage3_C, 0x06B4);
		}

		// class Avfx_ground_shadow_02_C : public ATLEffect
		TEST_METHOD(BlueprintGeneratedClass__vfx_ground_shadow_02__vfx_ground_shadow_02_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Avfx_ground_shadow_02_C, TLDecal, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::Avfx_ground_shadow_02_C, DefaultSceneRoot, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Avfx_ground_shadow_02_C, 0x0270);
		}

		// class Avfx_ground_shadow_01_C : public ATLEffect
		TEST_METHOD(BlueprintGeneratedClass__vfx_ground_shadow_01__vfx_ground_shadow_01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Avfx_ground_shadow_01_C, TLDecal, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::Avfx_ground_shadow_01_C, DefaultSceneRoot, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Avfx_ground_shadow_01_C, 0x0270);
		}

		// class AMissile_Forged_Legendary_CoalLaunchRain_C : public AMissileBase_C
		TEST_METHOD(BlueprintGeneratedClass__Missile_Forged_Legendary_CoalLaunchRain__Missile_Forged_Legendary_CoalLaunchRain_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_Forged_Legendary_CoalLaunchRain_C, ParticleSystem, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMissile_Forged_Legendary_CoalLaunchRain_C, 0x0688);
		}

		// class AMissile_Forged_PoisonDart_C : public AMissileBase_C
		TEST_METHOD(BlueprintGeneratedClass__Missile_Forged_PoisonDart__Missile_Forged_PoisonDart_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_Forged_PoisonDart_C, UberGraphFrame, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_Forged_PoisonDart_C, ParticleSystem, 0x0688);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMissile_Forged_PoisonDart_C, 0x0690);
		}

		// class AMissile_Forged_LegendaryEnergyFist_C : public AMissileBase_C
		TEST_METHOD(BlueprintGeneratedClass__Missile_Forged_LegendaryEnergyFist__Missile_Forged_LegendaryEnergyFist_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_Forged_LegendaryEnergyFist_C, upper_ranged, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_Forged_LegendaryEnergyFist_C, ParticleSystem, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_Forged_LegendaryEnergyFist_C, Piercing, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMissile_Forged_LegendaryEnergyFist_C, 0x0691);
		}

		// class AWeaponSkeletalBase_C : public AWeaponBase_C
		TEST_METHOD(BlueprintGeneratedClass__WeaponSkeletalBase__WeaponSkeletalBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponSkeletalBase_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponSkeletalBase_C, SelectionShape, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponSkeletalBase_C, SkeletalMesh_1, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponSkeletalBase_C, Flippy, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponSkeletalBase_C, FlippyAnim, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWeaponSkeletalBase_C, 0x0450);
		}

		// class Ass_m_t1a_chest_bp_C : public Ass_BaseChest_Modular_C
		TEST_METHOD(BlueprintGeneratedClass__ss_m_t1a_chest_bp__ss_m_t1a_chest_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ass_m_t1a_chest_bp_C, 0x0440);
		}

		// class Agob_prop_crategrp_03_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_prop_crategrp_03_bp__gob_prop_crategrp_03_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_crategrp_03_bp_C, Box1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_crategrp_03_bp_C, Box, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_prop_crategrp_03_bp_C, 0x0278);
		}

		// class Agob_prop_fencestraight_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_prop_fencestraight_01_bp__gob_prop_fencestraight_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_prop_fencestraight_01_bp_C, 0x0268);
		}

		// class Agob_prop_ladder_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_prop_ladder_01_bp__gob_prop_ladder_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_prop_ladder_01_bp_C, 0x0268);
		}

		// class Aio_set_ship_01_anim_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_set_ship_01_anim_bp__io_set_ship_01_anim_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_set_ship_01_anim_bp_C, io_prop_ship_01b_sail, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_set_ship_01_anim_bp_C, io_prop_ship_01b_deck, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_set_ship_01_anim_bp_C, PointLight5, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_set_ship_01_anim_bp_C, PointLight4, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_set_ship_01_anim_bp_C, PointLight3, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_set_ship_01_anim_bp_C, ParticleSystem3, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_set_ship_01_anim_bp_C, ParticleSystem2, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_set_ship_01_anim_bp_C, PointLight2, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_set_ship_01_anim_bp_C, ParticleSystem1, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_set_ship_01_anim_bp_C, PointLight1, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_set_ship_01_anim_bp_C, ParticleSystem, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_set_ship_01_anim_bp_C, PointLight, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_set_ship_01_anim_bp_C, io_prop_ship_01b, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_set_ship_01_anim_bp_C, flag_flaps, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_set_ship_01_anim_bp_C, BOAT_SOUND, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_set_ship_01_anim_bp_C, 0x02E0);
		}

		// class UStatusEffect_ShastaHazardAttach_C : public UStatusEffectBase_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_ShastaHazardAttach__StatusEffect_ShastaHazardAttach_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_ShastaHazardAttach_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_ShastaHazardAttach_C, 0x0288);
		}

		// class Anpc_quest_base_C : public AGadget
		TEST_METHOD(BlueprintGeneratedClass__npc_quest_base__npc_quest_base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Anpc_quest_base_C, BlobShadow, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Anpc_quest_base_C, QuestIndicator, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Anpc_quest_base_C, Capsule, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Anpc_quest_base_C, SkeletalMesh, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Anpc_quest_base_C, QuestObject, 0x04C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Anpc_quest_base_C, 0x04C8);
		}

		// class Aio_prop_lantern_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_lantern_01_bp__io_prop_lantern_01_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_lantern_01_bp_C, vfx_simple_glow_02_p, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_lantern_01_bp_C, PointLight, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_lantern_01_bp_C, vfx_env_fire_lantern_light_01_p, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_lantern_01_bp_C, 0x0280);
		}

		// class Aio_terrain_20x20_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_terrain_20x20_02_bp__io_terrain_20x20_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_terrain_20x20_02_bp_C, 0x0268);
		}

		// class Aio_walldrain_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_walldrain_01_bp__io_walldrain_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_walldrain_01_bp_C, 0x0268);
		}

		// class Upetowl_anim_bp_C : public UTLAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__petowl_anim_bp__petowl_anim_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_bp_C, UberGraphFrame, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_bp_C, AnimGraphNode_Root, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_bp_C, AnimGraphNode_BlendSpacePlayer, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetowl_anim_bp_C, TLAnimGraphNode_Slot, 0x0730);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Upetowl_anim_bp_C, 0x0780);
		}

		// class Apetowl_02_C : public Apetowl_base_C
		TEST_METHOD(BlueprintGeneratedClass__petowl_02__petowl_02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Apetowl_02_C, 0x08A0);
		}

		// class USkill_Spawn_JumpDown4m_C : public USkill_Spawn_C
		TEST_METHOD(BlueprintGeneratedClass__Skill_Spawn_JumpDown4m__Skill_Spawn_JumpDown4m_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Spawn_JumpDown4m_C, 0x0540);
		}

		// class ABaseBossFightShape_C : public ABossFightShape
		TEST_METHOD(BlueprintGeneratedClass__BaseBossFightShape__BaseBossFightShape_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseBossFightShape_C, Box, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseBossFightShape_C, 0x0268);
		}

		// class ABaseBreakable_C : public ATLBreakable
		TEST_METHOD(BlueprintGeneratedClass__BaseBreakable__BaseBreakable_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseBreakable_C, UberGraphFrame, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseBreakable_C, AudioImportance, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseBreakable_C, NavModifierVolume, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseBreakable_C, Destructible, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseBreakable_C, NavModifiers, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseBreakable_C, Scene, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseBreakable_C, ActorMode, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseBreakable_C, 0x0468);
		}

		// class Agcave_breakable_crate_01_bp_C : public ABaseBreakable_Container_C
		TEST_METHOD(BlueprintGeneratedClass__gcave_breakable_crate_01_bp__gcave_breakable_crate_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agcave_breakable_crate_01_bp_C, 0x0478);
		}

		// class Agcave_breakable_crategrp_01_bp_C : public ABaseBreakable_Container_C
		TEST_METHOD(BlueprintGeneratedClass__gcave_breakable_crategrp_01_bp__gcave_breakable_crategrp_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agcave_breakable_crategrp_01_bp_C, 0x0478);
		}

		// class ABaseBreakable_Container_C : public ABaseBreakable_C
		TEST_METHOD(BlueprintGeneratedClass__BaseBreakable_Container__BaseBreakable_Container_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseBreakable_Container_C, UberGraphFrame, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseBreakable_Container_C, BaseTrapComponent, 0x0470);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseBreakable_Container_C, 0x0478);
		}

		// class Agcave_break_bench_01_bp_C : public ABaseBreakable_C
		TEST_METHOD(BlueprintGeneratedClass__gcave_break_bench_01_bp__gcave_break_bench_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agcave_break_bench_01_bp_C, 0x0468);
		}

		// class Atinymouse_bp_C : public ABaseCritter_C
		TEST_METHOD(BlueprintGeneratedClass__tinymouse_bp__tinymouse_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Atinymouse_bp_C, 0x04E8);
		}

		// class Aio_props_group_03_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_props_group_03_bp__io_props_group_03_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_props_group_03_bp_C, 0x0268);
		}

		// class Aio_scrollvendorshelf_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_scrollvendorshelf_02_bp__io_scrollvendorshelf_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_scrollvendorshelf_02_bp_C, 0x0268);
		}

		// class Aio_prop_rockcliff_04_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_rockcliff_04_bp__io_prop_rockcliff_04_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_rockcliff_04_bp_C, 0x0268);
		}

		// class Aio_prop_roundtable_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_roundtable_01_bp__io_prop_roundtable_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_roundtable_01_bp_C, 0x0268);
		}

		// class Aio_prop_shop_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_shop_01_bp__io_prop_shop_01_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_shop_01_bp_C, flap, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_shop_01_bp_C, 0x0270);
		}

		// class Aio_prop_tent_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_tent_01_bp__io_prop_tent_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_tent_01_bp_C, 0x0268);
		}

		// class ASkillShape_SharpShooter_TriShot_C : public ASkillShapeCone_C
		TEST_METHOD(BlueprintGeneratedClass__SkillShape_SharpShooter_TriShot__SkillShape_SharpShooter_TriShot_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkillShape_SharpShooter_TriShot_C, 0x0290);
		}

		// class USkill_Unstuck_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_Unstuck__Skill_Unstuck_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Unstuck_C, 0x0540);
		}

		// class AMonsterSpawner_BossRoom_Position_C : public AMonsterSpawner_BossRoom_Base_C
		TEST_METHOD(BlueprintGeneratedClass__MonsterSpawner_BossRoom_Position__MonsterSpawner_BossRoom_Position_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner_BossRoom_Position_C, MonsterSpawnPosition, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMonsterSpawner_BossRoom_Position_C, 0x0320);
		}

		// class ASkillShape_GoblinHoundCharge_C : public ASkillShapeSphere_C
		TEST_METHOD(BlueprintGeneratedClass__SkillShape_GoblinHoundCharge__SkillShape_GoblinHoundCharge_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkillShape_GoblinHoundCharge_C, 0x0290);
		}

		// class UStatusEffect_ChargeImmune_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_ChargeImmune__StatusEffect_ChargeImmune_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_ChargeImmune_C, 0x0280);
		}

		// class ASkillShape_GoblinDeath_C : public ASkillShape
		TEST_METHOD(BlueprintGeneratedClass__SkillShape_GoblinDeath__SkillShape_GoblinDeath_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_GoblinDeath_C, Sphere, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkillShape_GoblinDeath_C, 0x0290);
		}

		// class USkill_Yell_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_Yell__Skill_Yell_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Yell_C, 0x0540);
		}

		// class AStabby_Soldier_Cutscene_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Stabby_Soldier_Cutscene__Stabby_Soldier_Cutscene_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStabby_Soldier_Cutscene_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStabby_Soldier_Cutscene_C, gobgeneric_body_04_geo, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStabby_Soldier_Cutscene_C, npcimperialguard_body_04_geo, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStabby_Soldier_Cutscene_C, DefaultSceneRoot, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStabby_Soldier_Cutscene_C, Min, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStabby_Soldier_Cutscene_C, Max, 0x0244);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStabby_Soldier_Cutscene_C, 0x0248);
		}

		// class UStatusEffect_DamnationAddProc_C : public UStatusEffectBase_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_DamnationAddProc__StatusEffect_DamnationAddProc_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_DamnationAddProc_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_DamnationAddProc_C, 0x0288);
		}

		// class AHazard_SpinningBlade_C : public AHazard
		TEST_METHOD(BlueprintGeneratedClass__Hazard_SpinningBlade__Hazard_SpinningBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_SpinningBlade_C, UberGraphFrame, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_SpinningBlade_C, FMODAudio, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_SpinningBlade_C, Blood_FX_Censored, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_SpinningBlade_C, Blood_FX, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_SpinningBlade_C, LifetimeEvents, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_SpinningBlade_C, Capsule, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_SpinningBlade_C, DefaultSceneRoot, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_SpinningBlade_C, Timeline_1_Opacity_892CBA934383845500B1A58360C7477B, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_SpinningBlade_C, Timeline_1__Direction_892CBA934383845500B1A58360C7477B, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_SpinningBlade_C, UnknownData_XGAZ, 0x047D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_SpinningBlade_C, Timeline_2, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_SpinningBlade_C, Timeline_0_Opacity_BEACEB22478684F36F78AB9F3AA85F8E, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_SpinningBlade_C, Timeline_0__Direction_BEACEB22478684F36F78AB9F3AA85F8E, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_SpinningBlade_C, UnknownData_B4XK, 0x048D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_SpinningBlade_C, Timeline_1, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_SpinningBlade_C, DMAT, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_SpinningBlade_C, FadeIn, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_SpinningBlade_C, UnknownData_2EE0, 0x04A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_SpinningBlade_C, Color, 0x04A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHazard_SpinningBlade_C, 0x04B0);
		}

		// class UCharacterMenuPartyMemberWidget_C : public UPartyMemberWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CharacterMenuPartyMemberWidget__CharacterMenuPartyMemberWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuPartyMemberWidget_C, UberGraphFrame, 0x18D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuPartyMemberWidget_C, AcceptButton, 0x18E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuPartyMemberWidget_C, AcceptTexTBlock, 0x18E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuPartyMemberWidget_C, AccountName, 0x18F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuPartyMemberWidget_C, ButtonWrapper, 0x18F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuPartyMemberWidget_C, CharacterName, 0x1900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuPartyMemberWidget_C, CurrentArea, 0x1908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuPartyMemberWidget_C, DeclineButton, 0x1910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuPartyMemberWidget_C, DeclineText, 0x1918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuPartyMemberWidget_C, EmptyFullWidgetSwitcher, 0x1920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuPartyMemberWidget_C, InviteButton, 0x1928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuPartyMemberWidget_C, InvitePartyButton, 0x1930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuPartyMemberWidget_C, KickButton, 0x1938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuPartyMemberWidget_C, KickText, 0x1940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuPartyMemberWidget_C, LeaveButton, 0x1948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuPartyMemberWidget_C, LeaveButtonText, 0x1950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuPartyMemberWidget_C, MuteButton, 0x1958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuPartyMemberWidget_C, PendingInviteText, 0x1960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuPartyMemberWidget_C, PlayerBadge, 0x1968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuPartyMemberWidget_C, PlayerLevel, 0x1970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuPartyMemberWidget_C, PortraitImage, 0x1978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuPartyMemberWidget_C, SmallHeader, 0x1980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuPartyMemberWidget_C, TLTextBlock_165, 0x1988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuPartyMemberWidget_C, TLTextBlock_226, 0x1990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuPartyMemberWidget_C, ViewPartyMemberProfileButton, 0x1998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuPartyMemberWidget_C, ViewProfileButton, 0x19A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterMenuPartyMemberWidget_C, 0x19A8);
		}

		// class Aw_pickaxe_2h_harvesting_t0a_bp_C : public AWeaponHammerBase_C
		TEST_METHOD(BlueprintGeneratedClass__w_pickaxe_2h_harvesting_t0a_bp__w_pickaxe_2h_harvesting_t0a_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aw_pickaxe_2h_harvesting_t0a_bp_C, 0x0450);
		}

		// class UPotionWidget_C : public UPotionWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PotionWidget__PotionWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidget_C, UberGraphFrame, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidget_C, UseLastPotion, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidget_C, UsePotion, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidget_C, CannotUse, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidget_C, Cork, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidget_C, CorkDisabled, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidget_C, Count, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidget_C, HotkeyWidget, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidget_C, MenuAnchor_1, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidget_C, ProgressBar_1, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidget_C, TLImage_1, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidget_C, TLImage_213, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidget_C, TopImage, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidget_C, ShowHotkey, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidget_C, UnknownData_AGQ7, 0x0781);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidget_C, Cooldown_Start, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidget_C, Cooldown_Duration, 0x0788);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPotionWidget_C, 0x078C);
		}

		// class ULightPropagationVolumeBlendable : public UObject
		TEST_METHOD(Class__LightPropagationVolumeRuntime__LightPropagationVolumeBlendable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, UnknownData_RDRV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, Settings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, BlendWeight, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, UnknownData_YS7Y, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightPropagationVolumeBlendable, 0x0078);
		}

		// class UNiagaraDataInterfaceChaosDestruction : public UNiagaraDataInterface
		TEST_METHOD(Class__ChaosNiagara__NiagaraDataInterfaceChaosDestruction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ChaosSolverActorSet, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DataSourceType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_NIKO, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DataProcessFrequency, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, MaxNumberOfDataEntriesToSpawn, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DoSpawn, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_HJ3M, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpawnMultiplierMinMax, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpawnChance, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ImpulseToSpawnMinMax, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpeedToSpawnMinMax, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, MassToSpawnMinMax, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ExtentMinToSpawnMinMax, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ExtentMaxToSpawnMinMax, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, VolumeToSpawnMinMax, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SolverTimeToSpawnMinMax, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SurfaceTypeToSpawn, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationFilteringMode, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationXToSpawn, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_91NN, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationXToSpawnMinMax, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationYToSpawn, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_U33Z, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationYToSpawnMinMax, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationZToSpawn, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_PZ0Z, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationZToSpawnMinMax, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DataSortingType, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, bGetExternalCollisionData, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DoSpatialHash, 0x0106);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_JS09, 0x0107);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpatialHashVolumeMin, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpatialHashVolumeMax, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpatialHashVolumeCellSize, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, MaxDataPerCell, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, bApplyMaterialsFilter, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_L99T, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ChaosBreakingMaterialSet, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, bGetExternalBreakingData, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, bGetExternalTrailingData, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_AM37, 0x018A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, RandomPositionMagnitudeMinMax, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, InheritedVelocityMultiplier, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, RandomVelocityGenerationType, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_QRVL, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, RandomVelocityMagnitudeMinMax, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpreadAngleMax, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, VelocityOffsetMin, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, VelocityOffsetMax, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, FinalVelocityMagnitudeMinMax, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, MaxLatency, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DebugType, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_KRJY, 0x01CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LastSpawnedPointID, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LastSpawnTime, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_A8JU, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SolverTime, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, TimeStampOfLastProcessedData, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_OU6E, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceChaosDestruction, 0x0238);
		}

		// class UNiagaraDataInterfaceFieldSystem : public UNiagaraDataInterface
		TEST_METHOD(Class__ChaosNiagara__NiagaraDataInterfaceFieldSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceFieldSystem, BlueprintSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceFieldSystem, SourceActor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceFieldSystem, FieldDimensions, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceFieldSystem, MinBounds, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceFieldSystem, MaxBounds, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceFieldSystem, UnknownData_A6JA, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceFieldSystem, 0x0090);
		}

		// class UMagicLeapControllerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapController__MagicLeapControllerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapControllerFunctionLibrary, 0x0028);
		}

		// class UMagicLeapTouchpadGesturesComponent : public UActorComponent
		TEST_METHOD(Class__MagicLeapController__MagicLeapTouchpadGesturesComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapTouchpadGesturesComponent, UnknownData_RF9G, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapTouchpadGesturesComponent, OnTouchpadGestureStart, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapTouchpadGesturesComponent, OnTouchpadGestureContinue, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapTouchpadGesturesComponent, OnTouchpadGestureEnd, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapTouchpadGesturesComponent, UnknownData_QZYA, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapTouchpadGesturesComponent, 0x0140);
		}

		// class UGeneralProjectSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GeneralProjectSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CompanyName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CompanyDistinguishedName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CopyrightNotice, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, Description, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, Homepage, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, LicensingTerms, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, PrivacyPolicy, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectID, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectVersion, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, SupportContact, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectDisplayedTitle, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectDebugTitleInfo, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bShouldWindowPreserveAspectRatio, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bUseBorderlessWindow, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bStartInVR, 0x010A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowWindowResize, 0x010B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowClose, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowMaximize, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowMinimize, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, UnknownData_587S, 0x010F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralProjectSettings, 0x0110);
		}

		// class UHudSettings : public UObject
		TEST_METHOD(Class__EngineSettings__HudSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudSettings, UnknownData_G5F5, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudSettings, DebugDisplay, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHudSettings, 0x0040);
		}

		// class UConsoleSettings : public UObject
		TEST_METHOD(Class__EngineSettings__ConsoleSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, MaxScrollbackSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_HAIW, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, ManualAutoCompleteList, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteMapPaths, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, BackgroundOpacityPercentage, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, bOrderTopToBottom, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, bDisplayHelpInAutoComplete, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_5TC1, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, InputColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, HistoryColor, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteCommandColor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteCVarColor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteFadedColor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_AHAJ, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsoleSettings, 0x0070);
		}

		// class UGameMapsSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameMapsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, LocalMapOptions, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, TransitionMap, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, bUseSplitscreen, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, TwoPlayerSplitscreenLayout, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, ThreePlayerSplitscreenLayout, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, FourPlayerSplitscreenLayout, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, bOffsetPlayerGamepadIds, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, UnknownData_ZLWW, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameInstanceClass, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameDefaultMap, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, ServerDefaultMap, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GlobalDefaultGameMode, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GlobalDefaultServerGameMode, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameModeMapPrefixes, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameModeClassAliases, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameMapsSettings, 0x00F0);
		}

		// class UGameNetworkManagerSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameNetworkManagerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, MinDynamicBandwidth, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, MaxDynamicBandwidth, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, TotalNetBandwidth, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, BadPingThreshold, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, UnknownData_L6E2, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, StandbyRxCheatTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, StandbyTxCheatTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentMissingForRxStandby, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentMissingForTxStandby, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentForBadPing, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, JoinInProgressStandbyWaitTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, UnknownData_W8CU, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameNetworkManagerSettings, 0x0058);
		}

		// class UGameSessionSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameSessionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, MaxSpectators, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, MaxPlayers, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, UnknownData_9SIM, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameSessionSettings, 0x0038);
		}

		// class UGeneralEngineSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GeneralEngineSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralEngineSettings, 0x0028);
		}

		// class UAutomationUtilsBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AutomationUtils__AutomationUtilsBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutomationUtilsBlueprintLibrary, 0x0028);
		}

		// class ATLEffect_champion_indicator_01_C : public ATLEffect
		TEST_METHOD(BlueprintGeneratedClass__TLEffect_champion_indicator_01__TLEffect_champion_indicator_01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLEffect_champion_indicator_01_C, vfx_champion_unique_indicator_light_01_p, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLEffect_champion_indicator_01_C, Decal, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLEffect_champion_indicator_01_C, DefaultSceneRoot, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLEffect_champion_indicator_01_C, DMAT_01, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATLEffect_champion_indicator_01_C, 0x0280);
		}

		// class UMapMarker_BossMonster_C : public UMapMarkerComponent
		TEST_METHOD(BlueprintGeneratedClass__MapMarker_BossMonster__MapMarker_BossMonster_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapMarker_BossMonster_C, 0x0100);
		}

		// class UBasicHeader_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BasicHeader__BasicHeader_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicHeader_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicHeader_C, HeaderText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicHeader_C, TLImage_1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicHeader_C, DefaultText, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasicHeader_C, 0x0290);
		}

		// class UButtonSmallTextStyle_C : public UTLTextStyle
		TEST_METHOD(BlueprintGeneratedClass__ButtonSmallTextStyle__ButtonSmallTextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonSmallTextStyle_C, 0x00A8);
		}

		// class ULifeboundRemoved_inv_C : public UTLInventoryContainerLifeBoundRemoved
		TEST_METHOD(BlueprintGeneratedClass__LifeboundRemoved_inv__LifeboundRemoved_inv_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULifeboundRemoved_inv_C, 0x01F0);
		}

		// class UFloatingGamepadButtonAction_C : public UFloatingGamepadButtonActionWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__FloatingGamepadButtonAction__FloatingGamepadButtonAction_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingGamepadButtonAction_C, ButtonDescription, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingGamepadButtonAction_C, HotkeyWidget, 0x06B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatingGamepadButtonAction_C, 0x06B8);
		}

		// class USkillTierLockedColumn_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SkillTierLockedColumn__SkillTierLockedColumn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierLockedColumn_C, Reset, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierLockedColumn_C, Unlock, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierLockedColumn_C, LockNumber, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierLockedColumn_C, Tier1Locked, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierLockedColumn_C, Tier2Locked, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierLockedColumn_C, Tier3Locked, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierLockedColumn_C, Tier4Locked, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierLockedColumn_C, Tier5Locked, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierLockedColumn_C, TLImage_71, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierLockedColumn_C, TLImage_113, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierLockedColumn_C, TLImage_115, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierLockedColumn_C, TLImage_116, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierLockedColumn_C, TLImage_117, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierLockedColumn_C, TLImage_118, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierLockedColumn_C, TLImage_119, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierLockedColumn_C, TLImage_120, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierLockedColumn_C, TLImage_121, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierLockedColumn_C, TLImage_122, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierLockedColumn_C, TLImage_123, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierLockedColumn_C, TLImage_124, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierLockedColumn_C, TLImage_125, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierLockedColumn_C, TLImage_126, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierLockedColumn_C, TLImage_127, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierLockedColumn_C, TLImage_128, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierLockedColumn_C, TLImage_129, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierLockedColumn_C, VariantSwitcher, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierLockedColumn_C, HideAnimation, 0x0710);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillTierLockedColumn_C, 0x0718);
		}

		// class USkillHotkeyWidget_C : public USkillHotkey
		TEST_METHOD(WidgetBlueprintGeneratedClass__SkillHotkeyWidget__SkillHotkeyWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillHotkeyWidget_C, UberGraphFrame, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillHotkeyWidget_C, PulseCooldownAnimation, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillHotkeyWidget_C, ButtonBGWidget, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillHotkeyWidget_C, CooldownPulse, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillHotkeyWidget_C, TextWidget, 0x06C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillHotkeyWidget_C, 0x06C8);
		}

		// class UAccountStashReload_C : public UInventoryStashLoadRetryWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__AccountStashReload__AccountStashReload_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountStashReload_C, AcceptText, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountStashReload_C, RetryButton, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountStashReload_C, TLTextBlock_129, 0x0658);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAccountStashReload_C, 0x0660);
		}

		// class UStashGridInventory_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__StashGridInventory__StashGridInventory_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStashGridInventory_C, UberGraphFrame, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStashGridInventory_C, AboveGridSlot, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStashGridInventory_C, AccountStashReload, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStashGridInventory_C, glow, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStashGridInventory_C, ItemsList, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStashGridInventory_C, Switcher, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStashGridInventory_C, TLImage_1, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStashGridInventory_C, TLImage_2, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStashGridInventory_C, TLImage_3, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStashGridInventory_C, TLTextBlock_1, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStashGridInventory_C, Title, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStashGridInventory_C, LeftList, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStashGridInventory_C, RightGrid, 0x06B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStashGridInventory_C, 0x06B8);
		}

		// class UControlsHelpScreen_PC_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ControlsHelpScreen_PC__ControlsHelpScreen_PC_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsHelpScreen_PC_C, show, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsHelpScreen_PC_C, BigKeyWidget_71, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsHelpScreen_PC_C, BigKeyWidget_73, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsHelpScreen_PC_C, BigKeyWidget_77, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsHelpScreen_PC_C, BigKeyWidget_79, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsHelpScreen_PC_C, ControlHelpScreen_Xbox, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsHelpScreen_PC_C, TLImage_1, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsHelpScreen_PC_C, TLRichTextBlock_1, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsHelpScreen_PC_C, TLRichTextBlock_8, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsHelpScreen_PC_C, TLRichTextBlock_12, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsHelpScreen_PC_C, TLRichTextBlock_14, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsHelpScreen_PC_C, VerticalBox_1, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsHelpScreen_PC_C, VerticalBox_2, 0x06A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlsHelpScreen_PC_C, 0x06A8);
		}

		// class UControlsHelpScreen_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ControlsHelpScreen__ControlsHelpScreen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsHelpScreen_C, UberGraphFrame, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsHelpScreen_C, ControlHelpScreen_PS4, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsHelpScreen_C, ControlHelpScreen_Switch, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsHelpScreen_C, ControlHelpScreen_Xbox, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsHelpScreen_C, ControlsHelpScreen_PC, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsHelpScreen_C, PlatformSwitcher, 0x0668);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlsHelpScreen_C, 0x0670);
		}

		// class UDarkHeader1TextStyle_C : public UTLTextStyle
		TEST_METHOD(BlueprintGeneratedClass__DarkHeader1TextStyle__DarkHeader1TextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDarkHeader1TextStyle_C, 0x00A8);
		}

		// class USkillButtonStyle_C : public UTLButtonStyle
		TEST_METHOD(BlueprintGeneratedClass__SkillButtonStyle__SkillButtonStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillButtonStyle_C, 0x0310);
		}

		// class USkillPointHelpScreen_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SkillPointHelpScreen__SkillPointHelpScreen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillPointHelpScreen_C, show, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillPointHelpScreen_C, TLImage_1, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillPointHelpScreen_C, TLRichTextBlock_Base, 0x0650);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillPointHelpScreen_C, 0x0658);
		}

		// class UClassMechanicHelpScreen_Demo_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ClassMechanicHelpScreen_Demo__ClassMechanicHelpScreen_Demo_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicHelpScreen_Demo_C, TLImage_5, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicHelpScreen_Demo_C, TLImage_8, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClassMechanicHelpScreen_Demo_C, 0x0650);
		}

		// class UFortPropWidget_BuyOrPlace_C : public UFortPropWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__FortPropWidget_BuyOrPlace__FortPropWidget_BuyOrPlace_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget_BuyOrPlace_C, CraftAnim, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget_BuyOrPlace_C, CostContainer, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget_BuyOrPlace_C, CostList, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget_BuyOrPlace_C, DecorationButton, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget_BuyOrPlace_C, DecorationNameText, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget_BuyOrPlace_C, FortPropIconWidget, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget_BuyOrPlace_C, FortPropLimitWidget, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget_BuyOrPlace_C, LimitBox, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget_BuyOrPlace_C, PropCost, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget_BuyOrPlace_C, TLImage_108, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget_BuyOrPlace_C, TLTextBlock_5, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget_BuyOrPlace_C, TLTextBlock_6, 0x0A60);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFortPropWidget_BuyOrPlace_C, 0x0A68);
		}

		// class UStatusEffect_LuckTree_Base_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_LuckTree_Base__StatusEffect_LuckTree_Base_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_LuckTree_Base_C, 0x0280);
		}

		// class UFrameDecorativeA_Style_C : public UTLBorderStyle
		TEST_METHOD(BlueprintGeneratedClass__FrameDecorativeA_Style__FrameDecorativeA_Style_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrameDecorativeA_Style_C, 0x00F8);
		}

		// class UHUD_C : public UTLHUD
		TEST_METHOD(WidgetBlueprintGeneratedClass__HUD__HUD_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUD_C, UberGraphFrame, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUD_C, FadeSkillPointsTicker, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUD_C, BaseAllyInfoWidget, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUD_C, BossInfoWidget_70, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUD_C, CanvasPanel_1, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUD_C, CenterScreenMessage, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUD_C, CharacterMenuHeader, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUD_C, ChatOverlay, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUD_C, ChatWidget, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUD_C, DeathWidget, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUD_C, DebugPanel, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUD_C, DebugPanelContainer, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUD_C, FameBarContainer, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUD_C, FameProgressBar, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUD_C, FortEditButton, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUD_C, GameMessages, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUD_C, InGameMenu, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUD_C, MiniMapWidget, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUD_C, Notifications, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUD_C, PartyHUDPanel, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUD_C, PetInfo, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUD_C, PlaceNameBanner, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUD_C, PlaceNameOverlay, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUD_C, QuestTracker, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUD_C, QuestTrackerOverlay, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUD_C, SafeZone_1, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUD_C, SkillBar, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUD_C, TargetInfoWidget_22, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUD_C, ToastBox, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUD_C, TravelMapWidget_C_1, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUD_C, WardrobePropPanel, 0x0860);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHUD_C, 0x0868);
		}

		// class UStatusEffectBar_Buffs_Monster_C : public UStatusEffectBar
		TEST_METHOD(WidgetBlueprintGeneratedClass__StatusEffectBar_Buffs_Monster__StatusEffectBar_Buffs_Monster_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffectBar_Buffs_Monster_C, StatusEffectList, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffectBar_Buffs_Monster_C, 0x0680);
		}

		// class UDungeonSingleRuleBenefit_C : public UDungeonChallengeRuleWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DungeonSingleRuleBenefit__DungeonSingleRuleBenefit_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonSingleRuleBenefit_C, RuleDescription, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonSingleRuleBenefit_C, RuleTitle, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonSingleRuleBenefit_C, TLImage_148, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonSingleRuleBenefit_C, 0x0688);
		}

		// class UThinLightBody4TextStyle_C : public ULightBody1TextStyle_C
		TEST_METHOD(BlueprintGeneratedClass__ThinLightBody4TextStyle__ThinLightBody4TextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThinLightBody4TextStyle_C, 0x00A8);
		}

		// class URelicBarTooltip_C : public UActiveTraitTooltipWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__RelicBarTooltip__RelicBarTooltip_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicBarTooltip_C, CurrentTextBlock, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicBarTooltip_C, MaxTextBlock, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicBarTooltip_C, SmallHeader, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicBarTooltip_C, TLTextBlock_2, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::URelicBarTooltip_C, TraitName, 0x06A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URelicBarTooltip_C, 0x06A8);
		}

		// class UForgedResourceWrapper_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ForgedResourceWrapper__ForgedResourceWrapper_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedResourceWrapper_C, ForgedResourceBar, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedResourceWrapper_C, ForgedResourceBarSteam, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForgedResourceWrapper_C, 0x0650);
		}

		// class Ucc_anim_bp_C : public UTLAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__cc_anim_bp__cc_anim_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucc_anim_bp_C, UberGraphFrame, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucc_anim_bp_C, AnimGraphNode_Root, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucc_anim_bp_C, AnimGraphNode_BlendSpacePlayer_2, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucc_anim_bp_C, TLAnimGraphNode_Slot, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucc_anim_bp_C, AnimGraphNode_Trail_3, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucc_anim_bp_C, AnimGraphNode_LocalToComponentSpace_2, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucc_anim_bp_C, AnimGraphNode_ComponentToLocalSpace_2, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucc_anim_bp_C, AnimGraphNode_Trail_2, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucc_anim_bp_C, AnimGraphNode_Trail, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucc_anim_bp_C, AnimGraphNode_LayeredBoneBlend, 0x0EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucc_anim_bp_C, AnimGraphNode_ComponentToLocalSpace, 0x0FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucc_anim_bp_C, AnimGraphNode_LocalToComponentSpace, 0x0FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucc_anim_bp_C, AnimGraphNode_BlendSpacePlayer, 0x0FE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucc_anim_bp_C, CapeOverride, 0x10C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ucc_anim_bp_C, 0x10CC);
		}

		// class ABaseClickableWithAnims_C : public ABaseGadget_C
		TEST_METHOD(BlueprintGeneratedClass__BaseClickableWithAnims__BaseClickableWithAnims_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseClickableWithAnims_C, UberGraphFrame, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseClickableWithAnims_C, Box, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseClickableWithAnims_C, SkeletalMesh, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseClickableWithAnims_C, 0x04C0);
		}

		// class UStatusEffect_GamepadTarget_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_GamepadTarget__StatusEffect_GamepadTarget_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_GamepadTarget_C, 0x0280);
		}

		// class UControllerButtonConstants_C : public UControllerButtonConstants
		TEST_METHOD(BlueprintGeneratedClass__ControllerButtonConstants__ControllerButtonConstants_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControllerButtonConstants_C, 0x0718);
		}

		// class AFortEditPawn_C : public AFortEditPawn
		TEST_METHOD(BlueprintGeneratedClass__FortEditPawn__FortEditPawn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFortEditPawn_C, UberGraphFrame, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFortEditPawn_C, PreviewActor1, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFortEditPawn_C, Camera, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFortEditPawn_C, SpringArm, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFortEditPawn_C, DefaultSceneRoot, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFortEditPawn_C, RotatePreview_Rotation_1491B716435EFAB575A7CBB545FA212C, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFortEditPawn_C, RotatePreview__Direction_1491B716435EFAB575A7CBB545FA212C, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFortEditPawn_C, UnknownData_YYWZ, 0x02ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFortEditPawn_C, RotatePreview, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFortEditPawn_C, 0x02F8);
		}

		// class UDefaultContractComponent_C : public UContractComponent
		TEST_METHOD(BlueprintGeneratedClass__DefaultContractComponent__DefaultContractComponent_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultContractComponent_C, 0x0108);
		}

		// class UNarratorComponentBlueprint_C : public UNarratorComponent
		TEST_METHOD(BlueprintGeneratedClass__NarratorComponentBlueprint__NarratorComponentBlueprint_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNarratorComponentBlueprint_C, 0x0150);
		}

		// class Uss_f_baseitems_C : public UPlayer_BaseItems_C
		TEST_METHOD(BlueprintGeneratedClass__ss_f_baseitems__ss_f_baseitems_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Uss_f_baseitems_C, 0x0078);
		}

		// class ABaseChest_C : public ABaseArmor_C
		TEST_METHOD(BlueprintGeneratedClass__BaseChest__BaseChest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseChest_C, 0x0428);
		}

		// class Adm_BaseBoots_C : public ABaseBoots_C
		TEST_METHOD(BlueprintGeneratedClass__dm_BaseBoots__dm_BaseBoots_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Adm_BaseBoots_C, 0x0428);
		}

		// class Aw_hammer_2h_newbie_t1a_bp_C : public AWeaponHammerBase_C
		TEST_METHOD(BlueprintGeneratedClass__w_hammer_2h_newbie_t1a_bp__w_hammer_2h_newbie_t1a_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aw_hammer_2h_newbie_t1a_bp_C, 0x0450);
		}

		// class USkill_HarvestStoneMetal_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_HarvestStoneMetal__Skill_HarvestStoneMetal_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_HarvestStoneMetal_C, 0x0540);
		}

		// class USkill_HarvestWood_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_HarvestWood__Skill_HarvestWood_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_HarvestWood_C, 0x0540);
		}

		// class USkill_BloodDrinker_Activate_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_BloodDrinker_Activate__Skill_BloodDrinker_Activate_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_BloodDrinker_Activate_C, 0x0540);
		}

		// class UStatusEffect_Frozen_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Frozen__StatusEffect_Frozen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Frozen_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Frozen_C, 0x0288);
		}

		// class UStatusEffect_Shocked_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Shocked__StatusEffect_Shocked_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Shocked_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Shocked_C, FireMissilesEvent, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Shocked_C, 0x0298);
		}

		// class USkill_PoisonCurePotion_C : public USkill_Potion_Master_C
		TEST_METHOD(BlueprintGeneratedClass__Skill_PoisonCurePotion__Skill_PoisonCurePotion_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_PoisonCurePotion_C, Health, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_PoisonCurePotion_C, health1, 0x057C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_PoisonCurePotion_C, 0x0580);
		}

		// class USkill_Potion_C : public USkill_Potion_Master_C
		TEST_METHOD(BlueprintGeneratedClass__Skill_Potion__Skill_Potion_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Potion_C, Health, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Potion_C, HealthPerSecond, 0x057C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Potion_C, 0x0580);
		}

		// class UStatusEffect_MultiplayerBonus_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_MultiplayerBonus__StatusEffect_MultiplayerBonus_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_MultiplayerBonus_C, 0x0280);
		}

		// class USkill_PotionKnockback_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_PotionKnockback__Skill_PotionKnockback_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_PotionKnockback_C, 0x0540);
		}

		// class UStatusEffect_QuicksilverPotion_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_QuicksilverPotion__StatusEffect_QuicksilverPotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_QuicksilverPotion_C, 0x0280);
		}

		// class Avfx_tleffect_minionring_C : public ATLEffect
		TEST_METHOD(BlueprintGeneratedClass__vfx_tleffect_minionring__vfx_tleffect_minionring_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Avfx_tleffect_minionring_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::Avfx_tleffect_minionring_C, Decal, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::Avfx_tleffect_minionring_C, DefaultSceneRoot, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::Avfx_tleffect_minionring_C, Timeline_0_Opacity_7D30E54A46737B1D5F7D0B8B7ECF0A2A, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::Avfx_tleffect_minionring_C, Timeline_0__Direction_7D30E54A46737B1D5F7D0B8B7ECF0A2A, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::Avfx_tleffect_minionring_C, UnknownData_UJO3, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::Avfx_tleffect_minionring_C, Timeline_1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::Avfx_tleffect_minionring_C, Mid, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Avfx_tleffect_minionring_C, 0x0290);
		}

		// class AMissile_Sharpshooter_Legendary_PoisonPopper_C : public AMissileBase_C
		TEST_METHOD(BlueprintGeneratedClass__Missile_Sharpshooter_Legendary_PoisonPopper__Missile_Sharpshooter_Legendary_PoisonPopper_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_Sharpshooter_Legendary_PoisonPopper_C, ParticleSystem, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMissile_Sharpshooter_Legendary_PoisonPopper_C, 0x0688);
		}

		// class ABasePotionPickup_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BasePotionPickup__BasePotionPickup_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePotionPickup_C, TLProjectileMovement, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePotionPickup_C, ParticleSystem, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePotionPickup_C, StaticMesh, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePotionPickup_C, DefaultSceneRoot, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABasePotionPickup_C, 0x0240);
		}

		// class Agob_bf_props1_c_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_bf_props1_c_02_bp__gob_bf_props1_c_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_bf_props1_c_02_bp_C, 0x0268);
		}

		// class ABaseChestGadget_C : public ABaseClickableWithAnims_C
		TEST_METHOD(BlueprintGeneratedClass__BaseChestGadget__BaseChestGadget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseChestGadget_C, UberGraphFrame, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseChestGadget_C, DoubloonSpawner__Direction_824FBD3F4658B4C2E0E5CA87B6A28E1B, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseChestGadget_C, UnknownData_CKGB, 0x04C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseChestGadget_C, DoubloonSpawner, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseChestGadget_C, DoubloonsToSpawn, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseChestGadget_C, DoubloonsSpawned, 0x04DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseChestGadget_C, 0x04E0);
		}

		// class USkill_Mount_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_Mount__Skill_Mount_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Mount_C, 0x0540);
		}

		// class USkill_Operate_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_Operate__Skill_Operate_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Operate_C, 0x0540);
		}

		// class USkill_PlayerMove_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_PlayerMove__Skill_PlayerMove_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_PlayerMove_C, 0x0540);
		}

		// class Ufort_stash_inv_C : public UTLInventoryContainerFortStash
		TEST_METHOD(BlueprintGeneratedClass__fort_stash_inv__fort_stash_inv_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ufort_stash_inv_C, 0x0210);
		}

		// class Upet_inv_C : public UTLInventoryContainerPet
		TEST_METHOD(BlueprintGeneratedClass__pet_inv__pet_inv_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Upet_inv_C, 0x0288);
		}

		// class UStatusEffect_ResistChilled_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_ResistChilled__StatusEffect_ResistChilled_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_ResistChilled_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_ResistChilled_C, 0x0288);
		}

		// class UStatusEffect_ResistFrozen_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_ResistFrozen__StatusEffect_ResistFrozen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_ResistFrozen_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_ResistFrozen_C, 0x0288);
		}

		// class UStatusEffect_ResistStun_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_ResistStun__StatusEffect_ResistStun_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_ResistStun_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_ResistStun_C, 0x0288);
		}

		// class ASFX_PLAYER_Elemental_electric_C : public ATLEffect
		TEST_METHOD(BlueprintGeneratedClass__SFX_PLAYER_Elemental_electric__SFX_PLAYER_Elemental_electric_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASFX_PLAYER_Elemental_electric_C, FMODAudio, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASFX_PLAYER_Elemental_electric_C, DefaultSceneRoot, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASFX_PLAYER_Elemental_electric_C, 0x0270);
		}

		// class ASFX_PLAYER_Elemental_POISON_C : public ATLEffect
		TEST_METHOD(BlueprintGeneratedClass__SFX_PLAYER_Elemental_POISON__SFX_PLAYER_Elemental_POISON_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASFX_PLAYER_Elemental_POISON_C, FMODAudio, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASFX_PLAYER_Elemental_POISON_C, DefaultSceneRoot, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASFX_PLAYER_Elemental_POISON_C, 0x0270);
		}

		// class ASkillShapeSphere_C : public ASkillShape
		TEST_METHOD(BlueprintGeneratedClass__SkillShapeSphere__SkillShapeSphere_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShapeSphere_C, Sphere, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkillShapeSphere_C, 0x0290);
		}

		// class USkill_Forged_VentBase_C : public USkill_ForgedBase_C
		TEST_METHOD(BlueprintGeneratedClass__Skill_Forged_VentBase__Skill_Forged_VentBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Forged_VentBase_C, UnknownData_BSS7, 0x0542);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Forged_VentBase_C, StatusEffect, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Forged_VentBase_C, 0x0550);
		}

		// class USkill_Forged_ShootCannon_C : public USkill_ForgedBase_C
		TEST_METHOD(BlueprintGeneratedClass__Skill_Forged_ShootCannon__Skill_Forged_ShootCannon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Forged_ShootCannon_C, UnknownData_5MBA, 0x0542);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Forged_ShootCannon_C, DAMAGEBONUS, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Forged_ShootCannon_C, effectduration, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Forged_ShootCannon_C, 0x054C);
		}

		// class AMissile_Forged_ShootCannon_C : public AMissileBase_C
		TEST_METHOD(BlueprintGeneratedClass__Missile_Forged_ShootCannon__Missile_Forged_ShootCannon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_Forged_ShootCannon_C, UberGraphFrame, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_Forged_ShootCannon_C, ParticleSystem, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_Forged_ShootCannon_C, Piercing, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMissile_Forged_ShootCannon_C, 0x0691);
		}

		// class UStatusEffect_Pet_GoingToTown_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Pet_GoingToTown__StatusEffect_Pet_GoingToTown_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Pet_GoingToTown_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Pet_GoingToTown_C, 0x0288);
		}

		// class ASkillShape_SonicPulse_C : public ASkillShapeSphere_C
		TEST_METHOD(BlueprintGeneratedClass__SkillShape_SonicPulse__SkillShape_SonicPulse_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_SonicPulse_C, shadow_decal, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_SonicPulse_C, TLDecal_outer, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_SonicPulse_C, ParticleSystem, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkillShape_SonicPulse_C, 0x02A8);
		}

		// class ASkillShape_Consecration_C : public ASkillShapeSphere_C
		TEST_METHOD(BlueprintGeneratedClass__SkillShape_Consecration__SkillShape_Consecration_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_Consecration_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_Consecration_C, LifetimeEvents, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_Consecration_C, TLParticleSystem, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_Consecration_C, TLDecal_outer, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkillShape_Consecration_C, 0x02B0);
		}

		// class UStatusEffect_Consecration_C : public UStatusEffectBase_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Consecration__StatusEffect_Consecration_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Consecration_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Consecration_C, 0x0288);
		}

		// class Aio_floor_main_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_floor_main_01_bp__io_floor_main_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_floor_main_01_bp_C, 0x0268);
		}

		// class Agob_prop_crate_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_prop_crate_02_bp__gob_prop_crate_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_prop_crate_02_bp_C, 0x0268);
		}

		// class Aio_prop_planksb_02b_bp_C : public ABaseGadget_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_planksb_02b_bp__io_prop_planksb_02b_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_planksb_02b_bp_C, UberGraphFrame, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_planksb_02b_bp_C, AutoOperateTriggerSphere, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_planksb_02b_bp_C, Door, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_planksb_02b_bp_C, 0x04C0);
		}

		// class Aio_wall_entrance_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_wall_entrance_01_bp__io_wall_entrance_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_wall_entrance_01_bp_C, 0x0268);
		}

		// class Aio_wall_round_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_wall_round_01_bp__io_wall_round_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_wall_round_01_bp_C, 0x0268);
		}

		// class Aio_wall_towerthin_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_wall_towerthin_01_bp__io_wall_towerthin_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_wall_towerthin_01_bp_C, 0x0268);
		}

		// class Aio_wall_towerthin_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_wall_towerthin_02_bp__io_wall_towerthin_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_wall_towerthin_02_bp_C, 0x0268);
		}

		// class UProcSkill_Stun_C : public UBaseProcSkill_C
		TEST_METHOD(BlueprintGeneratedClass__ProcSkill_Stun__ProcSkill_Stun_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProcSkill_Stun_C, 0x0560);
		}

		// class Unpcimperialguard_attack_anim_bp_C : public UTLAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__npcimperialguard_attack_anim_bp__npcimperialguard_attack_anim_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Unpcimperialguard_attack_anim_bp_C, UberGraphFrame, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::Unpcimperialguard_attack_anim_bp_C, AnimGraphNode_Root, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::Unpcimperialguard_attack_anim_bp_C, TLAnimGraphNode_Slot, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::Unpcimperialguard_attack_anim_bp_C, AnimGraphNode_BlendSpacePlayer, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Unpcimperialguard_attack_anim_bp_C, 0x0780);
		}

		// class Aio_prop_hangingbrazier_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_hangingbrazier_01_bp__io_prop_hangingbrazier_01_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_hangingbrazier_01_bp_C, FMODAudio, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_hangingbrazier_01_bp_C, vfx_env_torch_fire_02_p, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_hangingbrazier_01_bp_C, 0x0278);
		}

		// class UTimeOfDay_IO_C : public UBaseTimeOfDayHandler_C
		TEST_METHOD(BlueprintGeneratedClass__TimeOfDay_IO__TimeOfDay_IO_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeOfDay_IO_C, 0x0A60);
		}

		// class APotionHyvid_C : public ABasePotion_C
		TEST_METHOD(BlueprintGeneratedClass__PotionHyvid__PotionHyvid_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APotionHyvid_C, IconCameraPosition, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APotionHyvid_C, 0x0460);
		}

		// class UStatusEffect_PetFollow_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_PetFollow__StatusEffect_PetFollow_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_PetFollow_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_PetFollow_C, FollowSpeedIncrease, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_PetFollow_C, FasterBaseMoveSpeed, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_PetFollow_C, CachedBaseMoveSpeed, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_PetFollow_C, 0x0294);
		}

		// class UCursor_FortEditMove_C : public UTLCustomCursor
		TEST_METHOD(WidgetBlueprintGeneratedClass__Cursor_FortEditMove__Cursor_FortEditMove_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursor_FortEditMove_C, Crosshair, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCursor_FortEditMove_C, 0x0270);
		}

		// class UCursor_FortEditMove_CannotPlace_C : public UTLCustomCursor
		TEST_METHOD(WidgetBlueprintGeneratedClass__Cursor_FortEditMove_CannotPlace__Cursor_FortEditMove_CannotPlace_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursor_FortEditMove_CannotPlace_C, Crosshair, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCursor_FortEditMove_CannotPlace_C, 0x0270);
		}

		// class UCursor_FortEdit_C : public UTLCustomCursor
		TEST_METHOD(WidgetBlueprintGeneratedClass__Cursor_FortEdit__Cursor_FortEdit_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursor_FortEdit_C, CursorImage, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCursor_FortEdit_C, 0x0270);
		}

		// class AMagicLeapARPinInfoActor_C : public AMagicLeapARPinInfoActorBase
		TEST_METHOD(BlueprintGeneratedClass__MagicLeapARPinInfoActor__MagicLeapARPinInfoActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, Right, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, Forward, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, Up, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, ValidRadiusVisualizer, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, AxisRoot, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, VisualizerRoot, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, TypeValue, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, TransErrValue, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, RotErrValue, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, ConfidenceValue, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, TransErrLabel, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, RotErrLabel, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, ConfidenceLabel, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, PinIDValue, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, InfoRoot, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, Root, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, RotationSmoothSpeed, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMagicLeapARPinInfoActor_C, 0x02C4);
		}

		// class ATLEffect_champion_indicator_regular_01_C : public ATLEffect
		TEST_METHOD(BlueprintGeneratedClass__TLEffect_champion_indicator_regular_01__TLEffect_champion_indicator_regular_01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLEffect_champion_indicator_regular_01_C, vfx_champion_regular_indicator_light_01_p, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLEffect_champion_indicator_regular_01_C, Decal, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLEffect_champion_indicator_regular_01_C, DefaultSceneRoot, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLEffect_champion_indicator_regular_01_C, DMAT_01, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATLEffect_champion_indicator_regular_01_C, 0x0280);
		}

		// class UTextInputWidget_C : public UTextInputWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TextInputWidget__TextInputWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextInputWidget_C, EditTextBox, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextInputWidget_C, 0x0278);
		}

		// class UPetIconWidget_C : public UPetIconWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PetIconWidget__PetIconWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetIconWidget_C, IconBorder, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetIconWidget_C, MenuAnchor_1, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetIconWidget_C, PetIcon, 0x0758);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPetIconWidget_C, 0x0760);
		}

		// class AGenericItemBase_C : public AItemActor
		TEST_METHOD(BlueprintGeneratedClass__GenericItemBase__GenericItemBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGenericItemBase_C, UberGraphFrame, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGenericItemBase_C, DefaultSceneRoot, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGenericItemBase_C, DropOnGroundEventReference, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGenericItemBase_C, EquipEventReference, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGenericItemBase_C, ParticleSystem, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGenericItemBase_C, 0x03D8);
		}

		// class UFrameInvisible_Style_C : public UTLBorderStyle
		TEST_METHOD(BlueprintGeneratedClass__FrameInvisible_Style__FrameInvisible_Style_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrameInvisible_Style_C, 0x00F8);
		}

		// class UGamepadHighlight_Square_Style_C : public UGamepadHighlight_Round_Style_C
		TEST_METHOD(BlueprintGeneratedClass__GamepadHighlight_Square_Style__GamepadHighlight_Square_Style_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGamepadHighlight_Square_Style_C, 0x00F8);
		}

		// class USmallHeader_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SmallHeader__SmallHeader_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USmallHeader_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmallHeader_C, FiligreeLeft, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmallHeader_C, HeaderText, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmallHeader_C, TLImage_2, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmallHeader_C, DefaultText, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmallHeader_C, bTextIsSet, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmallHeader_C, 0x0299);
		}

		// class USmallSortToggleButton_C : public UTLButtonStyle
		TEST_METHOD(BlueprintGeneratedClass__SmallSortToggleButton__SmallSortToggleButton_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmallSortToggleButton_C, 0x0310);
		}

		// class UStyle_CloseButtonSmall_C : public UCloseButtonWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Style_CloseButtonSmall__Style_CloseButtonSmall_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStyle_CloseButtonSmall_C, UberGraphFrame, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStyle_CloseButtonSmall_C, CloseButton, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStyle_CloseButtonSmall_C, VerticalBox_1, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStyle_CloseButtonSmall_C, OnClosed, 0x0660);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStyle_CloseButtonSmall_C, 0x0670);
		}

		// class UGlobalBankSet_C : public UFMODBankSet
		TEST_METHOD(BlueprintGeneratedClass__GlobalBankSet__GlobalBankSet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGlobalBankSet_C, 0x0068);
		}

		// class UGlobalMonstersBankSet_C : public UFMODBankSet
		TEST_METHOD(BlueprintGeneratedClass__GlobalMonstersBankSet__GlobalMonstersBankSet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGlobalMonstersBankSet_C, 0x0068);
		}

		// class UStatusEffectBar_Buffs_C : public UStatusEffectBar
		TEST_METHOD(WidgetBlueprintGeneratedClass__StatusEffectBar_Buffs__StatusEffectBar_Buffs_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffectBar_Buffs_C, StatusEffectList, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffectBar_Buffs_C, 0x0680);
		}

		// class Apetretriever_charactercreate_base_C : public ACharacterCreatePet_Base_C
		TEST_METHOD(BlueprintGeneratedClass__petretriever_charactercreate_base__petretriever_charactercreate_base_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Apetretriever_charactercreate_base_C, 0x02F0);
		}

		// class ASpawnPortalTrigger_IntroQuest_C : public ABaseGadget_C
		TEST_METHOD(BlueprintGeneratedClass__SpawnPortalTrigger_IntroQuest__SpawnPortalTrigger_IntroQuest_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpawnPortalTrigger_IntroQuest_C, UberGraphFrame, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpawnPortalTrigger_IntroQuest_C, QuestObject, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpawnPortalTrigger_IntroQuest_C, Sphere, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpawnPortalTrigger_IntroQuest_C, 0x04C0);
		}

		// class Afor_BaseGloves_C : public ABaseGloves_C
		TEST_METHOD(BlueprintGeneratedClass__for_BaseGloves__for_BaseGloves_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Afor_BaseGloves_C, 0x0438);
		}

		// class Afor_BaseShoulders_C : public ABaseShoulders_C
		TEST_METHOD(BlueprintGeneratedClass__for_BaseShoulders__for_BaseShoulders_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Afor_BaseShoulders_C, 0x0438);
		}

		// class Agob_prop_rockgrpstraight_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_prop_rockgrpstraight_01_bp__gob_prop_rockgrpstraight_01_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_rockgrpstraight_01_bp_C, Box, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_prop_rockgrpstraight_01_bp_C, 0x0270);
		}

		// class Agob_rr_props1_rope_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_rr_props1_rope_01_bp__gob_rr_props1_rope_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_rr_props1_rope_01_bp_C, 0x0268);
		}

		// class UTimeOfDay_IO_intro_C : public UBaseTimeOfDayHandler_C
		TEST_METHOD(BlueprintGeneratedClass__TimeOfDay_IO_intro__TimeOfDay_IO_intro_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeOfDay_IO_intro_C, 0x0A60);
		}

		// class AMonsterSpawner_Boss_Triggered_Intro_C : public AMonsterSpawner_Boss_C
		TEST_METHOD(BlueprintGeneratedClass__MonsterSpawner_Boss_Triggered_Intro__MonsterSpawner_Boss_Triggered_Intro_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner_Boss_Triggered_Intro_C, Box, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner_Boss_Triggered_Intro_C, MonsterSpawnerTrigger, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMonsterSpawner_Boss_Triggered_Intro_C, 0x0338);
		}

		// class Aio_scrollvendorstand_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_scrollvendorstand_01_bp__io_scrollvendorstand_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_scrollvendorstand_01_bp_C, 0x0268);
		}

		// class Aio_stairrailing_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_stairrailing_01_bp__io_stairrailing_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_stairrailing_01_bp_C, 0x0268);
		}

		// class Aio_stairshort_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_stairshort_01_bp__io_stairshort_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_stairshort_01_bp_C, 0x0268);
		}

		// class Aio_prop_gate_wall_a_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_gate_wall_a_bp__io_prop_gate_wall_a_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_gate_wall_a_bp_C, 0x0268);
		}

		// class UMovieSceneSignedObject : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneSignedObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSignedObject, Signature, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSignedObject, UnknownData_NKLQ, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSignedObject, 0x0050);
		}

		// class UMovieSceneSection : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, EvalOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_U0LZ, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, Easing, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, SectionRange, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PreRollFrames, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PostRollFrames, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, RowIndex, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, OverlapPriority, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_15NF, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, StartTime, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, EndTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PrerollTime, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PostrollTime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_H92E, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, bSupportsInfiniteRange, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, BlendType, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_QHRS, 0x00CB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSection, 0x00E8);
		}

		// class UMovieSceneTrack : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, EvalOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, UnknownData_ZJTF, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, bIsEvalDisabled, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, UnknownData_2XA2, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, EvaluationFieldGuid, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, EvaluationField, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrack, 0x0078);
		}

		// class UMovieSceneNameableTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieScene__MovieSceneNameableTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNameableTrack, 0x0078);
		}

		// class UMovieSceneSequence : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, CompiledData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, DefaultCompletionMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, bParentContextsAreSignificant, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, bPlayableDirectly, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, SequenceFlags, 0x005B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, UnknownData_DDZP, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequence, 0x0060);
		}

		// class UMovieSceneSequencePlayer : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_SQ03, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPlay, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPlayReverse, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnStop, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPause, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnFinished, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, Status, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_D9Y6, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_J71F, 0x0465);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, Sequence, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, StartTime, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, DurationFrames, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, DurationSubFrames, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, CurrentNumLoops, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, PlaybackSettings, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_WP91, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, RootTemplateInstance, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_JZ6X, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, NetSyncProps, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, PlaybackClient, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, TickManager, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_ZHBG, 0x0610);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequencePlayer, 0x0680);
		}

		// class UMovieSceneSubSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieScene__MovieSceneSubSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, Parameters, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, StartOffset, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TimeScale, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, PrerollTime, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, SubSequence, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, ActorToRecord, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, UnknownData_VU4X, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TargetSequenceName, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TargetPathToRecordTo, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSubSection, 0x0160);
		}

		// class UMovieSceneEntitySystem : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneEntitySystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEntitySystem, Linker, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEntitySystem, UnknownData_BYX1, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEntitySystem, 0x0040);
		}

		// class UMovieSceneSubTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieScene__MovieSceneSubTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubTrack, Sections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSubTrack, 0x0088);
		}

		// class UMovieSceneCustomClockSource : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneCustomClockSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCustomClockSource, 0x0028);
		}

		// class UMovieSceneEntityProvider : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneEntityProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEntityProvider, 0x0028);
		}

		// class UMovieScenePlaybackClient : public UInterface
		TEST_METHOD(Class__MovieScene__MovieScenePlaybackClient)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePlaybackClient, 0x0028);
		}

		// class UMovieSceneTrackTemplateProducer : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneTrackTemplateProducer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrackTemplateProducer, 0x0028);
		}

		// class UNodeAndChannelMappings : public UInterface
		TEST_METHOD(Class__MovieScene__NodeAndChannelMappings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeAndChannelMappings, 0x0028);
		}

		// class UMovieSceneNodeGroup : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneNodeGroup)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNodeGroup, 0x0028);
		}

		// class UMovieSceneNodeGroupCollection : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneNodeGroupCollection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNodeGroupCollection, 0x0028);
		}

		// class UMovieScene : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieScene)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, Spawnables, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, Possessables, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, ObjectBindings, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, BindingGroups, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, MasterTracks, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, CameraCutTrack, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, SelectionRange, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, PlaybackRange, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, TickResolution, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, DisplayRate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, EvaluationType, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, ClockSource, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, UnknownData_QCAF, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, CustomClockSourcePath, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, MarkedFrames, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene, 0x0148);
		}

		// class UMovieSceneBindingOverrides : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, BindingData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, UnknownData_VJZ8, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOverrides, 0x0090);
		}

		// class UMovieSceneBindingOwnerInterface : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOwnerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOwnerInterface, 0x0028);
		}

		// class UMovieSceneBlenderSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieScene__MovieSceneBlenderSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBlenderSystem, UnknownData_XP21, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBlenderSystem, 0x0060);
		}

		// class UMovieSceneBoolSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieScene__MovieSceneBoolSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, DefaultValue, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, UnknownData_NW3Y, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, BoolCurve, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoolSection, 0x0180);
		}

		// class UMovieSceneEntityInstantiatorSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieScene__MovieSceneEntityInstantiatorSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEntityInstantiatorSystem, 0x0040);
		}

		// class UMovieSceneGenericBoundObjectInstantiator : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieScene__MovieSceneGenericBoundObjectInstantiator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGenericBoundObjectInstantiator, 0x0040);
		}

		// class UMovieSceneBoundSceneComponentInstantiator : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieScene__MovieSceneBoundSceneComponentInstantiator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoundSceneComponentInstantiator, 0x0040);
		}

		// class UMovieSceneSceneComponentImpersonator : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneSceneComponentImpersonator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSceneComponentImpersonator, 0x0028);
		}

		// class UMovieSceneCompiledData : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneCompiledData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, EvaluationTemplate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, Hierarchy, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, EntityComponentField, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, TrackTemplateField, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, DeterminismFences, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, CompiledSignature, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, CompilerVersion, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, AccumulatedMask, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, AllocatedMask, 0x03F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, AccumulatedFlags, 0x03F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, UnknownData_K66A, 0x03F3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCompiledData, 0x03F8);
		}

		// class UMovieSceneCompiledDataManager : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneCompiledDataManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, UnknownData_1XIR, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, Hierarchies, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, TrackTemplates, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, TrackTemplateFields, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, EntityComponentFields, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, UnknownData_DJFH, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCompiledDataManager, 0x0230);
		}

		// class UMovieSceneFloatDecomposer : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneFloatDecomposer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatDecomposer, 0x0028);
		}

		// class UMovieSceneBuiltInEasingFunction : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneBuiltInEasingFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, UnknownData_A5UQ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, Type, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, UnknownData_IP14, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBuiltInEasingFunction, 0x0038);
		}

		// class UMovieSceneEasingExternalCurve : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneEasingExternalCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEasingExternalCurve, UnknownData_3KJT, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEasingExternalCurve, Curve, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEasingExternalCurve, 0x0038);
		}

		// class UMovieSceneEasingFunction : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneEasingFunction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEasingFunction, 0x0028);
		}

		// class UMovieSceneEntitySystemLinker : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneEntitySystemLinker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEntitySystemLinker, UnknownData_L4GT, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEntitySystemLinker, SystemGraph, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEntitySystemLinker, UnknownData_FDA1, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEntitySystemLinker, 0x0458);
		}

		// class UMovieSceneEvalTimeSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieScene__MovieSceneEvalTimeSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEvalTimeSystem, UnknownData_KDUC, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEvalTimeSystem, 0x0050);
		}

		// class UMovieSceneFolder : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneFolder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, FolderName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildFolders, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildMasterTracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildObjectBindingStrings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, UnknownData_A4VE, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFolder, 0x0070);
		}

		// class UMovieSceneKeyProxy : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneKeyProxy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneKeyProxy, 0x0028);
		}

		// class UMovieSceneMasterInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieScene__MovieSceneMasterInstantiatorSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMasterInstantiatorSystem, 0x0040);
		}

		// class UMovieScenePreAnimatedStateSystemInterface : public UInterface
		TEST_METHOD(Class__MovieScene__MovieScenePreAnimatedStateSystemInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePreAnimatedStateSystemInterface, 0x0028);
		}

		// class UMovieSceneCachePreAnimatedStateSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieScene__MovieSceneCachePreAnimatedStateSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCachePreAnimatedStateSystem, 0x0040);
		}

		// class UMovieSceneRestorePreAnimatedStateSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieScene__MovieSceneRestorePreAnimatedStateSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneRestorePreAnimatedStateSystem, 0x0040);
		}

		// class UMovieSceneSequenceTickManager : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneSequenceTickManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequenceTickManager, SequenceActors, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequenceTickManager, Linker, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequenceTickManager, UnknownData_8PW6, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequenceTickManager, 0x00D0);
		}

		// class UMovieSceneSpawnablesSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieScene__MovieSceneSpawnablesSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnablesSystem, 0x0040);
		}

		// class UMovieSceneSpawnSection : public UMovieSceneBoolSection
		TEST_METHOD(Class__MovieScene__MovieSceneSpawnSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnSection, UnknownData_LSXE, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnSection, 0x0188);
		}

		// class UMovieSceneSpawnTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieScene__MovieSceneSpawnTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnTrack, Sections, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnTrack, ObjectGuid, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnTrack, 0x0098);
		}

		// class UTestMovieSceneTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieScene__TestMovieSceneTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, UnknownData_ZX48, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, bHighPassFilter, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, UnknownData_ZFQC, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, SectionArray, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneTrack, 0x0098);
		}

		// class UTestMovieSceneSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieScene__TestMovieSceneSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSection, 0x00E8);
		}

		// class UTestMovieSceneSequence : public UMovieSceneSequence
		TEST_METHOD(Class__MovieScene__TestMovieSceneSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneSequence, MovieScene, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSequence, 0x0068);
		}

		// class UTestMovieSceneSubTrack : public UMovieSceneSubTrack
		TEST_METHOD(Class__MovieScene__TestMovieSceneSubTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneSubTrack, SectionArray, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSubTrack, 0x0098);
		}

		// class UTestMovieSceneSubSection : public UMovieSceneSubSection
		TEST_METHOD(Class__MovieScene__TestMovieSceneSubSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSubSection, 0x0160);
		}

		// class UMovieSceneTrackInstance : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneTrackInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstance, AnimatedObject, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstance, bIsMasterTrackInstance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstance, UnknownData_X1FN, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstance, Linker, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstance, Inputs, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrackInstance, 0x0050);
		}

		// class UMovieSceneTrackInstanceInstantiator : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieScene__MovieSceneTrackInstanceInstantiator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstanceInstantiator, UnknownData_LQSG, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrackInstanceInstantiator, 0x00F0);
		}

		// class UMovieSceneTrackInstanceSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieScene__MovieSceneTrackInstanceSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstanceSystem, Instantiator, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrackInstanceSystem, 0x0048);
		}

		// class UDeveloperSettings : public UObject
		TEST_METHOD(Class__DeveloperSettings__DeveloperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeveloperSettings, UnknownData_BZXH, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeveloperSettings, 0x0038);
		}

		// class AUIPFActor : public AActor
		TEST_METHOD(Class__UIPF__UIPFActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFActor, UnknownData_7ZMV, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFActor, DynamicInstance, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFActor, DynamicInstanceStatic, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFActor, SkeletalMeshComp, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFActor, UnknownData_TL3R, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AUIPFActor, 0x0320);
		}

		// class AUIPFImpulse : public AActor
		TEST_METHOD(Class__UIPF__UIPFImpulse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFImpulse, UnknownData_HGWM, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AUIPFImpulse, 0x0250);
		}

		// class UIPFTypes : public UDataTable
		TEST_METHOD(Class__UIPF__IPFTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIPFTypes, 0x00B0);
		}

		// class UUIPFInteractor : public USceneComponent
		TEST_METHOD(Class__UIPF__UIPFInteractor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIPFInteractor, UnknownData_QEK7, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIPFInteractor, TickRate, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIPFInteractor, PhysFoliageSwapTickRate, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIPFInteractor, bInteractWithGrass, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIPFInteractor, UnknownData_D5KF, 0x0205);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIPFInteractor, fGrassInteractionDiameter, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIPFInteractor, bCanInteractUsingTruePhysics, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIPFInteractor, UnknownData_KD7T, 0x020D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUIPFInteractor, 0x0280);
		}

		// class AUIPFManager : public AActor
		TEST_METHOD(Class__UIPF__UIPFManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, UnknownData_CCWF, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, UseShaderInteraction, 0x0232);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, UseTruePhysics, 0x0233);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, UseShaderIntSwitch, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, UseShaderIntPS4, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, UseShaderIntXbox, 0x0236);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, UseShaderIntIOS, 0x0237);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, UseShaderIntAndroid, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, UseTruePhysicsSwitch, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, UseTruePhysicsPS4, 0x023A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, UseTruePhysicsXbox, 0x023B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, UseTruePhysicsIOS, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, UseTruePhysicsAndroid, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, ActivateOnImpulse, 0x023E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, UnknownData_Q3KS, 0x023F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, bLimitTickRate, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, UnknownData_8D05, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, TickRate, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, PlayerPhysActivationRadius, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, PlayerPhysDeactivationRadius, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, MaxManualActivationDistance, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, UnknownData_AQ7C, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, FoliageDataTable, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, MPC_UIPF, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, UIPFActorClass, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, UnknownData_4088, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, rtvel, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, rtpos, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, rtobj, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, ForceSplatMat, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, UnknownData_EV9A, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, AccumulatorInst, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, ManualSplatInst, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, VelocitySplatInst, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, Canvas, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, Size, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, Context, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, CanvasInteract, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, SizeInteract, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIPFManager, ContextInteract, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AUIPFManager, 0x0310);
		}

		// class UReplicationGraphNode : public UObject
		TEST_METHOD(Class__ReplicationGraph__ReplicationGraphNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode, AllChildNodes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode, UnknownData_8VOS, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationGraphNode, 0x0050);
		}

		// class UReplicationGraphNode_ActorList : public UReplicationGraphNode
		TEST_METHOD(Class__ReplicationGraph__ReplicationGraphNode_ActorList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode_ActorList, UnknownData_5EZR, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationGraphNode_ActorList, 0x00F8);
		}

		// class UReplicationGraphNode_AlwaysRelevant_ForConnection : public UReplicationGraphNode_ActorList
		TEST_METHOD(Class__ReplicationGraph__ReplicationGraphNode_AlwaysRelevant_ForConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode_AlwaysRelevant_ForConnection, UnknownData_7TIA, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode_AlwaysRelevant_ForConnection, PastRelevantActors, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationGraphNode_AlwaysRelevant_ForConnection, 0x0120);
		}

		// class UReplicationGraphNode_TearOff_ForConnection : public UReplicationGraphNode
		TEST_METHOD(Class__ReplicationGraph__ReplicationGraphNode_TearOff_ForConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode_TearOff_ForConnection, TearOffActors, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode_TearOff_ForConnection, UnknownData_Q1L8, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationGraphNode_TearOff_ForConnection, 0x0078);
		}

		// class UNetReplicationGraphConnection : public UReplicationConnectionDriver
		TEST_METHOD(Class__ReplicationGraph__NetReplicationGraphConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetReplicationGraphConnection, NetConnection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetReplicationGraphConnection, UnknownData_ONTK, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetReplicationGraphConnection, DebugActor, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetReplicationGraphConnection, UnknownData_RIAF, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetReplicationGraphConnection, LastGatherLocations, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetReplicationGraphConnection, UnknownData_J0X3, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetReplicationGraphConnection, ConnectionGraphNodes, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetReplicationGraphConnection, TearOffNode, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetReplicationGraphConnection, UnknownData_IZ4H, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetReplicationGraphConnection, 0x0238);
		}

		// class AReplicationGraphDebugActor : public AActor
		TEST_METHOD(Class__ReplicationGraph__ReplicationGraphDebugActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AReplicationGraphDebugActor, ReplicationGraph, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AReplicationGraphDebugActor, ConnectionManager, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AReplicationGraphDebugActor, 0x0230);
		}

		// class UReplicationGraph : public UReplicationDriver
		TEST_METHOD(Class__ReplicationGraph__ReplicationGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraph, ReplicationConnectionManagerClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraph, NetDriver, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraph, Connections, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraph, PendingConnections, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraph, UnknownData_HBCT, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraph, GlobalGraphNodes, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraph, PrepareForReplicationNodes, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraph, UnknownData_DW3P, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationGraph, 0x0498);
		}

		// class UBasicReplicationGraph : public UReplicationGraph
		TEST_METHOD(Class__ReplicationGraph__BasicReplicationGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicReplicationGraph, GridNode, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicReplicationGraph, AlwaysRelevantNode, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicReplicationGraph, AlwaysRelevantForConnectionList, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicReplicationGraph, ActorsWithoutNetConnection, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicReplicationGraph, UnknownData_SGKC, 0x04C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasicReplicationGraph, 0x04D0);
		}

		// class UReplicationGraphNode_ActorListFrequencyBuckets : public UReplicationGraphNode
		TEST_METHOD(Class__ReplicationGraph__ReplicationGraphNode_ActorListFrequencyBuckets)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode_ActorListFrequencyBuckets, UnknownData_8Y6K, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationGraphNode_ActorListFrequencyBuckets, 0x0138);
		}

		// class UReplicationGraphNode_DynamicSpatialFrequency : public UReplicationGraphNode_ActorList
		TEST_METHOD(Class__ReplicationGraph__ReplicationGraphNode_DynamicSpatialFrequency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode_DynamicSpatialFrequency, UnknownData_LWXU, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationGraphNode_DynamicSpatialFrequency, 0x0128);
		}

		// class UReplicationGraphNode_ConnectionDormancyNode : public UReplicationGraphNode_ActorList
		TEST_METHOD(Class__ReplicationGraph__ReplicationGraphNode_ConnectionDormancyNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode_ConnectionDormancyNode, UnknownData_KNQY, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationGraphNode_ConnectionDormancyNode, 0x0190);
		}

		// class UReplicationGraphNode_DormancyNode : public UReplicationGraphNode_ActorList
		TEST_METHOD(Class__ReplicationGraph__ReplicationGraphNode_DormancyNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode_DormancyNode, UnknownData_N7L1, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationGraphNode_DormancyNode, 0x0108);
		}

		// class UReplicationGraphNode_GridCell : public UReplicationGraphNode_ActorList
		TEST_METHOD(Class__ReplicationGraph__ReplicationGraphNode_GridCell)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode_GridCell, UnknownData_SJUK, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode_GridCell, DynamicNode, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode_GridCell, DormancyNode, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationGraphNode_GridCell, 0x0150);
		}

		// class UReplicationGraphNode_GridSpatialization2D : public UReplicationGraphNode
		TEST_METHOD(Class__ReplicationGraph__ReplicationGraphNode_GridSpatialization2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode_GridSpatialization2D, UnknownData_N5RG, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationGraphNode_GridSpatialization2D, 0x0230);
		}

		// class UReplicationGraphNode_AlwaysRelevant : public UReplicationGraphNode
		TEST_METHOD(Class__ReplicationGraph__ReplicationGraphNode_AlwaysRelevant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode_AlwaysRelevant, ChildNode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicationGraphNode_AlwaysRelevant, UnknownData_CZ1O, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationGraphNode_AlwaysRelevant, 0x0068);
		}

		// class USignificanceManager : public UObject
		TEST_METHOD(Class__SignificanceManager__SignificanceManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USignificanceManager, UnknownData_7CD7, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USignificanceManager, SignificanceManagerClassName, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USignificanceManager, 0x0120);
		}

		// class ULevelVariantSets : public UObject
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSets)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, DirectorClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, VariantSets, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, UnknownData_2AK7, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelVariantSets, 0x0090);
		}

		// class ALevelVariantSetsActor : public AActor
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSetsActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelVariantSetsActor, LevelVariantSets, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelVariantSetsActor, 0x0238);
		}

		// class ULevelVariantSetsFunctionDirector : public UObject
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSetsFunctionDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSetsFunctionDirector, UnknownData_YR1K, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelVariantSetsFunctionDirector, 0x0040);
		}

		// class UPropertyValue : public UObject
		TEST_METHOD(Class__VariantManagerContent__PropertyValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_IB4Y, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, Properties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropertyIndices, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, CapturedPropSegments, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, FullDisplayString, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropertySetterName, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropertySetterParameterDefaults, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, bHasRecordedData, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_CEIH, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, LeafPropertyClass, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_XL6K, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, ValueBytes, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropCategory, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_L3V9, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValue, 0x01B8);
		}

		// class UPropertyValueTransform : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueTransform)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueTransform, 0x01B8);
		}

		// class UPropertyValueVisibility : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueVisibility)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueVisibility, 0x01B8);
		}

		// class UPropertyValueColor : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueColor, 0x01B8);
		}

		// class UPropertyValueMaterial : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueMaterial)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueMaterial, 0x01B8);
		}

		// class UPropertyValueOption : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueOption)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueOption, 0x01B8);
		}

		// class UPropertyValueSoftObject : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueSoftObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueSoftObject, 0x01B8);
		}

		// class ASwitchActor : public AActor
		TEST_METHOD(Class__VariantManagerContent__SwitchActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActor, UnknownData_32DV, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActor, SceneComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActor, LastSelectedOption, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActor, UnknownData_28UV, 0x0244);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASwitchActor, 0x0248);
		}

		// class UVariant : public UObject
		TEST_METHOD(Class__VariantManagerContent__Variant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, Dependencies, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, DisplayText, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, UnknownData_ANSW, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, ObjectBindings, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, Thumbnail, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariant, 0x0080);
		}

		// class UVariantObjectBinding : public UObject
		TEST_METHOD(Class__VariantManagerContent__VariantObjectBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, CachedActorLabel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, ObjectPtr, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, LazyObjectPtr, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, UnknownData_KQQB, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, CapturedProperties, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, FunctionCallers, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariantObjectBinding, 0x0090);
		}

		// class UVariantSet : public UObject
		TEST_METHOD(Class__VariantManagerContent__VariantSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, DisplayText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, UnknownData_VCQ4, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, bExpanded, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, UnknownData_FOM5, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, Variants, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, Thumbnail, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariantSet, 0x0078);
		}

		// class UAnimNotify_PlayNiagaraEffect : public UAnimNotify
		TEST_METHOD(Class__NiagaraAnimNotifies__AnimNotify_PlayNiagaraEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, Template, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, Scale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, bAbsoluteScale, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, UnknownData_UTNL, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, UnknownData_DCD8, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, SocketName, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, UnknownData_OWYO, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayNiagaraEffect, 0x0090);
		}

		// class UAnimNotifyState_TimedNiagaraEffect : public UAnimNotifyState
		TEST_METHOD(Class__NiagaraAnimNotifies__AnimNotifyState_TimedNiagaraEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, Template, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, SocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, bDestroyAtEnd, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, UnknownData_2FHH, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_TimedNiagaraEffect, 0x0060);
		}

		// class ULuminARCandidateImage : public UARCandidateImage
		TEST_METHOD(Class__MagicLeapAR__LuminARCandidateImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARCandidateImage, bUseUnreliablePose, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARCandidateImage, bImageIsStationary, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARCandidateImage, AxisOrientation, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARCandidateImage, UnknownData_EHDF, 0x005B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARCandidateImage, 0x0060);
		}

		// class ULuminARSessionFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapAR__LuminARSessionFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARSessionFunctionLibrary, 0x0028);
		}

		// class ULuminARFrameFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapAR__LuminARFrameFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARFrameFunctionLibrary, 0x0028);
		}

		// class ULuminARImageTrackingFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapAR__LuminARImageTrackingFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARImageTrackingFunctionLibrary, 0x0028);
		}

		// class ALuminAROrigin : public AAROriginActor
		TEST_METHOD(Class__MagicLeapAR__LuminAROrigin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALuminAROrigin, MRMeshComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALuminAROrigin, PlaneSurfaceMaterial, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALuminAROrigin, WireframeMaterial, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALuminAROrigin, UnknownData_I5IX, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALuminAROrigin, 0x02E0);
		}

		// class ULuminARSessionConfig : public UARSessionConfig
		TEST_METHOD(Class__MagicLeapAR__LuminARSessionConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, PlanesQuery, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, MaxPlaneQueryResults, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, MinPlaneArea, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, bArbitraryOrientationPlaneDetection, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, UnknownData_ZBC1, 0x0179);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, PlaneSearchExtents, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, PlaneQueryFlags, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, bDiscardZeroExtentPlanes, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, bDefaultUseUnreliablePose, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, UnknownData_TYXC, 0x019A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARSessionConfig, 0x01A0);
		}

		// class ULuminARLightEstimate : public UARBasicLightEstimate
		TEST_METHOD(Class__MagicLeapAR__LuminARLightEstimate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARLightEstimate, AmbientIntensityNits, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARLightEstimate, 0x0050);
		}

		// class UMovieSceneTransformOriginSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformOriginSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTransformOriginSystem, UnknownData_Z5PX, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformOriginSystem, 0x0078);
		}

		// class UMovieScenePropertyTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, SectionToKey, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, PropertyBinding, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, UnknownData_HUH0, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, Sections, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePropertyTrack, 0x00A8);
		}

		// class UMovieSceneTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformTrack, 0x00A8);
		}

		// class UMovieSceneVectorSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVectorSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, Curves, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, ChannelsUsed, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, UnknownData_K29B, 0x036C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVectorSection, 0x0370);
		}

		// class UMovieSceneVectorTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, UnknownData_RYCJ, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, NumChannelsUsed, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, UnknownData_RSF9, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVectorTrack, 0x00B8);
		}

		// class UMovieSceneBoolTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneBoolTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolTrack, UnknownData_981Y, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoolTrack, 0x00B0);
		}

		// class UMovieSceneVisibilityTrack : public UMovieSceneBoolTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVisibilityTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVisibilityTrack, 0x00B0);
		}

		// class UMovieSceneHierarchicalEasingInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneHierarchicalEasingInstantiatorSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneHierarchicalEasingInstantiatorSystem, UnknownData_1XCG, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneHierarchicalEasingInstantiatorSystem, 0x0090);
		}

		// class UWeightAndEasingEvaluatorSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__WeightAndEasingEvaluatorSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeightAndEasingEvaluatorSystem, UnknownData_ILVM, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeightAndEasingEvaluatorSystem, 0x0078);
		}

		// class UFloatChannelEvaluatorSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__FloatChannelEvaluatorSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatChannelEvaluatorSystem, 0x0040);
		}

		// class UMovieSceneTransformOrigin : public UInterface
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformOrigin)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformOrigin, 0x0028);
		}

		// class UMovieScene3DConstraintSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DConstraintSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintSection, ConstraintId, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintSection, ConstraintBindingID, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DConstraintSection, 0x0110);
		}

		// class UMovieScene3DAttachSection : public UMovieScene3DConstraintSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DAttachSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, UnknownData_48NI, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachSocketName, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachComponentName, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentLocationRule, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentRotationRule, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentScaleRule, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentLocationRule, 0x012B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentRotationRule, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentScaleRule, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, UnknownData_60Z8, 0x012E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DAttachSection, 0x0130);
		}

		// class UMovieScene3DConstraintTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DConstraintTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintTrack, ConstraintSections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DConstraintTrack, 0x0088);
		}

		// class UMovieScene3DAttachTrack : public UMovieScene3DConstraintTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DAttachTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DAttachTrack, 0x0088);
		}

		// class UMovieScene3DPathSection : public UMovieScene3DConstraintSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DPathSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, TimingCurve, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, FrontAxisEnum, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UpAxisEnum, 0x01B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UnknownData_NBYU, 0x01B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UnknownData_24R6, 0x01B5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DPathSection, 0x01B8);
		}

		// class UMovieScene3DPathTrack : public UMovieScene3DConstraintTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DPathTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathTrack, UnknownData_UYT8, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DPathTrack, 0x0090);
		}

		// class UMovieScenePropertySystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePropertySystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertySystem, InstantiatorSystem, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertySystem, UnknownData_9TTJ, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePropertySystem, 0x0050);
		}

		// class UMovieScene3DTransformPropertySystem : public UMovieScenePropertySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformPropertySystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformPropertySystem, 0x0050);
		}

		// class UMovieScene3DTransformSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_ND6M, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, TransformMask, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_RZ9T, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Translation, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Rotation, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Scale, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, ManualWeight, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, bUseQuaternionInterpolation, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_M05H, 0x0739);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformSection, 0x0740);
		}

		// class UMovieScene3DTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformTrack, 0x00A8);
		}

		// class UMovieSceneActorReferenceSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneActorReferenceSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorReferenceData, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorGuidIndexCurve, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorGuidStrings, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneActorReferenceSection, 0x0228);
		}

		// class UMovieSceneActorReferenceTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneActorReferenceTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceTrack, UnknownData_9Z2I, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneActorReferenceTrack, 0x00B0);
		}

		// class UMovieSceneAudioSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneAudioSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, Sound, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, StartFrameOffset, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, StartOffset, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioStartTime, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioDilationFactor, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioVolume, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, UnknownData_8DF6, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, SoundVolume, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, PitchMultiplier, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AttachActorData, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bLooping, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bSuppressSubtitles, 0x02F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bOverrideAttenuation, 0x02FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, UnknownData_3OUU, 0x02FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AttenuationSettings, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnQueueSubtitles, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnAudioFinished, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnAudioPlaybackPercent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioSection, 0x0338);
		}

		// class UMovieSceneAudioTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneAudioTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioTrack, UnknownData_JUV4, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioTrack, AudioSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioTrack, 0x0090);
		}

		// class UMovieSceneBaseValueEvaluatorSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneBaseValueEvaluatorSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBaseValueEvaluatorSystem, 0x0040);
		}

		// class UMovieSceneByteSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneByteSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteSection, ByteCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneByteSection, 0x0180);
		}

		// class UMovieSceneByteTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneByteTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteTrack, UnknownData_WIOP, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteTrack, Enum, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneByteTrack, 0x00B8);
		}

		// class UMovieSceneCameraAnimSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraAnimSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, AnimData, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, CameraAnim, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, PlayRate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, PlayScale, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, BlendInTime, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, BlendOutTime, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, bLooping, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, UnknownData_J8V0, 0x0121);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraAnimSection, 0x0128);
		}

		// class UMovieSceneCameraAnimTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraAnimTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimTrack, UnknownData_YZPV, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimTrack, CameraAnimSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraAnimTrack, 0x0090);
		}

		// class UMovieSceneCameraCutSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, UnknownData_DNP2, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, bLockPreviousCamera, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, UnknownData_TPAR, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, CameraGuid, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, CameraBindingID, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, UnknownData_MFZP, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, InitialCameraCutTransform, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, bHasInitialCameraCutTransform, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, UnknownData_53S6, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutSection, 0x0160);
		}

		// class UMovieSceneCameraCutTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, bCanBlend, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, UnknownData_AGKC, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, Sections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutTrack, 0x0090);
		}

		// class UMovieSceneCameraCutTrackInstance : public UMovieSceneTrackInstance
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutTrackInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrackInstance, UnknownData_IXWT, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutTrackInstance, 0x00B8);
		}

		// class UMovieSceneCameraShakeSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, ShakeData, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, ShakeClass, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, PlayScale, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, PlaySpace, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UnknownData_3RJZ, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UserDefinedPlaySpace, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UnknownData_OV7G, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSection, 0x0128);
		}

		// class UMovieSceneCameraShakeSourceShakeSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSourceShakeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceShakeSection, ShakeData, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSourceShakeSection, 0x0108);
		}

		// class UMovieSceneCameraShakeSourceShakeTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSourceShakeTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceShakeTrack, UnknownData_JS2W, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceShakeTrack, CameraShakeSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSourceShakeTrack, 0x0090);
		}

		// class UMovieSceneCameraShakeSourceTriggerSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSourceTriggerSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceTriggerSection, Channel, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSourceTriggerSection, 0x0170);
		}

		// class UMovieSceneCameraShakeSourceTriggerTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSourceTriggerTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceTriggerTrack, UnknownData_ISLH, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceTriggerTrack, Sections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSourceTriggerTrack, 0x0090);
		}

		// class UMovieSceneCameraShakeTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeTrack, UnknownData_RIIA, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeTrack, CameraShakeSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeTrack, 0x0090);
		}

		// class UMovieSceneCinematicShotSection : public UMovieSceneSubSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCinematicShotSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCinematicShotSection, ShotDisplayName, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCinematicShotSection, DisplayName, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCinematicShotSection, 0x0188);
		}

		// class UMovieSceneCinematicShotTrack : public UMovieSceneSubTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCinematicShotTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCinematicShotTrack, 0x0088);
		}

		// class UMovieSceneColorSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneColorSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, RedCurve, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, GreenCurve, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, BlueCurve, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, AlphaCurve, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneColorSection, 0x0368);
		}

		// class UMovieSceneColorTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, UnknownData_ML8G, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, bIsSlateColor, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, UnknownData_5ECU, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneColorTrack, 0x00B8);
		}

		// class UMovieSceneComponentAttachmentInvalidatorSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentAttachmentInvalidatorSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentAttachmentInvalidatorSystem, 0x0040);
		}

		// class UMovieSceneComponentAttachmentSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentAttachmentSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentAttachmentSystem, UnknownData_1JPD, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentAttachmentSystem, 0x01C0);
		}

		// class UMovieSceneComponentMobilitySystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentMobilitySystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMobilitySystem, UnknownData_Q0EJ, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentMobilitySystem, 0x0220);
		}

		// class UMovieScenePreAnimatedComponentTransformSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePreAnimatedComponentTransformSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePreAnimatedComponentTransformSystem, UnknownData_P5FF, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePreAnimatedComponentTransformSystem, 0x01C0);
		}

		// class UMovieSceneComponentTransformSystem : public UMovieScenePropertySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentTransformSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentTransformSystem, 0x0050);
		}

		// class UMovieSceneEnumSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEnumSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumSection, EnumCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEnumSection, 0x0180);
		}

		// class UMovieSceneEnumTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEnumTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumTrack, UnknownData_785J, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumTrack, Enum, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEnumTrack, 0x00B8);
		}

		// class UMovieSceneEulerTransformPropertySystem : public UMovieScenePropertySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEulerTransformPropertySystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEulerTransformPropertySystem, 0x0050);
		}

		// class UMovieSceneEulerTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEulerTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEulerTransformTrack, 0x00A8);
		}

		// class UMovieSceneEventSectionBase : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSectionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSectionBase, 0x00E8);
		}

		// class UMovieSceneEventRepeaterSection : public UMovieSceneEventSectionBase
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventRepeaterSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventRepeaterSection, UnknownData_M1I1, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventRepeaterSection, Event, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventRepeaterSection, 0x0118);
		}

		// class UMovieSceneEventSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSection, Events, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSection, EventData, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSection, 0x01E8);
		}

		// class UMovieSceneEventSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSystem, UnknownData_SC0Z, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSystem, 0x0090);
		}

		// class UMovieScenePreSpawnEventSystem : public UMovieSceneEventSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePreSpawnEventSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePreSpawnEventSystem, 0x0090);
		}

		// class UMovieScenePostSpawnEventSystem : public UMovieSceneEventSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePostSpawnEventSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePostSpawnEventSystem, 0x0090);
		}

		// class UMovieScenePostEvalEventSystem : public UMovieSceneEventSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePostEvalEventSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePostEvalEventSystem, 0x0090);
		}

		// class UMovieSceneEventTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_T48N, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_2UJT, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, EventPosition, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_9RP9, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, Sections, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventTrack, 0x0098);
		}

		// class UMovieSceneEventTriggerSection : public UMovieSceneEventSectionBase
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventTriggerSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTriggerSection, UnknownData_PEW6, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTriggerSection, EventChannel, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventTriggerSection, 0x0178);
		}

		// class UMovieSceneFadeSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFadeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, FloatCurve, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, FadeColor, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, UnknownData_HFU5, 0x0199);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFadeSection, 0x01A0);
		}

		// class UMovieSceneFloatTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatTrack, 0x00A8);
		}

		// class UMovieSceneFadeTrack : public UMovieSceneFloatTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFadeTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeTrack, UnknownData_XD8P, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFadeTrack, 0x00B0);
		}

		// class UMovieSceneFloatPropertySystem : public UMovieScenePropertySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatPropertySystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatPropertySystem, 0x0050);
		}

		// class UMovieSceneFloatSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFloatSection, UnknownData_S443, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFloatSection, FloatCurve, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatSection, 0x0190);
		}

		// class UMovieSceneHierarchicalBiasSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneHierarchicalBiasSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneHierarchicalBiasSystem, 0x0040);
		}

		// class UMovieSceneIntegerSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneIntegerSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneIntegerSection, IntegerCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneIntegerSection, 0x0178);
		}

		// class UMovieSceneIntegerTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneIntegerTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneIntegerTrack, UnknownData_0GVW, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneIntegerTrack, 0x00B0);
		}

		// class UMovieSceneInterrogatedPropertyInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneInterrogatedPropertyInstantiatorSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneInterrogatedPropertyInstantiatorSystem, UnknownData_MW5L, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneInterrogatedPropertyInstantiatorSystem, 0x01E8);
		}

		// class UMovieSceneLevelVisibilitySection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilitySection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, UnknownData_IWFD, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, Visibility, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, UnknownData_L97F, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, LevelNames, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilitySection, 0x0108);
		}

		// class UMovieSceneLevelVisibilitySystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilitySystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySystem, UnknownData_GVTJ, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilitySystem, 0x01A8);
		}

		// class UMovieSceneLevelVisibilityTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilityTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilityTrack, Sections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilityTrack, 0x0088);
		}

		// class UMovieSceneMaterialTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialTrack, Sections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMaterialTrack, 0x0088);
		}

		// class UMovieSceneMaterialParameterCollectionTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneMaterialParameterCollectionTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialParameterCollectionTrack, UnknownData_3JX8, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialParameterCollectionTrack, MPC, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMaterialParameterCollectionTrack, 0x0098);
		}

		// class UMovieSceneComponentMaterialTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, UnknownData_L4Q0, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, MaterialIndex, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, UnknownData_JG3N, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentMaterialTrack, 0x0098);
		}

		// class UMovieSceneObjectPropertySection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneObjectPropertySection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneObjectPropertySection, ObjectChannel, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneObjectPropertySection, 0x01A8);
		}

		// class UMovieSceneObjectPropertyTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneObjectPropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneObjectPropertyTrack, UnknownData_4PTP, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneObjectPropertyTrack, PropertyClass, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneObjectPropertyTrack, 0x00B8);
		}

		// class UMovieSceneParameterSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParameterSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, BoolParameterNamesAndCurves, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, ScalarParameterNamesAndCurves, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, Vector2DParameterNamesAndCurves, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, VectorParameterNamesAndCurves, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, ColorParameterNamesAndCurves, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, TransformParameterNamesAndCurves, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParameterSection, 0x0148);
		}

		// class UMovieSceneParticleParameterTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleParameterTrack, UnknownData_00F9, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleParameterTrack, Sections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleParameterTrack, 0x0090);
		}

		// class UMovieSceneParticleSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleSection, ParticleKeys, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleSection, 0x0180);
		}

		// class UMovieSceneParticleTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleTrack, UnknownData_V69O, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleTrack, ParticleSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleTrack, 0x0090);
		}

		// class UMovieScenePiecewiseFloatBlenderSystem : public UMovieSceneBlenderSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePiecewiseFloatBlenderSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePiecewiseFloatBlenderSystem, UnknownData_3B3O, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePiecewiseFloatBlenderSystem, 0x0120);
		}

		// class UMovieScenePrimitiveMaterialSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePrimitiveMaterialSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialSection, MaterialChannel, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePrimitiveMaterialSection, 0x01A8);
		}

		// class UMovieScenePrimitiveMaterialTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePrimitiveMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialTrack, UnknownData_JDHJ, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialTrack, MaterialIndex, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialTrack, UnknownData_7Q90, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePrimitiveMaterialTrack, 0x00B8);
		}

		// class UMovieScenePropertyInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePropertyInstantiatorSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyInstantiatorSystem, UnknownData_8Q7T, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePropertyInstantiatorSystem, 0x0290);
		}

		// class UMovieSceneQuaternionInterpolationRotationSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneQuaternionInterpolationRotationSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneQuaternionInterpolationRotationSystem, 0x0040);
		}

		// class UMovieSceneSkeletalAnimationSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSkeletalAnimationSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, Params, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, AnimSequence, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, Animation, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, StartOffset, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, EndOffset, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, PlayRate, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, UnknownData_I8LV, 0x01DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, SlotName, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, StartLocationOffset, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, StartRotationOffset, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchWithPrevious, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, UnknownData_J068, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, MatchedBoneName, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, MatchedLocationOffset, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, MatchedRotationOffset, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchTranslation, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchIncludeZHeight, 0x0225);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchRotationYaw, 0x0226);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchRotationPitch, 0x0227);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchRotationRoll, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, UnknownData_7PQ9, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSkeletalAnimationSection, 0x0270);
		}

		// class UMovieSceneSkeletalAnimationTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSkeletalAnimationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, UnknownData_J7I8, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, AnimationSections, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, bUseLegacySectionIndexBlend, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, UnknownData_5SUY, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, RootMotionParams, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, bBlendFirstChildOfRoot, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, UnknownData_ZUXJ, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSkeletalAnimationTrack, 0x00D0);
		}

		// class UMovieSceneSlomoSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSlomoSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSlomoSection, FloatCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSlomoSection, 0x0188);
		}

		// class UMovieSceneSlomoTrack : public UMovieSceneFloatTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSlomoTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSlomoTrack, UnknownData_XX0X, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSlomoTrack, 0x00B0);
		}

		// class UMovieSceneStringSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneStringSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneStringSection, StringCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneStringSection, 0x0188);
		}

		// class UMovieSceneStringTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneStringTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneStringTrack, UnknownData_CW4I, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneStringTrack, 0x00B0);
		}

		// class ACableActor : public AActor
		TEST_METHOD(Class__CableComponent__CableActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACableActor, CableComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACableActor, 0x0228);
		}

		// class UCableComponent : public UMeshComponent
		TEST_METHOD(Class__CableComponent__CableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_A2TK, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, AttachEndTo, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, AttachEndToSocketName, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, EndLocation, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableLength, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, NumSegments, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, SubstepTime, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, SolverIterations, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bEnableStiffness, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bUseSubstepping, 0x04BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bSkipCableUpdateWhenNotVisible, 0x04BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bSkipCableUpdateWhenNotOwnerRecentlyRendered, 0x04BF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bEnableCollision, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_SLWX, 0x04C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CollisionFriction, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableForce, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableGravityScale, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableWidth, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, NumSides, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, TileMaterial, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_5XW7, 0x04E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCableComponent, 0x0500);
		}

		// class UModularSynthPresetBank : public UObject
		TEST_METHOD(Class__Synthesis__ModularSynthPresetBank)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularSynthPresetBank, Presets, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularSynthPresetBank, 0x0038);
		}

		// class UModularSynthLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Synthesis__ModularSynthLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularSynthLibrary, 0x0028);
		}

		// class UModularSynthComponent : public USynthComponent
		TEST_METHOD(Class__Synthesis__ModularSynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularSynthComponent, VoiceCount, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularSynthComponent, UnknownData_CI8R, 0x06C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularSynthComponent, 0x0D80);
		}

		// class USourceEffectBitCrusherPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectBitCrusherPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectBitCrusherPreset, UnknownData_VURZ, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectBitCrusherPreset, Settings, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectBitCrusherPreset, 0x00F0);
		}

		// class USourceEffectChorusPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectChorusPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectChorusPreset, UnknownData_8EUH, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectChorusPreset, Settings, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectChorusPreset, 0x0180);
		}

		// class USourceEffectDynamicsProcessorPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectDynamicsProcessorPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectDynamicsProcessorPreset, UnknownData_FIUT, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectDynamicsProcessorPreset, Settings, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectDynamicsProcessorPreset, 0x00E0);
		}

		// class UEnvelopeFollowerListener : public UActorComponent
		TEST_METHOD(Class__Synthesis__EnvelopeFollowerListener)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvelopeFollowerListener, OnEnvelopeFollowerUpdate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvelopeFollowerListener, UnknownData_0INL, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvelopeFollowerListener, 0x00D0);
		}

		// class USourceEffectEnvelopeFollowerPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectEnvelopeFollowerPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEnvelopeFollowerPreset, UnknownData_2GBY, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEnvelopeFollowerPreset, Settings, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectEnvelopeFollowerPreset, 0x00A8);
		}

		// class USourceEffectEQPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectEQPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEQPreset, UnknownData_9QC9, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEQPreset, Settings, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectEQPreset, 0x00B0);
		}

		// class USourceEffectFilterPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectFilterPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFilterPreset, UnknownData_SI3J, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFilterPreset, Settings, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectFilterPreset, 0x00D0);
		}

		// class USourceEffectFoldbackDistortionPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectFoldbackDistortionPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFoldbackDistortionPreset, UnknownData_NPWL, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFoldbackDistortionPreset, Settings, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectFoldbackDistortionPreset, 0x00A8);
		}

		// class USourceEffectMidSideSpreaderPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectMidSideSpreaderPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectMidSideSpreaderPreset, UnknownData_W0TO, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectMidSideSpreaderPreset, Settings, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectMidSideSpreaderPreset, 0x00A0);
		}

		// class USourceEffectPannerPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectPannerPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPannerPreset, UnknownData_QVGZ, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPannerPreset, Settings, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectPannerPreset, 0x00A0);
		}

		// class USourceEffectPhaserPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectPhaserPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPhaserPreset, UnknownData_40IC, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPhaserPreset, Settings, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectPhaserPreset, 0x00B0);
		}

		// class USourceEffectRingModulationPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectRingModulationPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectRingModulationPreset, UnknownData_IKDN, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectRingModulationPreset, Settings, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectRingModulationPreset, 0x00D0);
		}

		// class USourceEffectSimpleDelayPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectSimpleDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectSimpleDelayPreset, UnknownData_ZT95, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectSimpleDelayPreset, Settings, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectSimpleDelayPreset, 0x00C0);
		}

		// class USourceEffectStereoDelayPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectStereoDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectStereoDelayPreset, UnknownData_MCD8, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectStereoDelayPreset, Settings, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectStereoDelayPreset, 0x00D8);
		}

		// class USourceEffectWaveShaperPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectWaveShaperPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectWaveShaperPreset, UnknownData_JUSA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectWaveShaperPreset, Settings, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectWaveShaperPreset, 0x00A0);
		}

		// class UAudioImpulseResponse : public UObject
		TEST_METHOD(Class__Synthesis__AudioImpulseResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, ImpulseResponse, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, NumChannels, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, SampleRate, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, NormalizationVolumeDb, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, bTrueStereo, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, UnknownData_RC1I, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, IRData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioImpulseResponse, 0x0058);
		}

		// class USubmixEffectConvolutionReverbPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectConvolutionReverbPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, ImpulseResponse, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, Settings, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, BlockSize, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, bEnableHardwareAcceleration, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, UnknownData_SGLH, 0x009A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectConvolutionReverbPreset, 0x00F0);
		}

		// class USubmixEffectDelayPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, UnknownData_1TU8, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, Settings, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, DynamicSettings, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, UnknownData_6RDA, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectDelayPreset, 0x00B8);
		}

		// class USubmixEffectFilterPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectFilterPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFilterPreset, UnknownData_27CZ, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFilterPreset, Settings, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectFilterPreset, 0x00A8);
		}

		// class USubmixEffectFlexiverbPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectFlexiverbPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFlexiverbPreset, UnknownData_WHWQ, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFlexiverbPreset, Settings, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectFlexiverbPreset, 0x00B0);
		}

		// class USubmixEffectMultibandCompressorPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectMultibandCompressorPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectMultibandCompressorPreset, UnknownData_HXRH, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectMultibandCompressorPreset, Settings, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectMultibandCompressorPreset, 0x00D0);
		}

		// class USubmixEffectStereoDelayPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectStereoDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectStereoDelayPreset, UnknownData_CO3G, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectStereoDelayPreset, Settings, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectStereoDelayPreset, 0x00D8);
		}

		// class USubmixEffectTapDelayPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectTapDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectTapDelayPreset, UnknownData_F3MQ, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectTapDelayPreset, Settings, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectTapDelayPreset, UnknownData_0V74, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectTapDelayPreset, 0x00D8);
		}

		// class USynth2DSlider : public UWidget
		TEST_METHOD(Class__Synthesis__Synth2DSlider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueX, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueY, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueXDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueYDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, WidgetStyle, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, SliderHandleColor, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, IndentHandle, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, Locked, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_6RV7, 0x03FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, StepSize, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, IsFocusable, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_0XYA, 0x0401);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnMouseCaptureBegin, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnMouseCaptureEnd, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnControllerCaptureBegin, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnControllerCaptureEnd, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnValueChangedX, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnValueChangedY, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_YVI1, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynth2DSlider, 0x0478);
		}

		// class UGranularSynth : public USynthComponent
		TEST_METHOD(Class__Synthesis__GranularSynth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGranularSynth, GranulatedSoundWave, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGranularSynth, UnknownData_42GQ, 0x06C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGranularSynth, 0x0A80);
		}

		// class UMonoWaveTableSynthPreset : public UObject
		TEST_METHOD(Class__Synthesis__MonoWaveTableSynthPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, PresetName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, UnknownData_RWAU, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, LockKeyframesToGrid, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, WaveTableResolution, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, UnknownData_TYJK, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, WaveTable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, UnknownData_XDDC, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMonoWaveTableSynthPreset, 0x0170);
		}

		// class USynthComponentMonoWaveTable : public USynthComponent
		TEST_METHOD(Class__Synthesis__SynthComponentMonoWaveTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, OnTableAltered, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, OnNumTablesChanged, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, CurrentPreset, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, UnknownData_OIBK, 0x06E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponentMonoWaveTable, 0x0E00);
		}

		// class USynthComponentToneGenerator : public USynthComponent
		TEST_METHOD(Class__Synthesis__SynthComponentToneGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentToneGenerator, Frequency, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentToneGenerator, Volume, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentToneGenerator, UnknownData_SPVU, 0x06C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponentToneGenerator, 0x06E0);
		}

		// class USynthSamplePlayer : public USynthComponent
		TEST_METHOD(Class__Synthesis__SynthSamplePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, SoundWave, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, OnSampleLoaded, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, OnSamplePlaybackProgress, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, UnknownData_E4G4, 0x06E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthSamplePlayer, 0x07F0);
		}

		// class USynthesisUtilitiesBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Synthesis__SynthesisUtilitiesBlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthesisUtilitiesBlueprintFunctionLibrary, 0x0028);
		}

		// class USynthKnob : public UWidget
		TEST_METHOD(Class__Synthesis__SynthKnob)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, Value, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, StepSize, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, MouseSpeed, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, MouseFineTuneSpeed, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_EM9P, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, ParameterName, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, ParameterUnits, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, ValueDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, WidgetStyle, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, Locked, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, IsFocusable, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_8UDO, 0x039A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnMouseCaptureBegin, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnMouseCaptureEnd, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnControllerCaptureBegin, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnControllerCaptureEnd, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnValueChanged, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_GOYS, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthKnob, 0x0400);
		}

		// class UHandlerComponentFactory : public UObject
		TEST_METHOD(Class__PacketHandler__HandlerComponentFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHandlerComponentFactory, 0x0028);
		}

		// class UPacketHandlerProfileConfig : public UObject
		TEST_METHOD(Class__PacketHandler__PacketHandlerProfileConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPacketHandlerProfileConfig, Components, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPacketHandlerProfileConfig, 0x0038);
		}

		// class ANavSystemConfigOverride : public AActor
		TEST_METHOD(Class__NavigationSystem__NavSystemConfigOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavSystemConfigOverride, NavigationSystemConfig, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavSystemConfigOverride, OverridePolicy, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavSystemConfigOverride, UnknownData_7DBX, 0x022A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavSystemConfigOverride, 0x0230);
		}

		// class UNavTestRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavTestRenderingComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavTestRenderingComponent, 0x0440);
		}

		// class UNavigationQueryFilter : public UObject
		TEST_METHOD(Class__NavigationSystem__NavigationQueryFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, Areas, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, IncludeFlags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, ExcludeFlags, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, UnknownData_RY62, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationQueryFilter, 0x0048);
		}

		// class URecastFilter_UseDefaultArea : public UNavigationQueryFilter
		TEST_METHOD(Class__NavigationSystem__RecastFilter_UseDefaultArea)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecastFilter_UseDefaultArea, 0x0048);
		}

		// class URecastNavMeshDataChunk : public UNavigationDataChunk
		TEST_METHOD(Class__NavigationSystem__RecastNavMeshDataChunk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMeshDataChunk, UnknownData_NGSD, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecastNavMeshDataChunk, 0x0040);
		}

		// class ANavigationData : public AActor
		TEST_METHOD(Class__NavigationSystem__NavigationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_CJWR, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, RenderingComp, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, NavDataConfig, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_MTJG, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, RuntimeGeneration, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_EA4Z, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, ObservedPathsTickInterval, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, DataVersion, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_ZIB4, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, SupportedAreas, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_4ZLF, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationData, 0x0428);
		}

		// class ARecastNavMesh : public ANavigationData
		TEST_METHOD(Class__NavigationSystem__RecastNavMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_SN0C, 0x042B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DrawOffset, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_T90E, 0x0431);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TilePoolSize, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileSizeUU, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, CellSize, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, CellHeight, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentRadius, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentHeight, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxSlope, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxStepHeight, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MinRegionArea, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MergeRegionSize, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MaxSimplificationError, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MaxSimultaneousTileGenerationJobsCount, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileNumberHardLimit, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefTileBits, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefNavPolyBits, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefSaltBits, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, NavMeshOriginOffset, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultDrawDistance, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultMaxSearchNodes, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultMaxHierarchicalSearchNodes, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, RegionPartitioning, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, LayerPartitioning, 0x048D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_KEOB, 0x048E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, RegionChunkSplits, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, LayerChunkSplits, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_1DQ1, 0x049A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileSetUpdateInterval, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, HeuristicScale, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, VerticalDeviationFromGroundCompensation, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_JGHV, 0x04A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARecastNavMesh, 0x04D8);
		}

		// class AAbstractNavData : public ANavigationData
		TEST_METHOD(Class__NavigationSystem__AbstractNavData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAbstractNavData, 0x0428);
		}

		// class UCrowdManagerBase : public UObject
		TEST_METHOD(Class__NavigationSystem__CrowdManagerBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdManagerBase, 0x0028);
		}

		// class UNavArea : public UNavAreaBase
		TEST_METHOD(Class__NavigationSystem__NavArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, DefaultCost, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, FixedAreaEnteringCost, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, DrawColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, SupportedAgents, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, UnknownData_3ZUC, 0x0042);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea, 0x0048);
		}

		// class UNavArea_Default : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_Default)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Default, 0x0048);
		}

		// class UNavArea_LowHeight : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_LowHeight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_LowHeight, 0x0048);
		}

		// class UNavArea_Null : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_Null)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Null, 0x0048);
		}

		// class UNavArea_Obstacle : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_Obstacle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Obstacle, 0x0048);
		}

		// class UNavAreaMeta : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavAreaMeta)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaMeta, 0x0048);
		}

		// class UNavAreaMeta_SwitchByAgent : public UNavAreaMeta
		TEST_METHOD(Class__NavigationSystem__NavAreaMeta_SwitchByAgent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent0Area, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent1Area, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent2Area, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent3Area, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent4Area, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent5Area, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent6Area, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent7Area, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent8Area, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent9Area, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent10Area, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent11Area, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent12Area, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent13Area, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent14Area, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent15Area, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaMeta_SwitchByAgent, 0x00C8);
		}

		// class UNavCollision : public UNavCollisionBase
		TEST_METHOD(Class__NavigationSystem__NavCollision)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, UnknownData_YKBX, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, CylinderCollision, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, BoxCollision, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, AreaClass, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, UnknownData_208N, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavCollision, 0x00D8);
		}

		// class ANavigationGraph : public ANavigationData
		TEST_METHOD(Class__NavigationSystem__NavigationGraph)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationGraph, 0x0428);
		}

		// class ANavigationGraphNode : public AActor
		TEST_METHOD(Class__NavigationSystem__NavigationGraphNode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationGraphNode, 0x0220);
		}

		// class UNavigationGraphNodeComponent : public USceneComponent
		TEST_METHOD(Class__NavigationSystem__NavigationGraphNodeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, Node, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, NextNodeComponent, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, PrevNodeComponent, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationGraphNodeComponent, 0x0220);
		}

		// class UNavigationInvokerComponent : public UActorComponent
		TEST_METHOD(Class__NavigationSystem__NavigationInvokerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationInvokerComponent, TileGenerationRadius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationInvokerComponent, TileRemovalRadius, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationInvokerComponent, 0x00B8);
		}

		// class UNavigationPath : public UObject
		TEST_METHOD(Class__NavigationSystem__NavigationPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, PathUpdatedNotifier, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, PathPoints, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, RecalculateOnInvalidation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, UnknownData_JXF4, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationPath, 0x0088);
		}

		// class UNavigationPathGenerator : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavigationPathGenerator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationPathGenerator, 0x0028);
		}

		// class UNavigationSystemV1 : public UNavigationSystemBase
		TEST_METHOD(Class__NavigationSystem__NavigationSystemV1)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, MainNavData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, AbstractNavData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DefaultAgentName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, CrowdManagerClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_UAD7, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, ActiveTilesUpdateInterval, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DataGatheringMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_MOJ1, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DirtyAreaWarningSizeThreshold, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, SupportedAgents, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, SupportedAgentsMask, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_BS3S, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, NavDataSet, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, NavDataRegistrationQueue, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_TPR2, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OnNavDataRegisteredEvent, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OnNavigationGenerationFinishedDelegate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_TVU8, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OperationMode, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_TDO1, 0x01BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DirtyAreasUpdateFreq, 0x15BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_NRHZ, 0x15C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemV1, 0x15E0);
		}

		// class UNavigationSystemModuleConfig : public UNavigationSystemConfig
		TEST_METHOD(Class__NavigationSystem__NavigationSystemModuleConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemModuleConfig, UnknownData_J8K9, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemModuleConfig, 0x0058);
		}

		// class ANavigationTestingActor : public AActor
		TEST_METHOD(Class__NavigationSystem__NavigationTestingActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_MNTM, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CapsuleComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, InvokerComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_L7K4, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, NavAgentProps, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, QueryingExtent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_OLQ6, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, MyNavData, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, ProjectedLocation, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_BXLP, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CostLimitFactor, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, MinimumCostLimit, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_1FIQ, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CostDisplayMode, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_IV8N, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, TextCanvasOffset, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_SNP5, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathfindingTime, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathCost, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathfindingSteps, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, OtherActor, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, FilterClass, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, ShowStepIndex, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, OffsetFromCornersDistance, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_1P3Y, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationTestingActor, 0x0310);
		}

		// class UNavLinkComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, UnknownData_UBEV, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, Links, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, UnknownData_4W7S, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkComponent, 0x0460);
		}

		// class UNavRelevantComponent : public UActorComponent
		TEST_METHOD(Class__NavigationSystem__NavRelevantComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, UnknownData_4XPA, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, UnknownData_AL2K, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, CachedNavParent, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavRelevantComponent, 0x00E0);
		}

		// class UNavLinkCustomComponent : public UNavRelevantComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkCustomComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_MVCQ, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, NavLinkUserId, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_U2DY, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, EnabledAreaClass, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, DisabledAreaClass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, SupportedAgents, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkRelativeStart, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkRelativeEnd, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkDirection, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_IJH7, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_LH96, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleOffset, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleExtent, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_8VOG, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleAreaClass, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastRadius, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastInterval, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastChannel, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_Q54K, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkCustomComponent, 0x0190);
		}

		// class UNavLinkCustomInterface : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavLinkCustomInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkCustomInterface, 0x0028);
		}

		// class UNavLinkHostInterface : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavLinkHostInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkHostInterface, 0x0028);
		}

		// class UNavLinkRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkRenderingComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkRenderingComponent, 0x0440);
		}

		// class UNavLinkTrivial : public UNavLinkDefinition
		TEST_METHOD(Class__NavigationSystem__NavLinkTrivial)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkTrivial, 0x0050);
		}

		// class ANavMeshBoundsVolume : public AVolume
		TEST_METHOD(Class__NavigationSystem__NavMeshBoundsVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavMeshBoundsVolume, SupportedAgents, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavMeshBoundsVolume, UnknownData_NVZ1, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavMeshBoundsVolume, 0x0260);
		}

		// class UNavMeshRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavMeshRenderingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMeshRenderingComponent, UnknownData_ZCRE, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavMeshRenderingComponent, 0x0450);
		}

		// class UNavModifierComponent : public UNavRelevantComponent
		TEST_METHOD(Class__NavigationSystem__NavModifierComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, AreaClass, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, FailsafeExtent, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, UnknownData_WFF1, 0x00F5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavModifierComponent, 0x0140);
		}

		// class ANavModifierVolume : public AVolume
		TEST_METHOD(Class__NavigationSystem__NavModifierVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, UnknownData_CVSE, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, AreaClass, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, bMaskFillCollisionUnderneathForNavmesh, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, UnknownData_O99I, 0x0269);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavModifierVolume, 0x0270);
		}

		// class UNavNodeInterface : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavNodeInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavNodeInterface, 0x0028);
		}

		// class UGameplayTask : public UObject
		TEST_METHOD(Class__GameplayTasks__GameplayTask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_XFZY, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, InstanceName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_FJBB, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, ResourceOverlapPolicy, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_3VBD, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, ChildTask, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask, 0x0068);
		}

		// class UGameplayTask_ClaimResource : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_ClaimResource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_ClaimResource, 0x0068);
		}

		// class UGameplayTask_SpawnActor : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_SpawnActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, Success, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, DidNotSpawn, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, UnknownData_S111, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, ClassToSpawn, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_SpawnActor, 0x00A8);
		}

		// class UGameplayTask_TimeLimitedExecution : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_TimeLimitedExecution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, OnFinished, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, OnTimeExpired, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, UnknownData_W0UT, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_TimeLimitedExecution, 0x0098);
		}

		// class UGameplayTask_WaitDelay : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_WaitDelay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_WaitDelay, OnFinish, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_WaitDelay, UnknownData_9P6A, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_WaitDelay, 0x0080);
		}

		// class UGameplayTaskOwnerInterface : public UInterface
		TEST_METHOD(Class__GameplayTasks__GameplayTaskOwnerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTaskOwnerInterface, 0x0028);
		}

		// class UGameplayTaskResource : public UObject
		TEST_METHOD(Class__GameplayTasks__GameplayTaskResource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, ManualResourceID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, AutoResourceID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, UnknownData_FXGZ, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, UnknownData_TCVK, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTaskResource, 0x0038);
		}

		// class UGameplayTasksComponent : public UActorComponent
		TEST_METHOD(Class__GameplayTasks__GameplayTasksComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_7V40, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_B6N6, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, SimulatedTasks, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, TaskPriorityQueue, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_UFYZ, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, TickingTasks, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, KnownTasks, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, OnClaimedResourcesChange, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTasksComponent, 0x0120);
		}

		// class AFieldSystemActor : public AActor
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFieldSystemActor, FieldSystemComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFieldSystemActor, 0x0228);
		}

		// class UFieldSystem : public UObject
		TEST_METHOD(Class__FieldSystemEngine__FieldSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystem, UnknownData_DYVO, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystem, 0x0038);
		}

		// class UFieldSystemComponent : public UPrimitiveComponent
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, FieldSystem, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, UnknownData_BWX0, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, SupportedSolvers, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, UnknownData_LJFN, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemComponent, 0x0480);
		}

		// class UFieldSystemMetaData : public UActorComponent
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemMetaData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemMetaData, 0x00B0);
		}

		// class UFieldSystemMetaDataIteration : public UFieldSystemMetaData
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemMetaDataIteration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataIteration, Iterations, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataIteration, UnknownData_IDYE, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemMetaDataIteration, 0x00B8);
		}

		// class UFieldSystemMetaDataProcessingResolution : public UFieldSystemMetaData
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemMetaDataProcessingResolution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataProcessingResolution, ResolutionType, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataProcessingResolution, UnknownData_PJ4C, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemMetaDataProcessingResolution, 0x00B8);
		}

		// class UFieldNodeBase : public UActorComponent
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeBase, 0x00B0);
		}

		// class UFieldNodeInt : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeInt)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeInt, 0x00B0);
		}

		// class UUniformInteger : public UFieldNodeInt
		TEST_METHOD(Class__FieldSystemEngine__UniformInteger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformInteger, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformInteger, UnknownData_101T, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformInteger, 0x00B8);
		}

		// class URadialIntMask : public UFieldNodeInt
		TEST_METHOD(Class__FieldSystemEngine__RadialIntMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, Radius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, Position, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, InteriorValue, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, ExteriorValue, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, SetMaskCondition, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, UnknownData_CEBD, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialIntMask, 0x00D0);
		}

		// class UFieldNodeFloat : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeFloat)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeFloat, 0x00B0);
		}

		// class UUniformScalar : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__UniformScalar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformScalar, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformScalar, UnknownData_RHYS, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformScalar, 0x00B8);
		}

		// class URadialFalloff : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__RadialFalloff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, MinRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, MaxRange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Default, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Radius, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Position, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Falloff, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, UnknownData_BWJB, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialFalloff, 0x00D8);
		}

		// class UPlaneFalloff : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__PlaneFalloff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, MinRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, MaxRange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Default, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Distance, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Position, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Normal, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Falloff, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, UnknownData_8FOG, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneFalloff, 0x00E0);
		}

		// class UBoxFalloff : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__BoxFalloff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, MinRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, MaxRange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Default, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Transform, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Falloff, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, UnknownData_1IWZ, 0x00F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxFalloff, 0x0100);
		}

		// class UNoiseField : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__NoiseField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, MinRange, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, MaxRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, UnknownData_QPUQ, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, Transform, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNoiseField, 0x00F0);
		}

		// class UFieldNodeVector : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeVector, 0x00B0);
		}

		// class UUniformVector : public UFieldNodeVector
		TEST_METHOD(Class__FieldSystemEngine__UniformVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformVector, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformVector, Direction, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformVector, 0x00C0);
		}

		// class URadialVector : public UFieldNodeVector
		TEST_METHOD(Class__FieldSystemEngine__RadialVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialVector, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialVector, Position, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialVector, 0x00C0);
		}

		// class URandomVector : public UFieldNodeVector
		TEST_METHOD(Class__FieldSystemEngine__RandomVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomVector, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomVector, UnknownData_BG35, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URandomVector, 0x00B8);
		}

		// class UOperatorField : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__OperatorField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, UnknownData_TKEH, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, RightField, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, LeftField, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, Operation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, UnknownData_E8F2, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOperatorField, 0x00D0);
		}

		// class UToIntegerField : public UFieldNodeInt
		TEST_METHOD(Class__FieldSystemEngine__ToIntegerField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UToIntegerField, FloatField, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToIntegerField, 0x00B8);
		}

		// class UToFloatField : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__ToFloatField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UToFloatField, IntField, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToFloatField, 0x00B8);
		}

		// class UCullingField : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__CullingField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, Culling, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, Field, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, Operation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, UnknownData_8CC5, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCullingField, 0x00C8);
		}

		// class UReturnResultsTerminal : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__ReturnResultsTerminal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReturnResultsTerminal, 0x00B0);
		}

		// class UKismetProceduralMeshLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ProceduralMeshComponent__KismetProceduralMeshLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetProceduralMeshLibrary, 0x0028);
		}

		// class UProceduralMeshComponent : public UMeshComponent
		TEST_METHOD(Class__ProceduralMeshComponent__ProceduralMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_D0S7, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, bUseComplexAsSimpleCollision, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, bUseAsyncCooking, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_OKOR, 0x0472);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, ProcMeshBodySetup, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, ProcMeshSections, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, CollisionConvexElems, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, LocalBounds, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_RUJS, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, AsyncBodySetupQueue, 0x04C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralMeshComponent, 0x04D0);
		}

		// class UFontBulkData : public UObject
		TEST_METHOD(Class__SlateCore__FontBulkData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontBulkData, UnknownData_F951, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontBulkData, 0x0078);
		}

		// class UFontFaceInterface : public UInterface
		TEST_METHOD(Class__SlateCore__FontFaceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontFaceInterface, 0x0028);
		}

		// class UFontProviderInterface : public UInterface
		TEST_METHOD(Class__SlateCore__FontProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontProviderInterface, 0x0028);
		}

		// class USlateTypes : public UObject
		TEST_METHOD(Class__SlateCore__SlateTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateTypes, 0x0028);
		}

		// class USlateWidgetStyleAsset : public UObject
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateWidgetStyleAsset, CustomStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleAsset, 0x0030);
		}

		// class USlateWidgetStyleContainerBase : public UObject
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleContainerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateWidgetStyleContainerBase, UnknownData_JNTZ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleContainerBase, 0x0030);
		}

		// class USlateWidgetStyleContainerInterface : public UInterface
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleContainerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleContainerInterface, 0x0028);
		}

		// class UButtonWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ButtonWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonWidgetStyle, ButtonStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonWidgetStyle, 0x02A8);
		}

		// class UCheckBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__CheckBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBoxWidgetStyle, CheckBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBoxWidgetStyle, 0x05B0);
		}

		// class UComboBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ComboBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxWidgetStyle, ComboBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxWidgetStyle, 0x0420);
		}

		// class UComboButtonWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ComboButtonWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboButtonWidgetStyle, ComboButtonStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboButtonWidgetStyle, 0x03E8);
		}

		// class UEditableTextBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__EditableTextBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBoxWidgetStyle, EditableTextBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextBoxWidgetStyle, 0x0828);
		}

		// class UEditableTextWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__EditableTextWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextWidgetStyle, EditableTextStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextWidgetStyle, 0x0250);
		}

		// class UProgressWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ProgressWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressWidgetStyle, ProgressBarStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressWidgetStyle, 0x01D0);
		}

		// class UScrollBarWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ScrollBarWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBarWidgetStyle, ScrollBarStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBarWidgetStyle, 0x0500);
		}

		// class UScrollBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ScrollBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxWidgetStyle, ScrollBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBoxWidgetStyle, 0x0258);
		}

		// class USlateSettings : public UObject
		TEST_METHOD(Class__Slate__SlateSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateSettings, bExplicitCanvasChildZOrder, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateSettings, UnknownData_WMC5, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateSettings, 0x0030);
		}

		// class USpinBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__SpinBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBoxWidgetStyle, SpinBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinBoxWidgetStyle, 0x0318);
		}

		// class UTextBlockWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__TextBlockWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlockWidgetStyle, TextBlockStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBlockWidgetStyle, 0x02A0);
		}

		// class UToolMenuBase : public UObject
		TEST_METHOD(Class__Slate__ToolMenuBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolMenuBase, 0x0028);
		}

		// class UMeshReconstructorBase : public UObject
		TEST_METHOD(Class__MRMesh__MeshReconstructorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshReconstructorBase, 0x0028);
		}

		// class UMockDataMeshTrackerComponent : public USceneComponent
		TEST_METHOD(Class__MRMesh__MockDataMeshTrackerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, OnMeshTrackerUpdated, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, ScanWorld, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, RequestNormals, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, RequestVertexConfidence, 0x020A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, VertexColorMode, 0x020B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UnknownData_WDA5, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, BlockVertexColors, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, VertexColorFromConfidenceZero, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, VertexColorFromConfidenceOne, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UpdateInterval, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UnknownData_FCQE, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, MRMesh, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UnknownData_BRI5, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMockDataMeshTrackerComponent, 0x0270);
		}

		// class UMRMeshComponent : public UPrimitiveComponent
		TEST_METHOD(Class__MRMesh__MRMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_5OFO, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, Material, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, WireframeMaterial, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bCreateMeshProxySections, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bUpdateNavMeshOnMeshUpdate, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bNeverCreateCollisionMesh, 0x0462);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_F714, 0x0463);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, CachedBodySetup, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, BodySetups, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_ON9O, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMRMeshComponent, 0x0500);
		}

		// class ULiveLinkSourceFactory : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkSourceFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkSourceFactory, 0x0028);
		}

		// class ULiveLinkRole : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkRole, 0x0028);
		}

		// class ULiveLinkBasicRole : public ULiveLinkRole
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkBasicRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkBasicRole, 0x0028);
		}

		// class ULiveLinkAnimationRole : public ULiveLinkBasicRole
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkAnimationRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkAnimationRole, 0x0028);
		}

		// class ULiveLinkTransformRole : public ULiveLinkBasicRole
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkTransformRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkTransformRole, 0x0028);
		}

		// class ULiveLinkCameraRole : public ULiveLinkTransformRole
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkCameraRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkCameraRole, 0x0028);
		}

		// class ULiveLinkController : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkController, 0x0028);
		}

		// class ULiveLinkSourceSettings : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkSourceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSourceSettings, Mode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSourceSettings, UnknownData_N257, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSourceSettings, BufferSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSourceSettings, connectionString, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSourceSettings, Factory, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkSourceSettings, 0x00A0);
		}

		// class ULiveLinkCurveRemapSettings : public ULiveLinkSourceSettings
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkCurveRemapSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkCurveRemapSettings, CurveConversionSettings, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkCurveRemapSettings, 0x00F0);
		}

		// class ULiveLinkFrameInterpolationProcessor : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkFrameInterpolationProcessor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkFrameInterpolationProcessor, 0x0028);
		}

		// class ULiveLinkFramePreProcessor : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkFramePreProcessor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkFramePreProcessor, 0x0028);
		}

		// class ULiveLinkFrameTranslator : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkFrameTranslator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkFrameTranslator, 0x0028);
		}

		// class ULiveLinkLightRole : public ULiveLinkTransformRole
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkLightRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkLightRole, 0x0028);
		}

		// class ULiveLinkSubjectSettings : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkSubjectSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSubjectSettings, PreProcessors, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSubjectSettings, InterpolationProcessor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSubjectSettings, Translators, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSubjectSettings, Role, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSubjectSettings, FrameRate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSubjectSettings, bRebroadcastSubject, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSubjectSettings, UnknownData_FP94, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkSubjectSettings, 0x0068);
		}

		// class ULiveLinkVirtualSubject : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkVirtualSubject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkVirtualSubject, UnknownData_X0ZT, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkVirtualSubject, Role, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkVirtualSubject, Subjects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkVirtualSubject, FrameTranslators, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkVirtualSubject, UnknownData_N779, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkVirtualSubject, 0x00D8);
		}

		// class UAnimSharingStateInstance : public UAnimInstance
		TEST_METHOD(Class__AnimationSharing__AnimSharingStateInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, AnimationToPlay, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, PermutationTimeOffset, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, PlayRate, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, bStateBool, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, UnknownData_GUCC, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, Instance, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, UnknownData_HL9W, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingStateInstance, 0x02E0);
		}

		// class UAnimSharingTransitionInstance : public UAnimInstance
		TEST_METHOD(Class__AnimationSharing__AnimSharingTransitionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, FromComponent, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, ToComponent, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, BlendTime, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, bBlendBool, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, UnknownData_8QW1, 0x02CD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingTransitionInstance, 0x02D0);
		}

		// class UAnimSharingAdditiveInstance : public UAnimInstance
		TEST_METHOD(Class__AnimationSharing__AnimSharingAdditiveInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, BaseComponent, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, AdditiveAnimation, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, Alpha, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, bStateBool, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, UnknownData_UZJI, 0x02CD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingAdditiveInstance, 0x02D0);
		}

		// class UAnimSharingInstance : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimSharingInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, RegisteredActors, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_S4FS, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, StateProcessor, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_YHBQ, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UsedAnimationSequences, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_48HD, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, StateEnum, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, SharingActor, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_ZJ2C, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingInstance, 0x0118);
		}

		// class UAnimationSharingManager : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimationSharingManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingManager, skeletons, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingManager, PerSkeletonData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingManager, UnknownData_3Q1K, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSharingManager, 0x0088);
		}

		// class UAnimationSharingSetup : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimationSharingSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingSetup, SkeletonSetups, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingSetup, ScalabilitySettings, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSharingSetup, 0x0048);
		}

		// class UAnimationSharingStateProcessor : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimationSharingStateProcessor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingStateProcessor, AnimationStateEnum, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSharingStateProcessor, 0x0050);
		}

		// class UImageWriteBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ImageWriteQueue__ImageWriteBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageWriteBlueprintLibrary, 0x0028);
		}

		// class UMaterialShaderQualitySettings : public UObject
		TEST_METHOD(Class__MaterialShaderQualitySettings__MaterialShaderQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialShaderQualitySettings, ForwardSettingMap, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialShaderQualitySettings, 0x0078);
		}

		// class UShaderPlatformQualitySettings : public UObject
		TEST_METHOD(Class__MaterialShaderQualitySettings__ShaderPlatformQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShaderPlatformQualitySettings, QualityOverrides, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShaderPlatformQualitySettings, UnknownData_S771, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShaderPlatformQualitySettings, 0x0060);
		}

		// class ULoaderText1_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__LoaderText1__LoaderText1_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoaderText1_C, FadeIn, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoaderText1_C, TLRichTextBlock_1, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoaderText1_C, 0x0270);
		}

		// class ULightHeader1TextStyle_C : public UTLTextStyle
		TEST_METHOD(BlueprintGeneratedClass__LightHeader1TextStyle__LightHeader1TextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightHeader1TextStyle_C, 0x00A8);
		}

		// class ULightHeader5TextStyle_C : public ULightHeader1TextStyle_C
		TEST_METHOD(BlueprintGeneratedClass__LightHeader5TextStyle__LightHeader5TextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightHeader5TextStyle_C, 0x00A8);
		}

		// class UVoiceChatOverlay_C : public UVoiceChatOverlay
		TEST_METHOD(WidgetBlueprintGeneratedClass__VoiceChatOverlay__VoiceChatOverlay_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceChatOverlay_C, SafeZone_1, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceChatOverlay_C, VoiceChatListWidget_201, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoiceChatOverlay_C, 0x0650);
		}

		// class UStatusEffect_Champion_Unique_C : public UStatusEffect_Champion_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Champion_Unique__StatusEffect_Champion_Unique_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Champion_Unique_C, UberGraphFrame, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Champion_Unique_C, 0x02A8);
		}

		// class UStatusEffect_Champion_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Champion__StatusEffect_Champion_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Champion_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Champion_C, SpawnAudioEvent, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Champion_C, 0x02A0);
		}

		// class UWidgetConstants_C : public UWidgetConstants
		TEST_METHOD(BlueprintGeneratedClass__WidgetConstants__WidgetConstants_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetConstants_C, 0x0758);
		}

		// class USpreadsheetLoaderClientBP_C : public UBaseSpreadsheetLoaderBP_C
		TEST_METHOD(BlueprintGeneratedClass__SpreadsheetLoaderClientBP__SpreadsheetLoaderClientBP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpreadsheetLoaderClientBP_C, 0x0380);
		}

		// class UTextTooltip_C : public UTooltipWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TextTooltip__TextTooltip_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextTooltip_C, UberGraphFrame, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextTooltip_C, TextBlock, 0x0688);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextTooltip_C, 0x0690);
		}

		// class UVideoSettings_C : public UVideoSettingsWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__VideoSettings__VideoSettings_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettings_C, UberGraphFrame, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettings_C, ApplyButton, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettings_C, DetectButton, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettings_C, GamepadButtonLegend, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettings_C, HorizontalBox_1, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettings_C, ModalFrame, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettings_C, OptionListWidget_1, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettings_C, ResetButton, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettings_C, TLImage_4, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettings_C, TLImage_5, 0x09E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVideoSettings_C, 0x09E8);
		}

		// class UPoliciesWidget_C : public UGenericModalWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PoliciesWidget__PoliciesWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoliciesWidget_C, UberGraphFrame, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoliciesWidget_C, Intro, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoliciesWidget_C, AcceptButton, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoliciesWidget_C, AcceptButtonText, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoliciesWidget_C, BaseModalWidget, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoliciesWidget_C, Blur, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoliciesWidget_C, Body, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoliciesWidget_C, ContentPanel, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoliciesWidget_C, GamepadButtonLegend, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoliciesWidget_C, HorizontalBox_2, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoliciesWidget_C, TLImage_1, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoliciesWidget_C, TLImage_3, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoliciesWidget_C, TLImage_8, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoliciesWidget_C, TLImage_11, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoliciesWidget_C, DefaultBodyText, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoliciesWidget_C, DefaultTitleText, 0x0820);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoliciesWidget_C, 0x0838);
		}

		// class ULightBody2TextStyle_C : public ULightBody1TextStyle_C
		TEST_METHOD(BlueprintGeneratedClass__LightBody2TextStyle__LightBody2TextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightBody2TextStyle_C, 0x00A8);
		}

		// class UInboxAttachment_C : public UInboxAttachmentWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InboxAttachment__InboxAttachment_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInboxAttachment_C, GenericResourceWidget, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInboxAttachment_C, 0x0648);
		}

		// class UWelcomeHelpScreen_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WelcomeHelpScreen__WelcomeHelpScreen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWelcomeHelpScreen_C, UberGraphFrame, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWelcomeHelpScreen_C, show, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWelcomeHelpScreen_C, Body_Community, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWelcomeHelpScreen_C, Body_CStext, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWelcomeHelpScreen_C, Body_FAQtext, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWelcomeHelpScreen_C, Button_CS, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWelcomeHelpScreen_C, Button_Discord, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWelcomeHelpScreen_C, Button_HelpCenter, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWelcomeHelpScreen_C, Button_Twitch, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWelcomeHelpScreen_C, Button_Twitter, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWelcomeHelpScreen_C, DividerTop, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWelcomeHelpScreen_C, Head_Community, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWelcomeHelpScreen_C, Head_Issues, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWelcomeHelpScreen_C, Head_Welcome, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWelcomeHelpScreen_C, PlatformId, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWelcomeHelpScreen_C, TLImage_1, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWelcomeHelpScreen_C, TLRichTextBlock_1, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWelcomeHelpScreen_C, TLRichTextBlock_2, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWelcomeHelpScreen_C, TLRichTextBlock_Console, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWelcomeHelpScreen_C, TLRichTextBlock_PC, 0x06D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWelcomeHelpScreen_C, 0x06E0);
		}

		// class UCombatHelpScreen_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CombatHelpScreen__CombatHelpScreen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombatHelpScreen_C, show, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombatHelpScreen_C, TLImage_1, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombatHelpScreen_C, TLRichTextBlock_Base, 0x0650);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCombatHelpScreen_C, 0x0658);
		}

		// class UEmberWeaponHelpScreen_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__EmberWeaponHelpScreen__EmberWeaponHelpScreen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponHelpScreen_C, show, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponHelpScreen_C, TLImage_11, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponHelpScreen_C, TLImage_253, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponHelpScreen_C, TLRichTextBlock_PC, 0x0658);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEmberWeaponHelpScreen_C, 0x0660);
		}

		// class ULeftArrowButtonStyle_C : public UDefaultButtonStyle_C
		TEST_METHOD(BlueprintGeneratedClass__LeftArrowButtonStyle__LeftArrowButtonStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeftArrowButtonStyle_C, 0x0310);
		}

		// class UClassMechanicHelpScreen_SS_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ClassMechanicHelpScreen_SS__ClassMechanicHelpScreen_SS_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicHelpScreen_SS_C, show, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicHelpScreen_SS_C, TLImage_1, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicHelpScreen_SS_C, TLImage_9, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicHelpScreen_SS_C, TLImage_259, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicHelpScreen_SS_C, TLImage_904, 0x0660);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClassMechanicHelpScreen_SS_C, 0x0668);
		}

		// class UClassMechanicHelpScreen_DM_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ClassMechanicHelpScreen_DM__ClassMechanicHelpScreen_DM_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicHelpScreen_DM_C, Hide, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicHelpScreen_DM_C, show, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicHelpScreen_DM_C, TLImage_1, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicHelpScreen_DM_C, TLImage_9, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicHelpScreen_DM_C, TLImage_259, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicHelpScreen_DM_C, TLImage_904, 0x0668);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClassMechanicHelpScreen_DM_C, 0x0670);
		}

		// class UFrame_SubMenuPanel_C : public UTLBorderStyle
		TEST_METHOD(BlueprintGeneratedClass__Frame_SubMenuPanel__Frame_SubMenuPanel_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrame_SubMenuPanel_C, 0x00F8);
		}

		// class ULargeEditableTextStyle2_C : public UDefaultEditableTextStyle_C
		TEST_METHOD(BlueprintGeneratedClass__LargeEditableTextStyle2__LargeEditableTextStyle2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULargeEditableTextStyle2_C, 0x0820);
		}

		// class UFortPropLimitWidget_C : public UFortPropLimitWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__FortPropLimitWidget__FortPropLimitWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropLimitWidget_C, UberGraphFrame, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropLimitWidget_C, BarBackground, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropLimitWidget_C, Count, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropLimitWidget_C, ProgressBar, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropLimitWidget_C, TLImage_218, 0x0660);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFortPropLimitWidget_C, 0x0668);
		}

		// class UFortPropCraftingWidget_C : public UFortPropCraftingWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__FortPropCraftingWidget__FortPropCraftingWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropCraftingWidget_C, UberGraphFrame, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropCraftingWidget_C, BasicHeader, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropCraftingWidget_C, CostList, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropCraftingWidget_C, Craft, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropCraftingWidget_C, CraftButton, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropCraftingWidget_C, FortDecorationWidget, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropCraftingWidget_C, PlaceButton, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropCraftingWidget_C, SmallHeader, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropCraftingWidget_C, TLBorder_1, 0x07C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFortPropCraftingWidget_C, 0x07C8);
		}

		// class UStatDamageRow_C : public UStatDamageRowWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__StatDamageRow__StatDamageRow_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatDamageRow_C, AffixRange, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatDamageRow_C, DamageValue, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatDamageRow_C, Icon, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatDamageRow_C, RichTextBlock, 0x06A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatDamageRow_C, 0x06A8);
		}

		// class UMultiPlayerAccountReset_C : public UAccountResetModalWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MultiPlayerAccountReset__MultiPlayerAccountReset_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiPlayerAccountReset_C, UberGraphFrame, 0x0D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiPlayerAccountReset_C, HideConfirmation, 0x0D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiPlayerAccountReset_C, BackgroundBlur_2, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiPlayerAccountReset_C, Blur, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiPlayerAccountReset_C, ConfirmationCancelButton, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiPlayerAccountReset_C, Divider_C_1, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiPlayerAccountReset_C, GamepadButtonLegend, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiPlayerAccountReset_C, ResetButton, 0x0DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiPlayerAccountReset_C, ResetHeader, 0x0DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiPlayerAccountReset_C, ResetProgressBar, 0x0DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiPlayerAccountReset_C, Style_CloseButtonSmall_C_1, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiPlayerAccountReset_C, TLTextBlock, 0x0DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiPlayerAccountReset_C, TLTextBlock_2, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiPlayerAccountReset_C, TLTextBlock_6, 0x0DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiPlayerAccountReset_C, TLTextBlock_16, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiPlayerAccountReset_C, TLTextBlock_18, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiPlayerAccountReset_C, IsResetButtonPressed, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiPlayerAccountReset_C, UnknownData_IOBH, 0x0DF1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiPlayerAccountReset_C, ResetProgress, 0x0DF4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiPlayerAccountReset_C, 0x0DF8);
		}

		// class UCreditNameLast_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CreditNameLast__CreditNameLast_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditNameLast_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditNameLast_C, HeaderText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditNameLast_C, TLImage_3, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditNameLast_C, DefaultText, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreditNameLast_C, 0x0290);
		}

		// class UCreditNameFirst_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CreditNameFirst__CreditNameFirst_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditNameFirst_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditNameFirst_C, HeaderText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditNameFirst_C, TLImage_3, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditNameFirst_C, DefaultText, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreditNameFirst_C, 0x0290);
		}

		// class UDarkBody1TextStyle_C : public UTLTextStyle
		TEST_METHOD(BlueprintGeneratedClass__DarkBody1TextStyle__DarkBody1TextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDarkBody1TextStyle_C, 0x00A8);
		}

		// class UCompassWidget_C : public UMapCompassWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CompassWidget__CompassWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget_C, UberGraphFrame, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget_C, NeedleSpin, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget_C, BlueCompass, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget_C, BlueCompassHovered, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget_C, Compassbutton, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget_C, CompassLabel, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget_C, CompassLabelBorder, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget_C, CompassSwitcher, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget_C, TLImage_1, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget_C, TLImage_2, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget_C, TLImage_3, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget_C, TLImage_4, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget_C, TLImage_6, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget_C, TLImage_81, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget_C, TLImage_83, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget_C, TLImage_85, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget_C, TLImage_107, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget_C, YellowCompass, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget_C, YellowCompassHovered, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget_C, SpokeMapLabel, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget_C, AreaMapLabel, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget_C, HighlightedBrush, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget_C, CompassBrush, 0x07B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompassWidget_C, 0x0838);
		}

		// class UAreaNeighborName_C : public UTLTextBlock
		TEST_METHOD(BlueprintGeneratedClass__AreaNeighborName__AreaNeighborName_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAreaNeighborName_C, 0x02B8);
		}

		// class UTownBase_C : public UAreaInSpokeWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TownBase__TownBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTownBase_C, UberGraphFrame, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTownBase_C, RingSpin, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTownBase_C, AreaName, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTownBase_C, AreaNameWithLevel, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTownBase_C, Button_3, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTownBase_C, NeighborList, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTownBase_C, PortraitFrame, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTownBase_C, QuestIcon, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTownBase_C, TLBorder_1, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTownBase_C, TLImage_1, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTownBase_C, TLImage_108, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTownBase_C, YouAreHere, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTownBase_C, YouAreHereOverlay, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTownBase_C, ButtonStyle, 0x07E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTownBase_C, 0x0A60);
		}

		// class UNewMapSpoke_InfestedForest_C : public UMapSpokeWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__NewMapSpoke_InfestedForest__NewMapSpoke_InfestedForest_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_InfestedForest_C, AreaList, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_InfestedForest_C, ButtonCanvas, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_InfestedForest_C, if1_2_pass, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_InfestedForest_C, IF2_3_pass, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_InfestedForest_C, IF3_4_Pass, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_InfestedForest_C, IF3_Caves1a, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_InfestedForest_C, IF4_5_pass, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_InfestedForest_C, InfestedForest1, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_InfestedForest_C, InfestedForest2, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_InfestedForest_C, InfestedForest3, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_InfestedForest_C, InfestedForest4, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_InfestedForest_C, InfestedForest5, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_InfestedForest_C, InfestedForest6, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_InfestedForest_C, TLImage_1, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMapSpoke_InfestedForest_C, TownBase, 0x06B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNewMapSpoke_InfestedForest_C, 0x06B8);
		}

		// class USkillSelectIcon_C : public USkillInTabWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SkillSelectIcon__SkillSelectIcon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, UberGraphFrame, 0x0E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, UpgradeReadyPlump, 0x0E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, Assigned, 0x0E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, Unlock, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, Upgrade, 0x0EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, Over, 0x0EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, bling1, 0x0EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, bling2, 0x0EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, bling3, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, glow, 0x0ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, HoldProgress, 0x0ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, Level, 0x0EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, LockImageOverlay, 0x0EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, MenuAnchor_1, 0x0EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, PetAuraIcon, 0x0EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, ProgressTier01, 0x0F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, ProgressTier02, 0x0F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, ProgressTier03, 0x0F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, RegretButton, 0x0F18);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, SelectedBorder, 0x0F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, SelectionBling, 0x0F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, SkillIcon, 0x0F30);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, SkillLevelTextBlock_1, 0x0F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, SkillProgressGroup, 0x0F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, SkillTierProgressFill, 0x0F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, TLButton_1, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, TLButton_2, 0x0F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, TLButton_3, 0x0F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, TLImage_1, 0x0F68);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, TLImage_2, 0x0F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, TLImage_3, 0x0F78);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, TLImage_4, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, UnlockButton, 0x0F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, UnlockUpgradeWrapper, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, UpgradeButton, 0x0F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_C, UpgradeLevelBack, 0x0FA0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillSelectIcon_C, 0x0FA8);
		}

		// class UMapPanelWidget_C : public UMapPanel
		TEST_METHOD(WidgetBlueprintGeneratedClass__MapPanelWidget__MapPanelWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapPanelWidget_C, Hide, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapPanelWidget_C, show, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapPanelWidget_C, GamepadButtonLegend, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapPanelWidget_C, NewMapSpokeWrapper, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapPanelWidget_C, QuestLog, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapPanelWidget_C, TLImage_1, 0x09C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapPanelWidget_C, 0x09D0);
		}

		// class UPetStoredSmallInventory_C : public UPetStoredInventoryWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PetStoredSmallInventory__PetStoredSmallInventory_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, UberGraphFrame, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, RarityTitleFadein, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, Intro, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, ActivePetBox, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, ActivePetList, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, ActiveScrollBox, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, FiligreeLeft, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, FiligreeLeft_2, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, HasPetsSwitcher, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, HeaderText, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, HeaderText_2, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, InactiveScrollBox, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, NoActivePetText, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, NoInactivePetText, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, NoPetsText, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, PetDetailsWidget, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, PetListWidgets, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, RadioToggleItem, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, RadioToggleItem_C_1, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, RadioToggleItem_C_2, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, RadioToggleItem_C_3, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, SmallHeader, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, SortTitle, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, StorageSize, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, StoredPetBox, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, StoredPets, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, Switcher, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, TLButton_2, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, TLButton_13, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, TLImage, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, TLImage_2, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, TLImage_18, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, TLImage_170, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, TLImage_186, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredSmallInventory_C, TLTextBlock_18, 0x0B00);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPetStoredSmallInventory_C, 0x0B08);
		}

		// class UItemSpawnWidget_C : public UItemSpawnWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ItemSpawnWidget__ItemSpawnWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemSpawnWidget_C, BGFrame, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemSpawnWidget_C, BorderFrameHighlightable, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemSpawnWidget_C, ComparisonMenuAnchor, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemSpawnWidget_C, InnerInfo, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemSpawnWidget_C, ItemContents, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemSpawnWidget_C, ItemImage, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemSpawnWidget_C, ItemNameText, 0x06F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemSpawnWidget_C, 0x0700);
		}

		// class USkillDescriptionSimple_C : public USkillDescriptionWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SkillDescriptionSimple__SkillDescriptionSimple_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescriptionSimple_C, BonusList, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescriptionSimple_C, Cooldown, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescriptionSimple_C, DescriptionText, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescriptionSimple_C, EnergyCost, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescriptionSimple_C, HeaderText, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescriptionSimple_C, SkillDisplayScalableWidget, 0x0708);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillDescriptionSimple_C, 0x0710);
		}

		// class UTinyInventoryItem_C : public UInventoryItemBaseWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TinyInventoryItem__TinyInventoryItem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTinyInventoryItem_C, ItemImage, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTinyInventoryItem_C, NumberText, 0x08A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTinyInventoryItem_C, 0x08B0);
		}

		// class UCurrencyCost_Small_C : public UCurrencyCostWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CurrencyCost_Small__CurrencyCost_Small_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyCost_Small_C, Icon, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyCost_Small_C, MenuAnchor_204, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyCost_Small_C, ResourceRequired, 0x0898);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurrencyCost_Small_C, 0x08A0);
		}

		// class UGenericResourceWidget_C : public UGenericResourceWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__GenericResourceWidget__GenericResourceWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericResourceWidget_C, UberGraphFrame, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericResourceWidget_C, CurrencyCostWidget, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericResourceWidget_C, CurrencyWidget, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericResourceWidget_C, FortPropIconWidget, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericResourceWidget_C, InnerContent, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericResourceWidget_C, InventoryItemCost, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericResourceWidget_C, InventoryItemIcon, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericResourceWidget_C, ItemSpawnWidget, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericResourceWidget_C, PetRecipeUnitWidget, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericResourceWidget_C, WidgetSwitcher, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericResourceWidget_C, ShowName, 0x08A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericResourceWidget_C, 0x08A1);
		}

		// class USkillsMenu_C : public USkillsMenuWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SkillsMenu__SkillsMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, UberGraphFrame, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, show, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, ActiveSkillAssignment, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, ActiveSkillsContainer, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, AvailablePointsText, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, AvailablePointsText2, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, Button, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, ButtonSelected, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, ClassRespecButton, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, ClassRespecOverlay, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, ClassSkillsList, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, ClassSkillsTab, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, ClassSkillTabBackground, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, ClassTotalSkillPointsText, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, FiligreeLeft, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, FiligreeRight, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, FirstSkillPointsProgress, 0x0BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, GamepadButtonLegend_118, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, HelpButton, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, HorizontalBox_92, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, HotkeyWidget, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, HotkeyWidget_C_1, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, InfoButton, 0x0BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, LegendaryAffixCollectionEquippedWidget, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, LegendaryAffixCollectionTab, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, MoreInfoFloatingGamepadAction, 0x0C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, NewFlagloop_250, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, NoEmberWeaponTab, 0x0C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, NumAffixesUnlockedText, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, PetSkillAssignment, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, PetSkillsList, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, PetSkillsTab, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, PetSkillTabBackground, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, PlayerInfo, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, RespectacleCount, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, SecondSkillPointsProgress, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, SkillAssignContainer, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, SkillAssignListWidget_1, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, SkillCategoryHeader, 0x0C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, SkillDescriptionPanel, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, SkillLegend, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, SkillOverlay, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, SkillPointsFirstImage, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, SkillPointsSecondImage, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, SkillSlotListSwitcher, 0x0C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, SkillTabEmberWeaponImage, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, SkillTabEmberWeaponNameText, 0x0CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, SkillTabEmberWeaponText, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, SkillTabFirstNameText, 0x0CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, SkillTabFirstText, 0x0CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, SkillTabIcons, 0x0CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, SkillTabSecondNameText, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, SkillTabSecondText, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, SkillTierProgressHeader, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, SkillTierProgressHeader_C_2, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, SkillTierProgressHeader_C_3, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, SkillTierProgressHeader_C_4, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, SkillTierProgressHeader_C_5, 0x0D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, Style_CloseButtonSmall, 0x0D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, TabSwitcher, 0x0D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, TLBorder_2, 0x0D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, TLBorder_3, 0x0D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, TLImage_1, 0x0D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, TLImage_2, 0x0D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, TLImage_4, 0x0D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, TLImage_5, 0x0D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, TLImage_6, 0x0D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, TLImage_7, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, TLImage_8, 0x0D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, TLImage_9, 0x0D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, TLImage_10, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, TLImage_11, 0x0D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, TLImage_12, 0x0D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, TLImage_13, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, TLImage_14, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, TLImage_16, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, TLImage_17, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, TLImage_30, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, TLImage_31, 0x0DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, TLImage_91, 0x0DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, TLImage_173, 0x0DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, TLImage_253, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, TLTextBlock_1, 0x0DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, TLTextBlock_3, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, TLTextBlock_7, 0x0DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, TLTextBlock_8, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, TLTextBlock_9, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, TLTextBlock_10, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, TLTextBlock_20, 0x0DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenu_C, TotalSkillPointsProgress, 0x0E00);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillsMenu_C, 0x0E08);
		}

		// class UInstanceResetPartyDialog_C : public UInstanceResetModalWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InstanceResetPartyDialog__InstanceResetPartyDialog_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, UberGraphFrame, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, ActionsSection, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, CancelButton, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, CancelButtonText, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, Divider, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, GamepadButtonLegend, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, HorizontalBox_6, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, InstanceResetPartyListArea, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, KickedPartyMemberList, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, OkayButton, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, PartyActionsSection, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, PartyContainerArea, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, PartyDescription, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, PostResetArea, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, PostResetSection, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, ResetButton, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, ResetButtonText, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, ResetDescription, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, SmallHeader_C_1, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, SpokeAndCraftingSection, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, Style_CloseButtonSmall, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, TLButton_1, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, TLButton_2, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, TLImage, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, TLImage_1, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, TLImage_2, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, TLImage_3, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, TLImage_4, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, TLImage_6, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, TLTextBlock, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, TLTextBlock_3, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, TLTextBlock_4, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, VerticalBox_221, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetPartyDialog_C, WarningDescription, 0x0778);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInstanceResetPartyDialog_C, 0x0780);
		}

		// class UStatusEffect_Invulnerable_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Invulnerable__StatusEffect_Invulnerable_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Invulnerable_C, 0x0280);
		}

		// class UPlaceNameHeaderStyle_C : public UTLTextStyle
		TEST_METHOD(BlueprintGeneratedClass__PlaceNameHeaderStyle__PlaceNameHeaderStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaceNameHeaderStyle_C, 0x00A8);
		}

		// class UFrameSubtle_Style_C : public UTLBorderStyle
		TEST_METHOD(BlueprintGeneratedClass__FrameSubtle_Style__FrameSubtle_Style_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrameSubtle_Style_C, 0x00F8);
		}

		// class UPetDetailsWidget_C : public UPetDetailsWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PetDetailsWidget__PetDetailsWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget_C, UberGraphFrame, 0x1250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget_C, NewAnimation_2, 0x1258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget_C, Divider, 0x1260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget_C, HorizontalBox_4, 0x1268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget_C, NameField, 0x1270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget_C, PetIconWidget, 0x1278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget_C, PetRarity, 0x1280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget_C, PetType, 0x1288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget_C, RandomButton, 0x1290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget_C, Release, 0x1298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget_C, SkillDescriptionListWidget_1, 0x12A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget_C, SkillDetailsSwitcher, 0x12A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget_C, SmallHeader, 0x12B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget_C, SmallHeader_C_1, 0x12B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget_C, Swap, 0x12C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget_C, TLImage_1, 0x12C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget_C, TLImage_2, 0x12D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget_C, TLImage_3, 0x12D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget_C, TLTextBlock_4, 0x12E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget_C, TLTextBlock_5, 0x12E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget_C, TLTextBlockThisnameis, 0x12F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPetDetailsWidget_C, 0x12F8);
		}

		// class UDefaultSliderStyle_C : public UTLSliderStyle
		TEST_METHOD(BlueprintGeneratedClass__DefaultSliderStyle__DefaultSliderStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultSliderStyle_C, 0x0368);
		}

		// class UDefaultEditableTextStyle_C : public UTLEditableTextBoxStyle
		TEST_METHOD(BlueprintGeneratedClass__DefaultEditableTextStyle__DefaultEditableTextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultEditableTextStyle_C, 0x0820);
		}

		// class UModalFrame_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ModalFrame__ModalFrame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalFrame_C, UberGraphFrame, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalFrame_C, BasicHeader, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalFrame_C, ContentSlot, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalFrame_C, OuterFrame, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalFrame_C, Style_CloseButton, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalFrame_C, OnClosed, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalFrame_C, DefaultTitleText, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalFrame_C, FrameStyle, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModalFrame_C, 0x0698);
		}

		// class UEnchantingAffixPip_C : public UEnchantingAffixWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__EnchantingAffixPip__EnchantingAffixPip_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingAffixPip_C, UberGraphFrame, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingAffixPip_C, PipPulse_Red, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingAffixPip_C, PipPulse, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingAffixPip_C, Empty, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingAffixPip_C, Filled, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingAffixPip_C, TLImage_1, 0x06C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnchantingAffixPip_C, 0x06C8);
		}

		// class UGenericResourceWidgetLarge_C : public UGenericResourceWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__GenericResourceWidgetLarge__GenericResourceWidgetLarge_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericResourceWidgetLarge_C, CurrencyCostLarge, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericResourceWidgetLarge_C, CurrencyWidget_Small, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericResourceWidgetLarge_C, WidgetSwitcher_1, 0x0860);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericResourceWidgetLarge_C, 0x0868);
		}

		// class UStatPopup_C : public UStatSheetPanel
		TEST_METHOD(WidgetBlueprintGeneratedClass__StatPopup__StatPopup_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, show, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, AttackIcon, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, AttackMisc, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, CannonAttackTypes, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, CannonContainer, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, CannonMisc, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, DefenseIcon, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, DefenseList, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, DefenseMisc, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, MainAttackTypes, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, MiscOverlay, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, MiscTraitsList, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, PetAttackContainer, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, PetAttackTraits, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, PetDamageStats, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, PetDefenseContainer, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, PetDefenseMisc, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, PetDefenseTypes, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, PetMisc, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, PetMiscContainer, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, PetSkillCategories, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, PetSkillTraitsContainer, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, PhysicalDefenseRow, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, SkillStatsOverlay, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, SkillTraits, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, SmallHeader_C_1, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, TLImage_1, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, TLImage_2, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, TLImage_3, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, TLImage_4, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, TLImage_5, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, TLImage_6, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, TLImage_7, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, TLImage_8, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, TLImage_52, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, TLImage_54, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, TLTextBlock_4, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatPopup_C, TotalDamagePerSwingBlock, 0x07B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatPopup_C, 0x07B8);
		}

		// class USkillSlotAssignment_C : public USkillListAssignmentWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SkillSlotAssignment__SkillSlotAssignment_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSlotAssignment_C, UberGraphFrame, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSlotAssignment_C, ActiveSkillSlotList, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSlotAssignment_C, InvalidationBox_1, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSlotAssignment_C, Overlay_3, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSlotAssignment_C, PetSpacer, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSlotAssignment_C, SkillGroupToggleHotkey, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSlotAssignment_C, SkillHeader, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSlotAssignment_C, TLImage_1, 0x06C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillSlotAssignment_C, 0x06D0);
		}

		// class URadioToggleItem_C : public UOptionWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__RadioToggleItem__RadioToggleItem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioToggleItem_C, UberGraphFrame, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioToggleItem_C, CheckBox, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioToggleItem_C, RadioButtonText, 0x0768);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadioToggleItem_C, 0x0770);
		}

		// class UButtonTextStyle_C : public UTLTextStyle
		TEST_METHOD(BlueprintGeneratedClass__ButtonTextStyle__ButtonTextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonTextStyle_C, 0x00A8);
		}

		// class UInventoryItemCost_C : public UInventoryItemCostWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InventoryItemCost__InventoryItemCost_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemCost_C, InventoryItemIcon, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemCost_C, TLImage_1, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemCost_C, TLTextBlock_1, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemCost_C, TLTextBlock_3, 0x08A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryItemCost_C, 0x08A8);
		}

		// class UCurrencyCostWidget_C : public UCurrencyCostWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CurrencyCostWidget__CurrencyCostWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyCostWidget_C, NameText, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyCostWidget_C, OwnedResourceTraitText, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyCostWidget_C, ResourceItemButton, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyCostWidget_C, ResourcesRequiredTextBlock, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyCostWidget_C, TLImage_1, 0x08A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurrencyCostWidget_C, 0x08B0);
		}

		// class UCurrencyWidget_C : public UCurrencyWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CurrencyWidget__CurrencyWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget_C, UberGraphFrame, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget_C, UpdateValue, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget_C, EmptyFrameHighlightable, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget_C, ItemBGImage, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget_C, ItemFrameHighlightable, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget_C, ItemImage, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget_C, NameText, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget_C, QuanityTraitBlock, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget_C, Quantities, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget_C, QuantityTextBlock, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget_C, TooltipMenuAnchor, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget_C, EquipEvent, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget_C, ShowName, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget_C, ShowAmount, 0x0769);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurrencyWidget_C, 0x076A);
		}

		// class UEnchantingAffixWidgetSmall_C : public UEnchantingAffixWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__EnchantingAffixWidgetSmall__EnchantingAffixWidgetSmall_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingAffixWidgetSmall_C, UberGraphFrame, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingAffixWidgetSmall_C, HighlightAnim, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingAffixWidgetSmall_C, EnchantAnim, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingAffixWidgetSmall_C, AffixTextBlock, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingAffixWidgetSmall_C, EmptyFilledSwitcher, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingAffixWidgetSmall_C, EmptySlot, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingAffixWidgetSmall_C, EnchantAnimFlash, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingAffixWidgetSmall_C, EnchantHighlight, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingAffixWidgetSmall_C, FilledIcon, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingAffixWidgetSmall_C, FilledSlot, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingAffixWidgetSmall_C, TLImage_1, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingAffixWidgetSmall_C, TLImage_2, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingAffixWidgetSmall_C, TLImage_4, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingAffixWidgetSmall_C, TLRichTextBlock_1, 0x0700);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnchantingAffixWidgetSmall_C, 0x0708);
		}

		// class USkillDisplayBlueprintWidget_C : public USkillDisplayWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SkillDisplayBlueprintWidget__SkillDisplayBlueprintWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDisplayBlueprintWidget_C, BG, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDisplayBlueprintWidget_C, Frame, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDisplayBlueprintWidget_C, Icon, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDisplayBlueprintWidget_C, InnerSlot, 0x0670);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillDisplayBlueprintWidget_C, 0x0678);
		}

		// class USkillLevelBonusDescription_C : public USkillLevelBonusWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SkillLevelBonusDescription__SkillLevelBonusDescription_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillLevelBonusDescription_C, BonusDescription, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillLevelBonusDescription_C, CurrentLevelBonus, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillLevelBonusDescription_C, NextLevelBonus, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillLevelBonusDescription_C, ZebraStripe, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillLevelBonusDescription_C, 0x0280);
		}

		// class UPetRenameWidget_C : public UPetRenameWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PetRenameWidget__PetRenameWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetRenameWidget_C, UberGraphFrame, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetRenameWidget_C, EditableNameField, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetRenameWidget_C, PetIconWidget, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetRenameWidget_C, TLButton_1, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPetRenameWidget_C, 0x06A0);
		}

		// class UPetDisplayInventory_C : public UPetDisplayInventoryWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PetDisplayInventory__PetDisplayInventory_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDisplayInventory_C, UberGraphFrame, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDisplayInventory_C, RarityTitleFadein, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDisplayInventory_C, Intro, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDisplayInventory_C, ActivePetBox, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDisplayInventory_C, ActivePetHeader, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDisplayInventory_C, ActivePetList, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDisplayInventory_C, ActiveScrollBox, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDisplayInventory_C, HasPetsSwitcher, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDisplayInventory_C, InactiveScrollBox, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDisplayInventory_C, NoActivePetText, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDisplayInventory_C, NoInactivePetText, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDisplayInventory_C, NoPetsText, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDisplayInventory_C, PetDetailsWidget, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDisplayInventory_C, PetListWidgets, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDisplayInventory_C, PreviewAnchorWidget, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDisplayInventory_C, SortTitle, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDisplayInventory_C, StoredPetBox, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDisplayInventory_C, StoredPetHeader, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDisplayInventory_C, StoredPets, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDisplayInventory_C, Switcher, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDisplayInventory_C, TLButton_2, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDisplayInventory_C, TLImage_2, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDisplayInventory_C, TLImage_186, 0x0810);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPetDisplayInventory_C, 0x0818);
		}

		// class UCharacterMenuButton_C : public UTabbedMenuButton
		TEST_METHOD(WidgetBlueprintGeneratedClass__CharacterMenuButton__CharacterMenuButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuButton_C, UberGraphFrame, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuButton_C, showOn, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuButton_C, AlertBadge, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuButton_C, AlertBox, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuButton_C, Button, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuButton_C, ButtonSelected, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuButton_C, TLImage_1, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuButton_C, TLImage_229, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuButton_C, TLImage_334, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuButton_C, TLTextBlock_1, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuButton_C, TLTextBlock_2, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuButton_C, TLTextBlock_59, 0x0768);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterMenuButton_C, 0x0770);
		}

		// class UTwoPanelInventory_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TwoPanelInventory__TwoPanelInventory_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwoPanelInventory_C, UberGraphFrame, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwoPanelInventory_C, AboveInventorySlot, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwoPanelInventory_C, GamepadButtonLegend, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwoPanelInventory_C, InventoryGridWithTabs, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwoPanelInventory_C, SecondPanelSlot, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwoPanelInventory_C, LeftList, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwoPanelInventory_C, CanSellPetItems, 0x0670);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwoPanelInventory_C, 0x0671);
		}

		// class UDungeonSingleRuleBoss_C : public UDungeonChallengeRuleWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DungeonSingleRuleBoss__DungeonSingleRuleBoss_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonSingleRuleBoss_C, RuleTitle, 0x0670);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonSingleRuleBoss_C, 0x0678);
		}

		// class UDungeonSingleRuleDetriment_C : public UDungeonChallengeRuleWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DungeonSingleRuleDetriment__DungeonSingleRuleDetriment_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonSingleRuleDetriment_C, RuleDescription, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonSingleRuleDetriment_C, RuleTitle, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonSingleRuleDetriment_C, TLImage_148, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonSingleRuleDetriment_C, 0x0688);
		}

		// class UEmberWeaponSkills_C : public UEmberWeaponSkillsWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__EmberWeaponSkills__EmberWeaponSkills_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponSkills_C, EmberWeaponSkillsList, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponSkills_C, EmberWeaponSkillTabBackground, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponSkills_C, NoEmberWeapon, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponSkills_C, TLImage_1, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponSkills_C, TLImage_2, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEmberWeaponSkills_C, 0x0688);
		}

		// class Agob_bf_props2_a_04_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_bf_props2_a_04_bp__gob_bf_props2_a_04_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_bf_props2_a_04_bp_C, 0x0268);
		}

		// class Agob_bf_props1_f_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_bf_props1_f_02_bp__gob_bf_props1_f_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_bf_props1_f_02_bp_C, 0x0268);
		}

		// class UCharacterCreateCustomizePlayer_C : public UMainMenuCharacterCreateCustomizeWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CharacterCreateCustomizePlayer__CharacterCreateCustomizePlayer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, UberGraphFrame, 0x1208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, IntroFade, 0x1210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, PulseGamepadSection, 0x1218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, CharacterClassDescription, 0x1220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, CharacterNameTextBox, 0x1228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, ClassName, 0x1230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, ClassSkillHeader, 0x1238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, ClassSkillsListWidget, 0x1240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, ContinueButton, 0x1248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, CursedCaptainResourceBar, 0x1250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, DuskMageResourceBar, 0x1258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, FemaleButton, 0x1260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, ForgedResourceBar, 0x1268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, GenderButtonList, 0x1270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, GenderContainer, 0x1278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, GenderGamepadHighlight, 0x1280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, HairCarousel, 0x1288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, HairColorContainer, 0x1290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, HairColorHighlight, 0x1298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, HairContainer, 0x12A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, HairDyeList, 0x12A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, HairHighlight, 0x12B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, HardcoreButtonAction, 0x12B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, HardcoreCheckboxWidget, 0x12C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, HardcoreContainer, 0x12C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, HardcoreHighlight, 0x12D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, HeadCarousel, 0x12D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, HeadContainer, 0x12E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, HeadHighlight, 0x12E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, HorizontalBox_7, 0x12F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, HotkeyWidget, 0x12F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, HotkeyWidget_C_1, 0x1300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, leftGradient, 0x1308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, MaleButton, 0x1310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, NameContainer, 0x1318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, NameGamepadHighlight, 0x1320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, OptionsScrollBox, 0x1328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, RailmasterResourceBar, 0x1330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, RandomizeButton, 0x1338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, ResourceSwitcher, 0x1340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, RightGradient, 0x1348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, SharpshooterResourceBar, 0x1350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, SkillTabDescriptionText, 0x1358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, SkinColorContainer, 0x1360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, SkinColorGamepadHighlight, 0x1368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, SkinDyeList, 0x1370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, TabbedSkillsMenu, 0x1378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, TLImage, 0x1380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, TLImage_1, 0x1388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, TLImage_2, 0x1390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, TLImage_3, 0x1398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, TLImage_4, 0x13A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, TLImage_5, 0x13A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, TLImage_6, 0x13B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, TLImage_7, 0x13B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, TLImage_8, 0x13C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, TLImage_9, 0x13C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, TLImage_221, 0x13D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, TLImage_255, 0x13D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, TLImage_447, 0x13E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, TLTextBlock_1, 0x13E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, TLTextBlock_3, 0x13F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, TLTextBlock_5, 0x13F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCreateCustomizePlayer_C, TLWidgetSwitcher_137, 0x1400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterCreateCustomizePlayer_C, 0x1408);
		}

		// class UDifficultyTrivial_C : public UDifficultyStatusEffectBase_C
		TEST_METHOD(BlueprintGeneratedClass__DifficultyTrivial__DifficultyTrivial_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDifficultyTrivial_C, 0x0298);
		}

		// class UDifficultyDifficult_C : public UDifficultyStatusEffectBase_C
		TEST_METHOD(BlueprintGeneratedClass__DifficultyDifficult__DifficultyDifficult_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDifficultyDifficult_C, 0x0298);
		}

		// class Anpcimperialguard_02_charcreate_02_bp_C : public Anpcimperialguard_01_bp_C
		TEST_METHOD(BlueprintGeneratedClass__npcimperialguard_02_charcreate_02_bp__npcimperialguard_02_charcreate_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Anpcimperialguard_02_charcreate_02_bp_C, 0x07F4);
		}

		// class Agobgeneric_stabby_b_C : public ABaseMonster_C
		TEST_METHOD(BlueprintGeneratedClass__gobgeneric_stabby_b__gobgeneric_stabby_b_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Agobgeneric_stabby_b_C, UnknownData_3SR9, 0x07F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::Agobgeneric_stabby_b_C, TLParticleSystem, 0x07F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agobgeneric_stabby_b_C, 0x0800);
		}

		// class ABaseDRLGDummy_C : public ADRLGLevelProxy
		TEST_METHOD(BlueprintGeneratedClass__BaseDRLGDummy__BaseDRLGDummy_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseDRLGDummy_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseDRLGDummy_C, SpecialIcon, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseDRLGDummy_C, TextRender, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseDRLGDummy_C, SubLevelDummy, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseDRLGDummy_C, 0x0290);
		}

		// class UArea_ImperialOutpost_Intro_C : public UBaseArea_C
		TEST_METHOD(BlueprintGeneratedClass__Area_ImperialOutpost_Intro__Area_ImperialOutpost_Intro_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArea_ImperialOutpost_Intro_C, UberGraphFrame, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArea_ImperialOutpost_Intro_C, 0x00C0);
		}

		// class AArea_ImperialOutpost__intro_T_Template_C : public ADRLGTemplate
		TEST_METHOD(BlueprintGeneratedClass__Area_ImperialOutpost__intro_T_Template__Area_ImperialOutpost__intro_T_Template_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AArea_ImperialOutpost__intro_T_Template_C, 0x0230);
		}

		// class Ufor_anim_bp_C : public UTLAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__for_anim_bp__for_anim_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Ufor_anim_bp_C, UberGraphFrame, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ufor_anim_bp_C, AnimGraphNode_Root, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ufor_anim_bp_C, AnimGraphNode_BlendSpacePlayer, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ufor_anim_bp_C, TLAnimGraphNode_Slot, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ufor_anim_bp_C, AnimGraphNode_ModifyBone, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ufor_anim_bp_C, AnimGraphNode_LocalToComponentSpace, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ufor_anim_bp_C, AnimGraphNode_ComponentToLocalSpace, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ufor_anim_bp_C, HeadSize, 0x08C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ufor_anim_bp_C, 0x08D4);
		}

		// class USkillBar_C : public UBaseSkillBarWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SkillBar__SkillBar_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillBar_C, HealthGlobe, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillBar_C, InvalidationBox_3, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillBar_C, InvalidationBox_8, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillBar_C, InvalidationBox_9, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillBar_C, InvalidationBox_11, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillBar_C, InvalidationBox_12, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillBar_C, InvalidationBox_13, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillBar_C, InvalidationBox_15, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillBar_C, PortalSkillPanel, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillBar_C, PortalSkillWidget, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillBar_C, PotionWidgetSlot, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillBar_C, PrimarySkillBar, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillBar_C, RelicEnergyBar, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillBar_C, ResourceBarSlot, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillBar_C, SpokeLevelInHUD, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillBar_C, StatusEffectBar_Buffs, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillBar_C, StatusEffectBar_Debuffs, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillBar_C, StatusEffectMessage, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillBar_C, PotionWidgets_1, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillBar_C, 0x07B0);
		}

		// class UMiniPetInfoWidget_C : public UPetInfoWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MiniPetInfoWidget__MiniPetInfoWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniPetInfoWidget_C, Background, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniPetInfoWidget_C, LowHealthVignette, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniPetInfoWidget_C, PetContainer, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniPetInfoWidget_C, Portrait, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniPetInfoWidget_C, PortraitBorder, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniPetInfoWidget_C, ProgressBar_1, 0x0798);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMiniPetInfoWidget_C, 0x07A0);
		}

		// class USpokeLevelInHUD_C : public USpokeLevelWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SpokeLevelInHUD__SpokeLevelInHUD_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpokeLevelInHUD_C, Progress, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpokeLevelInHUD_C, LevelUp, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpokeLevelInHUD_C, BarBackground, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpokeLevelInHUD_C, CurrentAndRequired, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpokeLevelInHUD_C, CurrentLevel, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpokeLevelInHUD_C, ProgressGlow, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpokeLevelInHUD_C, TLImage_1, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpokeLevelInHUD_C, TLImage_3, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpokeLevelInHUD_C, TLImage_37, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpokeLevelInHUD_C, XPProgressBar, 0x0768);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpokeLevelInHUD_C, 0x0770);
		}

		// class USkillWidget_C : public USkillWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SkillWidget__SkillWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget_C, UberGraphFrame, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget_C, Shock, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget_C, DisabledByHotkey, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget_C, InvalidationBox_1, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget_C, MenuAnchor_1, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget_C, SkillActiveWidget, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget_C, TLImage_47, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget_C, TLImage_49, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget_C, TLImage_50, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget_C, TLImage_51, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget_C, TLImage_52, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget_C, TLImage_53, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget_C, TLImage_54, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget_C, TLImage_684, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget_C, Zap, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget_C, ShowHotkey, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillWidget_C, 0x0761);
		}

		// class UCharacterMenuSocial_C : public USocialMenuWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CharacterMenuSocial__CharacterMenuSocial_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuSocial_C, show, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuSocial_C, CategoryMenu, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuSocial_C, CharacterMenuParty, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuSocial_C, FriendsMenu, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuSocial_C, GamepadButtonLegend, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuSocial_C, HotkeyWidget, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuSocial_C, HotkeyWidget_1, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuSocial_C, OtherPlayerMenu, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuSocial_C, SocialPanelSwitcher, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterMenuSocial_C, 0x0688);
		}

		// class UStatusEffectTooltip_C : public UStatusEffectToolipWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__StatusEffectTooltip__StatusEffectTooltip_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffectTooltip_C, TLTextBlockDescription, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffectTooltip_C, TLTextBlockHeader, 0x0658);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffectTooltip_C, 0x0660);
		}

		// class UContractRewardWidget_C : public UContractRewardWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ContractRewardWidget__ContractRewardWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractRewardWidget_C, UberGraphFrame, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractRewardWidget_C, Claim, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractRewardWidget_C, Unclaimed, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractRewardWidget_C, Button, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractRewardWidget_C, ClaimedIcon, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractRewardWidget_C, CraftingProductWidget, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractRewardWidget_C, EarnedIcon, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractRewardWidget_C, GlowBorder, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractRewardWidget_C, LimitedTimeIcon, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractRewardWidget_C, LockedIcon, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractRewardWidget_C, RewardName, 0x06D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContractRewardWidget_C, 0x06D8);
		}

		// class UCraftingRecipeWidget_C : public UCraftingRecipeWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CraftingRecipeWidget__CraftingRecipeWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeWidget_C, UberGraphFrame, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeWidget_C, CraftAnim, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeWidget_C, DecorationButton, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeWidget_C, Description, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeWidget_C, Duration, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeWidget_C, GenericResourceWidget, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeWidget_C, NewFlag, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeWidget_C, TLTextBlock_555, 0x07E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingRecipeWidget_C, 0x07E8);
		}

		// class UBorder_Glow_C : public UTLBorderStyle
		TEST_METHOD(BlueprintGeneratedClass__Border_Glow__Border_Glow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorder_Glow_C, 0x00F8);
		}

		// class USkillPointCTA_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SkillPointCTA__SkillPointCTA_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillPointCTA_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillPointCTA_C, PulseLoop, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillPointCTA_C, glow, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillPointCTA_C, TLImage_2, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillPointCTA_C, 0x0280);
		}

		// class UDungeonHeaderFiligree_C : public UDungeonWidgetBase
		TEST_METHOD(WidgetBlueprintGeneratedClass__DungeonHeaderFiligree__DungeonHeaderFiligree_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonHeaderFiligree_C, UberGraphFrame, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonHeaderFiligree_C, ReverseBossTransition, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonHeaderFiligree_C, BossTransition, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonHeaderFiligree_C, BossFiligree, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonHeaderFiligree_C, RegularFiligree, 0x06B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonHeaderFiligree_C, 0x06C0);
		}

		// class UDungeonPanelConfirmChallenge_C : public UDungeonChallengeConfirmPanel
		TEST_METHOD(WidgetBlueprintGeneratedClass__DungeonPanelConfirmChallenge__DungeonPanelConfirmChallenge_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelConfirmChallenge_C, UberGraphFrame, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelConfirmChallenge_C, Outro, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelConfirmChallenge_C, CancelButton, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelConfirmChallenge_C, ClusterAffixAnchor, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelConfirmChallenge_C, ConfirmButton, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelConfirmChallenge_C, DungeonRulesCardConfirm, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelConfirmChallenge_C, FazeerAnchor, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelConfirmChallenge_C, PartyPlayerDungeonTitle, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelConfirmChallenge_C, PartyPlayerDungeonTitleText, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelConfirmChallenge_C, PartyUnaffectedContainer, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelConfirmChallenge_C, PartyUnaffectedText, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelConfirmChallenge_C, PartyWarningContainer, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelConfirmChallenge_C, PartyWarningText, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelConfirmChallenge_C, SizeBox_1, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelConfirmChallenge_C, TLButton_1, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelConfirmChallenge_C, TLTextBlock_61, 0x07B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonPanelConfirmChallenge_C, 0x07B8);
		}

		// class UDungeonRulesCard_C : public UDungeonChallengeRulesCard
		TEST_METHOD(WidgetBlueprintGeneratedClass__DungeonRulesCard__DungeonRulesCard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonRulesCard_C, UberGraphFrame, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonRulesCard_C, ShowHide, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonRulesCard_C, Hover, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonRulesCard_C, StartFocus, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonRulesCard_C, CardFlip, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonRulesCard_C, CardBackButton, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonRulesCard_C, CardButton, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonRulesCard_C, CardStateSwitcher, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonRulesCard_C, DungeonCardBackShared, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonRulesCard_C, DungeonCardFrontShared, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonRulesCard_C, glow, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonRulesCard_C, glow2, 0x09A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonRulesCard_C, 0x09B0);
		}

		// class Aio_prop_containers_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_containers_01_bp__io_prop_containers_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_containers_01_bp_C, 0x0268);
		}

		// class UDungeonCardFrontShared_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DungeonCardFrontShared__DungeonCardFrontShared_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCardFrontShared_C, AreaNameRichTextBlock, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCardFrontShared_C, BackgroundSlot, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCardFrontShared_C, BenefitsList, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCardFrontShared_C, BossAsyncImage, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCardFrontShared_C, BossCArdFront, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCardFrontShared_C, BossElement, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCardFrontShared_C, BossRuleList, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCardFrontShared_C, BossTextBlock, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCardFrontShared_C, CardFrontBorder, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCardFrontShared_C, CardIllustration, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCardFrontShared_C, CardsGroup, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCardFrontShared_C, DifficultySwitcher, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCardFrontShared_C, ElementImage, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCardFrontShared_C, ForegroundSlot, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCardFrontShared_C, RulesList, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCardFrontShared_C, TLImage_1, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCardFrontShared_C, TLImage_5, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCardFrontShared_C, TLImage_6, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCardFrontShared_C, TLImage_7, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCardFrontShared_C, TLImage_277, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCardFrontShared_C, TLImage_280, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCardFrontShared_C, TLImage_281, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCardFrontShared_C, TLWidgetSwitcher_2, 0x06F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonCardFrontShared_C, 0x06F8);
		}

		// class ABP_CardFX_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_CardFX__BP_CardFX_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CardFX_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CardFX_C, REF_Plane, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CardFX_C, TLParticleSystem, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CardFX_C, SceneCaptureComponent2D, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CardFX_C, Scene, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CardFX_C, DefaultSceneRoot, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_CardFX_C, 0x0250);
		}

		// class ASFX_Elemental_FIRE_C : public ATLEffect
		TEST_METHOD(BlueprintGeneratedClass__SFX_Elemental_FIRE__SFX_Elemental_FIRE_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASFX_Elemental_FIRE_C, FMODAudio, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASFX_Elemental_FIRE_C, DefaultSceneRoot, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASFX_Elemental_FIRE_C, 0x0270);
		}

		// class UStatusEffect_MainMenu_UnhighlightedCharacter_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_MainMenu_UnhighlightedCharacter__StatusEffect_MainMenu_UnhighlightedCharacter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_MainMenu_UnhighlightedCharacter_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_MainMenu_UnhighlightedCharacter_C, 0x0288);
		}

		// class UCharacterClassNameplate_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CharacterClassNameplate__CharacterClassNameplate_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterClassNameplate_C, show, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterClassNameplate_C, NameText, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterClassNameplate_C, TLImage_5, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterClassNameplate_C, TLImage_6, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterClassNameplate_C, TLImage_7, 0x0660);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterClassNameplate_C, 0x0668);
		}

		// class Apetalpaca_charactercreate_base_C : public ACharacterCreatePet_Base_C
		TEST_METHOD(BlueprintGeneratedClass__petalpaca_charactercreate_base__petalpaca_charactercreate_base_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Apetalpaca_charactercreate_base_C, 0x02F0);
		}

		// class UStatusEffect_MainMenu_HighlightedCharacter_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_MainMenu_HighlightedCharacter__StatusEffect_MainMenu_HighlightedCharacter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_MainMenu_HighlightedCharacter_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_MainMenu_HighlightedCharacter_C, 0x0288);
		}

		// class Apetowl_charactercreate_base_C : public ACharacterCreatePet_Base_C
		TEST_METHOD(BlueprintGeneratedClass__petowl_charactercreate_base__petowl_charactercreate_base_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Apetowl_charactercreate_base_C, 0x02F0);
		}

		// class Uss_anim_bp_C : public UTLAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__ss_anim_bp__ss_anim_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Uss_anim_bp_C, UberGraphFrame, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uss_anim_bp_C, AnimGraphNode_Root, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uss_anim_bp_C, TLAnimGraphNode_Slot, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uss_anim_bp_C, AnimGraphNode_BlendSpacePlayer, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uss_anim_bp_C, AnimGraphNode_ModifyBone, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uss_anim_bp_C, AnimGraphNode_LocalToComponentSpace, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uss_anim_bp_C, AnimGraphNode_ComponentToLocalSpace, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uss_anim_bp_C, HeadSize, 0x08C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Uss_anim_bp_C, 0x08D4);
		}

		// class Acc_f_charactercreate_C : public ACharacterCreate_Base_C
		TEST_METHOD(BlueprintGeneratedClass__cc_f_charactercreate__cc_f_charactercreate_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Acc_f_charactercreate_C, 0x0308);
		}

		// class UChatWidget_C : public UChatWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ChatWidget__ChatWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget_C, UberGraphFrame, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget_C, FadeOut, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget_C, ChannelName, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget_C, ChatBox, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget_C, ChatContainer, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget_C, ChatHeaderBar, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget_C, ChatList, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget_C, MessageEditableText, 0x0740);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChatWidget_C, 0x0748);
		}

		// class UDefaultPlayerPortalComponent_C : public UPlayerPortalComponent
		TEST_METHOD(BlueprintGeneratedClass__DefaultPlayerPortalComponent__DefaultPlayerPortalComponent_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultPlayerPortalComponent_C, 0x0218);
		}

		// class UContractWidget_C : public UContractWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ContractWidget__ContractWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, UberGraphFrame, 0x0EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, Intro, 0x0EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, FameStarAnimation, 0x0EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, TokenPlumpLoop, 0x0EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, AcceptButton, 0x0F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, AcceptText, 0x0F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, ActiveContract, 0x0F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, ActiveHeader, 0x0F18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, AlertBadge, 0x0F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, AllRewardsList, 0x0F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, ClaimNextBox, 0x0F30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, ClaimNextButton, 0x0F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, ContractBanner, 0x0F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, ContractFameLevelBar, 0x0F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, ContractItemDescription, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, ContractJoinPanel, 0x0F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, ContractLevel, 0x0F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, ContractLevelSwitcher, 0x0F68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, ContractLoopedLevel, 0x0F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, ContractOverlay, 0x0F78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, ContractPanelSwitcher, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, ContractsMenu, 0x0F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, CurrentContract, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, DetailsWidgetSwitcher, 0x0F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, Divider, 0x0FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, FameStar1, 0x0FA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, FameStar2, 0x0FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, FameStar3, 0x0FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, FiligreeLeft, 0x0FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, FiligreeRight, 0x0FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, Flash, 0x0FD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, GamepadButtonLegend, 0x0FD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, glowSlide, 0x0FE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, HeaderText, 0x0FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, ItemDetails, 0x0FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, JoinContractTitle, 0x0FF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, LeftArrow, 0x1000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, LevelList, 0x1008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, LevelNumber, 0x1010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, LoadingSpinner, 0x1018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, LongDescription, 0x1020);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, LongDescriptionContainer, 0x1028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, MakeActiveButton, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, NotActiveContractGreyedOut, 0x1038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, PreviewAnchorWidget, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, RewardsScroll, 0x1048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, RightArrow, 0x1050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, SizeBox_1, 0x1058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, SwitchContractButton, 0x1060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, TLImage_8, 0x1068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, TLImage_16, 0x1070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, TLImage_17, 0x1078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, TLImage_44, 0x1080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, TLImage_47, 0x1088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, TLImage_154, 0x1090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, TLImage_156, 0x1098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, TLImage_410, 0x10A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, TLTextBlock_6, 0x10A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, TLTextBlock_137, 0x10B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, UnclaimedRewardsButton, 0x10B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, UnclaimedRewardsChest, 0x10C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, UnclaimedRewardsText, 0x10C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, UnclaimedText1, 0x10D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, VisibilityOverlay, 0x10D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget_C, WelcometoContract, 0x10E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContractWidget_C, 0x10E8);
		}

		// class UMainMenuStateCharacterCreatePickClass_bp_C : public UMainMenuStateCharacterCreatePickClass
		TEST_METHOD(BlueprintGeneratedClass__MainMenuStateCharacterCreatePickClass_bp__MainMenuStateCharacterCreatePickClass_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuStateCharacterCreatePickClass_bp_C, 0x0320);
		}

		// class UContractClaimChest_C : public UContractClaimWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ContractClaimChest__ContractClaimChest_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractClaimChest_C, UberGraphFrame, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractClaimChest_C, Claim, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractClaimChest_C, Loop, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractClaimChest_C, show, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractClaimChest_C, AnimFlash, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractClaimChest_C, BookendLeft, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractClaimChest_C, bookendRight, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractClaimChest_C, ClaimButton, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractClaimChest_C, Divider, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractClaimChest_C, FancyGlow, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractClaimChest_C, FancyGlow2, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractClaimChest_C, HorizontalBox_4, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractClaimChest_C, RewardList, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractClaimChest_C, TLTextBlock_1, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractClaimChest_C, TLTextBlock_2, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractClaimChest_C, TLTextBlockTextBlock, 0x0738);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContractClaimChest_C, 0x0740);
		}

		// class USkill_Move_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_Move__Skill_Move_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Move_C, 0x0540);
		}

		// class Agob_navblocker_01_bp_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__gob_navblocker_01_bp__gob_navblocker_01_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_navblocker_01_bp_C, NavMeshNull, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_navblocker_01_bp_C, DefaultSceneRoot, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_navblocker_01_bp_C, 0x0230);
		}

		// class AAPNChest_perma_C : public AActorProxyNode
		TEST_METHOD(BlueprintGeneratedClass__APNChest_perma__APNChest_perma_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAPNChest_perma_C, 0x02A0);
		}

		// class Agcave_prop_mushrooms_04a_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gcave_prop_mushrooms_04a_bp__gcave_prop_mushrooms_04a_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agcave_prop_mushrooms_04a_bp_C, 0x0268);
		}

		// class UTargetInfoWidget_Monster_C : public UTargetInfoWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TargetInfoWidget_Monster__TargetInfoWidget_Monster_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Monster_C, UberGraphFrame, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Monster_C, Affix, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Monster_C, Bar_Background_Standard, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Monster_C, Bar_Cap_Standard, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Monster_C, Description, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Monster_C, LevelBox, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Monster_C, LevelText, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Monster_C, MonsterFrame, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Monster_C, NormalTargetElement, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Monster_C, StandardHealthBar, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Monster_C, StandardHPBarOverlay, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Monster_C, TargetName_Normal, 0x0720);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTargetInfoWidget_Monster_C, 0x0728);
		}

		// class UTargetInfoWidget_Warp_C : public UTargetInfoWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TargetInfoWidget_Warp__TargetInfoWidget_Warp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Warp_C, Affix, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Warp_C, Description, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Warp_C, LockedState, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Warp_C, NoXPMessage, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Warp_C, RestrictionTextBlock, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Warp_C, TargetName, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Warp_C, TLImage_1, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Warp_C, WarpFrame, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Warp_C, WarpLevelBox, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Warp_C, WarpTargetElement, 0x0710);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTargetInfoWidget_Warp_C, 0x0718);
		}

		// class UContractLevelWidget_C : public UContractLevelWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ContractLevelWidget__ContractLevelWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractLevelWidget_C, BorderSwitcher, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractLevelWidget_C, EndOfLoop, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractLevelWidget_C, FreeList, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractLevelWidget_C, LevelBlock, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractLevelWidget_C, LevelEarnedGlow, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractLevelWidget_C, LevelIndicator, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractLevelWidget_C, LoopCount, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractLevelWidget_C, LoopFrameDetail, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractLevelWidget_C, LoopLevelBlock, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractLevelWidget_C, LoopLevelIndicator, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractLevelWidget_C, LoopPanel, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractLevelWidget_C, LoopReward, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractLevelWidget_C, PaidList, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractLevelWidget_C, RegularBorder, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractLevelWidget_C, RegularReward, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractLevelWidget_C, SpecialBorder, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractLevelWidget_C, TLImage_1, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractLevelWidget_C, TLImage_2, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractLevelWidget_C, TLImage_3, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractLevelWidget_C, TLImage_63, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractLevelWidget_C, TLImage_65, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractLevelWidget_C, TLImage_67, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractLevelWidget_C, TLImage_69, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractLevelWidget_C, TLImage_70, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractLevelWidget_C, TLImage_71, 0x0718);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContractLevelWidget_C, 0x0720);
		}

		// class UContractsMenu_C : public UContractSelectionMenuWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ContractsMenu__ContractsMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractsMenu_C, UberGraphFrame, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractsMenu_C, ContractListWidget_1, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractsMenu_C, GamepadButtonLegend, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractsMenu_C, Style_CloseButtonSmall_C_1, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractsMenu_C, TLImage_57, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractsMenu_C, TLImage_59, 0x0670);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContractsMenu_C, 0x0678);
		}

		// class UBubbleDialogue_C : public UFloatingTextWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BubbleDialogue__BubbleDialogue_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBubbleDialogue_C, UberGraphFrame, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBubbleDialogue_C, show, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBubbleDialogue_C, TLRichTextBlock_2, 0x0660);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBubbleDialogue_C, 0x0668);
		}

		// class ABaseWarpGadget_C : public AWarpGadget
		TEST_METHOD(BlueprintGeneratedClass__BaseWarpGadget__BaseWarpGadget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseWarpGadget_C, UberGraphFrame, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseWarpGadget_C, Nameplate_Location, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseWarpGadget_C, Nameplate, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseWarpGadget_C, MapMarker, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseWarpGadget_C, Arrow, 0x04E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseWarpGadget_C, 0x04E8);
		}

		// class UStatusEffect_Blinded_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Blinded__StatusEffect_Blinded_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Blinded_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Blinded_C, 0x0288);
		}

		// class UStatusEffect_RelicEnergyGainOnHit_C : public UStatusEffectBase_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_RelicEnergyGainOnHit__StatusEffect_RelicEnergyGainOnHit_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_RelicEnergyGainOnHit_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_RelicEnergyGainOnHit_C, BaseRegenValue, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_RelicEnergyGainOnHit_C, 0x028C);
		}

		// class Unpcstretch_anim_bp_C : public UTLAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__npcstretch_anim_bp__npcstretch_anim_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Unpcstretch_anim_bp_C, UberGraphFrame, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::Unpcstretch_anim_bp_C, AnimGraphNode_Root, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::Unpcstretch_anim_bp_C, AnimGraphNode_SequencePlayer, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Unpcstretch_anim_bp_C, 0x06C8);
		}

		// class AWarp_Generic_C : public ABaseWarpGadget_C
		TEST_METHOD(BlueprintGeneratedClass__Warp_Generic__Warp_Generic_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWarp_Generic_C, UberGraphFrame, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWarp_Generic_C, Box, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWarp_Generic_C, ParticleSystemHighlighted, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWarp_Generic_C, ParticleSystemBase, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWarp_Generic_C, PointLight, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWarp_Generic_C, TextRender, 0x0510);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWarp_Generic_C, 0x0518);
		}

		// class Agob_prop_root_c_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_prop_root_c_bp__gob_prop_root_c_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_prop_root_c_bp_C, 0x0268);
		}

		// class UQuestDialog_C : public UQuestDialogueWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__QuestDialog__QuestDialog_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialog_C, UberGraphFrame, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialog_C, Outro, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialog_C, Intro, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialog_C, AcceptButton, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialog_C, AcceptQuestButtons, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialog_C, AcceptText, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialog_C, BodyRichText, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialog_C, ButtonSwitcher, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialog_C, CancelButton, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialog_C, ChoiceWidget, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialog_C, Divider, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialog_C, GamepadButtonLegend, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialog_C, Interactive, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialog_C, LeftButton, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialog_C, Overlay_6, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialog_C, Prefix, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialog_C, QuestTypeIcon, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialog_C, RewardButton, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialog_C, RewardList, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialog_C, RewardsDisplay, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialog_C, RightButton, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialog_C, TitleRichText, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialog_C, TLImage_3, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialog_C, TLImage_119, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialog_C, TLRichTextBlock_48, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialog_C, TLTextBlock_1, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialog_C, TLTextBlock_2, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialog_C, VerticalBox, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialog_C, CameraRequest, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialog_C, ShowingCall, 0x0A4C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestDialog_C, 0x0A4D);
		}

		// class USkill_Spawn_Climb_C : public USkill_Spawn_C
		TEST_METHOD(BlueprintGeneratedClass__Skill_Spawn_Climb__Skill_Spawn_Climb_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Spawn_Climb_C, 0x0540);
		}

		// class UPlayerNotification_C : public UPlayerNotificationWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PlayerNotification__PlayerNotification_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNotification_C, Intro, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNotification_C, NotificationRichText, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNotification_C, Portrait, 0x0670);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerNotification_C, 0x0678);
		}

		// class Uio_prop_boat_01b_anim_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__io_prop_boat_01b_anim__io_prop_boat_01b_anim_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Uio_prop_boat_01b_anim_C, UnknownData_W858, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uio_prop_boat_01b_anim_C, UberGraphFrame, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uio_prop_boat_01b_anim_C, AnimGraphNode_Root, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uio_prop_boat_01b_anim_C, AnimGraphNode_SequencePlayer, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Uio_prop_boat_01b_anim_C, 0x0378);
		}

		// class Acc_BaseGloves_C : public ABaseGloves_C
		TEST_METHOD(BlueprintGeneratedClass__cc_BaseGloves__cc_BaseGloves_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Acc_BaseGloves_C, 0x0438);
		}

		// class Acc_m_t0a_gloves_bp_C : public Acc_BaseGloves_C
		TEST_METHOD(BlueprintGeneratedClass__cc_m_t0a_gloves_bp__cc_m_t0a_gloves_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Acc_m_t0a_gloves_bp_C, 0x0438);
		}

		// class Acc_f_t1a_pants_bp_C : public Acc_BasePants_C
		TEST_METHOD(BlueprintGeneratedClass__cc_f_t1a_pants_bp__cc_f_t1a_pants_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Acc_f_t1a_pants_bp_C, 0x0428);
		}

		// class UAnimNotifyState_CapeBlendOff_C : public UAnimNotifyState
		TEST_METHOD(BlueprintGeneratedClass__AnimNotifyState_CapeBlendOff__AnimNotifyState_CapeBlendOff_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_CapeBlendOff_C, UseCurve, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_CapeBlendOff_C, debugPrint, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_CapeBlendOff_C, 0x0032);
		}

		// class USavedCharacterSlot_C : public UMainMenuCharacterSlotWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SavedCharacterSlot__SavedCharacterSlot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USavedCharacterSlot_C, UberGraphFrame, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::USavedCharacterSlot_C, CharacterNameTextBox, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::USavedCharacterSlot_C, ClassName, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::USavedCharacterSlot_C, CloseButton, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::USavedCharacterSlot_C, CreateButton, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::USavedCharacterSlot_C, DeadHardcore, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::USavedCharacterSlot_C, DeleteButton, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::USavedCharacterSlot_C, DifficultyText, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::USavedCharacterSlot_C, Hardcore, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::USavedCharacterSlot_C, LevelText, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::USavedCharacterSlot_C, PetContainer, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::USavedCharacterSlot_C, PetIcon, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::USavedCharacterSlot_C, PetNameTextBox, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::USavedCharacterSlot_C, PetPortraitContainer, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::USavedCharacterSlot_C, PlayerPortraitImage, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::USavedCharacterSlot_C, RelicGroup, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::USavedCharacterSlot_C, RelicName, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::USavedCharacterSlot_C, ScaleBox_3, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::USavedCharacterSlot_C, Switcher, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USavedCharacterSlot_C, TLImage_1, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USavedCharacterSlot_C, TLTextBlock_1, 0x0AB0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USavedCharacterSlot_C, 0x0AB8);
		}

		// class UBackArrowButtonStyle_C : public UDefaultButtonStyle_C
		TEST_METHOD(BlueprintGeneratedClass__BackArrowButtonStyle__BackArrowButtonStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBackArrowButtonStyle_C, 0x0310);
		}

		// class Adm_BaseChest_C : public ABaseChest_C
		TEST_METHOD(BlueprintGeneratedClass__dm_BaseChest__dm_BaseChest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Adm_BaseChest_C, 0x0428);
		}

		// class Adm_BaseGloves_C : public ABaseGloves_C
		TEST_METHOD(BlueprintGeneratedClass__dm_BaseGloves__dm_BaseGloves_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Adm_BaseGloves_C, 0x0438);
		}

		// class Adm_m_t1c_helm_bp_C : public Adm_BaseHelm_C
		TEST_METHOD(BlueprintGeneratedClass__dm_m_t1c_helm_bp__dm_m_t1c_helm_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Adm_m_t1c_helm_bp_C, 0x0428);
		}

		// class Adm_m_t1b_pants_bp_C : public Adm_BasePants_C
		TEST_METHOD(BlueprintGeneratedClass__dm_m_t1b_pants_bp__dm_m_t1b_pants_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Adm_m_t1b_pants_bp_C, 0x0428);
		}

		// class ABaseLocomotion_Crab_C : public ABaseLocomotion_C
		TEST_METHOD(BlueprintGeneratedClass__BaseLocomotion_Crab__BaseLocomotion_Crab_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseLocomotion_Crab_C, 0x0428);
		}

		// class UCharacterMenuParty_C : public UPartyWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CharacterMenuParty__CharacterMenuParty_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuParty_C, show, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuParty_C, FiligreeLeft, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuParty_C, FiligreeRight, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuParty_C, PartyList, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuParty_C, SkillCategoryHeader, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterMenuParty_C, 0x06A0);
		}

		// class UStatusEffect_Charged_DMDark_C : public UStatusEffect_Charged_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Charged_DMDark__StatusEffect_Charged_DMDark_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Charged_DMDark_C, UberGraphFrame, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Charged_DMDark_C, 0x02A8);
		}

		// class Arm_f_t0d_head_bp_C : public Arm_BaseHead_C
		TEST_METHOD(BlueprintGeneratedClass__rm_f_t0d_head_bp__rm_f_t0d_head_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Arm_f_t0d_head_bp_C, 0x0428);
		}

		// class Ass_f_t2b_chest_bp_C : public Ass_BaseChest_C
		TEST_METHOD(BlueprintGeneratedClass__ss_f_t2b_chest_bp__ss_f_t2b_chest_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ass_f_t2b_chest_bp_C, 0x0428);
		}

		// class UCursedCaptainResourceSkullGlowLoop_C : public UResourcePip
		TEST_METHOD(WidgetBlueprintGeneratedClass__CursedCaptainResourceSkullGlowLoop__CursedCaptainResourceSkullGlowLoop_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceSkullGlowLoop_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceSkullGlowLoop_C, glowloop, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCursedCaptainResourceSkullGlowLoop_C, 0x0280);
		}

		// class USharpshooterResourceBar_C : public USharpshooterResourceBar
		TEST_METHOD(WidgetBlueprintGeneratedClass__SharpshooterResourceBar__SharpshooterResourceBar_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, CapOpen, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, GreenBackground, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, SharpshooterResourceBarArrow_11, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, SharpshooterResourceBarArrow_12, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, SharpshooterResourceBarArrow_13, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, SharpshooterResourceBarArrow_14, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, SharpshooterResourceBarArrow_15, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, SharpshooterResourceBarArrow_16, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, SharpshooterResourceBarArrow_17, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, SharpshooterResourceBarArrow_18, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, SharpshooterResourceBarArrow_19, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, SharpshooterResourceBarArrow_20, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, SharpshooterResourceBarArrow_21, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, SharpshooterResourceBarArrow_01, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, SharpshooterResourceBarArrow_02, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, SharpshooterResourceBarArrow_03, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, SharpshooterResourceBarArrow_04, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, SharpshooterResourceBarArrow_05, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, SharpshooterResourceBarArrow_06, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, SharpshooterResourceBarArrow_07, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, SharpshooterResourceBarArrow_08, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, SharpshooterResourceBarArrow_09, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, SharpshooterTrinketSpinner, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, SharpshooterTrinketSpinner2, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, SharpshooterTrinketSpinner3, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, SharpshooterTrinketSpinner4, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, SpinEffect, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, TLImage_2, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, TLImage_3, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, TLImage_44, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, TLImage_47, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, TLImage_49, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, TLImage_50, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, TLImage_51, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, TLImage_52, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, TooltipMenuAnchor, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar_C, TrinketIcon, 0x0840);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USharpshooterResourceBar_C, 0x0848);
		}

		// class USharpshooterTrinketSpinner3_C : public UHUDElementNoTick
		TEST_METHOD(WidgetBlueprintGeneratedClass__SharpshooterTrinketSpinner3__SharpshooterTrinketSpinner3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterTrinketSpinner3_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterTrinketSpinner3_C, Spin, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterTrinketSpinner3_C, TLImage_1, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USharpshooterTrinketSpinner3_C, 0x0278);
		}

		// class USharpshooterResourceBarArrow_C : public UResourcePip
		TEST_METHOD(WidgetBlueprintGeneratedClass__SharpshooterResourceBarArrow__SharpshooterResourceBarArrow_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBarArrow_C, Reset, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBarArrow_C, Shot, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USharpshooterResourceBarArrow_C, 0x0280);
		}

		// class UStatusEffect_ChargeBar_Light_C : public UStatusEffect_ChargeBar_Master_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_ChargeBar_Light__StatusEffect_ChargeBar_Light_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_ChargeBar_Light_C, 0x0295);
		}

		// class AHazard_Shasta_C : public AHazard
		TEST_METHOD(BlueprintGeneratedClass__Hazard_Shasta__Hazard_Shasta_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Shasta_C, UberGraphFrame, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Shasta_C, LifetimeEvents, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Shasta_C, Decal, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Shasta_C, ParticleSystem, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Shasta_C, Capsule, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Shasta_C, DefaultSceneRoot, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Shasta_C, Timeline_End_Master_Alpha_7347D5D244A2E9902A62A3BA6ECC85F1, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Shasta_C, Timeline_End__Direction_7347D5D244A2E9902A62A3BA6ECC85F1, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Shasta_C, UnknownData_V088, 0x0475);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Shasta_C, Timeline_End, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Shasta_C, Timeline_loop_Master_Alpha_7FBD1319410E65F7C70FDA83B4930916, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Shasta_C, Timeline_loop_4___UVRepeat_7FBD1319410E65F7C70FDA83B4930916, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Shasta_C, Timeline_loop_3___UVRepeat_7FBD1319410E65F7C70FDA83B4930916, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Shasta_C, Timeline_loop_2___UVRepeat_7FBD1319410E65F7C70FDA83B4930916, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Shasta_C, Timeline_loop_4___Alpha_7FBD1319410E65F7C70FDA83B4930916, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Shasta_C, Timeline_loop_3___Alpha_7FBD1319410E65F7C70FDA83B4930916, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Shasta_C, Timeline_loop_2___Alpha_7FBD1319410E65F7C70FDA83B4930916, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Shasta_C, Timeline_loop__Direction_7FBD1319410E65F7C70FDA83B4930916, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Shasta_C, UnknownData_W4Q9, 0x049D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Shasta_C, Timeline_loop, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Shasta_C, DMAT, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Shasta_C, FadeIn, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Shasta_C, UnknownData_CCZM, 0x04B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Shasta_C, Color, 0x04B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHazard_Shasta_C, 0x04C0);
		}

		// class AMissile_BasicAttack_Bow_C : public AMissileBase_C
		TEST_METHOD(BlueprintGeneratedClass__Missile_BasicAttack_Bow__Missile_BasicAttack_Bow_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_BasicAttack_Bow_C, ParticleSystem, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMissile_BasicAttack_Bow_C, 0x0688);
		}

		// class USkill_GoblinHoundCharge_C : public USkill_Charge_Looping_C
		TEST_METHOD(BlueprintGeneratedClass__Skill_GoblinHoundCharge__Skill_GoblinHoundCharge_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_GoblinHoundCharge_C, 0x0579);
		}

		// class UStatusEffect_Chilled_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Chilled__StatusEffect_Chilled_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Chilled_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Chilled_C, 0x0288);
		}

		// class UStatusEffect_RelicPowerEquipped_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_RelicPowerEquipped__StatusEffect_RelicPowerEquipped_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_RelicPowerEquipped_C, 0x0280);
		}

		// class Aio_town_intro_2_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__io_town_intro_3__io_town_intro_2_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_town_intro_2_C, Hit, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_town_intro_2_C, 0x0229);
		}

		// class USkill_Forged_SonicPulse_C : public USkill_ForgedBase_C
		TEST_METHOD(BlueprintGeneratedClass__Skill_Forged_SonicPulse__Skill_Forged_SonicPulse_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Forged_SonicPulse_C, UnknownData_AUWD, 0x0542);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Forged_SonicPulse_C, StunChance, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Forged_SonicPulse_C, StunDuration, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Forged_SonicPulse_C, debuffduration, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Forged_SonicPulse_C, damageboost, 0x0550);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Forged_SonicPulse_C, 0x0554);
		}

		// class UStatusEffect_Stun_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Stun__StatusEffect_Stun_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Stun_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Stun_C, 0x0288);
		}

		// class ASkillShape_FurnaceBlast_C : public ASkillShapeCone_C
		TEST_METHOD(BlueprintGeneratedClass__SkillShape_FurnaceBlast__SkillShape_FurnaceBlast_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_FurnaceBlast_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_FurnaceBlast_C, fireblast_right1, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_FurnaceBlast_C, fireblast_left1, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_FurnaceBlast_C, fireblast_right, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_FurnaceBlast_C, fireblast_left, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_FurnaceBlast_C, fireblast, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkillShape_FurnaceBlast_C, 0x02C0);
		}

		// class UStatusEffect_HeatFull_C : public UStatusEffectBase_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_HeatFull__StatusEffect_HeatFull_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_HeatFull_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_HeatFull_C, 0x0288);
		}

		// class UStatusEffect_ResistShocked_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_ResistShocked__StatusEffect_ResistShocked_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_ResistShocked_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_ResistShocked_C, 0x0288);
		}

		// class UPartyInstanceResetToast_C : public UPartyInstanceResetToastWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PartyInstanceResetToast__PartyInstanceResetToast_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyInstanceResetToast_C, UberGraphFrame, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyInstanceResetToast_C, show, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyInstanceResetToast_C, AcceptButton, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyInstanceResetToast_C, DeclineButton, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyInstanceResetToast_C, InviteText, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyInstanceResetToast_C, MKBButtons, 0x0758);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyInstanceResetToast_C, 0x0760);
		}

		// class Aw_axe_2h_harvesting_t0a_bp_C : public AWeaponHammerBase_C
		TEST_METHOD(BlueprintGeneratedClass__w_axe_2h_harvesting_t0a_bp__w_axe_2h_harvesting_t0a_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aw_axe_2h_harvesting_t0a_bp_C, 0x0450);
		}

		// class AHazard_Forged_Legendary_CoalLaunchRain_C : public AHazard
		TEST_METHOD(BlueprintGeneratedClass__Hazard_Forged_Legendary_CoalLaunchRain__Hazard_Forged_Legendary_CoalLaunchRain_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Forged_Legendary_CoalLaunchRain_C, UberGraphFrame, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Forged_Legendary_CoalLaunchRain_C, Fire_Sound, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Forged_Legendary_CoalLaunchRain_C, Capsule, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Forged_Legendary_CoalLaunchRain_C, DefaultSceneRoot1, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Forged_Legendary_CoalLaunchRain_C, DefaultSceneRoot, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Forged_Legendary_CoalLaunchRain_C, RandomTarget, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Forged_Legendary_CoalLaunchRain_C, Radius, 0x0470);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHazard_Forged_Legendary_CoalLaunchRain_C, 0x0474);
		}

		// class UStatusEffect_Consecration_Healing_C : public UStatusEffect_Consecration_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Consecration_Healing__StatusEffect_Consecration_Healing_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Consecration_Healing_C, UberGraphFrame, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Consecration_Healing_C, 0x0290);
		}

		// class ASkillShape_Legendary_ConsecrationPoisonNova_C : public ASkillShapeSphere_C
		TEST_METHOD(BlueprintGeneratedClass__SkillShape_Legendary_ConsecrationPoisonNova__SkillShape_Legendary_ConsecrationPoisonNova_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_Legendary_ConsecrationPoisonNova_C, TLParticleSystem, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_Legendary_ConsecrationPoisonNova_C, FMODAudio, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkillShape_Legendary_ConsecrationPoisonNova_C, 0x02A0);
		}

		// class USkill_ConsecrationOffensive_C : public USkill_DuskMageLight_Base_C
		TEST_METHOD(BlueprintGeneratedClass__Skill_ConsecrationOffensive__Skill_ConsecrationOffensive_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_ConsecrationOffensive_C, UnknownData_R8I0, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_ConsecrationOffensive_C, ShapeDuration, 0x0544);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_ConsecrationOffensive_C, 0x0548);
		}

		// class Agcave_breakable_barrel_03_bp_C : public ABaseBreakable_Container_C
		TEST_METHOD(BlueprintGeneratedClass__gcave_breakable_barrel_03_bp__gcave_breakable_barrel_03_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agcave_breakable_barrel_03_bp_C, 0x0478);
		}

		// class Agob_break_crate_01_bp_C : public ABaseBreakable_Container_C
		TEST_METHOD(BlueprintGeneratedClass__gob_break_crate_01_bp__gob_break_crate_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_break_crate_01_bp_C, 0x0478);
		}

		// class AStabby_SPECIALSoldier_Cutscene_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Stabby_SPECIALSoldier_Cutscene__Stabby_SPECIALSoldier_Cutscene_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStabby_SPECIALSoldier_Cutscene_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStabby_SPECIALSoldier_Cutscene_C, gobgeneric_body_04_geo2, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStabby_SPECIALSoldier_Cutscene_C, gobgeneric_body_04_geo1, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStabby_SPECIALSoldier_Cutscene_C, gobgeneric_body_04_geo, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStabby_SPECIALSoldier_Cutscene_C, npcimperialguard_body_04_geo, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStabby_SPECIALSoldier_Cutscene_C, DefaultSceneRoot, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStabby_SPECIALSoldier_Cutscene_C, Min, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStabby_SPECIALSoldier_Cutscene_C, Max, 0x0254);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStabby_SPECIALSoldier_Cutscene_C, 0x0258);
		}

		// class USkill_Forged_RapidStrike_C : public USkill_ForgedBase_C
		TEST_METHOD(BlueprintGeneratedClass__Skill_Forged_RapidStrike__Skill_Forged_RapidStrike_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Forged_RapidStrike_C, 0x0542);
		}

		// class Uio_prop_boat_02b_anim_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__io_prop_boat_02b_anim__io_prop_boat_02b_anim_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Uio_prop_boat_02b_anim_C, UnknownData_6HUP, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uio_prop_boat_02b_anim_C, UberGraphFrame, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uio_prop_boat_02b_anim_C, AnimGraphNode_Root, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uio_prop_boat_02b_anim_C, AnimGraphNode_SequencePlayer, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Uio_prop_boat_02b_anim_C, 0x0378);
		}

		// class AIO_Fire_Constant_Fire_Hazard_01_bp_C : public ABasePulsingTrap_C
		TEST_METHOD(BlueprintGeneratedClass__IO_Fire_Constant_Fire_Hazard_01_bp__IO_Fire_Constant_Fire_Hazard_01_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AIO_Fire_Constant_Fire_Hazard_01_bp_C, Box, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIO_Fire_Constant_Fire_Hazard_01_bp_C, StaticMesh, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AIO_Fire_Constant_Fire_Hazard_01_bp_C, 0x0488);
		}

		// class Agob_bfgoblin_prop_c_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_bfgoblin_prop_c_02_bp__gob_bfgoblin_prop_c_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_bfgoblin_prop_c_02_bp_C, 0x0268);
		}

		// class Aio_prop_rockcliff_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_rockcliff_02_bp__io_prop_rockcliff_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_rockcliff_02_bp_C, 0x0268);
		}

		// class Aio_breakable_pot_02_bp_C : public ABaseBreakable_Container_NoTrap_C
		TEST_METHOD(BlueprintGeneratedClass__io_breakable_pot_02_bp__io_breakable_pot_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_breakable_pot_02_bp_C, 0x0470);
		}

		// class Aio_breakable_pot_01_bp_C : public ABaseBreakable_Container_NoTrap_C
		TEST_METHOD(BlueprintGeneratedClass__io_breakable_pot_01_bp__io_breakable_pot_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_breakable_pot_01_bp_C, 0x0470);
		}

		// class USkill_Flourish_Right_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_Flourish_Right__Skill_Flourish_Right_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Flourish_Right_C, 0x0540);
		}

		// class ABasePlayerMinion_C : public ABaseMonster_C
		TEST_METHOD(BlueprintGeneratedClass__BasePlayerMinion__BasePlayerMinion_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePlayerMinion_C, UnknownData_3ED3, 0x07F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePlayerMinion_C, UberGraphFrame, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePlayerMinion_C, LifetimeEvents, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePlayerMinion_C, UnknownData_5Y87, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePlayerMinion_C, Despawn_Effect, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePlayerMinion_C, Spawn_Effect, 0x08E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABasePlayerMinion_C, 0x09B0);
		}

		// class AMissile_RifleBasic_C : public AMissileBase_C
		TEST_METHOD(BlueprintGeneratedClass__Missile_RifleBasic__Missile_RifleBasic_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_RifleBasic_C, PointLight, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_RifleBasic_C, ParticleSystem, 0x0688);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMissile_RifleBasic_C, 0x0690);
		}

		// class Aio_prop_treestump_03_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_treestump_03_bp__io_prop_treestump_03_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_treestump_03_bp_C, Sphere, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_treestump_03_bp_C, 0x0270);
		}

		// class Aio_terrain_oceancnr_20x20_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_terrain_oceancnr_20x20_02_bp__io_terrain_oceancnr_20x20_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_terrain_oceancnr_20x20_02_bp_C, 0x0268);
		}

		// class Aio_terrain_oceanfloor_20x20_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_terrain_oceanfloor_20x20_02_bp__io_terrain_oceanfloor_20x20_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_terrain_oceanfloor_20x20_02_bp_C, 0x0268);
		}

		// class Aio_terrain_plateau_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_terrain_plateau_01_bp__io_terrain_plateau_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_terrain_plateau_01_bp_C, 0x0268);
		}

		// class ASkillShape_BattleCry_C : public ASkillShapeSphere_C
		TEST_METHOD(BlueprintGeneratedClass__SkillShape_BattleCry__SkillShape_BattleCry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BattleCry_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BattleCry_C, FMODAudio, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BattleCry_C, TLDecal1, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BattleCry_C, TLDecal, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BattleCry_C, ParticleSystem, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkillShape_BattleCry_C, 0x02B8);
		}

		// class UProcSkill_Knockback_C : public UBaseProcSkill_C
		TEST_METHOD(BlueprintGeneratedClass__ProcSkill_Knockback__ProcSkill_Knockback_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProcSkill_Knockback_C, 0x0560);
		}

		// class AWeaponBowBase_C : public AWeaponSkeletalBase_C
		TEST_METHOD(BlueprintGeneratedClass__WeaponBowBase__WeaponBowBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBowBase_C, UberGraphFrame, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBowBase_C, ArrowClass, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBowBase_C, Bow_On_Ground_Anim, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBowBase_C, Arrow, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWeaponBowBase_C, 0x0490);
		}

		// class Ucc_f_StartingItems_C : public UPlayerStartingItems_C
		TEST_METHOD(BlueprintGeneratedClass__cc_f_StartingItems__cc_f_StartingItems_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ucc_f_StartingItems_C, 0x0078);
		}

		// class Aio_wall_towerbroken_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_wall_towerbroken_01_bp__io_wall_towerbroken_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_wall_towerbroken_01_bp_C, 0x0268);
		}

		// class Aio_wall_towerbroken_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_wall_towerbroken_02_bp__io_wall_towerbroken_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_wall_towerbroken_02_bp_C, 0x0268);
		}

		// class Aio_wall_towerthinbroken_01b_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_wall_towerthinbroken_01b_bp__io_wall_towerthinbroken_01b_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_wall_towerthinbroken_01b_bp_C, 0x0268);
		}

		// class Aio_prop_scrollbarrel_03_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_scrollbarrel_03_bp__io_prop_scrollbarrel_03_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_scrollbarrel_03_bp_C, 0x0268);
		}

		// class Aio_prop_shelfgenerals_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_shelfgenerals_01_bp__io_prop_shelfgenerals_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_shelfgenerals_01_bp_C, 0x0268);
		}

		// class Agob_prop_fallenlog_03_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_prop_fallenlog_03_bp__gob_prop_fallenlog_03_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_prop_fallenlog_03_bp_C, 0x0268);
		}

		// class Agob_prop_rock_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_prop_rock_01_bp__gob_prop_rock_01_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_rock_01_bp_C, Box, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_prop_rock_01_bp_C, 0x0270);
		}

		// class Agob_prop_tree_c_01_bp_C : public ABaseHideableObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_prop_tree_c_01_bp__gob_prop_tree_c_01_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_tree_c_01_bp_C, UberGraphFrame, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_tree_c_01_bp_C, ParticleSystem, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_tree_c_01_bp_C, stump, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_tree_c_01_bp_C, Sphere, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_tree_c_01_bp_C, Leaves, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_tree_c_01_bp_C, LeafMat, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_prop_tree_c_01_bp_C, 0x0408);
		}

		// class Aio_prop_boat_01b_bp_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__io_prop_boat_01b_bp__io_prop_boat_01b_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_boat_01b_bp_C, FMODAudio1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_boat_01b_bp_C, FMODAudio, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_boat_01b_bp_C, SkeletalMesh, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_boat_01b_bp_C, DefaultSceneRoot, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_boat_01b_bp_C, 0x0240);
		}

		// class Aio_terrain_10x10_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_terrain_10x10_01_bp__io_terrain_10x10_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_terrain_10x10_01_bp_C, 0x0268);
		}

		// class UStatusEffect_Invulnerable_Cinematic_C : public UStatusEffect_Invulnerable_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Invulnerable_Cinematic__StatusEffect_Invulnerable_Cinematic_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Invulnerable_Cinematic_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Invulnerable_Cinematic_C, 0x0288);
		}

		// class ALevelSequenceTrigger_C : public ACameraAnimTriggerBox
		TEST_METHOD(BlueprintGeneratedClass__LevelSequenceTrigger__LevelSequenceTrigger_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelSequenceTrigger_C, 0x0230);
		}

		// class Aio_prop_barrel_grp_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_barrel_grp_01_bp__io_prop_barrel_grp_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_barrel_grp_01_bp_C, 0x0268);
		}

		// class USkill_DuskMageDark_Base_C : public USkill_DuskMageBase_C
		TEST_METHOD(BlueprintGeneratedClass__Skill_DuskMageDark_Base__Skill_DuskMageDark_Base_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_DuskMageDark_Base_C, 0x0541);
		}

		// class USkill_Damnation_C : public USkill_DuskMageDark_Base_C
		TEST_METHOD(BlueprintGeneratedClass__Skill_Damnation__Skill_Damnation_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Damnation_C, UnknownData_4S6E, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Damnation_C, Shape_Duration, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Damnation_C, lasting, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Damnation_C, damagereductionamount, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Damnation_C, mana, 0x0550);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Damnation_C, 0x0554);
		}

		// class ASkillShape_BloodDrinker_ActivationBleed_C : public ASkillShapeSphere_C
		TEST_METHOD(BlueprintGeneratedClass__SkillShape_BloodDrinker_ActivationBleed__SkillShape_BloodDrinker_ActivationBleed_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_ActivationBleed_C, Blood_FX_Censored, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_ActivationBleed_C, Blood_FX, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_ActivationBleed_C, Shadow_Decal, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkillShape_BloodDrinker_ActivationBleed_C, 0x02A8);
		}

		// class UNiagaraScriptBase : public UObject
		TEST_METHOD(Class__NiagaraShader__NiagaraScriptBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraScriptBase, 0x0028);
		}

		// class UWmfMediaSettings : public UObject
		TEST_METHOD(Class__WmfMediaFactory__WmfMediaSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, AllowNonStandardCodecs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, LowLatency, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, NativeAudioOut, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, HardwareAcceleratedVideoDecoding, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, UnknownData_VFAC, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWmfMediaSettings, 0x0030);
		}

		// class UTcpMessagingSettings : public UObject
		TEST_METHOD(Class__TcpMessaging__TcpMessagingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, EnableTransport, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, UnknownData_K51D, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ListenEndpoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ConnectToEndpoints, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ConnectionRetryDelay, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, bStopServiceWhenAppDeactivates, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, UnknownData_3M7Z, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTcpMessagingSettings, 0x0058);
		}

		// class UChaosSolverSettings : public UDeveloperSettings
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolverSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverSettings, UnknownData_PUMB, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverSettings, DefaultChaosSolverActorClass, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosSolverSettings, 0x0058);
		}

		// class UChaosDebugDrawComponent : public UActorComponent
		TEST_METHOD(Class__ChaosSolverEngine__ChaosDebugDrawComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDebugDrawComponent, UnknownData_DXAN, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosDebugDrawComponent, 0x00B8);
		}

		// class UChaosEventListenerComponent : public UActorComponent
		TEST_METHOD(Class__ChaosSolverEngine__ChaosEventListenerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosEventListenerComponent, UnknownData_ZREF, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosEventListenerComponent, 0x00B8);
		}

		// class UChaosGameplayEventDispatcher : public UChaosEventListenerComponent
		TEST_METHOD(Class__ChaosSolverEngine__ChaosGameplayEventDispatcher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, UnknownData_P0DI, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, CollisionEventRegistrations, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, BreakEventRegistrations, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, UnknownData_OCAP, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosGameplayEventDispatcher, 0x0270);
		}

		// class UChaosNotifyHandlerInterface : public UInterface
		TEST_METHOD(Class__ChaosSolverEngine__ChaosNotifyHandlerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosNotifyHandlerInterface, 0x0028);
		}

		// class UChaosSolverEngineBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolverEngineBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosSolverEngineBlueprintLibrary, 0x0028);
		}

		// class UChaosSolver : public UObject
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosSolver, 0x0028);
		}

		// class AChaosSolverActor : public AActor
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolverActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, Properties, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, TimeStepMultiplier, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, CollisionIterations, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, PushOutIterations, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, PushOutPairIterations, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, ClusterConnectionFactor, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, ClusterUnionConnectionType, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, DoGenerateCollisionData, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_8OIZ, 0x029E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, CollisionFilterSettings, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, DoGenerateBreakingData, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_88W7, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, BreakingFilterSettings, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, DoGenerateTrailingData, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_1MMF, 0x02C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, TrailingFilterSettings, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, MassScale, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, bGenerateContactGraph, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, bHasFloor, 0x02DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_VD45, 0x02DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, FloorHeight, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, ChaosDebugSubstepControl, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_R7ZH, 0x02E7);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, SpriteComponent, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_SYM4, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, GameplayEventDispatcherComponent, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_LHO0, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChaosSolverActor, 0x0318);
		}

		// class ACameraRig_Crane : public AActor
		TEST_METHOD(Class__CinematicCamera__CameraRig_Crane)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CranePitch, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneYaw, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneArmLength, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, bLockMountPitch, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, bLockMountYaw, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, UnknownData_SNJO, 0x022E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, TransformComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneYawControl, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CranePitchControl, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneCameraMount, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraRig_Crane, 0x0250);
		}

		// class ACameraRig_Rail : public AActor
		TEST_METHOD(Class__CinematicCamera__CameraRig_Rail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, CurrentPositionOnRail, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, bLockOrientationToRail, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, UnknownData_55CB, 0x0225);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, TransformComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, RailSplineComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, RailCameraMount, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraRig_Rail, 0x0240);
		}

		// class ACineCameraActor : public ACameraActor
		TEST_METHOD(Class__CinematicCamera__CineCameraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACineCameraActor, LookatTrackingSettings, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACineCameraActor, UnknownData_F3ND, 0x07F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACineCameraActor, 0x0800);
		}

		// class UCineCameraComponent : public UCameraComponent
		TEST_METHOD(Class__CinematicCamera__CineCameraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FilmbackSettings, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, Filmback, 0x07CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, LensSettings, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FocusSettings, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentFocalLength, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentAperture, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentFocusDistance, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, UnknownData_6JWI, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FilmbackPresets, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, LensPresets, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultFilmbackPresetName, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultFilmbackPreset, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensPresetName, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensFocalLength, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensFStop, 0x08B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, UnknownData_26T6, 0x08B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCineCameraComponent, 0x08C0);
		}

		// class UReverbPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__ReverbPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverbPluginSourceSettingsBase, 0x0028);
		}

		// class USoundModulatorBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundModulatorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundModulatorBase, 0x0028);
		}

		// class USoundfieldEndpointSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEndpointSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEndpointSettingsBase, 0x0028);
		}

		// class USoundfieldEffectSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEffectSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEffectSettingsBase, 0x0028);
		}

		// class USoundfieldEffectBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEffectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEffectBase, Settings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEffectBase, 0x0030);
		}

		// class USoundfieldEncodingSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEncodingSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEncodingSettingsBase, 0x0028);
		}

		// class UAudioEndpointSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__AudioEndpointSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioEndpointSettingsBase, 0x0028);
		}

		// class USpatializationPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SpatializationPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpatializationPluginSourceSettingsBase, 0x0028);
		}

		// class UOcclusionPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__OcclusionPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOcclusionPluginSourceSettingsBase, 0x0028);
		}

		// class UNetAnalyticsAggregatorConfig : public UObject
		TEST_METHOD(Class__NetCore__NetAnalyticsAggregatorConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetAnalyticsAggregatorConfig, NetAnalyticsData, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetAnalyticsAggregatorConfig, 0x0038);
		}

		// class UAssetRegistryImpl : public UObject
		TEST_METHOD(Class__AssetRegistry__AssetRegistryImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetRegistryImpl, UnknownData_7IFG, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistryImpl, 0x07B8);
		}

		// class UAssetRegistryHelpers : public UObject
		TEST_METHOD(Class__AssetRegistry__AssetRegistryHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistryHelpers, 0x0028);
		}

		// class UAssetRegistry : public UInterface
		TEST_METHOD(Class__AssetRegistry__AssetRegistry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistry, 0x0028);
		}

		// class ULocalizedAudioTable_C : public ULocalizedAudioTableAsset
		TEST_METHOD(BlueprintGeneratedClass__LocalizedAudioTable__LocalizedAudioTable_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalizedAudioTable_C, 0x00C8);
		}

		// class UFrame_EditableText_C : public UTLBorderStyle
		TEST_METHOD(BlueprintGeneratedClass__Frame_EditableText__Frame_EditableText_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrame_EditableText_C, 0x00F8);
		}

		// class UNewFlagloop_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__NewFlagloop__NewFlagloop_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewFlagloop_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewFlagloop_C, pulse, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNewFlagloop_C, 0x0270);
		}

		// class UErrorBody5TextStyle_C : public ULightBody1TextStyle_C
		TEST_METHOD(BlueprintGeneratedClass__ErrorBody5TextStyle__ErrorBody5TextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UErrorBody5TextStyle_C, 0x00A8);
		}

		// class UBigHeader2TextStyle_C : public UTLTextStyle
		TEST_METHOD(BlueprintGeneratedClass__BigHeader2TextStyle__BigHeader2TextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBigHeader2TextStyle_C, 0x00A8);
		}

		// class UVendorCatalogEntry_C : public UCatalogEntryWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__VendorCatalogEntry__VendorCatalogEntry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorCatalogEntry_C, TryToEquip, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorCatalogEntry_C, Equip, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorCatalogEntry_C, ComparisonMenuAnchor, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorCatalogEntry_C, Cost, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorCatalogEntry_C, GenericResourceWidget, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorCatalogEntry_C, InnerInfo, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorCatalogEntry_C, TLImage_172, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorCatalogEntry_C, EquipEvent, 0x06A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVendorCatalogEntry_C, 0x06C0);
		}

		// class UErrorButtonStyle_C : public UDefaultButtonStyle_C
		TEST_METHOD(BlueprintGeneratedClass__ErrorButtonStyle__ErrorButtonStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UErrorButtonStyle_C, 0x0310);
		}

		// class UAttachedTabButtonStyle_C : public UDefaultButtonStyle_C
		TEST_METHOD(BlueprintGeneratedClass__AttachedTabButtonStyle__AttachedTabButtonStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAttachedTabButtonStyle_C, 0x0310);
		}

		// class ULegendaryAffixCollectionEquipModal_C : public ULegendaryAffixCollectionEquipModal
		TEST_METHOD(WidgetBlueprintGeneratedClass__LegendaryAffixCollectionEquipModal__LegendaryAffixCollectionEquipModal_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionEquipModal_C, UberGraphFrame, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionEquipModal_C, show, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionEquipModal_C, CancelButton, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionEquipModal_C, Divider, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionEquipModal_C, EquipButton, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionEquipModal_C, GamepadButtonLegend, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionEquipModal_C, HorizontalBox_145, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionEquipModal_C, LegendaryAffixCollection, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionEquipModal_C, LegendaryAffixCollectionEquippedWidget, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionEquipModal_C, TLImage_1, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionEquipModal_C, TLImage_2, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionEquipModal_C, TLImage_4, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionEquipModal_C, TLImage_5, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionEquipModal_C, TLImage_14, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionEquipModal_C, TLTextBlock_1, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionEquipModal_C, TLTextBlock_8, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionEquipModal_C, TLTextBlock_172, 0x07B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegendaryAffixCollectionEquipModal_C, 0x07C0);
		}

		// class UMapMarkerLabel_C : public UMapMarkerLabel
		TEST_METHOD(BlueprintGeneratedClass__MapMarkerLabel__MapMarkerLabel_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapMarkerLabel_C, 0x0718);
		}

		// class UBigKeyWidget_C : public UHotkeyWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BigKeyWidget__BigKeyWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBigKeyWidget_C, ButtonBGWidget, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBigKeyWidget_C, TextWidget, 0x06A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBigKeyWidget_C, 0x06A8);
		}

		// class UPlaceName_C : public UPlaceNameMessageWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PlaceName__PlaceName_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceName_C, show, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceName_C, PlaceName, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceName_C, TLImage_1, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceName_C, TLImage_3, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceName_C, TLImage_4, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceName_C, TLImage_5, 0x0710);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaceName_C, 0x0718);
		}

		// class ULegendaryAffixCollectionItemCategoryWidget_C : public ULegendaryAffixCollectionItemCategoryWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__LegendaryAffixCollectionItemCategoryWidget__LegendaryAffixCollectionItemCategoryWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItemCategoryWidget_C, UberGraphFrame, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItemCategoryWidget_C, AffixCountText, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItemCategoryWidget_C, CategoryHeader, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItemCategoryWidget_C, CategoryNameText, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItemCategoryWidget_C, ItemList, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItemCategoryWidget_C, TLImage_64, 0x06A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegendaryAffixCollectionItemCategoryWidget_C, 0x06A8);
		}

		// class UQuestWidgetBase_C : public UQuestWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__QuestWidgetBase__QuestWidgetBase_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestWidgetBase_C, 0x06D0);
		}

		// class ULogTaskWidget_C : public UQuestTaskWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__LogTaskWidget__LogTaskWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogTaskWidget_C, ShowProgress, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogTaskWidget_C, Checkmark, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogTaskWidget_C, TaskName, 0x06B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULogTaskWidget_C, 0x06B8);
		}

		// class UQuestCategory3_C : public UTLTextStyle
		TEST_METHOD(BlueprintGeneratedClass__QuestCategory3__QuestCategory3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestCategory3_C, 0x00A8);
		}

		// class UPotionFetchingCounterWidget_C : public UPetShoppingEntryCounterWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PotionFetchingCounterWidget__PotionFetchingCounterWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionFetchingCounterWidget_C, UberGraphFrame, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionFetchingCounterWidget_C, DecrementButton, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionFetchingCounterWidget_C, DecrementButtonOverlay, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionFetchingCounterWidget_C, IncrementButton, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionFetchingCounterWidget_C, IncrementButtonOverlay, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionFetchingCounterWidget_C, MaxAvailableTextBlock, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionFetchingCounterWidget_C, RequestedPurchaseCount, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionFetchingCounterWidget_C, TLImage_2, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionFetchingCounterWidget_C, TLImage_5, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionFetchingCounterWidget_C, TLImage_121, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionFetchingCounterWidget_C, VendorCatalogEntry, 0x08C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPotionFetchingCounterWidget_C, 0x08C8);
		}

		// class UPartyHUDPanel_C : public UPartyWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PartyHUDPanel__PartyHUDPanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyHUDPanel_C, PartyList, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyHUDPanel_C, 0x0680);
		}

		// class Unpcimperialguard_anim_bp_C : public UTLAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__npcimperialguard_anim_bp__npcimperialguard_anim_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Unpcimperialguard_anim_bp_C, UberGraphFrame, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::Unpcimperialguard_anim_bp_C, AnimGraphNode_Root, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::Unpcimperialguard_anim_bp_C, AnimGraphNode_BlendSpacePlayer, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::Unpcimperialguard_anim_bp_C, TLAnimGraphNode_Slot, 0x0730);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Unpcimperialguard_anim_bp_C, 0x0780);
		}

		// class USkill_MeleeAttack_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_MeleeAttack__Skill_MeleeAttack_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_MeleeAttack_C, 0x0540);
		}

		// class USkill_Knockback_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_Knockback__Skill_Knockback_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Knockback_C, ForceName, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Knockback_C, 0x0548);
		}

		// class ATLMonsterController_C : public ATLAIController
		TEST_METHOD(BlueprintGeneratedClass__TLMonsterController__TLMonsterController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLMonsterController_C, UberGraphFrame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLMonsterController_C, MetricsLogger, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATLMonsterController_C, 0x03A8);
		}

		// class UCameraShake_Critical_C : public UMatineeCameraShake
		TEST_METHOD(BlueprintGeneratedClass__CameraShake_Critical__CameraShake_Critical_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShake_Critical_C, 0x0180);
		}

		// class USkill_Spawn_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_Spawn__Skill_Spawn_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Spawn_C, 0x0540);
		}

		// class ATLEffect_bloodGibs_red_02a_C : public ATLEffect
		TEST_METHOD(BlueprintGeneratedClass__TLEffect_bloodGibs_red_02a__TLEffect_bloodGibs_red_02a_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLEffect_bloodGibs_red_02a_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLEffect_bloodGibs_red_02a_C, gibs, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLEffect_bloodGibs_red_02a_C, vfx_bloodGibs_decalDriver_primaryTest_02, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLEffect_bloodGibs_red_02a_C, DefaultSceneRoot, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLEffect_bloodGibs_red_02a_C, Timeline_0_Alpha_Subtraction_72DE12734B9FFF54E4107B94B8A1FB3B, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLEffect_bloodGibs_red_02a_C, Timeline_0__Direction_72DE12734B9FFF54E4107B94B8A1FB3B, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLEffect_bloodGibs_red_02a_C, UnknownData_OIC5, 0x0285);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLEffect_bloodGibs_red_02a_C, Timeline_1, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLEffect_bloodGibs_red_02a_C, DMAT_01, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATLEffect_bloodGibs_red_02a_C, 0x0298);
		}

		// class UCombatCriticalDamageNotify_C : public UFloatingTextWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CombatCriticalDamageNotify__CombatCriticalDamageNotify_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombatCriticalDamageNotify_C, UberGraphFrame, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombatCriticalDamageNotify_C, RiseAndFade, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombatCriticalDamageNotify_C, DamageText, 0x0660);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCombatCriticalDamageNotify_C, 0x0668);
		}

		// class APlayerPortrait_Base_bp_C : public APhotobooth
		TEST_METHOD(BlueprintGeneratedClass__PlayerPortrait_Base_bp__PlayerPortrait_Base_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerPortrait_Base_bp_C, UberGraphFrame, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerPortrait_Base_bp_C, PortraitCameraPosition, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerPortrait_Base_bp_C, PortraitCameraStart, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerPortrait_Base_bp_C, Boots, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerPortrait_Base_bp_C, Helm, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerPortrait_Base_bp_C, GloveRt, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerPortrait_Base_bp_C, GloveLt, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerPortrait_Base_bp_C, ShoulderRt, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerPortrait_Base_bp_C, ShoulderLt, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerPortrait_Base_bp_C, Pants, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerPortrait_Base_bp_C, Chest, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerPortrait_Base_bp_C, SkeletalMesh, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerPortrait_Base_bp_C, Scene, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerPortrait_Base_bp_C, DefaultSceneRoot, 0x0408);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerPortrait_Base_bp_C, 0x0410);
		}

		// class Uconsumable_inv_C : public UTLInventoryContainerConsumableItems
		TEST_METHOD(BlueprintGeneratedClass__consumable_inv__consumable_inv_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Uconsumable_inv_C, 0x01F8);
		}

		// class Ucc_f_BaseItems_C : public UPlayer_BaseItems_C
		TEST_METHOD(BlueprintGeneratedClass__cc_f_BaseItems__cc_f_BaseItems_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ucc_f_BaseItems_C, 0x0078);
		}

		// class AItemBase_C : public AGenericItemBase_C
		TEST_METHOD(BlueprintGeneratedClass__ItemBase__ItemBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemBase_C, BlobShadow, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemBase_C, TLProjectileMovement, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemBase_C, ItemOnGround, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemBase_C, AudioEffectMap, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AItemBase_C, 0x03F8);
		}

		// class AWeaponBase_C : public AItemBase_C
		TEST_METHOD(BlueprintGeneratedClass__WeaponBase__WeaponBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBase_C, IconCameraPositionStart, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBase_C, IconCameraCenterRoomPivot, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBase_C, IconCameraPosition, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBase_C, MaterialManager, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBase_C, ElementalEffect, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponBase_C, SkillList, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWeaponBase_C, 0x0428);
		}

		// class Aio_prop_cliff_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_cliff_01_bp__io_prop_cliff_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_cliff_01_bp_C, 0x0268);
		}

		// class USkill_Spawn_Drop_C : public USkill_Spawn_C
		TEST_METHOD(BlueprintGeneratedClass__Skill_Spawn_Drop__Skill_Spawn_Drop_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Spawn_Drop_C, 0x0540);
		}

		// class Ugobgeneric_anim_bp_C : public UTLAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__gobgeneric_anim_bp__gobgeneric_anim_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugobgeneric_anim_bp_C, UberGraphFrame, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugobgeneric_anim_bp_C, AnimGraphNode_Root, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugobgeneric_anim_bp_C, AnimGraphNode_BlendSpacePlayer, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugobgeneric_anim_bp_C, TLAnimGraphNode_Slot, 0x0730);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ugobgeneric_anim_bp_C, 0x0780);
		}

		// class UGenericModalWidgetEmpty_C : public UGenericModalWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__GenericModalWidgetEmpty__GenericModalWidgetEmpty_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidgetEmpty_C, UberGraphFrame, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidgetEmpty_C, show, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidgetEmpty_C, Blur, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidgetEmpty_C, ContentPanel, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidgetEmpty_C, GamepadButtonLegend, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidgetEmpty_C, OuterFrame, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidgetEmpty_C, Style_CloseButton, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidgetEmpty_C, DefaultBodyText, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidgetEmpty_C, DefaultTitleText, 0x07E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericModalWidgetEmpty_C, 0x0800);
		}

		// class UFortFadeMaterialSwapComponent_C : public UFadeMaterialSwapComponent
		TEST_METHOD(BlueprintGeneratedClass__FortFadeMaterialSwapComponent__FortFadeMaterialSwapComponent_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFortFadeMaterialSwapComponent_C, 0x00D8);
		}

		// class AItemSpawnerBase_C : public AItemSpawner
		TEST_METHOD(BlueprintGeneratedClass__ItemSpawnerBase__ItemSpawnerBase_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AItemSpawnerBase_C, 0x0280);
		}

		// class UNarratorTraitMonitorComponent_C : public UActiveTraitMonitorComponent
		TEST_METHOD(BlueprintGeneratedClass__NarratorTraitMonitorComponent__NarratorTraitMonitorComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNarratorTraitMonitorComponent_C, UberGraphFrame, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNarratorTraitMonitorComponent_C, QuipReference, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNarratorTraitMonitorComponent_C, 0x00D9);
		}

		// class Uss_anim_charactercreate_bp_C : public UTLCharacterSelectAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__ss_anim_charactercreate_bp__ss_anim_charactercreate_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Uss_anim_charactercreate_bp_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uss_anim_charactercreate_bp_C, AnimGraphNode_Root, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uss_anim_charactercreate_bp_C, AnimGraphNode_TwoWayBlend, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uss_anim_charactercreate_bp_C, AnimGraphNode_PoseSnapshot, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uss_anim_charactercreate_bp_C, AnimGraphNode_Slot, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uss_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer, 0x0538);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Uss_anim_charactercreate_bp_C, 0x05B8);
		}

		// class Urm_f_BaseItems_C : public UPlayer_BaseItems_C
		TEST_METHOD(BlueprintGeneratedClass__rm_f_BaseItems__rm_f_BaseItems_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Urm_f_BaseItems_C, 0x0078);
		}

		// class APlayerPortrait_Forged_bp_C : public APlayerPortrait_Base_bp_C
		TEST_METHOD(BlueprintGeneratedClass__PlayerPortrait_Forged_bp__PlayerPortrait_Forged_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerPortrait_Forged_bp_C, UberGraphFrame, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerPortrait_Forged_bp_C, Wardrobe, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerPortrait_Forged_bp_C, 0x0420);
		}

		// class Udm_m_BaseItems_C : public UPlayer_BaseItems_C
		TEST_METHOD(BlueprintGeneratedClass__dm_m_baseitems__dm_m_BaseItems_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Udm_m_BaseItems_C, 0x0078);
		}

		// class ASkillShape_Digitus_C : public ASkillShapeCone_C
		TEST_METHOD(BlueprintGeneratedClass__SkillShape_Digitus__SkillShape_Digitus_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_Digitus_C, vfx_wpn_digitus_channel_01_p, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkillShape_Digitus_C, 0x0298);
		}

		// class USkill_Basic_Digitus_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_Basic_Digitus__Skill_Basic_Digitus_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Basic_Digitus_C, Damage, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Basic_Digitus_C, 0x0544);
		}

		// class UCursedCaptainResourceBar_C : public UCursedCaptainResourceBar
		TEST_METHOD(WidgetBlueprintGeneratedClass__CursedCaptainResourceBar__CursedCaptainResourceBar_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, UberGraphFrame, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, CoinDrop, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, glow, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, _12pips, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, _15pips, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, CoinFlip, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, CursedCaptainResourcePipFlip, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, CursedCaptainResourcePipFlip_C_1, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, CursedCaptainResourcePipFlip_C_2, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, CursedCaptainResourcePipFlip_C_3, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, CursedCaptainResourcePipFlip_C_4, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, CursedCaptainResourcePipFlip_C_5, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, CursedCaptainResourcePipFlip_C_6, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, CursedCaptainResourcePipFlip_C_7, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, CursedCaptainResourcePipFlip_C_8, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, CursedCaptainResourcePipFlip_C_9, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, CursedCaptainResourcePipFlip_C_10, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, CursedCaptainResourcePipFlip_C_11, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, CursedCaptainResourcePipFlip_C_12, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, CursedCaptainResourcePipFlip_C_13, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, CursedCaptainResourcePipFlip_C_14, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, CursedCaptainResourcePipFlip_C_15, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, CursedCaptainResourcePipFlip_C_16, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, CursedCaptainResourcePipFlip_C_17, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, CursedCaptainResourcePipFlip_C_18, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, CursedCaptainResourcePipFlip_C_19, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, CursedCaptainResourcePipFlip_C_20, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, CursedCaptainResourcePipFlip_C_21, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, CursedCaptainResourcePipFlip_C_22, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, CursedCaptainResourcePipFlip_C_23, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, CursedCaptainResourcePipFlip_C_24, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, CursedCaptainResourcePipFlip_C_25, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, CursedCaptainResourcePipFlip_C_26, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, CursedCaptainResourceSkullGlowLoop, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, DefaultResource, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, Framing, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, LegendaryResource, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, ResourceSwitcher, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, TLImage, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, TLImage_227, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, TLImage_296, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar_C, TooltipMenuAnchor, 0x07F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCursedCaptainResourceBar_C, 0x07F8);
		}

		// class UDyeWidget_C : public UDyeWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DyeWidget__DyeWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDyeWidget_C, UberGraphFrame, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDyeWidget_C, Button, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDyeWidget_C, DyeImage, 0x0670);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDyeWidget_C, 0x0678);
		}

		// class UForgedWhistleSteam_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ForgedWhistleSteam__ForgedWhistleSteam_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedWhistleSteam_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedWhistleSteam_C, Steamblow, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedWhistleSteam_C, ForgedSteamLoop_C_1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedWhistleSteam_C, ForgedSteamLoop_C_3, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedWhistleSteam_C, ForgedSteamLoop_C_10, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedWhistleSteam_C, ForgedSteamLoop_C_11, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedWhistleSteam_C, ForgedSteamLoop_C_12, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedWhistleSteam_C, ForgedSteamLoop_C_13, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedWhistleSteam_C, TLImage_160, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedWhistleSteam_C, TLImage_162, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedWhistleSteam_C, TLImage_163, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedWhistleSteam_C, TLImage_164, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForgedWhistleSteam_C, 0x02C0);
		}

		// class UStatusEffect_Charged_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Charged__StatusEffect_Charged_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Charged_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Charged_C, ExtraDescription, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Charged_C, 0x02A0);
		}

		// class ASkillShape_DoubleCross_C : public ASkillShapeCone_C
		TEST_METHOD(BlueprintGeneratedClass__SkillShape_DoubleCross__SkillShape_DoubleCross_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_DoubleCross_C, vfx_CC_double_cross_flash_01_p2, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_DoubleCross_C, vfx_CC_double_cross_flash_01_p, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_DoubleCross_C, shadow_decal, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_DoubleCross_C, cross_swipe_02, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_DoubleCross_C, cross_swipe_01, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkillShape_DoubleCross_C, 0x02B8);
		}

		// class USkill_Death_Player_C : public USkill_Death_C
		TEST_METHOD(BlueprintGeneratedClass__Skill_Death_Player__Skill_Death_Player_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Death_Player_C, 0x0540);
		}

		// class USkill_PlayerPortalToWaypoint_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_PlayerPortalToWaypoint__Skill_PlayerPortalToWaypoint_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_PlayerPortalToWaypoint_C, 0x0540);
		}

		// class USkill_PlayerTravel_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_PlayerTravel__Skill_PlayerTravel_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_PlayerTravel_C, 0x0540);
		}

		// class USkill_Sharpshooter_TriShot_C : public USkill_Sharpshooter_Base_C
		TEST_METHOD(BlueprintGeneratedClass__Skill_Sharpshooter_TriShot__Skill_Sharpshooter_TriShot_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Sharpshooter_TriShot_C, 0x0541);
		}

		// class UPlayerNameplate_C : public UNameplate
		TEST_METHOD(WidgetBlueprintGeneratedClass__PlayerNameplate__PlayerNameplate_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNameplate_C, DifficultyIcon, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNameplate_C, FazeerBling, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNameplate_C, LevelTextBlock, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNameplate_C, TLImage_154, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNameplate_C, TLImage_156, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNameplate_C, TLImage_157, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNameplate_C, TLImage_158, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNameplate_C, TLTextBlock_2, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNameplate_C, TLTextBlock_3, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNameplate_C, TLTextBlock_4, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerNameplate_C, 0x02C0);
		}

		// class UStatusEffect_PoisonCurePotion_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_PoisonCurePotion__StatusEffect_PoisonCurePotion_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_PoisonCurePotion_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_PoisonCurePotion_C, 0x0288);
		}

		// class UStatusEffect_Potion_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Potion__StatusEffect_Potion_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Potion_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Potion_C, 0x0288);
		}

		// class ABasePotion_C : public ABaseAutoPickupItem_C
		TEST_METHOD(BlueprintGeneratedClass__BasePotion__BasePotion_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePotion_C, UberGraphFrame, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePotion_C, SkillList, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePotion_C, PotionColor, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePotion_C, PotionPickup, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePotion_C, PotionWidget, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABasePotion_C, 0x0458);
		}

		// class ASkillShape_Shasta_C : public ASkillShapeSphere_C
		TEST_METHOD(BlueprintGeneratedClass__SkillShape_Shasta__SkillShape_Shasta_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkillShape_Shasta_C, 0x0290);
		}

		// class USkill_Revive_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_Revive__Skill_Revive_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Revive_C, 0x0540);
		}

		// class AHazard_Forged_PoisonDart_C : public AHazard
		TEST_METHOD(BlueprintGeneratedClass__Hazard_Forged_PoisonDart__Hazard_Forged_PoisonDart_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Forged_PoisonDart_C, ground_shadow_decal, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Forged_PoisonDart_C, toxic_pool, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Forged_PoisonDart_C, Capsule, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Forged_PoisonDart_C, DefaultSceneRoot, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHazard_Forged_PoisonDart_C, 0x0460);
		}

		// class APlayerLightRig_bp_C : public APlayerLight
		TEST_METHOD(BlueprintGeneratedClass__PlayerLightRig_bp__PlayerLightRig_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerLightRig_bp_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerLightRig_bp_C, GroundSpotToPlayer, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerLightRig_bp_C, GroundSpot, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerLightRig_bp_C, Spot, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerLightRig_bp_C, Key, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerLightRig_bp_C, Fill, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerLightRig_bp_C, KeyRot, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerLightRig_bp_C, FillRot, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerLightRig_bp_C, Ground, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerLightRig_bp_C, Back, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerLightRig_bp_C, Rotation, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerLightRig_bp_C, Scene, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerLightRig_bp_C, FillBoost, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerLightRig_bp_C, KeyBoost, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerLightRig_bp_C, GroundBoost, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerLightRig_bp_C, 0x02A4);
		}

		// class AMissile_Goblin_Gunner_C : public AMissileBase_C
		TEST_METHOD(BlueprintGeneratedClass__Missile_Goblin_Gunner__Missile_Goblin_Gunner_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_Goblin_Gunner_C, StaticMesh, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_Goblin_Gunner_C, ParticleSystem, 0x0688);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMissile_Goblin_Gunner_C, 0x0690);
		}

		// class USharpshooterGoblin_inv_C : public UTLInventoryContainerMinions
		TEST_METHOD(BlueprintGeneratedClass__SharpshooterGoblin_inv__SharpshooterGoblin_inv_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USharpshooterGoblin_inv_C, 0x01F8);
		}

		// class Uaccount_items_inv_C : public UTLInventoryContainerAccountItems
		TEST_METHOD(BlueprintGeneratedClass__account_items_inv__account_items_inv_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Uaccount_items_inv_C, 0x0200);
		}

		// class ABaseAreaHazard_C : public AHazard
		TEST_METHOD(BlueprintGeneratedClass__BaseAreaHazard__BaseAreaHazard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseAreaHazard_C, UberGraphFrame, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseAreaHazard_C, Sphere, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseAreaHazard_C, DefaultSceneRoot, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseAreaHazard_C, 0x0458);
		}

		// class UBaseProcSkill_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__BaseProcSkill__BaseProcSkill_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseProcSkill_C, ProcTag, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseProcSkill_C, StatusEffect, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseProcSkill_C, StatusEffectOnPlayer, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseProcSkill_C, ProcRowName, 0x0558);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseProcSkill_C, 0x0560);
		}

		// class ASkillshape_ConsecrationKnockback_C : public ASkillShapeSphere_C
		TEST_METHOD(BlueprintGeneratedClass__Skillshape_ConsecrationKnockback__Skillshape_ConsecrationKnockback_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkillshape_ConsecrationKnockback_C, 0x0290);
		}

		// class Umiscsinglejoint_bp_C : public UTLAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__miscsinglejoint_bp__miscsinglejoint_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Umiscsinglejoint_bp_C, UberGraphFrame, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::Umiscsinglejoint_bp_C, AnimGraphNode_Root, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::Umiscsinglejoint_bp_C, AnimGraphNode_BlendSpacePlayer, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::Umiscsinglejoint_bp_C, TLAnimGraphNode_Slot, 0x0730);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Umiscsinglejoint_bp_C, 0x0780);
		}

		// class Aio_floor_dock_03_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_floor_dock_03_bp__io_floor_dock_03_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_floor_dock_03_bp_C, 0x0268);
		}

		// class Aio_floor_planks_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_floor_planks_01_bp__io_floor_planks_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_floor_planks_01_bp_C, 0x0268);
		}

		// class Agob_prop_crategrp_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_prop_crategrp_01_bp__gob_prop_crategrp_01_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_crategrp_01_bp_C, Box1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_crategrp_01_bp_C, Box, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_prop_crategrp_01_bp_C, 0x0278);
		}

		// class Aio_wall_cnr_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_wall_cnr_01_bp__io_wall_cnr_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_wall_cnr_01_bp_C, 0x0268);
		}

		// class Aio_wall_top_05x05_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_wall_top_05x05_02_bp__io_wall_top_05x05_02_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_wall_top_05x05_02_bp_C, Box, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_wall_top_05x05_02_bp_C, 0x0270);
		}

		// class Aio_wall_topnorail_05x05_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_wall_topnorail_05x05_01_bp__io_wall_topnorail_05x05_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_wall_topnorail_05x05_01_bp_C, 0x0268);
		}

		// class AMonsterSpawnerBase_C : public AMonsterSpawner
		TEST_METHOD(BlueprintGeneratedClass__MonsterSpawnerBase__MonsterSpawnerBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawnerBase_C, DefaultSceneRoot, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMonsterSpawnerBase_C, 0x0318);
		}

		// class ACritterController_C : public AAIController
		TEST_METHOD(BlueprintGeneratedClass__CritterController__CritterController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACritterController_C, UberGraphFrame, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACritterController_C, 0x0330);
		}

		// class Aio_prop_stairs_set_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_stairs_set_01_bp__io_prop_stairs_set_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_stairs_set_01_bp_C, 0x0268);
		}

		// class Aio_prop_plank_ring_a_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_plank_ring_a_bp__io_prop_plank_ring_a_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_plank_ring_a_bp_C, 0x0268);
		}

		// class Aio_prop_ladder_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_ladder_01_bp__io_prop_ladder_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_ladder_01_bp_C, 0x0268);
		}

		// class Aio_prop_lamppost_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_lamppost_02_bp__io_prop_lamppost_02_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_lamppost_02_bp_C, SwayAmount, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_lamppost_02_bp_C, 0x026C);
		}

		// class Aio_prop_firering_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_firering_01_bp__io_prop_firering_01_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_firering_01_bp_C, Decal, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_firering_01_bp_C, Box, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_firering_01_bp_C, FMODAudio, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_firering_01_bp_C, PointLight, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_firering_01_bp_C, vfx_env_campfire_02_p, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_firering_01_bp_C, 0x0290);
		}

		// class UStatusEffect_BloodDrinker_Bleed_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_BloodDrinker_Bleed__StatusEffect_BloodDrinker_Bleed_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_BloodDrinker_Bleed_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_BloodDrinker_Bleed_C, 0x0288);
		}

		// class UStatusEffect_Damnation_C : public UStatusEffectBase_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Damnation__StatusEffect_Damnation_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Damnation_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Damnation_C, 0x0288);
		}

		// class UStatusEffect_TravelMenu_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_TravelMenu__StatusEffect_TravelMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_TravelMenu_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_TravelMenu_C, 0x0288);
		}

		// class UStatusEffect_PlayerPortal_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_PlayerPortal__StatusEffect_PlayerPortal_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_PlayerPortal_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_PlayerPortal_C, 0x0288);
		}

		// class UAmbisonicsEncodingSettings : public USoundfieldEncodingSettingsBase
		TEST_METHOD(Class__SoundFields__AmbisonicsEncodingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmbisonicsEncodingSettings, AmbisonicsOrder, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmbisonicsEncodingSettings, UnknownData_WW3B, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAmbisonicsEncodingSettings, 0x0030);
		}

		// class UInbox_C : public UInboxWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Inbox__Inbox_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInbox_C, UberGraphFrame, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInbox_C, show, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInbox_C, CloseMenuButton, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInbox_C, Divider_C_1, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInbox_C, EmptyFullSwitcher, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInbox_C, EmptyWidget, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInbox_C, FiligreeLeft, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInbox_C, GamepadButtonLegend, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInbox_C, InboxEntryListWidget_133, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInbox_C, TLImage_2, 0x06A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInbox_C, 0x06A8);
		}

		// class UDescriptionTooltip_C : public UDescriptionTooltipWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DescriptionTooltip__DescriptionTooltip_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDescriptionTooltip_C, UberGraphFrame, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDescriptionTooltip_C, DescriptionContainer, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDescriptionTooltip_C, DescriptionText, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDescriptionTooltip_C, FiligreeLeft, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDescriptionTooltip_C, HeaderText, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDescriptionTooltip_C, TLImage_2, 0x06A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDescriptionTooltip_C, 0x06B0);
		}

		// class UDebugTraitsPanel_C : public UActorDebugInfoWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DebugTraitsPanel__DebugTraitsPanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugTraitsPanel_C, UberGraphFrame, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugTraitsPanel_C, GameplayTags, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugTraitsPanel_C, GameplayTagsButton, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugTraitsPanel_C, Inventory, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugTraitsPanel_C, InventoryButton, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugTraitsPanel_C, Skills, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugTraitsPanel_C, SkillsButton, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugTraitsPanel_C, Switcher, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugTraitsPanel_C, TLTextBlock_1, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugTraitsPanel_C, TLTextBlock_4, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugTraitsPanel_C, TLTextBlock_6, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugTraitsPanel_C, TLTextBlock_7, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugTraitsPanel_C, TLTextBlock_79, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugTraitsPanel_C, Traits, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugTraitsPanel_C, TraitsButton, 0x06B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugTraitsPanel_C, 0x06C0);
		}

		// class UFrameTooltip_Style_C : public UTLBorderStyle
		TEST_METHOD(BlueprintGeneratedClass__FrameTooltip_Style__FrameTooltip_Style_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrameTooltip_Style_C, 0x00F8);
		}

		// class UFrameInnerD_Style_C : public UTLBorderStyle
		TEST_METHOD(BlueprintGeneratedClass__FrameInnerD_Style__FrameInnerD_Style_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrameInnerD_Style_C, 0x00F8);
		}

		// class UErrorBody2TextStyle_C : public ULightBody1TextStyle_C
		TEST_METHOD(BlueprintGeneratedClass__ErrorBody2TextStyle__ErrorBody2TextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UErrorBody2TextStyle_C, 0x00A8);
		}

		// class UPotionFetchingDialog_C : public UPetShoppingListModal
		TEST_METHOD(WidgetBlueprintGeneratedClass__PotionFetchingDialog__PotionFetchingDialog_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionFetchingDialog_C, UberGraphFrame, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionFetchingDialog_C, show, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionFetchingDialog_C, CloseButton, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionFetchingDialog_C, Cost, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionFetchingDialog_C, FetchButton, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionFetchingDialog_C, GamepadButtonLegend, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionFetchingDialog_C, GoldLimitWidget_C_1, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionFetchingDialog_C, LongDescription, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionFetchingDialog_C, LongDescriptionContainer, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionFetchingDialog_C, PetShoppingEntryListWidget_1, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionFetchingDialog_C, PurchaseButtonText, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionFetchingDialog_C, PurchaseSection, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionFetchingDialog_C, SmallHeader_C_1, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionFetchingDialog_C, Style_CloseButtonSmall, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionFetchingDialog_C, TLImage_3, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionFetchingDialog_C, TLImage_6, 0x0898);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPotionFetchingDialog_C, 0x08A0);
		}

		// class UStatusEffect_GoblinSacrificeProp_2_C : public UStatusEffect_LuckTree_Base_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_GoblinSacrificeProp_3__StatusEffect_GoblinSacrificeProp_2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_GoblinSacrificeProp_2_C, 0x0280);
		}

		// class UStatusEffect_GoblinSacrificeProp_5_C : public UStatusEffect_LuckTree_Base_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_GoblinSacrificeProp_6__StatusEffect_GoblinSacrificeProp_5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_GoblinSacrificeProp_5_C, 0x0280);
		}

		// class UStatusEffect_HyvidSacrificeProp_3_C : public UStatusEffect_LuckTree_Base_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_HyvidSacrificeProp_4__StatusEffect_HyvidSacrificeProp_3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_HyvidSacrificeProp_3_C, 0x0280);
		}

		// class UTimeOfDay_CharacterSelect_C : public UBaseTimeOfDayHandler_C
		TEST_METHOD(BlueprintGeneratedClass__TimeOfDay_CharacterSelect__TimeOfDay_CharacterSelect_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeOfDay_CharacterSelect_C, 0x0A60);
		}

		// class Adm_charactercreate_sequencer_C : public ACinematicActor
		TEST_METHOD(BlueprintGeneratedClass__dm_charactercreate_sequencer__dm_charactercreate_sequencer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Adm_charactercreate_sequencer_C, Digitus, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::Adm_charactercreate_sequencer_C, StaticMesh, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::Adm_charactercreate_sequencer_C, WeaponL, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::Adm_charactercreate_sequencer_C, Shoulders, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::Adm_charactercreate_sequencer_C, Feet, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::Adm_charactercreate_sequencer_C, hands, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::Adm_charactercreate_sequencer_C, Head, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::Adm_charactercreate_sequencer_C, Pants, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::Adm_charactercreate_sequencer_C, Hair, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::Adm_charactercreate_sequencer_C, Torso, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::Adm_charactercreate_sequencer_C, DefaultRootComponent, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::Adm_charactercreate_sequencer_C, HairMesh, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::Adm_charactercreate_sequencer_C, HeadMesh, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::Adm_charactercreate_sequencer_C, TorsoMesh, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::Adm_charactercreate_sequencer_C, PantsMesh, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::Adm_charactercreate_sequencer_C, WeaponMesh, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::Adm_charactercreate_sequencer_C, handsmesh, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Adm_charactercreate_sequencer_C, FeetMesh, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Adm_charactercreate_sequencer_C, ShoulderMesh, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Adm_charactercreate_sequencer_C, DyeSet, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Adm_charactercreate_sequencer_C, Customization, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Adm_charactercreate_sequencer_C, 0x02E0);
		}

		// class UCraftingRecipes_C : public URecipesWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CraftingRecipes__CraftingRecipes_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipes_C, ShowSlide, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipes_C, show, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipes_C, CraftingQueueRecipes, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipes_C, CraftingRecipeDetailsWidget, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingRecipes_C, 0x06A0);
		}

		// class UStatusEffect_Spawn_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Spawn__StatusEffect_Spawn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Spawn_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Spawn_C, 0x0288);
		}

		// class UStatusEffect_PetTether_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_PetTether__StatusEffect_PetTether_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_PetTether_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_PetTether_C, 0x0288);
		}

		// class AWeaponSwordBase_C : public AWeaponStaticBase_C
		TEST_METHOD(BlueprintGeneratedClass__WeaponSwordBase__WeaponSwordBase_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWeaponSwordBase_C, 0x0450);
		}

		// class Anpcsquash_04_bp_C : public Anpcbasegadget_bp_C
		TEST_METHOD(BlueprintGeneratedClass__npcsquash_04_bp__npcsquash_04_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Anpcsquash_04_bp_C, MapMarker, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Anpcsquash_04_bp_C, Vendor, 0x04C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Anpcsquash_04_bp_C, 0x04C8);
		}

		// class Ufort_prop_mapworks_a_anim_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__fort_prop_mapworks_a_anim__fort_prop_mapworks_a_anim_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Ufort_prop_mapworks_a_anim_C, UnknownData_LLIV, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ufort_prop_mapworks_a_anim_C, UberGraphFrame, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ufort_prop_mapworks_a_anim_C, AnimGraphNode_Root, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ufort_prop_mapworks_a_anim_C, AnimGraphNode_SequencePlayer, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ufort_prop_mapworks_a_anim_C, 0x0378);
		}

		// class Agbl_prop_punchingbag_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gbl_prop_punchingbag_01_bp__gbl_prop_punchingbag_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agbl_prop_punchingbag_01_bp_C, 0x0268);
		}

		// class Aio_prop_brickpile_03_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_brickpile_03_bp__io_prop_brickpile_03_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_brickpile_03_bp_C, 0x0268);
		}

		// class UTimeOfDay_MainMenu_02_C : public UBaseTimeOfDayHandler_C
		TEST_METHOD(BlueprintGeneratedClass__TimeOfDay_MainMenu_02__TimeOfDay_MainMenu_02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeOfDay_MainMenu_02_C, 0x0A60);
		}

		// class UDye_Rags_C : public UDye_Base_C
		TEST_METHOD(BlueprintGeneratedClass__Dye_Rags__Dye_Rags_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDye_Rags_C, 0x03F8);
		}

		// class Arm_BaseHelm_C : public ABaseHelm_C
		TEST_METHOD(BlueprintGeneratedClass__rm_BaseHelm__rm_BaseHelm_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Arm_BaseHelm_C, 0x0428);
		}

		// class UDye_MonoYellow_C : public UDye_Base_C
		TEST_METHOD(BlueprintGeneratedClass__Dye_MonoYellow__Dye_MonoYellow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDye_MonoYellow_C, 0x03F8);
		}

		// class Ass_BaseChest_C : public ABaseChest_C
		TEST_METHOD(BlueprintGeneratedClass__ss_BaseChest__ss_BaseChest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ass_BaseChest_C, 0x0428);
		}

		// class UStatusEffect_ChargeBar_Master_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_ChargeBar_Master__StatusEffect_ChargeBar_Master_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_ChargeBar_Master_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_ChargeBar_Master_C, ChargeBarName, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_ChargeBar_Master_C, Regen, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_ChargeBar_Master_C, Partial, 0x0294);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_ChargeBar_Master_C, 0x0295);
		}

		// class UProc_Sharpshooter_PlayerShastaBuff_C : public UBaseProcSkill_C
		TEST_METHOD(BlueprintGeneratedClass__Proc_Sharpshooter_PlayerShastaBuff__Proc_Sharpshooter_PlayerShastaBuff_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProc_Sharpshooter_PlayerShastaBuff_C, healing, 0x0560);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProc_Sharpshooter_PlayerShastaBuff_C, 0x0564);
		}

		// class UProcSkill_EmberWeaponCharged_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__ProcSkill_EmberWeaponCharged__ProcSkill_EmberWeaponCharged_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProcSkill_EmberWeaponCharged_C, 0x0540);
		}

		// class Ass_m_t0a_helm_bp_C : public Ass_BaseHelm_C
		TEST_METHOD(BlueprintGeneratedClass__ss_m_t0a_helm_bp__ss_m_t0a_helm_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ass_m_t0a_helm_bp_C, 0x0428);
		}

		// class ABigBossLevelSequenceActor1_C : public ALevelSequenceActor
		TEST_METHOD(BlueprintGeneratedClass__BigBossLevelSequenceActor1__BigBossLevelSequenceActor1_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABigBossLevelSequenceActor1_C, UberGraphFrame, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABigBossLevelSequenceActor1_C, 0x02A8);
		}

		// class Aw_hammer_2h_graye_t3a_bp_C : public AWeaponHammerBase_C
		TEST_METHOD(BlueprintGeneratedClass__w_hammer_2h_graye_t3a_bp__w_hammer_2h_graye_t3a_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aw_hammer_2h_graye_t3a_bp_C, 0x0450);
		}

		// class UStatusEffect_Sharpshooter_ShastaBonus_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Sharpshooter_ShastaBonus__StatusEffect_Sharpshooter_ShastaBonus_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Sharpshooter_ShastaBonus_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Sharpshooter_ShastaBonus_C, 0x0288);
		}

		// class UStatusEffect_ShastaLegendaryBonus_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_ShastaLegendaryBonus__StatusEffect_ShastaLegendaryBonus_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_ShastaLegendaryBonus_C, 0x0280);
		}

		// class UStatusEffect_Sharpshooter_ScoutBonus_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Sharpshooter_ScoutBonus__StatusEffect_Sharpshooter_ScoutBonus_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Sharpshooter_ScoutBonus_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Sharpshooter_ScoutBonus_C, 0x0288);
		}

		// class USkill_PetLifeSteal_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_PetLifeSteal__Skill_PetLifeSteal_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_PetLifeSteal_C, Chance, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_PetLifeSteal_C, LifestealAmount, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_PetLifeSteal_C, NewVar_1, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_PetLifeSteal_C, 0x0558);
		}

		// class UStatusEffect_Mount_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Mount__StatusEffect_Mount_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Mount_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Mount_C, 0x0288);
		}

		// class UStatusEffect_Assassinate_Fallback_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Assassinate_Fallback__StatusEffect_Assassinate_Fallback_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Assassinate_Fallback_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Assassinate_Fallback_C, OriginalLocation, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Assassinate_Fallback_C, 0x0294);
		}

		// class ASkillShape_RapidStrike_C : public ASkillShapeCone_C
		TEST_METHOD(BlueprintGeneratedClass__SkillShape_RapidStrike__SkillShape_RapidStrike_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkillShape_RapidStrike_C, 0x0290);
		}

		// class Ass_BaseChest_Modular_C : public Ass_BaseChest_C
		TEST_METHOD(BlueprintGeneratedClass__ss_BaseChest_Modular__ss_BaseChest_Modular_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_BaseChest_Modular_C, Waist, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_BaseChest_Modular_C, Sleeve_Right, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ass_BaseChest_Modular_C, Sleeve_Left, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ass_BaseChest_Modular_C, 0x0440);
		}

		// class UStatusEffect_DoubleCross_StartProc_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_DoubleCross_StartProc__StatusEffect_DoubleCross_StartProc_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_DoubleCross_StartProc_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_DoubleCross_StartProc_C, 0x0288);
		}

		// class USkill_CursedCaptain_Base_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_CursedCaptain_Base__Skill_CursedCaptain_Base_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_CursedCaptain_Base_C, 0x0540);
		}

		// class Aio_prop_wagonwheel_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_wagonwheel_01_bp__io_prop_wagonwheel_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_wagonwheel_01_bp_C, 0x0268);
		}

		// class Aio_prop_treechopped_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_treechopped_01_bp__io_prop_treechopped_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_treechopped_01_bp_C, 0x0268);
		}

		// class Aio_prop_roundtable_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_roundtable_02_bp__io_prop_roundtable_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_roundtable_02_bp_C, 0x0268);
		}

		// class Aio_prop_ruins_wall_04_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_ruins_wall_04_bp__io_prop_ruins_wall_04_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_ruins_wall_04_bp_C, 0x0268);
		}

		// class AMonsterSpawner_Boss_C : public AMonsterSpawnerBase_C
		TEST_METHOD(BlueprintGeneratedClass__MonsterSpawner_Boss__MonsterSpawner_Boss_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner_Boss_C, MonsterSpawnPosition, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner_Boss_C, MonsterSpawnerBoss, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMonsterSpawner_Boss_C, 0x0328);
		}

		// class Aio_floor_dock_ropes_03b_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_floor_dock_ropes_03b_bp__io_floor_dock_ropes_03b_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_floor_dock_ropes_03b_bp_C, 0x0268);
		}

		// class Aio_floor_upper_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_floor_upper_01_bp__io_floor_upper_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_floor_upper_01_bp_C, 0x0268);
		}

		// class Aio_prop_gate_bricks_a_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_gate_bricks_a_bp__io_prop_gate_bricks_a_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_gate_bricks_a_bp_C, 0x0268);
		}

		// class UActorComponent : public UObject
		TEST_METHOD(Class__Engine__ActorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_WGU7, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, PrimaryComponentTick, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, ComponentTags, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, AssetUserData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_D276, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UCSSerializationIndex, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_4XS3, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, CreationMethod, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, OnComponentActivated, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, OnComponentDeactivated, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_E9SD, 0x008F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UCSModifiedProperties, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_RC5I, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorComponent, 0x00B0);
		}

		// class AActor : public UObject
		TEST_METHOD(Class__Engine__Actor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, PrimaryActorTick, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UpdateOverlapsMethodDuringLevelStreaming, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, DefaultUpdateOverlapsMethodDuringLevelStreaming, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, RemoteRole, 0x005F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ReplicatedMovement, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InitialLifeSpan, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, CustomTimeDilation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_X4NQ, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, AttachmentReplication, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Owner, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetDriverName, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Role, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetDormancy, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, SpawnCollisionHandlingMethod, 0x00F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, AutoReceiveInput, 0x00F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InputPriority, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InputComponent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetCullDistanceSquared, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetTag, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetUpdateFrequency, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, MinNetUpdateFrequency, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetPriority, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_K0CV, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Instigator, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Children, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, RootComponent, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ControllingMatineeActors, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_K17H, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Layers, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ParentComponent, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_0HJM, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Tags, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakeAnyDamage, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakePointDamage, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakeRadialDamage, 0x0182);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorBeginOverlap, 0x0183);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorEndOverlap, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnBeginCursorOver, 0x0185);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnEndCursorOver, 0x0186);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnClicked, 0x0187);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnReleased, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchBegin, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchEnd, 0x018A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchEnter, 0x018B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchLeave, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorHit, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnDestroyed, 0x018E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnEndPlay, 0x018F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_HYQM, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InstanceComponents, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, BlueprintCreatedComponents, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_YSYI, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AActor, 0x0220);
		}

		// class USceneComponent : public UActorComponent
		TEST_METHOD(Class__Engine__SceneComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_HBVY, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, PhysicsVolume, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachParent, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachSocketName, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachChildren, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, ClientAttachedChildren, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_ODCW, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeLocation, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeRotation, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeScale3D, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, ComponentVelocity, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_ZO7V, 0x014E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, Mobility, 0x014F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, DetailMode, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, PhysicsVolumeChangedDelegate, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_JLND, 0x0152);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneComponent, 0x01F8);
		}

		// class UBlueprintFunctionLibrary : public UObject
		TEST_METHOD(Class__Engine__BlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintFunctionLibrary, 0x0028);
		}

		// class UPrimitiveComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PrimitiveComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_OYAW, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MinDrawDistance, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LDMaxDrawDistance, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CachedMaxDrawDistance, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, DepthPriorityGroup, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, ViewOwnerDepthPriorityGroup, 0x020D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, IndirectLightingCacheQuality, 0x020E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LightmapType, 0x020F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, bHasCustomNavigableGeometry, 0x0217);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_ATXJ, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CanCharacterStepUpOn, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LightingChannels, 0x021A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomDepthStencilWriteMask, 0x021B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomDepthStencilValue, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomPrimitiveData, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomPrimitiveDataInternal, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_JNLF, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, TranslucencySortPriority, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VisibilityId, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, RuntimeVirtualTextures, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureLodBias, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureCullMips, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureMinCoverage, 0x0262);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureRenderPassType, 0x0263);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_MAM2, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LpvBiasMultiplier, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_KK99, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, BoundsScale, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_UZJY, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MoveIgnoreActors, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MoveIgnoreComponents, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_13AP, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, BodyInstance, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentHit, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentBeginOverlap, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentEndOverlap, 0x0412);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentWake, 0x0413);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentSleep, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_HDXB, 0x0415);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnBeginCursorOver, 0x0416);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnEndCursorOver, 0x0417);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnClicked, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnReleased, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchBegin, 0x041A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchEnd, 0x041B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchEnter, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchLeave, 0x041D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_QVEI, 0x041E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LODParentPrimitive, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimitiveComponent, 0x0440);
		}

		// class UMeshComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__MeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, OverrideMaterials, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, UnknownData_238Z, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, UnknownData_5JV8, 0x0461);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshComponent, 0x0468);
		}

		// class USkinnedMeshComponent : public UMeshComponent
		TEST_METHOD(Class__Engine__SkinnedMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_ZZAN, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, SkeletalMesh, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MasterPoseComponent, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, SkinCacheUsage, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, VertexOffsetUsage, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_8WJ5, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, PhysicsAssetOverride, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, ForcedLodModel, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MinLodModel, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_ZQDR, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, StreamingDistanceMultiplier, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_K6KH, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, LODInfo, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_TIBF, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, VisibilityBasedAnimTickOption, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_0JZ1, 0x05F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_33QU, 0x05FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CapsuleIndirectShadowMinVisibility, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_31M9, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CachedWorldSpaceBounds, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_RW76, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CachedWorldToLocalTransform, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_S0FJ, 0x0670);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkinnedMeshComponent, 0x0690);
		}

		// class UStreamableRenderAsset : public UObject
		TEST_METHOD(Class__Engine__StreamableRenderAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, UnknownData_SD2P, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, ForceMipLevelsToBeResidentTimestamp, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, NumCinematicMipLevels, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, StreamingIndex, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, CachedCombinedLODBias, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, UnknownData_YIJ4, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamableRenderAsset, 0x0060);
		}

		// class USkeletalMesh : public UStreamableRenderAsset
		TEST_METHOD(Class__Engine__SkeletalMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_J4GG, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Skeleton, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ImportedBounds, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ExtendedBounds, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PositiveBoundsExtension, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, NegativeBoundsExtension, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Materials, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorTable, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, LODInfo, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_TL2A, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MinLOD, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, DisableBelowMinLodStripping, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorAxis, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorFlipAxis, 0x015E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, BodySetup, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PhysicsAsset, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ShadowPhysicsAsset, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, NodeMappingData, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MorphTargets, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_CNIX, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PostProcessAnimBlueprint, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MeshClothingAssets, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SamplingInfo, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, AssetUserData, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Sockets, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_ZRUF, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkinWeightProfiles, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMesh, 0x0398);
		}

		// class UPlayer : public UObject
		TEST_METHOD(Class__Engine__Player)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, UnknownData_CYVU, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, PlayerController, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, CurrentNetSpeed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, ConfiguredInternetSpeed, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, ConfiguredLanSpeed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, UnknownData_8OGH, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayer, 0x0048);
		}

		// class UNetConnection : public UPlayer
		TEST_METHOD(Class__Engine__NetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, Children, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, Driver, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PackageMapClass, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PackageMap, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, OpenChannels, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, SentTemporaries, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, ViewTarget, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, OwningActor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, MaxPacket, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_0ZLS, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PlayerId, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_JKRQ, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, LastReceiveTime, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_ARJC, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, ChannelsToTick, 0x1518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_L3QQ, 0x1528);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetConnection, 0x1AF0);
		}

		// class UNetDriver : public UObject
		TEST_METHOD(Class__Engine__NetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_DRIU, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetConnectionClassName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriverClassName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxDownloadSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_IVIE, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetServerMaxTickRate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxNetTickRate, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxInternetClientRate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxClientRate, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ServerTravelPause, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, SpawnPrioritySeconds, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RelevantTimeout, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, KeepAliveTime, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, InitialConnectTimeout, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ConnectionTimeout, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, TimeoutMultiplierForUnoptimizedBuilds, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, bNoTimeouts, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, bNeverApplyNetworkEmulationSettings, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_EUPS, 0x0086);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ServerConnection, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ClientConnections, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_B1DN, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RecentlyDisconnectedTrackingTime, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_CZOO, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, World, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, WorldPackage, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_AEEU, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetConnectionClass, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriverClass, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_PTJE, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetDriverName, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ChannelDefinitions, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ChannelDefinitionMap, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ActorChannelPool, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_8ZQ6, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, Time, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_C23J, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriver, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_R0KY, 0x06F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetDriver, 0x0748);
		}

		// class UBlueprintAsyncActionBase : public UObject
		TEST_METHOD(Class__Engine__BlueprintAsyncActionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintAsyncActionBase, UnknownData_CNMQ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintAsyncActionBase, 0x0030);
		}

		// class UOnlineBlueprintCallProxyBase : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Engine__OnlineBlueprintCallProxyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineBlueprintCallProxyBase, 0x0030);
		}

		// class UOnlineEngineInterface : public UObject
		TEST_METHOD(Class__Engine__OnlineEngineInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineEngineInterface, 0x0028);
		}

		// class UOnlineSession : public UObject
		TEST_METHOD(Class__Engine__OnlineSession)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSession, 0x0028);
		}

		// class UDataTable : public UObject
		TEST_METHOD(Class__Engine__DataTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, RowStruct, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_C0AT, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_0DOB, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, ImportKeyField, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_JZB9, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataTable, 0x00B0);
		}

		// class UReplicationDriver : public UObject
		TEST_METHOD(Class__Engine__ReplicationDriver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationDriver, 0x0028);
		}

		// class UReplicationConnectionDriver : public UObject
		TEST_METHOD(Class__Engine__ReplicationConnectionDriver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationConnectionDriver, 0x0028);
		}

		// class UMaterialExpression : public UObject
		TEST_METHOD(Class__Engine__MaterialExpression)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Material, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Function, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, UnknownData_MXFZ, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpression, 0x0040);
		}

		// class UMaterialExpressionTextureBase : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, Texture, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureBase, 0x0048);
		}

		// class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, Coordinates, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_LDFP, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSample, 0x0060);
		}

		// class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, ParameterName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, ExpressionGUID, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, Group, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter, 0x0080);
		}

		// class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter2D)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter2D, 0x0080);
		}

		// class APawn : public AActor
		TEST_METHOD(Class__Engine__Pawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_DTQJ, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_836L, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, BaseEyeHeight, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AutoPossessPlayer, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AutoPossessAI, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, RemoteViewPitch, 0x0232);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_PZMW, 0x0233);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AIControllerClass, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, PlayerState, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_2YSY, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, LastHitBy, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, Controller, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_TZO5, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, ControlInputVector, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, LastControlInputVector, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_KOWN, 0x027C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APawn, 0x0280);
		}

		// class ACharacter : public APawn
		TEST_METHOD(Class__Engine__Character)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, Mesh, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CharacterMovement, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CapsuleComponent, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BasedMovement, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedBasedMovement, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, AnimRootMotionTranslationScale, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BaseTranslationOffset, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_NNO5, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BaseRotationOffset, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedServerLastTransformUpdateTimeStamp, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplayLastTransformUpdateTimeStamp, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedMovementMode, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, bInBaseReplication, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_L9O2, 0x032A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CrouchedEyeHeight, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_ERYH, 0x0332);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpKeyHoldTime, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpForceTimeRemaining, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ProxyJumpForceStartedTime, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpMaxHoldTime, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpMaxCount, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpCurrentCount, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpCurrentCountPreJump, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_2CAL, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, OnReachedJumpApex, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_WIYE, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, MovementModeChangedDelegate, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, OnCharacterMovementUpdated, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, SavedRootMotion, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ClientRootMotionParams, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, RootMotionRepMoves, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, RepRootMotion, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACharacter, 0x04B8);
		}

		// class UDataAsset : public UObject
		TEST_METHOD(Class__Engine__DataAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataAsset, NativeClass, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataAsset, 0x0030);
		}

		// class USplineComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__SplineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineCurves, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineInfo, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineRotInfo, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineScaleInfo, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineReparamTable, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bAllowSplineEditingPerInstance, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_HR9E, 0x0511);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, ReparamStepsPerSegment, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, Duration, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bStationaryEndpoints, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bSplineHasBeenEdited, 0x051D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bModifiedByConstructionScript, 0x051E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bInputSplinePointsToConstructionScript, 0x051F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bDrawDebug, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bClosedLoop, 0x0521);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bLoopPositionOverride, 0x0522);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_N2G9, 0x0523);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, LoopPosition, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, DefaultUpVector, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_QFYJ, 0x0534);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineComponent, 0x053C);
		}

		// class USkeletalMeshComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__Engine__SkeletalMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimBlueprintGeneratedClass, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimClass, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimScriptInstance, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, PostProcessAnimInstance, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimationData, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_OVOX, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, RootBoneTranslation, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LineCheckBoundsScale, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_FQDX, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LinkedInstances, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedBoneSpaceTransforms, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedComponentSpaceTransforms, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_NHUX, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, GlobalAnimRateScale, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, KinematicBonesUpdateType, 0x08A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, PhysicsTransformUpdateMode, 0x08A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_RU39, 0x08A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimationMode, 0x08A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_6AJK, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_11E9, 0x08AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_D68C, 0x08B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedAnimCurveUidVersion, 0x08B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, MassMode, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_7H25, 0x08B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UniformMass, 0x08BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TotalMass, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, Density, 0x08C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, MinPerParticleMass, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothBlendWeight, 0x08CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, EdgeStiffness, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, BendingStiffness, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AreaStiffness, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, VolumeStiffness, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, StrainLimitingStiffness, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ShapeTargetStiffness, 0x08E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, bWaitForParallelClothTask, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_SMOF, 0x08E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, DisallowedAnimCurves, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, BodySetup, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_EI6V, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, OnConstraintBroken, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothingSimulationFactory, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_DUXF, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TeleportDistanceThreshold, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TeleportRotationThreshold, 0x09FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_4BVM, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LastPoseTickFrame, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_GZBH, 0x0A0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothingInteractor, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_1IJO, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, OnAnimInitialized, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_IK14, 0x0B40);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshComponent, 0x0ED0);
		}

		// class UAnimInstance : public UObject
		TEST_METHOD(Class__Engine__AnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, CurrentSkeleton, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, RootMotionMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_1UHR, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageBlendingOut, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageStarted, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageEnded, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnAllMontageInstancesEnded, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_IAPW, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, NotifyQueue, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, ActiveAnimNotifyState, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_0YMZ, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimInstance, 0x02B8);
		}

		// class UAssetImportData : public UObject
		TEST_METHOD(Class__Engine__AssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetImportData, 0x0028);
		}

		// class UAssetUserData : public UObject
		TEST_METHOD(Class__Engine__AssetUserData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetUserData, 0x0028);
		}

		// class UFXSystemComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__FXSystemComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFXSystemComponent, 0x0440);
		}

		// class UFXSystemAsset : public UObject
		TEST_METHOD(Class__Engine__FXSystemAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFXSystemAsset, MaxPoolSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFXSystemAsset, PoolPrimeSize, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFXSystemAsset, 0x0030);
		}

		// class UAnimNotify : public UObject
		TEST_METHOD(Class__Engine__AnimNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify, UnknownData_EYTI, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify, 0x0038);
		}

		// class UAnimNotifyState : public UObject
		TEST_METHOD(Class__Engine__AnimNotifyState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState, UnknownData_F3V9, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState, 0x0030);
		}

		// class USaveGame : public UObject
		TEST_METHOD(Class__Engine__SaveGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USaveGame, 0x0028);
		}

		// class AInfo : public AActor
		TEST_METHOD(Class__Engine__Info)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInfo, 0x0220);
		}

		// class AGameModeBase : public AInfo
		TEST_METHOD(Class__Engine__GameModeBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, OptionsString, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameSessionClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameStateClass, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, PlayerControllerClass, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, PlayerStateClass, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, HUDClass, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, DefaultPawnClass, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, SpectatorClass, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ReplaySpectatorPlayerControllerClass, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ServerStatReplicatorClass, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameSession, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameState, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ServerStatReplicator, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, DefaultPlayerName, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, UnknownData_0A8E, 0x02A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameModeBase, 0x02C0);
		}

		// class AGameMode : public AGameModeBase
		TEST_METHOD(Class__Engine__GameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MatchState, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, UnknownData_1XT0, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumSpectators, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumPlayers, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumBots, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MinRespawnDelay, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumTravellingPlayers, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, EngineMessageClass, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, InactivePlayerArray, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, InactivePlayerStateLifeSpan, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MaxInactivePlayers, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, bHandleDedicatedServerReplays, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, UnknownData_NZZL, 0x0301);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameMode, 0x0308);
		}

		// class AGameStateBase : public AInfo
		TEST_METHOD(Class__Engine__GameStateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, GameModeClass, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, AuthorityGameMode, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, SpectatorClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, PlayerArray, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, bReplicatedHasBegunPlay, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, UnknownData_9GL0, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ReplicatedWorldTimeSeconds, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ServerWorldTimeSecondsDelta, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ServerWorldTimeSecondsUpdateFrequency, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, UnknownData_NNAG, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameStateBase, 0x0270);
		}

		// class AGameState : public AGameStateBase
		TEST_METHOD(Class__Engine__GameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, MatchState, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, PreviousMatchState, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, ElapsedTime, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, UnknownData_ER2B, 0x0284);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameState, 0x0290);
		}

		// class AController : public AActor
		TEST_METHOD(Class__Engine__Controller)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_3KZ2, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, PlayerState, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_ST5Z, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, OnInstigatedAnyDamage, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, StateName, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, Pawn, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_JWK0, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, Character, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, TransformComponent, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_WC0V, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, ControlRotation, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_QZI2, 0x0295);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AController, 0x0298);
		}

		// class APlayerController : public AController
		TEST_METHOD(Class__Engine__PlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, Player, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, AcknowledgedPawn, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ControllingDirTrackInst, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, MyHUD, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerCameraManager, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerCameraManagerClass, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, bAutoManageActiveCameraTarget, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_N342, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, TargetViewRotation, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_2P4I, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SmoothTargetViewRotationSpeed, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_I6LR, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HiddenActors, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HiddenPrimitiveComponents, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_81I4, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorStateSynchTime, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorSyncLocation, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorSyncRotation, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ClientCap, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_39BM, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CheatManager, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CheatClass, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerInput, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ActiveForceFeedbackEffects, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_5UDL, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_J9Z7, 0x03D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, NetPlayerIndex, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_W1OY, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PendingSwapConnection, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, NetConnection, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_YD63, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputYawScale, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputPitchScale, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputRollScale, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_2CR0, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ForceFeedbackScale, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ClickEventKeys, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, DefaultMouseCursor, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentMouseCursor, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, DefaultClickTraceChannel, 0x0452);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentClickTraceChannel, 0x0453);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HitResultTraceDistance, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SeamlessTravelCount, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastCompletedSeamlessTravelCount, 0x045A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_0IXY, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InactiveStateInputComponent, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_3KB2, 0x04D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentTouchInterface, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_ZTEO, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SpectatorPawn, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_0Q8I, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, bIsLocalPlayerController, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_HO4G, 0x0555);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SpawnLocation, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_MTFZ, 0x0564);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerController, 0x0570);
		}

		// class UApplicationLifecycleComponent : public UActorComponent
		TEST_METHOD(Class__Engine__ApplicationLifecycleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillDeactivateDelegate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationHasReactivatedDelegate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillEnterBackgroundDelegate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationHasEnteredForegroundDelegate, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillTerminateDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationShouldUnloadResourcesDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationReceivedStartupArgumentsDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, OnTemperatureChangeDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, OnLowPowerModeDelegate, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UApplicationLifecycleComponent, 0x0140);
		}

		// class UCameraShakeBase : public UObject
		TEST_METHOD(Class__Engine__CameraShakeBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeBase, bSingleInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeBase, UnknownData_DIU3, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeBase, ShakeScale, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeBase, CameraManager, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeBase, UnknownData_4LM1, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShakeBase, 0x0098);
		}

		// class USubsystem : public UObject
		TEST_METHOD(Class__Engine__Subsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsystem, UnknownData_1A65, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsystem, 0x0030);
		}

		// class UDynamicSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__DynamicSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicSubsystem, 0x0030);
		}

		// class UEngineSubsystem : public UDynamicSubsystem
		TEST_METHOD(Class__Engine__EngineSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineSubsystem, 0x0030);
		}

		// class UCommandlet : public UObject
		TEST_METHOD(Class__Engine__Commandlet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpUsage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpWebLink, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpParamNames, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpParamDescriptions, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, UnknownData_BMEM, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCommandlet, 0x0080);
		}

		// class USoundEffectPreset : public UObject
		TEST_METHOD(Class__Engine__SoundEffectPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectPreset, UnknownData_ZW8E, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectPreset, 0x0068);
		}

		// class USoundEffectSourcePreset : public USoundEffectPreset
		TEST_METHOD(Class__Engine__SoundEffectSourcePreset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSourcePreset, 0x0068);
		}

		// class USoundEffectSubmixPreset : public USoundEffectPreset
		TEST_METHOD(Class__Engine__SoundEffectSubmixPreset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSubmixPreset, 0x0068);
		}

		// class UGameUserSettings : public UObject
		TEST_METHOD(Class__Engine__GameUserSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseVSync, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseDynamicResolution, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_9SDL, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, ResolutionSizeX, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, ResolutionSizeY, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedResolutionSizeX, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedResolutionSizeY, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, WindowPosX, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, WindowPosY, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, DisplayIndex, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedDisplayIndex, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, FullscreenMode, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastConfirmedFullscreenMode, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, PreferredFullscreenMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, Version, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, AudioQualityLevel, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastConfirmedAudioQualityLevel, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, FrameRateLimit, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_DJSM, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, DesiredScreenWidth, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseDesiredScreenHeight, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_NQM8, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, DesiredScreenHeight, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedDesiredScreenWidth, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedDesiredScreenHeight, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastRecommendedScreenWidth, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastRecommendedScreenHeight, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastCPUBenchmarkResult, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkResult, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_IJJV, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastCPUBenchmarkSteps, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkSteps, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkMultiplier, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseHDRDisplayOutput, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_ZIZM, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, HDRDisplayOutputNits, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseCustomAspectRatio, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_9YWZ, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, CustomAspectRatioFactor, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastConfirmedUseCustomAspectRatio, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_TDH4, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastConfirmedCustomAspectRatioFactor, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_KSR0, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, OnGameUserSettingsUINeedsUpdate, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameUserSettings, 0x0138);
		}

		// class UGameInstance : public UObject
		TEST_METHOD(Class__Engine__GameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_UAZU, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, LocalPlayers, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, OnlineSession, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, ReferencedObjects, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_EI03, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, OnPawnControllerChangedDelegates, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_4HCL, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameInstance, 0x01A8);
		}

		// class UGameInstanceSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__GameInstanceSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameInstanceSubsystem, 0x0030);
		}

		// class UShapeComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ShapeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, ShapeBodySetup, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, AreaClass, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, ShapeColor, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, UnknownData_2GJ9, 0x0455);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShapeComponent, 0x0458);
		}

		// class USphereComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__SphereComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereComponent, UnknownData_RSNV, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereComponent, 0x0460);
		}

		// class UStaticMeshComponent : public UMeshComponent
		TEST_METHOD(Class__Engine__StaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, UnknownData_M9DY, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, PreviousLODLevel, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, MinLOD, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, SubDivisionStepSize, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StaticMesh, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, WireframeColorOverride, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, UnknownData_Q01G, 0x0486);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, OverriddenLightMapRes, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, DistanceFieldIndirectShadowMinVisibility, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, DistanceFieldSelfShadowBias, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StreamingDistanceMultiplier, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, LODData, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StreamingTextureData, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, LightmassSettings, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshComponent, 0x04D0);
		}

		// class ATriggerBase : public AActor
		TEST_METHOD(Class__Engine__TriggerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggerBase, CollisionComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerBase, 0x0228);
		}

		// class ATriggerBox : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerBox)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerBox, 0x0228);
		}

		// class UMovementComponent : public UActorComponent
		TEST_METHOD(Class__Engine__MovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UpdatedComponent, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UpdatedPrimitive, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_FNYV, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, Velocity, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintNormal, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintOrigin, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_6L87, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintAxisSetting, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_2QNE, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovementComponent, 0x00F0);
		}

		// class UNavMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__NavMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, NavAgentProps, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, FixedPathBrakingDistance, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, MovementState, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, UnknownData_88BD, 0x0126);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, PathFollowingComp, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavMovementComponent, 0x0130);
		}

		// class UPawnMovementComponent : public UNavMovementComponent
		TEST_METHOD(Class__Engine__PawnMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnMovementComponent, PawnOwner, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnMovementComponent, 0x0138);
		}

		// class UFloatingPawnMovement : public UPawnMovementComponent
		TEST_METHOD(Class__Engine__FloatingPawnMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, MaxSpeed, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, Acceleration, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, Deceleration, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, TurningBoost, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, UnknownData_0DNK, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatingPawnMovement, 0x0150);
		}

		// class UArrowComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ArrowComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ArrowColor, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ArrowSize, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ArrowLength, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ScreenSize, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, UnknownData_IURI, 0x0451);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrowComponent, 0x045C);
		}

		// class UWorld : public UObject
		TEST_METHOD(Class__Engine__World)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_ZO9P, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PersistentLevel, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NetDriver, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, LineBatcher, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PersistentLineBatcher, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ForegroundLineBatcher, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NetworkManager, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PhysicsCollisionHandler, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ExtraReferencedObjects, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PerModuleDataObjects, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevels, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevelsToConsider, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevelsPrefix, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevelPendingVisibility, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevelPendingInvisibility, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, DemoNetDriver, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, MyParticleEventManager, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, DefaultPhysicsVolume, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_V846, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_MKQI, 0x010F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NavigationSystem, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AuthorityGameMode, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, GameState, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AISystem, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AvoidanceManager, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, Levels, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, LevelCollections, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_WGBO, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, OwningGameInstance, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ParameterCollectionInstances, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CanvasForRenderingToTarget, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CanvasForDrawMaterialToRenderTarget, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_T7OX, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ComponentsThatNeedPreEndOfFrameSync, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ComponentsThatNeedEndOfFrameUpdate, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ComponentsThatNeedEndOfFrameUpdate_OnGameThread, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_OFJ7, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, WorldComposition, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_C6QO, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PSCPool, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_J7PR, 0x06C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorld, 0x0788);
		}

		// class ULevelStreaming : public UObject
		TEST_METHOD(Class__Engine__LevelStreaming)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, WorldAsset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PackageNameToLoad, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LODPackageNames, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_M9OR, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelTransform, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelLODIndex, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, StreamingPriority, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_FWC3, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelColor, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_1XJ5, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, EditorStreamingVolumes, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, MinTimeBetweenVolumeUnloadRequests, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_AKYP, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelLoaded, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelUnloaded, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelShown, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelHidden, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LoadedLevel, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PendingUnloadLevel, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_524Q, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreaming, 0x0150);
		}

		// class ULevelStreamingDynamic : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingDynamic)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingDynamic, 0x0150);
		}

		// class UBoxComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__BoxComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, BoxExtent, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, LineThickness, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, UnknownData_PCEX, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxComponent, 0x0470);
		}

		// class UCharacterMovementComponent : public UPawnMovementComponent
		TEST_METHOD(Class__Engine__CharacterMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_5J97, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CharacterOwner, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GravityScale, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxStepHeight, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpZVelocity, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpOffJumpZFactor, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, WalkableFloorAngle, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, WalkableFloorZ, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MovementMode, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CustomMovementMode, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSmoothingMode, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_G6MC, 0x016B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroundFriction, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_AEW9, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxWalkSpeed, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxWalkSpeedCrouched, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSwimSpeed, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxFlySpeed, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxCustomMovementSpeed, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxAcceleration, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinAnalogWalkSpeed, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingFrictionFactor, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingFriction, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingSubStepTime, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationWalking, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationFalling, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationSwimming, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationFlying, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControl, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControlBoostMultiplier, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControlBoostVelocityThreshold, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, FallingLateralFriction, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CrouchedHalfHeight, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Buoyancy, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PerchRadiusThreshold, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PerchAdditionalHeight, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RotationRate, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_MUFK, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DeferredUpdatedMoveComponent, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxOutOfWaterStepHeight, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, OutofWaterZ, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Mass, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, StandingDownwardForceScale, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, InitialPushForceFactor, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PushForceFactor, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PushForcePointZOffsetFactor, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, TouchForceFactor, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinTouchForce, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxTouchForce, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RepulsionForce, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Acceleration, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_FJU2, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateRotation, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateLocation, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateVelocity, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastTransformUpdateTimeStamp, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastClientGoodMoveAckTime, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastClientAdjustmentTime, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingImpulseToApply, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingForceToApply, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AnalogInputModifier, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_YUMZ, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSimulationTimeStep, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSimulationIterations, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxJumpApexAttemptsPerSimulation, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithGeometry, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithGeometryAsProxy, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithPawn, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithPawnAsProxy, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSimulatedSmoothLocationTime, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSimulatedSmoothRotationTime, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ListenServerNetworkSimulatedSmoothLocationTime, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ListenServerNetworkSimulatedSmoothRotationTime, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetProxyShrinkRadius, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetProxyShrinkHalfHeight, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMaxSmoothUpdateDistance, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkNoSmoothUpdateDistance, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAckGoodMoves, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAdjustments, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAdjustmentsLargeCorrection, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkLargeClientCorrectionDistance, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LedgeCheckThreshold, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpOutOfWaterPitch, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CurrentFloor, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DefaultLandMovementMode, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DefaultWaterMovementMode, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroundMovementMode, 0x038A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_KNVW, 0x038F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceConsiderationRadius, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RequestedVelocity, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceUID, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceGroup, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroupsToAvoid, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroupsToIgnore, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceWeight, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingLaunchVelocity, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_0CJ8, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionInterval, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionTimer, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionInterpSpeed, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionHeightScaleUp, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionHeightScaleDown, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavWalkingFloorDistTolerance, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_GF3I, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PostPhysicsTickFunction, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_NDX2, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinTimeBetweenTimeStampResets, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_GMQY, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CurrentRootMotion, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerCorrectionRootMotion, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_CB71, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RootMotionParams, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AnimRootMotionVelocity, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_IP95, 0x0ADC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterMovementComponent, 0x0B00);
		}

		// class UCheatManager : public UObject
		TEST_METHOD(Class__Engine__CheatManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, DebugCameraControllerRef, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, DebugCameraControllerClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, UnknownData_EEY2, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheatManager, 0x0078);
		}

		// class UEngine : public UObject
		TEST_METHOD(Class__Engine__Engine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_MOAE, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TinyFont, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TinyFontName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmallFont, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmallFontName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MediumFont, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MediumFontName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LargeFont, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LargeFontName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubtitleFont, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubtitleFontName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AdditionalFonts, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AdditionalFontNames, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConsoleClass, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConsoleClassName, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewportClientClass, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewportClientClassName, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LocalPlayerClass, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LocalPlayerClassName, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WorldSettingsClass, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WorldSettingsClassName, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemClassName, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemClass, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemConfigClassName, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemConfigClass, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AvoidanceManagerClassName, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AvoidanceManagerClass, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AIControllerClassName, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PhysicsCollisionHandlerClass, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PhysicsCollisionHandlerClassName, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettingsClassName, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettingsClass, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettings, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelScriptActorClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelScriptActorClassName, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBlueprintBaseClassName, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameSingletonClassName, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameSingleton, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AssetManagerClassName, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AssetManager, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTexture, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTextureName, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultDiffuseTexture, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultDiffuseTextureName, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBSPVertexTexture, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBSPVertexTextureName, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HighFrequencyNoiseTexture, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HighFrequencyNoiseTextureName, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBokehTexture, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBokehTextureName, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBloomKernelTexture, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBloomKernelTextureName, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WireframeMaterial, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WireframeMaterialName, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugMeshMaterial, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugMeshMaterialName, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, EmissiveMeshMaterial, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, EmissiveMeshMaterialName, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationLitMaterial, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationLitMaterialName, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationUnlitMaterial, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationUnlitMaterialName, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingTexelDensityMaterial, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingTexelDensityName, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationLitMaterial, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationLitMaterialName, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationUnlitMaterial, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationUnlitMaterialName, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RemoveSurfaceMaterial, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RemoveSurfaceMaterialName, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorMaterial, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorMaterialName, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_ColorOnly, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_ColorOnly, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_AlphaAsColor, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_AlphaAsColor, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_RedOnly, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_RedOnly, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_GreenOnly, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_GreenOnly, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_BlueOnly, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_BlueOnly, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugEditorMaterialName, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterial, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialX, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialXAxis, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialY, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialYAxis, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialZ, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialZAxis, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialPrismatic, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, InvalidLightmapSettingsMaterial, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, InvalidLightmapSettingsMaterialName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreviewShadowsIndicatorMaterial, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreviewShadowsIndicatorMaterialName, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterial, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterialYellow, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterialName, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingOnlyBrightness, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShaderComplexityColors, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, QuadComplexityColors, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightComplexityColors, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StationaryLightOverlapColors, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LODColorationColors, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HLODColorationColors, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StreamingAccuracyColors, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxPixelShaderAdditiveComplexityCount, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxES3PixelShaderAdditiveComplexityCount, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MinLightMapDensity, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, IdealLightMapDensity, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxLightMapDensity, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_YIAH, 0x063D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RenderLightMapDensityGrayscaleScale, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RenderLightMapDensityColorScale, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityVertexMappedColor, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensitySelectedColor, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StatColorMappings, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultPhysMaterial, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultPhysMaterialName, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveGameNameRedirects, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveClassRedirects, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActivePluginRedirects, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveStructRedirects, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreIntegratedSkinBRDFTexture, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreIntegratedSkinBRDFTextureName, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, BlueNoiseTexture, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, BlueNoiseTextureName, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MiniFontTexture, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MiniFontTextureName, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WeightMapPlaceholderTexture, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WeightMapPlaceholderTextureName, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityTexture, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityTextureName, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_EERQ, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewport, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DeferredCommands, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NearClipPlane, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_SXBZ, 0x079D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaximumLoopIterationCount, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_O7TA, 0x07A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, FixedFrameRate, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmoothedFrameRateRange, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_SZ7A, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CustomTimeStep, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_3JGK, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CustomTimeStepClassName, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TimecodeProvider, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_15TJ, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TimecodeProviderClassName, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bGenerateDefaultTimecode, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_FHWM, 0x0841);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GenerateDefaultTimecodeFrameRate, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GenerateDefaultTimecodeFrameDelay, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_GTU2, 0x0851);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NumPawnsAllowedToBeSpawnedInAFrame, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_OOGY, 0x0859);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_WorldBox, 0x085C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BrushWire, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_AddWire, 0x0864);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_SubtractWire, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_SemiSolidWire, 0x086C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_NonSolidWire, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_WireBackground, 0x0874);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_ScaleBoxHi, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_VolumeCollision, 0x087C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BSPCollision, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_OrthoBackground, 0x0884);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_Volume, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BrushShape, 0x088C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StreamingDistanceFactor, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_NLBC, 0x0894);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameScreenshotSaveDirectory, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionType, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_HSTV, 0x08A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionDescription, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionGameMode, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_X4L8, 0x08D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CameraRotationThreshold, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CameraTranslationThreshold, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PrimitiveProbablyVisibleTime, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxOcclusionPixelsFraction, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_L9O4, 0x08E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxParticleResize, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxParticleResizeWarn, 0x08EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PendingDroppedNotes, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetClientTicksPerSecond, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DisplayGamma, 0x0904);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MinDesiredFrameRate, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultSelectedMaterialColor, 0x090C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectedMaterialColor, 0x091C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionOutlineColor, 0x092C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubduedSelectionOutlineColor, 0x093C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectedMaterialColorOverride, 0x094C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bIsOverridingSelectedColor, 0x095C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_7GZW, 0x095D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_D1T5, 0x0961);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bEnableVisualLogRecordingOnStart, 0x0964);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ScreenSaverInhibitorSemaphore, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_PI55, 0x096D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ParticleEventManagerClassPath, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionHighlightIntensity, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, BSPSelectionHighlightIntensity, 0x0984);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionHighlightIntensityBillboards, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_M1WE, 0x098C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetDriverDefinitions, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ServerActors, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RuntimeServerActors, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetErrorLogInterval, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_TIXR, 0x0C2D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NextWorldContextHandle, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_IEDI, 0x0C4C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngine, 0x0DE0);
		}

		// class UScriptViewportClient : public UObject
		TEST_METHOD(Class__Engine__ScriptViewportClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptViewportClient, UnknownData_M8WL, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptViewportClient, 0x0038);
		}

		// class UGameViewportClient : public UScriptViewportClient
		TEST_METHOD(Class__Engine__GameViewportClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_E04H, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, ViewportConsole, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, DebugProperties, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_ZTUV, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, MaxSplitscreenPlayers, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_1GX8, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, World, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, GameInstance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_WXJ5, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameViewportClient, 0x0360);
		}

		// class UConsole : public UObject
		TEST_METHOD(Class__Engine__Console)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_IHOC, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, ConsoleTargetPlayer, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, DefaultTexture_Black, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, DefaultTexture_White, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_M6V3, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, HistoryBuffer, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_DQKF, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsole, 0x0130);
		}

		// class UDecalComponent : public USceneComponent
		TEST_METHOD(Class__Engine__DecalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, DecalMaterial, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, SortOrder, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeScreenSize, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeStartDelay, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeDuration, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeInDuration, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeInStartDelay, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, UnknownData_FI90, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, DecalSize, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, UnknownData_RVGG, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecalComponent, 0x023C);
		}

		// class ULocalPlayer : public UPlayer
		TEST_METHOD(Class__Engine__LocalPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_REWY, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, ViewportClient, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_Z0CY, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, AspectRatioAxisConstraint, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_J84H, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, PendingLevelPlayerControllerClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_EADJ, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, ControllerId, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_IOPT, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPlayer, 0x0258);
		}

		// class UParticleSystemComponent : public UFXSystemComponent
		TEST_METHOD(Class__Engine__ParticleSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, Template, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, EmitterMaterials, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, SkelMeshComponents, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_GTL8, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_LF0J, 0x046B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, LODMethod, 0x0475);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, RequiredSignificance, 0x0476);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_XH5V, 0x0477);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, InstanceParameters, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleSpawn, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleBurst, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleDeath, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleCollide, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, bOldPositionValid, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_NY1B, 0x04C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OldPosition, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, PartSysVelocity, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, WarmupTime, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, WarmupTickRate, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_1J54, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, SecondsBeforeInactive, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_TUBU, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, MaxTimeBeforeForceUpdateTransform, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_ZEPW, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, ReplayClips, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_89N5, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, CustomTimeDilation, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_OSDM, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachParent, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachSocketName, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachLocationRule, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachRotationRule, 0x0599);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachScaleRule, 0x059A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_GCRX, 0x059B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnSystemFinished, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_XFX9, 0x05D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystemComponent, 0x06A0);
		}

		// class APlayerCameraManager : public AActor
		TEST_METHOD(Class__Engine__PlayerCameraManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PCOwner, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, TransformComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_QN5L, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultFOV, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_DU6Q, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultOrthoWidth, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_6H60, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultAspectRatio, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_Y6BQ, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraCache, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, LastFrameCameraCache, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewTarget, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PendingViewTarget, 0x1470);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_0FJW, 0x1A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraCachePrivate, 0x1AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, LastFrameCameraCachePrivate, 0x2090);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ModifierList, 0x2680);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultModifiers, 0x2690);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeCamDistance, 0x26A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeCamOffset, 0x26A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewTargetOffset, 0x26B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_CGNA, 0x26BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, OnAudioFadeChangeEvent, 0x26C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_U1CL, 0x26D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraLensEffects, 0x26E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CachedCameraShakeMod, 0x26F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, AnimInstPool, 0x26F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PostProcessBlendCache, 0x2738);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_P2SD, 0x2748);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ActiveAnims, 0x2758);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeAnims, 0x2768);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, AnimCameraActor, 0x2778);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_Q632, 0x2782);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewPitchMin, 0x2784);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewPitchMax, 0x2788);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewYawMin, 0x278C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewYawMax, 0x2790);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewRollMin, 0x2794);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewRollMax, 0x2798);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_JBMU, 0x279C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ServerUpdateCameraTimeout, 0x27A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_7GU7, 0x27A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerCameraManager, 0x27B0);
		}

		// class APlayerState : public AInfo
		TEST_METHOD(Class__Engine__PlayerState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, Score, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PlayerId, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, Ping, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_36F6, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_7Q9U, 0x022B);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, StartTime, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, EngineMessageClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_BHTI, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, SavedNetworkAddress, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UniqueId, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_WFFF, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PawnPrivate, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_MV1T, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PlayerNamePrivate, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_PSNJ, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerState, 0x0320);
		}

		// class UProjectileMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__ProjectileMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InitialSpeed, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSpeed, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_EINI, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, PreviousHitTime, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, PreviousHitNormal, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, ProjectileGravityScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Buoyancy, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Bounciness, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Friction, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, BounceVelocityStopSimulatingThreshold, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MinFrictionFraction, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_EWRL, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, OnProjectileBounce, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, OnProjectileStop, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, HomingAccelerationMagnitude, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, HomingTargetComponent, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSimulationTimeStep, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSimulationIterations, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, BounceAdditionalIterations, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationTime, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpRotationTime, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationMaxLagDistance, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationSnapToTargetDistance, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_N0VN, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProjectileMovementComponent, 0x01D0);
		}

		// class USpringArmComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SpringArmComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_8EQB, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, SocketOffset, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, TargetOffset, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, ProbeSize, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, ProbeChannel, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_Y7D6, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_2J59, 0x021E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagSpeed, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraRotationLagSpeed, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagMaxTimeStep, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagMaxDistance, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_5PJM, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpringArmComponent, 0x0280);
		}

		// class AWorldSettings : public AInfo
		TEST_METHOD(Class__Engine__WorldSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_ORDE, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, VisibilityCellSize, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, VisibilityAggressiveness, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_YV7N, 0x022F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, NavigationSystemConfig, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, NavigationSystemConfigOverride, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, WorldToMeters, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, KillZ, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, KillZDamageType, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, WorldGravityZ, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalGravityZ, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultPhysicsVolumeClass, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PhysicsCollisionHandlerClass, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultGameMode, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GameNetworkManagerClass, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PackedLightAndShadowMapTextureSize, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultColorScale, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultMaxDistanceFieldOcclusionDistance, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalDistanceFieldViewDistance, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DynamicIndirectShadowsSelfShadowingIntensity, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_QMKY, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultReverbSettings, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultAmbientZoneSettings, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MonoCullingDistance, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultBaseSoundMix, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, TimeDilation, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MatineeTimeDilation, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DemoPlayTimeDilation, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MinGlobalTimeDilation, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxGlobalTimeDilation, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MinUndilatedFrameTime, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxUndilatedFrameTime, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, BroadphaseSettings, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_8ARF, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, Pauser, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, ReplicationViewers, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, AssetUserData, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PauserPlayerState, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxNumberOfBookmarks, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_F4LZ, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultBookmarkClass, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, BookmarkArray, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, LastBookmarkClass, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWorldSettings, 0x03A0);
		}

		// class UDPICustomScalingRule : public UObject
		TEST_METHOD(Class__Engine__DPICustomScalingRule)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDPICustomScalingRule, 0x0028);
		}

		// class ASkyLight : public AInfo
		TEST_METHOD(Class__Engine__SkyLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyLight, LightComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyLight, UnknownData_DZFC, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkyLight, 0x0230);
		}

		// class UTexture : public UStreamableRenderAsset
		TEST_METHOD(Class__Engine__Texture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_A4FW, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LightingGuid, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LODBias, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, CompressionSettings, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, Filter, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, MipLoadOptions, 0x007E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LODGroup, 0x007F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, Downscale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, DownscaleOptions, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_DF46, 0x0086);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, AssetUserData, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_DE8J, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture, 0x00D8);
		}

		// class UTextureCube : public UTexture
		TEST_METHOD(Class__Engine__TextureCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureCube, UnknownData_5N8N, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureCube, 0x0130);
		}

		// class UInstancedStaticMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Engine__InstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, PerInstanceSMData, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, NumCustomDataFloats, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_LJK1, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, PerInstanceSMCustomData, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstancingRandomSeed, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceStartCullDistance, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceEndCullDistance, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_Y9UK, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceReorderTable, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_XXBY, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, NumPendingLightmaps, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_MBE4, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, CachedMappings, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_QKJK, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInstancedStaticMeshComponent, 0x0580);
		}

		// class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
		TEST_METHOD(Class__Engine__HierarchicalInstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_6884, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, SortedInstances, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, NumBuiltInstances, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_KJ00, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, BuiltInstanceBounds, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBounds, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBoundsList, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_TN8D, 0x05E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, OcclusionLayerNumNodes, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, CacheMeshExtendedBounds, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, bDisableCollision, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_VUJP, 0x0611);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, InstanceCountToRender, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_Y1B8, 0x0618);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHierarchicalInstancedStaticMeshComponent, 0x0668);
		}

		// class AStaticMeshActor : public AActor
		TEST_METHOD(Class__Engine__StaticMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, StaticMeshComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, bStaticMeshReplicateMovement, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, NavigationGeometryGatheringMode, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, UnknownData_JE6P, 0x022A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaticMeshActor, 0x0230);
		}

		// class ABrush : public AActor
		TEST_METHOD(Class__Engine__Brush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushType, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_YGOC, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushColor, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, PolyFlags, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_LNKD, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, Brush, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_MFZ7, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, SavedSelections, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrush, 0x0258);
		}

		// class AVolume : public ABrush
		TEST_METHOD(Class__Engine__Volume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolume, 0x0258);
		}

		// class UMaterialInterface : public UObject
		TEST_METHOD(Class__Engine__MaterialInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_YSN2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, SubsurfaceProfile, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_GU16, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, LightmassSettings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, TextureStreamingData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, AssetUserData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_54T5, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInterface, 0x0088);
		}

		// class UMaterialInstance : public UMaterialInterface
		TEST_METHOD(Class__Engine__MaterialInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, PhysMaterial, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, PhysicalMaterialMap, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, Parent, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_LJ15, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, ScalarParameterValues, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, VectorParameterValues, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, TextureParameterValues, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, RuntimeVirtualTextureParameterValues, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, FontParameterValues, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, BasePropertyOverrides, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_DL3G, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, StaticParameters, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, CachedLayerParameters, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, CachedReferencedTextures, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_9F22, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstance, 0x0360);
		}

		// class UMaterialInstanceConstant : public UMaterialInstance
		TEST_METHOD(Class__Engine__MaterialInstanceConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstanceConstant, PhysMaterialMask, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstanceConstant, 0x0368);
		}

		// class UWorldSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__WorldSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldSubsystem, 0x0030);
		}

		// class UMaterialExpressionCustomOutput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCustomOutput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCustomOutput, 0x0040);
		}

		// class UEngineCustomTimeStep : public UObject
		TEST_METHOD(Class__Engine__EngineCustomTimeStep)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineCustomTimeStep, 0x0028);
		}

		// class UTimecodeProvider : public UObject
		TEST_METHOD(Class__Engine__TimecodeProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimecodeProvider, FrameDelay, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimecodeProvider, UnknownData_MWZY, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimecodeProvider, 0x0030);
		}

		// class UDynamicBlueprintBinding : public UObject
		TEST_METHOD(Class__Engine__DynamicBlueprintBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicBlueprintBinding, 0x0028);
		}

		// class UBlueprintGeneratedClass : public UClass
		TEST_METHOD(Class__Engine__BlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, NumReplicatedProperties, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_718Q, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, DynamicBindingObjects, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, ComponentTemplates, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, Timelines, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, ComponentClassOverrides, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, SimpleConstructionScript, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, InheritableComponentHandler, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UberGraphFramePointerProperty, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_I4MM, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UberGraphFunction, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, CookedComponentInstancingData, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_PBNV, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintGeneratedClass, 0x0328);
		}

		// class ACameraActor : public AActor
		TEST_METHOD(Class__Engine__CameraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, AutoActivateForPlayer, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_9MI7, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, CameraComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, SceneComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_E81G, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_PT7N, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, AspectRatio, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, FOVAngle, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, PostProcessBlendWeight, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, PostProcessSettings, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraActor, 0x07A0);
		}

		// class UCameraComponent : public USceneComponent
		TEST_METHOD(Class__Engine__CameraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_SLCS, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoWidth, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoNearClipPlane, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoFarClipPlane, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, AspectRatio, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, ProjectionMode, 0x020D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_K14B, 0x020E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, PostProcessBlendWeight, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_OZDP, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, PostProcessSettings, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraComponent, 0x07C0);
		}

		// class USoundBase : public UObject
		TEST_METHOD(Class__Engine__SoundBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, UnknownData_I3NY, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundClassObject, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, VirtualizationMode, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, UnknownData_PYAJ, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, ConcurrencySet, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, ConcurrencyOverrides, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, Duration, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, MaxDistance, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, TotalSamples, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, Priority, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, AttenuationSettings, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, ModulationSettings, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundSubmixObject, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundSubmixSends, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SourceEffectChain, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, BusSends, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, PreEffectBusSends, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, AssetUserData, 0x01A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundBase, 0x01B8);
		}

		// class USoundWave : public USoundBase
		TEST_METHOD(Class__Engine__SoundWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CompressionQuality, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, StreamingPriority, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SampleRateQuality, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_15BW, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SoundGroup, 0x01C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, LoadingBehavior, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_O5FX, 0x01C7);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, FrequenciesToAnalyze, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CookedSpectralTimeData, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CookedEnvelopeTimeData, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, InitialChunkSize, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_EJM4, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SpokenText, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SubtitlePriority, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Volume, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Pitch, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, NumChannels, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SampleRate, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_SHOX, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Subtitles, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Curves, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, InternalCurves, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_ELTL, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundWave, 0x0370);
		}

		// class USoundWaveProcedural : public USoundWave
		TEST_METHOD(Class__Engine__SoundWaveProcedural)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWaveProcedural, UnknownData_11H3, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundWaveProcedural, 0x03C0);
		}

		// class UBlueprintCore : public UObject
		TEST_METHOD(Class__Engine__BlueprintCore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, SkeletonGeneratedClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, GeneratedClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, bLegacyNeedToPurgeSkelRefs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, UnknownData_I2TV, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, BlueprintGuid, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, UnknownData_FJ6L, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintCore, 0x0050);
		}

		// class UBlueprint : public UBlueprintCore
		TEST_METHOD(Class__Engine__Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ParentClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, BlueprintType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_KUU7, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, BlueprintSystemVersion, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, SimpleConstructionScript, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ComponentTemplates, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, Timelines, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ComponentClassOverrides, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, InheritableComponentHandler, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprint, 0x00A0);
		}

		// class UModel : public UObject
		TEST_METHOD(Class__Engine__Model)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModel, UnknownData_TMEL, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModel, 0x0258);
		}

		// class UChannel : public UObject
		TEST_METHOD(Class__Engine__Channel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChannel, Connection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChannel, UnknownData_BN16, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChannel, 0x0070);
		}

		// class UActorChannel : public UChannel
		TEST_METHOD(Class__Engine__ActorChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, Actor, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, UnknownData_60XQ, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, CreateSubObjects, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, UnknownData_LZ47, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorChannel, 0x0298);
		}

		// class UAnimationAsset : public UObject
		TEST_METHOD(Class__Engine__AnimationAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, UnknownData_DO4V, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, Skeleton, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, UnknownData_MTS5, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, MetaData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, AssetUserData, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationAsset, 0x0080);
		}

		// class UBlendSpaceBase : public UAnimationAsset
		TEST_METHOD(Class__Engine__BlendSpaceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_AXZO, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, bRotationBlendInMeshSpace, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_WQ9V, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, AnimLength, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, InterpolationParam, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, TargetWeightInterpolationSpeedPerSec, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, NotifyTriggerMode, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_0W3G, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, PerBoneBlend, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, SampleIndexWithMarkers, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_QYH9, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, SampleData, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, GridSamples, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, BlendParameters, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpaceBase, 0x0148);
		}

		// class UBlendSpace : public UBlendSpaceBase
		TEST_METHOD(Class__Engine__BlendSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace, AxisToScaleAnimation, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace, UnknownData_4J9A, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpace, 0x0150);
		}

		// class UAimOffsetBlendSpace : public UBlendSpace
		TEST_METHOD(Class__Engine__AimOffsetBlendSpace)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimOffsetBlendSpace, 0x0150);
		}

		// class UBlendSpace1D : public UBlendSpaceBase
		TEST_METHOD(Class__Engine__BlendSpace1D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace1D, bScaleAnimation, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace1D, UnknownData_Y3PL, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpace1D, 0x0150);
		}

		// class UAimOffsetBlendSpace1D : public UBlendSpace1D
		TEST_METHOD(Class__Engine__AimOffsetBlendSpace1D)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimOffsetBlendSpace1D, 0x0150);
		}

		// class UAISystemBase : public UObject
		TEST_METHOD(Class__Engine__AISystemBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, AISystemClassName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, AISystemModuleName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, UnknownData_6PJI, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, bInstantiateAISystemOnClient, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, UnknownData_W9UZ, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISystemBase, 0x0058);
		}

		// class AAmbientSound : public AActor
		TEST_METHOD(Class__Engine__AmbientSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSound, AudioComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAmbientSound, 0x0228);
		}

		// class UAnimationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AnimationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, CompressCommandletVersion, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_4DJ6, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, KeyEndEffectorsMatchNameArray, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, ForceRecompression, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bForceBelowThreshold, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bFirstRecompressUsingCurrentOrDefault, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bRaiseMaxErrorToExisting, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bEnablePerformanceLog, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bStripAnimationDataOnDedicatedServer, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bTickAnimationOnSkeletalMeshInit, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_A8HA, 0x0057);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, BoneCustomAttributesNames, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, BoneNamesWithCustomAttributes, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, AttributeBlendModes, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, DefaultAttributeBlendMode, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_X5OL, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSettings, 0x00D0);
		}

		// class UAnimBlueprint : public UBlueprint
		TEST_METHOD(Class__Engine__AnimBlueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, UnknownData_61BH, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, TargetSkeleton, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, Groups, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, bUseMultiThreadedAnimationUpdate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, bWarnAboutBlueprintUsage, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, UnknownData_OK03, 0x00C2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBlueprint, 0x00C8);
		}

		// class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
		TEST_METHOD(Class__Engine__AnimBlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_BYYK, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, BakedStateMachines, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, TargetSkeleton, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, AnimNotifies, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, OrderedSavedPoseIndicesMap, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_MVTQ, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, SyncGroupNames, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, EvaluateGraphExposedInputs, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, GraphAssetPlayerInformation, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, GraphBlendOptions, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, PropertyAccessLibrary, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBlueprintGeneratedClass, 0x05B0);
		}

		// class UAnimBoneCompressionCodec : public UObject
		TEST_METHOD(Class__Engine__AnimBoneCompressionCodec)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBoneCompressionCodec, Description, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBoneCompressionCodec, 0x0038);
		}

		// class UAnimBoneCompressionSettings : public UObject
		TEST_METHOD(Class__Engine__AnimBoneCompressionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBoneCompressionSettings, Codecs, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBoneCompressionSettings, 0x0038);
		}

		// class UAnimClassData : public UObject
		TEST_METHOD(Class__Engine__AnimClassData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_AC95, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, BakedStateMachines, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, TargetSkeleton, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimNotifies, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, OrderedSavedPoseIndicesMap, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimBlueprintFunctions, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimBlueprintFunctionData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimNodeProperties, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_WH12, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, LinkedAnimGraphNodeProperties, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_ODSD, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, LinkedAnimLayerNodeProperties, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_55L4, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, PreUpdateNodeProperties, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_8NKT, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, DynamicResetNodeProperties, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_MP5M, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, StateMachineNodeProperties, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_K7XC, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, InitializationNodeProperties, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_L7HL, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, GraphNameAssetPlayers, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, SyncGroupNames, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, EvaluateGraphExposedInputs, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, GraphBlendOptions, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, PropertyAccessLibrary, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimClassData, 0x0330);
		}

		// class UAnimClassInterface : public UInterface
		TEST_METHOD(Class__Engine__AnimClassInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimClassInterface, 0x0028);
		}

		// class UAnimSequenceBase : public UAnimationAsset
		TEST_METHOD(Class__Engine__AnimSequenceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, Notifies, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, SequenceLength, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, RateScale, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, RawCurveData, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequenceBase, 0x00A8);
		}

		// class UAnimCompositeBase : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimCompositeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompositeBase, 0x00A8);
		}

		// class UAnimComposite : public UAnimCompositeBase
		TEST_METHOD(Class__Engine__AnimComposite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimComposite, AnimationTrack, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimComposite, 0x00B8);
		}

		// class UAnimCompress : public UAnimBoneCompressionCodec
		TEST_METHOD(Class__Engine__AnimCompress)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_T8O7, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, TranslationCompressionFormat, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, RotationCompressionFormat, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, ScaleCompressionFormat, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_FVPQ, 0x003F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress, 0x0040);
		}

		// class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_BitwiseCompressOnly)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_BitwiseCompressOnly, 0x0040);
		}

		// class UAnimCompress_LeastDestructive : public UAnimCompress_BitwiseCompressOnly
		TEST_METHOD(Class__Engine__AnimCompress_LeastDestructive)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_LeastDestructive, 0x0040);
		}

		// class UAnimCompress_RemoveLinearKeys : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveLinearKeys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxPosDiff, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxAngleDiff, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxScaleDiff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxEffectorDiff, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MinEffectorDiff, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, EffectorDiffSocket, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, ParentKeyScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, UnknownData_JZR0, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveLinearKeys, 0x0060);
		}

		// class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
		TEST_METHOD(Class__Engine__AnimCompress_PerTrackCompression)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxZeroingThreshold, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxPosDiffBitwise, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxAngleDiffBitwise, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxScaleDiffBitwise, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedRotationFormats, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedTranslationFormats, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedScaleFormats, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_HUOU, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ResampledFramerate, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MinKeysForResampling, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_HWUZ, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, TrackHeightBias, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ParentingDivisor, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ParentingDivisorExponent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_TYQR, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, RotationErrorSourceRatio, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, TranslationErrorSourceRatio, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ScaleErrorSourceRatio, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxErrorPerTrackRatio, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, PerturbationProbeSize, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_5HPC, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_PerTrackCompression, 0x00D8);
		}

		// class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveEverySecondKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveEverySecondKey, MinKeys, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveEverySecondKey, UnknownData_2DAO, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveEverySecondKey, 0x0048);
		}

		// class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveTrivialKeys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxPosDiff, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxAngleDiff, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxScaleDiff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, UnknownData_B7HZ, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveTrivialKeys, 0x0050);
		}

		// class UAnimCurveCompressionCodec : public UObject
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec, 0x0028);
		}

		// class UAnimCurveCompressionCodec_CompressedRichCurve : public UAnimCurveCompressionCodec
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec_CompressedRichCurve)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec_CompressedRichCurve, 0x0028);
		}

		// class UAnimCurveCompressionCodec_UniformIndexable : public UAnimCurveCompressionCodec
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec_UniformIndexable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec_UniformIndexable, 0x0028);
		}

		// class UAnimCurveCompressionCodec_UniformlySampled : public UAnimCurveCompressionCodec
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec_UniformlySampled)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec_UniformlySampled, 0x0028);
		}

		// class UAnimCurveCompressionSettings : public UObject
		TEST_METHOD(Class__Engine__AnimCurveCompressionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCurveCompressionSettings, Codec, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionSettings, 0x0030);
		}

		// class UAnimLayerInterface : public UInterface
		TEST_METHOD(Class__Engine__AnimLayerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimLayerInterface, 0x0028);
		}

		// class UAnimMetaData : public UObject
		TEST_METHOD(Class__Engine__AnimMetaData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimMetaData, 0x0028);
		}

		// class UAnimMontage : public UAnimCompositeBase
		TEST_METHOD(Class__Engine__AnimMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendIn, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendInTime, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_P5GM, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOut, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOutTime, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOutTriggerTime, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SyncGroup, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SyncSlotIndex, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_63BO, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, MarkerData, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, CompositeSections, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SlotAnimTracks, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPoints, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableRootMotionTranslation, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableRootMotionRotation, 0x0179);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableAutoBlendOut, 0x017A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, RootMotionRootLock, 0x017B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_DLXY, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPointMarkers, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPointStateNotifyIndices, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, TimeStretchCurve, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, TimeStretchCurveName, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimMontage, 0x01D0);
		}

		// class UAnimNotify_PauseClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PauseClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PauseClothingSimulation, 0x0038);
		}

		// class UAnimNotify_PlayParticleEffect : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PlayParticleEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, PSTemplate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, Scale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_56H6, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_PF6F, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, SocketName, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_6JTF, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayParticleEffect, 0x0090);
		}

		// class UAnimNotify_PlaySound : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PlaySound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, Sound, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, VolumeMultiplier, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, PitchMultiplier, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, UnknownData_TASO, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, AttachName, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, UnknownData_LN0Z, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlaySound, 0x0058);
		}

		// class UAnimNotify_ResetClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResetClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResetClothingSimulation, 0x0038);
		}

		// class UAnimNotify_ResetDynamics : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResetDynamics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResetDynamics, 0x0038);
		}

		// class UAnimNotify_ResumeClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResumeClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResumeClothingSimulation, 0x0038);
		}

		// class UAnimNotifyState_DisableRootMotion : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_DisableRootMotion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_DisableRootMotion, 0x0030);
		}

		// class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_TimedParticleEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, PSTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, SocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, bDestroyAtEnd, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, UnknownData_YK8Y, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_TimedParticleEffect, 0x0060);
		}

		// class UAnimNotifyState_Trail : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_Trail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, PSTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, FirstSocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, SecondSocketName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, WidthScaleMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, UnknownData_ZK70, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, WidthScaleCurve, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, UnknownData_SBXO, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_Trail, 0x0058);
		}

		// class UAnimSequence : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, NumFrames, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_40AA, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, TrackToSkeletonMapTable, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_IKTN, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, BoneCompressionSettings, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, CurveCompressionSettings, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_8MSQ, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, AdditiveAnimType, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefPoseType, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_776H, 0x0152);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefPoseSeq, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefFrameIndex, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RetargetSource, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, Interpolation, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bEnableRootMotion, 0x016D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RootMotionRootLock, 0x016E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bForceRootLock, 0x016F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bUseNormalizedRootMotionScale, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bRootMotionSettingsCopiedFromMontage, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_UASQ, 0x0172);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, AuthoredSyncMarkers, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_WA8X, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, BakedPerBoneCustomAttributeData, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequence, 0x01B0);
		}

		// class UAnimSet : public UObject
		TEST_METHOD(Class__Engine__AnimSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UnknownData_EF33, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, TrackBoneNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, LinkupCache, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, BoneUseAnimTranslation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, ForceUseMeshTranslation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UseTranslationBoneNames, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, ForceMeshTranslationBoneNames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, PreviewSkelMeshName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, BestRatioSkelMeshName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UnknownData_Y80S, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSet, 0x00F0);
		}

		// class UAnimSingleNodeInstance : public UAnimInstance
		TEST_METHOD(Class__Engine__AnimSingleNodeInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, CurrentAsset, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, PostEvaluateAnimEvent, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSingleNodeInstance, 0x02D0);
		}

		// class UAnimStateMachineTypes : public UObject
		TEST_METHOD(Class__Engine__AnimStateMachineTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimStateMachineTypes, 0x0028);
		}

		// class UAnimStreamable : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimStreamable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, NumFrames, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, Interpolation, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, UnknownData_WW1N, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, RetargetSource, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, UnknownData_U77D, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, BoneCompressionSettings, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, CurveCompressionSettings, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, bEnableRootMotion, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, RootMotionRootLock, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, bForceRootLock, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, bUseNormalizedRootMotionScale, 0x00DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, UnknownData_DD1L, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimStreamable, 0x00E0);
		}

		// class UAssetExportTask : public UObject
		TEST_METHOD(Class__Engine__AssetExportTask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Object, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Exporter, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Filename, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bSelected, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bReplaceIdentical, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bPrompt, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bAutomated, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bUseFileArchive, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bWriteEmptyFiles, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, UnknownData_PU03, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, IgnoreObjectList, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Options, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Errors, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetExportTask, 0x0078);
		}

		// class UAssetManager : public UObject
		TEST_METHOD(Class__Engine__AssetManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_7NJ4, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, ObjectReferenceList, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsGlobalAsyncScanEnvironment, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldGuessTypeAndName, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldUseSynchronousLoad, 0x02D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsLoadingFromPakFiles, 0x02D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldAcquireMissingChunksOnLoad, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bOnlyCookProductionAssets, 0x02D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsBulkScanning, 0x02D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsPrimaryAssetDirectoryCurrent, 0x02D7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsManagementDatabaseCurrent, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bUpdateManagementDatabaseAfterScan, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIncludeOnlyOnDiskAssets, 0x02DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bHasCompletedInitialScan, 0x02DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, NumberOfSpawnedNotifications, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_1M5C, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetManager, 0x0458);
		}

		// class UAssetManagerSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AssetManagerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetTypesToScan, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, DirectoriesToExclude, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetRules, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, CustomPrimaryAssetRules, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bOnlyCookProductionAssets, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldManagerDetermineTypeAndName, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldGuessTypeAndNameInEditor, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldAcquireMissingChunksOnLoad, 0x007B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, UnknownData_QZZA, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetIdRedirects, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetTypeRedirects, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, AssetPathRedirects, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, MetaDataTagsForAssetRegistry, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetManagerSettings, 0x0100);
		}

		// class UAssetMappingTable : public UObject
		TEST_METHOD(Class__Engine__AssetMappingTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetMappingTable, MappedAssets, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetMappingTable, 0x0038);
		}

		// class UAsyncActionHandleSaveGame : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Engine__AsyncActionHandleSaveGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionHandleSaveGame, Completed, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionHandleSaveGame, UnknownData_WA4K, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionHandleSaveGame, SaveGameObject, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionHandleSaveGame, 0x0068);
		}

		// class UAsyncActionLoadPrimaryAssetBase : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetBase, UnknownData_FTWW, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetBase, 0x0078);
		}

		// class UAsyncActionLoadPrimaryAsset : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAsset, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAsset, 0x0088);
		}

		// class UAsyncActionLoadPrimaryAssetClass : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetClass, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetClass, 0x0088);
		}

		// class UAsyncActionLoadPrimaryAssetList : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetList, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetList, 0x0088);
		}

		// class UAsyncActionLoadPrimaryAssetClassList : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetClassList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetClassList, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetClassList, 0x0088);
		}

		// class UAsyncActionChangePrimaryAssetBundles : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionChangePrimaryAssetBundles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionChangePrimaryAssetBundles, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionChangePrimaryAssetBundles, 0x0088);
		}

		// class AAtmosphericFog : public AInfo
		TEST_METHOD(Class__Engine__AtmosphericFog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAtmosphericFog, AtmosphericFogComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAtmosphericFog, 0x0228);
		}

		// class UAtmosphericFogComponent : public USceneComponent
		TEST_METHOD(Class__Engine__AtmosphericFogComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_CGB5, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, FogMultiplier, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DensityMultiplier, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DensityOffset, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DistanceScale, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, AltitudeScale, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DistanceOffset, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, GroundOffset, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, StartDistance, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, SunDiscScale, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DefaultBrightness, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DefaultLightColor, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_Z3VI, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, PrecomputeParams, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, TransmittanceTexture, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, IrradianceTexture, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_N7VI, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtmosphericFogComponent, 0x0300);
		}

		// class UAudioBus : public UObject
		TEST_METHOD(Class__Engine__AudioBus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioBus, AudioBusChannels, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioBus, bIsAutomatic, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioBus, UnknownData_C4WN, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioBus, 0x0030);
		}

		// class UAudioComponent : public USceneComponent
		TEST_METHOD(Class__Engine__AudioComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Sound, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, InstanceParameters, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SoundClassOverride, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_18ER, 0x021B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AudioComponentUserID, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchModulationMin, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchModulationMax, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeModulationMin, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeModulationMax, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeMultiplier, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, EnvelopeFollowerAttackTime, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, EnvelopeFollowerReleaseTime, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Priority, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SubtitlePriority, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_7249, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SourceEffectChain, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchMultiplier, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, LowPassFilterFrequency, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_LRD0, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AttenuationSettings, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AttenuationOverrides, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, ConcurrencySettings, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, ConcurrencySet, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_Q7BE, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachLocationRule, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachRotationRule, 0x0675);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachScaleRule, 0x0676);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_RP3Q, 0x0677);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, ModulationRouting, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioPlayStateChanged, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_BU0C, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioVirtualizationChanged, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_WDGM, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioFinished, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_RXCP, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioPlaybackPercent, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_HH1L, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioSingleEnvelopeValue, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_NL7Q, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioMultiEnvelopeValue, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_L3BU, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnQueueSubtitles, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachParent, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachSocketName, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_1IBA, 0x07D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioComponent, 0x0860);
		}

		// class UAudioSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AudioSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultSoundClassName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultMediaSoundClassName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultSoundConcurrencyName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultBaseSoundMix, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoiPSoundClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MasterSubmix, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, ReverbSubmix, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, EQSubmix, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoiPSampleRate, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_FEQL, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultReverbSendLevel, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MaximumConcurrentStreams, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, GlobalMinPitchScale, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, GlobalMaxPitchScale, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_FL9H, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, QualityLevels, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_MZGT, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, NumStoppingSources, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, PanningMethod, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MonoChannelUpmixMethod, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_TRPA, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DialogueFilenameFormat, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_U25B, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioSettings, 0x0148);
		}

		// class AAudioVolume : public AVolume
		TEST_METHOD(Class__Engine__AudioVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, Priority, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, UnknownData_9LQW, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, Settings, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, AmbientZoneSettings, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, UnknownData_037F, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, SubmixSendSettings, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, SubmixOverrideSettings, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAudioVolume, 0x02C8);
		}

		// class UAutoDestroySubsystem : public UWorldSubsystem
		TEST_METHOD(Class__Engine__AutoDestroySubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoDestroySubsystem, UnknownData_5VFF, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoDestroySubsystem, ActorsToPoll, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutoDestroySubsystem, 0x0048);
		}

		// class UAutomationTestSettings : public UObject
		TEST_METHOD(Class__Engine__AutomationTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EngineTestModules, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EditorTestModules, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, AutomationTestmap, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EditorPerformanceTestMaps, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, AssetsToOpen, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, MapsToPIETest, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, BuildPromotionTest, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, MaterialEditorPromotionTest, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ParticleEditorPromotionTest, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, BlueprintEditorPromotionTest, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, TestLevelFolders, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ExternalTools, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ImportExportTestDefinitions, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, LaunchOnSettings, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, DefaultScreenshotResolution, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, PIETestDuration, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, UnknownData_0T32, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutomationTestSettings, 0x0340);
		}

		// class UAvoidanceManager : public UObject
		TEST_METHOD(Class__Engine__AvoidanceManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, UnknownData_FVYB, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, DefaultTimeToLive, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, LockTimeAfterAvoid, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, LockTimeAfterClean, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, DeltaTimeToPredict, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, ArtificialRadiusExpansion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, TestHeightDifference, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, HeightCheckMargin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, UnknownData_1J3J, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvoidanceManager, 0x00E0);
		}

		// class ABandwidthTestActor : public AActor
		TEST_METHOD(Class__Engine__BandwidthTestActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABandwidthTestActor, BandwidthGenerator, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABandwidthTestActor, 0x0240);
		}

		// class UBillboardComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__BillboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, Sprite, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UnknownData_O3L1, 0x0449);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, ScreenSize, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, U, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UL, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, V, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, VL, 0x045C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBillboardComponent, 0x0460);
		}

		// class UBlendableInterface : public UInterface
		TEST_METHOD(Class__Engine__BlendableInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendableInterface, 0x0028);
		}

		// class USkeleton : public UObject
		TEST_METHOD(Class__Engine__Skeleton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_154W, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, BoneTree, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, RefLocalPoses, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_1VMQ, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, VirtualBoneGuid, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, VirtualBones, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, Sockets, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_11P6, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, SmartNames, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_ICHE, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, BlendProfiles, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, SlotGroups, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_HY7M, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, AssetUserData, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeleton, 0x0368);
		}

		// class UBlendProfile : public UObject
		TEST_METHOD(Class__Engine__BlendProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, UnknownData_UVUJ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, OwningSkeleton, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, ProfileEntries, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendProfile, 0x0048);
		}

		// class ABlockingVolume : public AVolume
		TEST_METHOD(Class__Engine__BlockingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABlockingVolume, 0x0258);
		}

		// class UBlueprintExtension : public UObject
		TEST_METHOD(Class__Engine__BlueprintExtension)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintExtension, 0x0028);
		}

		// class UBlueprintMapLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintMapLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintMapLibrary, 0x0028);
		}

		// class UBlueprintPathsLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintPathsLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintPathsLibrary, 0x0028);
		}

		// class UPlatformGameInstance : public UGameInstance
		TEST_METHOD(Class__Engine__PlatformGameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillDeactivateDelegate, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationHasReactivatedDelegate, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillEnterBackgroundDelegate, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationHasEnteredForegroundDelegate, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillTerminateDelegate, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationShouldUnloadResourcesDelegate, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedStartupArgumentsDelegate, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationRegisteredForRemoteNotificationsDelegate, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationRegisteredForUserNotificationsDelegate, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationFailedToRegisterForRemoteNotificationsDelegate, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedRemoteNotificationDelegate, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedLocalNotificationDelegate, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedScreenOrientationChangedNotificationDelegate, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformGameInstance, 0x0278);
		}

		// class UBlueprintPlatformLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintPlatformLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintPlatformLibrary, 0x0028);
		}

		// class UBlueprintSetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintSetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintSetLibrary, 0x0028);
		}

		// class UBodySetup : public UBodySetupCore
		TEST_METHOD(Class__Engine__BodySetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, AggGeom, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_JLCK, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, PhysMaterial, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, WalkableSlopeOverride, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_T7QT, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, DefaultInstance, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_DT7Q, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, BuildScale3D, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_OPJK, 0x0294);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBodySetup, 0x02A0);
		}

		// class UBoneMaskFilter : public UObject
		TEST_METHOD(Class__Engine__BoneMaskFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoneMaskFilter, BlendPoses, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoneMaskFilter, 0x0038);
		}

		// class UBookmarkBase : public UObject
		TEST_METHOD(Class__Engine__BookmarkBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookmarkBase, 0x0028);
		}

		// class UBookMark : public UBookmarkBase
		TEST_METHOD(Class__Engine__BookMark)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, Location, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, Rotation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, HiddenLevels, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookMark, 0x0050);
		}

		// class UBookMark2D : public UBookmarkBase
		TEST_METHOD(Class__Engine__BookMark2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, Zoom2D, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, Location, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, UnknownData_EXX2, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookMark2D, 0x0038);
		}

		// class UBoundsCopyComponent : public UActorComponent
		TEST_METHOD(Class__Engine__BoundsCopyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, BoundsSourceActor, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bUseCollidingComponentsForSourceBounds, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bKeepOwnBoundsScale, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bUseCollidingComponentsForOwnBounds, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, UnknownData_D6UB, 0x00DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, PostTransform, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bCopyXBounds, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bCopyYBounds, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bCopyZBounds, 0x0112);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, UnknownData_S1TN, 0x0113);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoundsCopyComponent, 0x0120);
		}

		// class AReflectionCapture : public AActor
		TEST_METHOD(Class__Engine__ReflectionCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AReflectionCapture, CaptureComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AReflectionCapture, 0x0228);
		}

		// class ABoxReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__BoxReflectionCapture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABoxReflectionCapture, 0x0228);
		}

		// class UReflectionCaptureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CaptureOffsetComponent, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, ReflectionSourceType, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, MobileReflectionCompression, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_X3NW, 0x0202);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, Cubemap, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, SourceCubemapAngle, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, Brightness, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, bModifyMaxValueRGBM, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_M3I1, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, MaxValueRGBM, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CaptureOffset, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, MapBuildDataId, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_GGOY, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CachedEncodedHDRCubemap, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_8YL6, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReflectionCaptureComponent, 0x0270);
		}

		// class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__BoxReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, BoxTransitionDistance, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, UnknownData_ORBS, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, PreviewInfluenceBox, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, PreviewCaptureBox, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, UnknownData_21BY, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxReflectionCaptureComponent, 0x0290);
		}

		// class UBreakpoint : public UObject
		TEST_METHOD(Class__Engine__Breakpoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, UnknownData_6WLN, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, Node, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, UnknownData_1B21, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBreakpoint, 0x0040);
		}

		// class UBrushBuilder : public UObject
		TEST_METHOD(Class__Engine__BrushBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, BitmapFilename, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, ToolTip, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, UnknownData_NC5K, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Vertices, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Polys, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Layer, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, UnknownData_GLDU, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBuilder, 0x0080);
		}

		// class UBrushComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__BrushComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, Brush, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, BrushBodySetup, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushComponent, 0x0450);
		}

		// class ABrushShape : public ABrush
		TEST_METHOD(Class__Engine__BrushShape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrushShape, 0x0258);
		}

		// class UButtonStyleAsset : public UObject
		TEST_METHOD(Class__Engine__ButtonStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonStyleAsset, ButtonStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonStyleAsset, 0x02A0);
		}

		// class UCameraAnim : public UObject
		TEST_METHOD(Class__Engine__CameraAnim)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, CameraInterpGroup, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, AnimLength, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BoundingBox, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_HSD8, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BaseFOV, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_I93P, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BasePostProcessSettings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BasePostProcessBlendWeight, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_UYXB, 0x05B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnim, 0x05C0);
		}

		// class UCameraAnimInst : public UObject
		TEST_METHOD(Class__Engine__CameraAnimInst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, CamAnim, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, InterpGroupInst, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_1YZ0, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, PlayRate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_S59F, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, MoveTrack, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, MoveInst, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, PlaySpace, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_OWL5, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnimInst, 0x0110);
		}

		// class ACameraBlockingVolume : public AVolume
		TEST_METHOD(Class__Engine__CameraBlockingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraBlockingVolume, 0x0258);
		}

		// class UCameraModifier : public UObject
		TEST_METHOD(Class__Engine__CameraModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_2BZC, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, Priority, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_NRLJ, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, CameraOwner, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, AlphaInTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, AlphaOutTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, Alpha, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_XDP7, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraModifier, 0x0048);
		}

		// class UCameraModifier_CameraShake : public UCameraModifier
		TEST_METHOD(Class__Engine__CameraModifier_CameraShake)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, ActiveShakes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, ExpiredPooledShakesMap, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, SplitScreenShakeScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, UnknownData_262C, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraModifier_CameraShake, 0x00B0);
		}

		// class UMatineeCameraShake : public UCameraShakeBase
		TEST_METHOD(Class__Engine__MatineeCameraShake)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, UnknownData_2N33, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, OscillationBlendInTime, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, OscillationBlendOutTime, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, RotOscillation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, LocOscillation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, FOVOscillation, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, AnimPlayRate, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, AnimScale, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, AnimBlendInTime, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, AnimBlendOutTime, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, RandomAnimSegmentDuration, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, UnknownData_O0CL, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, Anim, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, UnknownData_RATR, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, OscillatorTimeRemaining, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, AnimInst, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, UnknownData_WNCL, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeCameraShake, 0x0180);
		}

		// class ACameraShakeSourceActor : public AActor
		TEST_METHOD(Class__Engine__CameraShakeSourceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraShakeSourceActor, CameraShakeSourceComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraShakeSourceActor, 0x0228);
		}

		// class UCameraShakeSourceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__CameraShakeSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, UnknownData_GJ1Y, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, InnerAttenuationRadius, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, OuterAttenuationRadius, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, UnknownData_S8TW, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, CameraShake, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, bAutoStart, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, UnknownData_Y7WT, 0x0211);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShakeSourceComponent, 0x0220);
		}

		// class UCanvas : public UObject
		TEST_METHOD(Class__Engine__Canvas)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, OrgX, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, OrgY, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ClipX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ClipY, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, DrawColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_8UYI, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, SizeX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, SizeY, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_ZMHX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ColorModulate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, DefaultTexture, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, GradientTexture0, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ReporterGraph, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_J17V, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvas, 0x02D0);
		}

		// class UTextureRenderTarget : public UTexture
		TEST_METHOD(Class__Engine__TextureRenderTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget, TargetGamma, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget, UnknownData_C70X, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget, 0x00E0);
		}

		// class UTextureRenderTarget2D : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTarget2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, SizeX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, SizeY, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, ClearColor, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, AddressX, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, AddressY, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, RenderTargetFormat, 0x00FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, MipsSamplerFilter, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, MipsAddressU, 0x00FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, MipsAddressV, 0x00FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, OverrideFormat, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, UnknownData_SIQA, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget2D, 0x0108);
		}

		// class UCanvasRenderTarget2D : public UTextureRenderTarget2D
		TEST_METHOD(Class__Engine__CanvasRenderTarget2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, OnCanvasRenderTargetUpdate, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, World, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, bShouldClearRenderTargetOnReceiveUpdate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, UnknownData_P90Z, 0x0121);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasRenderTarget2D, 0x0128);
		}

		// class UCapsuleComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__CapsuleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, UnknownData_H87P, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, CapsuleRadius, 0x045C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCapsuleComponent, 0x0460);
		}

		// class UCheckBoxStyleAsset : public UObject
		TEST_METHOD(Class__Engine__CheckBoxStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBoxStyleAsset, CheckBoxStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBoxStyleAsset, 0x05A8);
		}

		// class UChildActorComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ChildActorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActorClass, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActor, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActorTemplate, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, UnknownData_T2I5, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChildActorComponent, 0x0230);
		}

		// class UChildConnection : public UNetConnection
		TEST_METHOD(Class__Engine__ChildConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildConnection, Parent, 0x1AF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChildConnection, 0x1AF8);
		}

		// class UPlatformInterfaceBase : public UObject
		TEST_METHOD(Class__Engine__PlatformInterfaceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceBase, AllDelegates, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformInterfaceBase, 0x0038);
		}

		// class UCloudStorageBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__CloudStorageBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloudStorageBase, LocalCloudFiles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloudStorageBase, UnknownData_B4WF, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCloudStorageBase, 0x0050);
		}

		// class UCollisionProfile : public UDeveloperSettings
		TEST_METHOD(Class__Engine__CollisionProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, Profiles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, DefaultChannelResponses, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, EditProfiles, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, ProfileRedirects, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, CollisionChannelRedirects, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, UnknownData_25H4, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCollisionProfile, 0x0170);
		}

		// class UComponentDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__Engine__ComponentDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComponentDelegateBinding, ComponentDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComponentDelegateBinding, 0x0038);
		}

		// class UActorComponentInstanceDataTransientOuter : public UObject
		TEST_METHOD(Class__Engine__ActorComponentInstanceDataTransientOuter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorComponentInstanceDataTransientOuter, 0x0028);
		}

		// class UCurveTable : public UObject
		TEST_METHOD(Class__Engine__CurveTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveTable, UnknownData_PQIV, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveTable, 0x00A0);
		}

		// class UCompositeCurveTable : public UCurveTable
		TEST_METHOD(Class__Engine__CompositeCurveTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, ParentTables, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, OldParentTables, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, UnknownData_H5CZ, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositeCurveTable, 0x00C8);
		}

		// class UCompositeDataTable : public UDataTable
		TEST_METHOD(Class__Engine__CompositeDataTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, ParentTables, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, OldParentTables, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, UnknownData_T4BZ, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositeDataTable, 0x00D8);
		}

		// class UControlChannel : public UChannel
		TEST_METHOD(Class__Engine__ControlChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlChannel, UnknownData_EY20, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlChannel, 0x0088);
		}

		// class UStreamingSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__StreamingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_TCK4, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, TimeLimitExceededMultiplier, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, TimeLimitExceededMinTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, MinBulkDataSizeForAsyncLoading, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_27WZ, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, AsyncLoadingTimeLimit, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, PriorityAsyncLoadingExtraTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingActorsUpdateTimeLimit, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, PriorityLevelStreamingActorsUpdateExtraTime, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingComponentsRegistrationGranularity, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingUnregisterComponentsTimeLimit, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingComponentsUnregistrationGranularity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_NJ9W, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamingSettings, 0x0070);
		}

		// class UGarbageCollectionSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__GarbageCollectionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, TimeBetweenPurgingPendingKillObjects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, UnknownData_AVU8, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MinGCClusterSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, NumRetriesBeforeForcingGC, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsNotConsideredByGC, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, SizeOfPermanentObjectPool, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsInGame, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsInEditor, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGarbageCollectionSettings, 0x0058);
		}

		// class ACullDistanceVolume : public AVolume
		TEST_METHOD(Class__Engine__CullDistanceVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACullDistanceVolume, CullDistances, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACullDistanceVolume, UnknownData_0ERX, 0x0269);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACullDistanceVolume, 0x0270);
		}

		// class UCurveBase : public UObject
		TEST_METHOD(Class__Engine__CurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveBase, UnknownData_ZTLQ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveBase, 0x0030);
		}

		// class UCurveEdPresetCurve : public UObject
		TEST_METHOD(Class__Engine__CurveEdPresetCurve)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveEdPresetCurve, 0x0028);
		}

		// class UCurveFloat : public UCurveBase
		TEST_METHOD(Class__Engine__CurveFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, FloatCurve, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, bIsEventCurve, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, UnknownData_B6TK, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveFloat, 0x00B8);
		}

		// class UCurveLinearColor : public UCurveBase
		TEST_METHOD(Class__Engine__CurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, FloatCurves, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustHue, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustSaturation, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustBrightness, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustBrightnessCurve, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustVibrance, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustMinAlpha, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustMaxAlpha, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, UnknownData_20LM, 0x024C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveLinearColor, 0x0250);
		}

		// class UTexture2D : public UTexture
		TEST_METHOD(Class__Engine__Texture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, LevelIndex, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, FirstResourceMemMip, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, AddressX, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, AddressY, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_GO2K, 0x00E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, ImportedSize, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_JMMJ, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2D, 0x0100);
		}

		// class UCurveLinearColorAtlas : public UTexture2D
		TEST_METHOD(Class__Engine__CurveLinearColorAtlas)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, TextureSize, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, UnknownData_4PZS, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, GradientCurves, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveLinearColorAtlas, 0x0118);
		}

		// class UCurveSourceInterface : public UInterface
		TEST_METHOD(Class__Engine__CurveSourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveSourceInterface, 0x0028);
		}

		// class UCurveVector : public UCurveBase
		TEST_METHOD(Class__Engine__CurveVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveVector, FloatCurves, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveVector, 0x01B0);
		}

		// class UDamageType : public UObject
		TEST_METHOD(Class__Engine__DamageType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, UnknownData_D49Q, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DamageImpulse, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DestructibleImpulse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DestructibleDamageSpreadScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DamageFalloff, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, UnknownData_AP19, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageType, 0x0040);
		}

		// class UPrimaryDataAsset : public UDataAsset
		TEST_METHOD(Class__Engine__PrimaryDataAsset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimaryDataAsset, 0x0030);
		}

		// class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__DataTableFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataTableFunctionLibrary, 0x0028);
		}

		// class ADebugCameraController : public APlayerController
		TEST_METHOD(Class__Engine__DebugCameraController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_ZGJH, 0x0571);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, DrawFrustum, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SelectedActor, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SelectedComponent, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SelectedHitPoint, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_6CJM, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, OriginalControllerRef, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, OriginalPlayer, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SpeedScale, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialMaxSpeed, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialAccel, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialDecel, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_9LVL, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugCameraController, 0x0678);
		}

		// class UDebugCameraControllerSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__DebugCameraControllerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugCameraControllerSettings, CycleViewModes, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugCameraControllerSettings, 0x0048);
		}

		// class AHUD : public AActor
		TEST_METHOD(Class__Engine__HUD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, PlayerOwner, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_Y5TE, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, CurrentTargetIndex, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_VPI5, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, PostRenderedActors, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_BXE3, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugDisplay, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ToggledDebugCategories, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, Canvas, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugCanvas, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugTextList, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ShowDebugTargetDesiredClass, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ShowDebugTargetActor, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_BO2Y, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHUD, 0x0310);
		}

		// class ADebugCameraHUD : public AHUD
		TEST_METHOD(Class__Engine__DebugCameraHUD)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugCameraHUD, 0x0310);
		}

		// class UDebugDrawService : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__DebugDrawService)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugDrawService, 0x0028);
		}

		// class ADecalActor : public AActor
		TEST_METHOD(Class__Engine__DecalActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADecalActor, Decal, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADecalActor, 0x0228);
		}

		// class ADefaultPawn : public APawn
		TEST_METHOD(Class__Engine__DefaultPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, BaseTurnRate, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, BaseLookUpRate, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, MovementComponent, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, CollisionComponent, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, MeshComponent, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, UnknownData_WQU7, 0x02A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADefaultPawn, 0x02A8);
		}

		// class APhysicsVolume : public AVolume
		TEST_METHOD(Class__Engine__PhysicsVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, TerminalVelocity, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, Priority, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, FluidFriction, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, UnknownData_ENYL, 0x0265);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsVolume, 0x0268);
		}

		// class ADefaultPhysicsVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__DefaultPhysicsVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADefaultPhysicsVolume, 0x0268);
		}

		// class UDemoNetConnection : public UNetConnection
		TEST_METHOD(Class__Engine__DemoNetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetConnection, UnknownData_SRGJ, 0x1AF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoNetConnection, 0x1B60);
		}

		// class UDemoNetDriver : public UNetDriver
		TEST_METHOD(Class__Engine__DemoNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_8OFJ, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, RollbackNetStartupActors, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_7QLU, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, CheckpointSaveMaxMSPerFrame, 0x09EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_T7D6, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, MulticastRecordOptions, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, bIsLocalReplay, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_ZCBH, 0x0A21);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, SpectatorControllers, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_L6YE, 0x0A38);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoNetDriver, 0x12C0);
		}

		// class UPendingNetGame : public UObject
		TEST_METHOD(Class__Engine__PendingNetGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, UnknownData_FJIU, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, NetDriver, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, DemoNetDriver, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, UnknownData_DHYY, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPendingNetGame, 0x00C0);
		}

		// class UDemoPendingNetGame : public UPendingNetGame
		TEST_METHOD(Class__Engine__DemoPendingNetGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoPendingNetGame, 0x00C0);
		}

		// class UDestructibleInterface : public UInterface
		TEST_METHOD(Class__Engine__DestructibleInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleInterface, 0x0028);
		}

		// class UTextureLODSettings : public UObject
		TEST_METHOD(Class__Engine__TextureLODSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLODSettings, TextureLODGroups, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureLODSettings, 0x0038);
		}

		// class UDeviceProfile : public UTextureLODSettings
		TEST_METHOD(Class__Engine__DeviceProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, DeviceType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, BaseProfileName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, Parent, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, UnknownData_GUGZ, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, CVars, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, UnknownData_1X3D, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfile, 0x00A8);
		}

		// class UDeviceProfileFragment : public UObject
		TEST_METHOD(Class__Engine__DeviceProfileFragment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileFragment, UnknownData_1MGJ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfileFragment, 0x0038);
		}

		// class UDeviceProfileManager : public UObject
		TEST_METHOD(Class__Engine__DeviceProfileManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileManager, Profiles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileManager, UnknownData_AS69, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfileManager, 0x00B0);
		}

		// class UDialogueSoundWaveProxy : public USoundBase
		TEST_METHOD(Class__Engine__DialogueSoundWaveProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueSoundWaveProxy, UnknownData_FZ8P, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueSoundWaveProxy, 0x01D0);
		}

		// class UDialogueVoice : public UObject
		TEST_METHOD(Class__Engine__DialogueVoice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, Gender, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, Plurality, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, UnknownData_9WMK, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, LocalizationGUID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, UnknownData_PT8X, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueVoice, 0x0040);
		}

		// class UDialogueWave : public UObject
		TEST_METHOD(Class__Engine__DialogueWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, UnknownData_5M8B, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, SpokenText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, SubtitleOverride, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, ContextMappings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, LocalizationGUID, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueWave, 0x0070);
		}

		// class ALight : public AActor
		TEST_METHOD(Class__Engine__Light)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALight, LightComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALight, UnknownData_R8C3, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALight, 0x0230);
		}

		// class ADirectionalLight : public ALight
		TEST_METHOD(Class__Engine__DirectionalLight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADirectionalLight, 0x0230);
		}

		// class ULightComponentBase : public USceneComponent
		TEST_METHOD(Class__Engine__LightComponentBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, LightGuid, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, Brightness, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, Intensity, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, LightColor, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_UBQD, 0x0216);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, DeepShadowLayerDistribution, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, IndirectLightingIntensity, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, VolumetricScatteringIntensity, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, SamplesPerPixel, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_ZQSU, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightComponentBase, 0x022C);
		}

		// class ULightComponent : public ULightComponentBase
		TEST_METHOD(Class__Engine__LightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MaxDrawDistance, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MaxDistanceFadeRange, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_N10F, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowMapChannel, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_KTXH, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MinRoughness, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, SpecularScale, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowResolutionScale, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowBias, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowSlopeBias, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowSharpen, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ContactShadowLength, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_RPTS, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightingChannels, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_TF7B, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionMaterial, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionScale, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_C5UX, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, IESTexture, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_SYNN, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, IESBrightnessScale, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionFadeDistance, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, DisabledBrightness, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_JCHM, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomScale, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomThreshold, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomMaxBrightness, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomTint, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, bUseRayTracedDistanceFieldShadows, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_Y1Y9, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, RayStartOffsetDepthScale, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_TLT3, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightComponent, 0x032C);
		}

		// class UDirectionalLightComponent : public ULightComponent
		TEST_METHOD(Class__Engine__DirectionalLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_CV1V, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, OcclusionMaskDarkness, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, OcclusionDepthRange, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightShaftOverrideDirection, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, WholeSceneDynamicShadowRadius, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowDistanceMovableLight, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowDistanceStationaryLight, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowCascades, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CascadeDistributionExponent, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CascadeTransitionFraction, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowDistanceFadeoutFraction, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_EMEH, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, FarShadowCascadeCount, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, FarShadowDistance, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DistanceFieldShadowDistance, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightSourceAngle, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightSourceSoftAngle, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowSourceAngleFactor, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, TraceDistance, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_4YV1, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, AtmosphereSunLightIndex, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, AtmosphereSunDiskColorScale, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_3JFR, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowStrength, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowOnAtmosphereStrength, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowOnSurfaceStrength, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowDepthBias, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowExtent, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowMapResolutionScale, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowRaySampleCountScale, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudScatteredLuminanceScale, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightmassSettings, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_8JEP, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ModulatedShadowColor, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowAmount, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_1R5O, 0x03E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDirectionalLightComponent, 0x03F0);
		}

		// class UDistribution : public UObject
		TEST_METHOD(Class__Engine__Distribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistribution, UnknownData_IH32, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistribution, 0x0030);
		}

		// class UDistributionFloat : public UDistribution
		TEST_METHOD(Class__Engine__DistributionFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloat, UnknownData_4KI1, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloat, 0x0038);
		}

		// class UDistributionFloatConstant : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstant, Constant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstant, UnknownData_K7TG, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatConstant, 0x0040);
		}

		// class UDistributionFloatConstantCurve : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatConstantCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstantCurve, ConstantCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatConstantCurve, 0x0050);
		}

		// class UDistributionFloatParameterBase : public UDistributionFloatConstant
		TEST_METHOD(Class__Engine__DistributionFloatParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MinInput, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MaxInput, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MinOutput, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MaxOutput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, ParamMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, UnknownData_KIXY, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatParameterBase, 0x0060);
		}

		// class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
		TEST_METHOD(Class__Engine__DistributionFloatParticleParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatParticleParameter, 0x0060);
		}

		// class UDistributionFloatUniform : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatUniform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniform, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniform, Max, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatUniform, 0x0040);
		}

		// class UDistributionFloatUniformCurve : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatUniformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniformCurve, ConstantCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatUniformCurve, 0x0050);
		}

		// class UDistributionVector : public UDistribution
		TEST_METHOD(Class__Engine__DistributionVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVector, UnknownData_PGP7, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVector, 0x0038);
		}

		// class UDistributionVectorConstant : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, Constant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, UnknownData_YP6S, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, LockedAxes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, UnknownData_BNHA, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorConstant, 0x0050);
		}

		// class UDistributionVectorConstantCurve : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorConstantCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, ConstantCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, UnknownData_085V, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, UnknownData_7K71, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorConstantCurve, 0x0058);
		}

		// class UDistributionVectorParameterBase : public UDistributionVectorConstant
		TEST_METHOD(Class__Engine__DistributionVectorParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, ParameterName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MinInput, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MaxInput, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MinOutput, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MaxOutput, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, ParamModes, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, UnknownData_6I5V, 0x008B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorParameterBase, 0x0090);
		}

		// class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
		TEST_METHOD(Class__Engine__DistributionVectorParticleParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorParticleParameter, 0x0090);
		}

		// class UDistributionVectorUniform : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorUniform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, Max, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, Min, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, UnknownData_SWYI, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, MirrorFlags, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, UnknownData_QX6B, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorUniform, 0x0060);
		}

		// class UDistributionVectorUniformCurve : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorUniformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, ConstantCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_T9OI, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, MirrorFlags, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_8ABL, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_NC1E, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorUniformCurve, 0x0060);
		}

		// class ADocumentationActor : public AActor
		TEST_METHOD(Class__Engine__DocumentationActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADocumentationActor, UnknownData_IXHD, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADocumentationActor, 0x0228);
		}

		// class UDrawFrustumComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__DrawFrustumComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumColor, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumAngle, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumAspectRatio, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumStartDist, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumEndDist, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, UnknownData_FP9P, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, Texture, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawFrustumComponent, 0x0460);
		}

		// class UDrawSphereComponent : public USphereComponent
		TEST_METHOD(Class__Engine__DrawSphereComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawSphereComponent, 0x0460);
		}

		// class UEdGraph : public UObject
		TEST_METHOD(Class__Engine__EdGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, Schema, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, Nodes, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, UnknownData_UK5R, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraph, 0x0060);
		}

		// class UGraphNodeContextMenuContext : public UObject
		TEST_METHOD(Class__Engine__GraphNodeContextMenuContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, Blueprint, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, Graph, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, Node, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, UnknownData_AESE, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, bIsDebugging, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, UnknownData_JXEJ, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGraphNodeContextMenuContext, 0x0050);
		}

		// class UEdGraphNode : public UObject
		TEST_METHOD(Class__Engine__EdGraphNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_HTIU, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, DeprecatedPins, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodePosX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodePosY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeWidth, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeHeight, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, AdvancedPinDisplay, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, EnabledState, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_1I44, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_R6BZ, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeComment, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, ErrorType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_7RZN, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, ErrorMsg, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeGuid, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphNode, 0x0098);
		}

		// class UEdGraphNode_Documentation : public UEdGraphNode
		TEST_METHOD(Class__Engine__EdGraphNode_Documentation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Documentation, Link, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Documentation, Excerpt, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphNode_Documentation, 0x00B8);
		}

		// class UEdGraphPin_Deprecated : public UObject
		TEST_METHOD(Class__Engine__EdGraphPin_Deprecated)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinToolTip, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, Direction, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, UnknownData_BKZ2, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultValue, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, AutogeneratedDefaultValue, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultObject, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultTextValue, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, LinkedTo, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, SubPins, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, ParentPin, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, ReferencePassThroughConnection, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphPin_Deprecated, 0x0118);
		}

		// class UEdGraphSchema : public UObject
		TEST_METHOD(Class__Engine__EdGraphSchema)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphSchema, 0x0028);
		}

		// class AEmitter : public AActor
		TEST_METHOD(Class__Engine__Emitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, ParticleSystemComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, UnknownData_JXZY, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleSpawn, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleBurst, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleDeath, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleCollide, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEmitter, 0x0270);
		}

		// class AEmitterCameraLensEffectBase : public AEmitter
		TEST_METHOD(Class__Engine__EmitterCameraLensEffectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, PS_CameraEffect, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, PS_CameraEffectNonExtremeContent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, BaseCamera, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_UDV7, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, RelativeTransform, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, BaseFOV, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_O8WE, 0x02C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, EmittersToTreatAsSame, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, DistFromCamera, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_1RPL, 0x02DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEmitterCameraLensEffectBase, 0x02E0);
		}

		// class UViewModeUtils : public UObject
		TEST_METHOD(Class__Engine__ViewModeUtils)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewModeUtils, 0x0028);
		}

		// class UEngineBaseTypes : public UObject
		TEST_METHOD(Class__Engine__EngineBaseTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineBaseTypes, 0x0028);
		}

		// class UEngineHandlerComponentFactory : public UHandlerComponentFactory
		TEST_METHOD(Class__Engine__EngineHandlerComponentFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineHandlerComponentFactory, 0x0028);
		}

		// class ULocalMessage : public UObject
		TEST_METHOD(Class__Engine__LocalMessage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalMessage, 0x0028);
		}

		// class UEngineMessage : public ULocalMessage
		TEST_METHOD(Class__Engine__EngineMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, FailedPlaceMessage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, MaxedOutMessage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, EnteredMessage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, LeftMessage, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, GlobalNameChange, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, SpecEnteredMessage, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, NewPlayerMessage, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, NewSpecMessage, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineMessage, 0x00A8);
		}

		// class UEngineTypes : public UObject
		TEST_METHOD(Class__Engine__EngineTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineTypes, 0x0028);
		}

		// class AExponentialHeightFog : public AInfo
		TEST_METHOD(Class__Engine__ExponentialHeightFog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AExponentialHeightFog, Component, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExponentialHeightFog, UnknownData_SRP6, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AExponentialHeightFog, 0x0230);
		}

		// class UExponentialHeightFogComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ExponentialHeightFogComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_VBPV, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogHeightFalloff, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, SecondFogData, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogInscatteringColor, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_S58V, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringColorCubemap, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringColorCubemapAngle, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringTextureTint, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FullyDirectionalInscatteringColorDistance, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, NonDirectionalInscatteringColorDistance, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringExponent, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringStartDistance, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringColor, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogMaxOpacity, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, StartDistance, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogCutoffDistance, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, bEnableVolumetricFog, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_IQH3, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogScatteringDistribution, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogAlbedo, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogEmissive, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogExtinctionScale, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogDistance, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogStaticLightingScatteringIntensity, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, bOverrideLightColorsWithFogInscatteringColors, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_GOU3, 0x0291);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExponentialHeightFogComponent, 0x02A0);
		}

		// class UExporter : public UObject
		TEST_METHOD(Class__Engine__Exporter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, SupportedClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, ExportRootScope, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, FormatExtension, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, FormatDescription, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, PreferredFormatIndex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, TextIndent, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, UnknownData_GNE3, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, ExportTask, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, UnknownData_518R, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExporter, 0x0078);
		}

		// class UFont : public UObject
		TEST_METHOD(Class__Engine__Font)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_O3O1, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, FontCacheType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_S7BU, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, characters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Textures, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, IsRemapped, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, EmScale, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Ascent, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Descent, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Leading, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Kerning, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, ImportOptions, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, NumCharacters, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_PN8M, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, MaxCharHeight, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, ScalingFactor, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, LegacyFontSize, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, LegacyFontName, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, CompositeFont, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_7ZG0, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFont, 0x01D0);
		}

		// class UFontFace : public UObject
		TEST_METHOD(Class__Engine__FontFace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, UnknownData_F2UN, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, SourceFilename, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, Hinting, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, LoadingPolicy, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, LayoutMethod, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, UnknownData_HPY5, 0x0043);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontFace, 0x0058);
		}

		// class UFontImportOptions : public UObject
		TEST_METHOD(Class__Engine__FontImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontImportOptions, Data, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontImportOptions, 0x00D8);
		}

		// class UForceFeedbackAttenuation : public UObject
		TEST_METHOD(Class__Engine__ForceFeedbackAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackAttenuation, Attenuation, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackAttenuation, 0x00D8);
		}

		// class UForceFeedbackComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ForceFeedbackComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, ForceFeedbackEffect, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, UnknownData_ADYB, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, IntensityMultiplier, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, AttenuationSettings, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, AttenuationOverrides, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, OnForceFeedbackFinished, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, UnknownData_2OD3, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackComponent, 0x02E0);
		}

		// class UForceFeedbackEffect : public UObject
		TEST_METHOD(Class__Engine__ForceFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, ChannelDetails, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, Duration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, UnknownData_1VI2, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackEffect, 0x0040);
		}

		// class UGameEngine : public UEngine
		TEST_METHOD(Class__Engine__GameEngine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, MaxDeltaTime, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, ServerFlushLogInterval, 0x0DE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, GameInstance, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, UnknownData_BMAC, 0x0DF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameEngine, 0x0E30);
		}

		// class AGameNetworkManager : public AInfo
		TEST_METHOD(Class__Engine__GameNetworkManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, BadPacketLossThreshold, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, SeverePacketLossThreshold, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, BadPingThreshold, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, SeverePingThreshold, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, AdjustedNetSpeed, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, LastNetSpeedUpdateTime, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, TotalNetBandwidth, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MinDynamicBandwidth, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxDynamicBandwidth, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_WHHE, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, StandbyRxCheatTime, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, StandbyTxCheatTime, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentMissingForRxStandby, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentMissingForTxStandby, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentForBadPing, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, JoinInProgressStandbyWaitTime, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MoveRepSize, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXPOSITIONERRORSQUARED, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXNEARZEROVELOCITYSQUARED, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, CLIENTADJUSTUPDATECOST, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXCLIENTUPDATEINTERVAL, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxClientForcedUpdateDuration, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ServerForcedUpdateHitchThreshold, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ServerForcedUpdateHitchCooldown, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxMoveDeltaTime, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxClientSmoothingDeltaTime, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTime, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTimeThrottled, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTimeStationary, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveThrottleAtNetSpeed, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveThrottleOverPlayerCount, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientAuthorativePosition, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_B078, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientErrorUpdateRateLimit, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetCamUpdateDeltaTime, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetCamUpdatePositionLimit, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyDetection, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyResolution, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_FSYS, 0x02AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyMaxTimeMargin, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyMinTimeMargin, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyResolutionRate, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyDriftAllowance, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyForceCorrectionsDuringResolution, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bUseDistanceBasedRelevancy, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_H8UM, 0x02C2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameNetworkManager, 0x02D0);
		}

		// class UGameplayStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__GameplayStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayStatics, 0x0028);
		}

		// class AGameSession : public AInfo
		TEST_METHOD(Class__Engine__GameSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxSpectators, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxPlayers, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxPartySize, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxSplitscreensPerConnection, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, bRequiresPushToTalk, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, UnknownData_A6DF, 0x022E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, SessionName, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameSession, 0x0238);
		}

		// class ASpotLight : public ALight
		TEST_METHOD(Class__Engine__SpotLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpotLight, SpotLightComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpotLight, 0x0238);
		}

		// class AGeneratedMeshAreaLight : public ASpotLight
		TEST_METHOD(Class__Engine__GeneratedMeshAreaLight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeneratedMeshAreaLight, 0x0238);
		}

		// class UHapticFeedbackEffect_Base : public UObject
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Base)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Base, 0x0028);
		}

		// class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Buffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, Amplitudes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, SampleRate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, UnknownData_RUV1, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Buffer, 0x0068);
		}

		// class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Curve, HapticDetails, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Curve, 0x0138);
		}

		// class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_SoundWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_SoundWave, SoundWave, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_SoundWave, UnknownData_FL1J, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_SoundWave, 0x0060);
		}

		// class UHealthSnapshotBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__HealthSnapshotBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHealthSnapshotBlueprintLibrary, 0x0028);
		}

		// class UHLODEngineSubsystem : public UEngineSubsystem
		TEST_METHOD(Class__Engine__HLODEngineSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHLODEngineSubsystem, 0x0030);
		}

		// class UHLODProxy : public UObject
		TEST_METHOD(Class__Engine__HLODProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHLODProxy, ProxyMeshes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHLODProxy, HLODActors, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHLODProxy, 0x0088);
		}

		// class UHLODProxyDesc : public UObject
		TEST_METHOD(Class__Engine__HLODProxyDesc)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHLODProxyDesc, 0x0028);
		}

		// class UImportanceSamplingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__ImportanceSamplingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImportanceSamplingLibrary, 0x0028);
		}

		// class UImportantToggleSettingInterface : public UInterface
		TEST_METHOD(Class__Engine__ImportantToggleSettingInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImportantToggleSettingInterface, 0x0028);
		}

		// class UInGameAdManager : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__InGameAdManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, UnknownData_T1PE, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, ClickedBannerDelegates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, ClosedAdDelegates, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInGameAdManager, 0x0060);
		}

		// class UInheritableComponentHandler : public UObject
		TEST_METHOD(Class__Engine__InheritableComponentHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInheritableComponentHandler, Records, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInheritableComponentHandler, UnnecessaryComponents, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInheritableComponentHandler, 0x0048);
		}

		// class UInputDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__Engine__InputDelegateBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputDelegateBinding, 0x0028);
		}

		// class UInputActionDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputActionDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputActionDelegateBinding, InputActionDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputActionDelegateBinding, 0x0038);
		}

		// class UInputAxisDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputAxisDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputAxisDelegateBinding, InputAxisDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputAxisDelegateBinding, 0x0038);
		}

		// class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputAxisKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputAxisKeyDelegateBinding, InputAxisKeyDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputAxisKeyDelegateBinding, 0x0038);
		}

		// class UInputComponent : public UActorComponent
		TEST_METHOD(Class__Engine__InputComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, UnknownData_G2VK, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, CachedKeyToActionInfo, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, UnknownData_1Y8Q, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputComponent, 0x0138);
		}

		// class UInputKeyDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeyDelegateBinding, InputKeyDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputKeyDelegateBinding, 0x0038);
		}

		// class UInputSettings : public UObject
		TEST_METHOD(Class__Engine__InputSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, AxisConfig, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, bUseAutocorrect, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_PDGW, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectOS, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectCultures, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectDeviceModels, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultViewportMouseCaptureMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultViewportMouseLockMode, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_X5BL, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, FOVScale, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DoubleClickTime, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_O7SW, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ActionMappings, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, AxisMappings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, SpeechMappings, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultPlayerInputClass, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultInputComponentClass, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultTouchInterface, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ConsoleKey, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ConsoleKeys, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputSettings, 0x0140);
		}

		// class UInputTouchDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputTouchDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputTouchDelegateBinding, InputTouchDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputTouchDelegateBinding, 0x0038);
		}

		// class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
		TEST_METHOD(Class__Engine__InputVectorAxisDelegateBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputVectorAxisDelegateBinding, 0x0038);
		}

		// class UInterface_AssetUserData : public UInterface
		TEST_METHOD(Class__Engine__Interface_AssetUserData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_AssetUserData, 0x0028);
		}

		// class UBoneReferenceSkeletonProvider : public UInterface
		TEST_METHOD(Class__Engine__BoneReferenceSkeletonProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoneReferenceSkeletonProvider, 0x0028);
		}

		// class UInterface_CollisionDataProvider : public UInterface
		TEST_METHOD(Class__Engine__Interface_CollisionDataProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_CollisionDataProvider, 0x0028);
		}

		// class UInterface_PostProcessVolume : public UInterface
		TEST_METHOD(Class__Engine__Interface_PostProcessVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_PostProcessVolume, 0x0028);
		}

		// class UInterface_PreviewMeshProvider : public UInterface
		TEST_METHOD(Class__Engine__Interface_PreviewMeshProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_PreviewMeshProvider, 0x0028);
		}

		// class UInterpCurveEdSetup : public UObject
		TEST_METHOD(Class__Engine__InterpCurveEdSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, Tabs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, ActiveTab, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, UnknownData_PZ9G, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpCurveEdSetup, 0x0040);
		}

		// class UInterpData : public UObject
		TEST_METHOD(Class__Engine__InterpData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, InterpLength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, PathBuildTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, InterpGroups, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, CurveEdSetup, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, EdSectionStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, EdSectionEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, UnknownData_VCUD, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, CachedDirectorGroup, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, AllEventNames, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpData, 0x0070);
		}

		// class UInterpFilter : public UObject
		TEST_METHOD(Class__Engine__InterpFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpFilter, Caption, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter, 0x0038);
		}

		// class UInterpFilter_Classes : public UInterpFilter
		TEST_METHOD(Class__Engine__InterpFilter_Classes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter_Classes, 0x0038);
		}

		// class UInterpFilter_Custom : public UInterpFilter
		TEST_METHOD(Class__Engine__InterpFilter_Custom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter_Custom, 0x0038);
		}

		// class UInterpGroup : public UObject
		TEST_METHOD(Class__Engine__InterpGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, UnknownData_XTP6, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, InterpTracks, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, GroupName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, GroupColor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, UnknownData_535G, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroup, 0x0050);
		}

		// class UInterpGroupCamera : public UInterpGroup
		TEST_METHOD(Class__Engine__InterpGroupCamera)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, CameraAnimInst, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, CompressTolerance, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, UnknownData_H72O, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupCamera, 0x0060);
		}

		// class UInterpGroupDirector : public UInterpGroup
		TEST_METHOD(Class__Engine__InterpGroupDirector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupDirector, 0x0050);
		}

		// class UInterpGroupInst : public UObject
		TEST_METHOD(Class__Engine__InterpGroupInst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, Group, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, GroupActor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, TrackInst, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInst, 0x0048);
		}

		// class UInterpGroupInstCamera : public UInterpGroupInst
		TEST_METHOD(Class__Engine__InterpGroupInstCamera)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInstCamera, 0x0048);
		}

		// class UInterpGroupInstDirector : public UInterpGroupInst
		TEST_METHOD(Class__Engine__InterpGroupInstDirector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInstDirector, 0x0048);
		}

		// class UInterpToMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__InterpToMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, Duration, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_YYVL, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, bSweep, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, TeleportType, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, BehaviourType, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, bCheckIfStillInWorld, 0x00FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_CG1N, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnInterpToReverse, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnInterpToStop, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnWaitBeginDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnWaitEndDelegate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnResetDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, MaxSimulationTimeStep, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, MaxSimulationIterations, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, ControlPoints, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_SD8E, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpToMovementComponent, 0x0190);
		}

		// class UInterpTrack : public UObject
		TEST_METHOD(Class__Engine__InterpTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_QFPV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, SubTracks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, TrackInstClass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, ActiveCondition, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_CLPV, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, TrackTitle, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_TPA2, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrack, 0x0070);
		}

		// class UInterpTrackFloatBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackFloatBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, FloatTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, UnknownData_DMGM, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatBase, 0x0090);
		}

		// class UInterpTrackAnimControl : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackAnimControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, SlotName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, AnimSeqs, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, UnknownData_FP5Y, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAnimControl, 0x00B0);
		}

		// class UInterpTrackVectorBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackVectorBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, VectorTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, UnknownData_XRG3, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorBase, 0x0090);
		}

		// class UInterpTrackAudioMaster : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackAudioMaster)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAudioMaster, 0x0090);
		}

		// class UInterpTrackBoolProp : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackBoolProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackBoolProp, BoolTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackBoolProp, PropertyName, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackBoolProp, 0x0088);
		}

		// class UInterpTrackColorProp : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackColorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackColorProp, 0x0098);
		}

		// class UInterpTrackColorScale : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackColorScale)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackColorScale, 0x0090);
		}

		// class UInterpTrackDirector : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackDirector, CutTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackDirector, UnknownData_3J1A, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackDirector, 0x0088);
		}

		// class UInterpTrackEvent : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackEvent, EventTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackEvent, UnknownData_TJ4I, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackEvent, 0x0088);
		}

		// class UInterpTrackFade : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, UnknownData_Y2H0, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, FadeColor, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, UnknownData_9OG1, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFade, 0x00A8);
		}

		// class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatAnimBPParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, AnimBlueprintClass, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, AnimClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, ParamName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, UnknownData_MKPP, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatAnimBPParam, 0x00B0);
		}

		// class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatMaterialParam, TargetMaterials, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatMaterialParam, ParamName, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatMaterialParam, 0x00A8);
		}

		// class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatParticleParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatParticleParam, ParamName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatParticleParam, 0x0098);
		}

		// class UInterpTrackFloatProp : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatProp, 0x0098);
		}

		// class UInterpTrackInst : public UObject
		TEST_METHOD(Class__Engine__InterpTrackInst)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInst, 0x0028);
		}

		// class UInterpTrackInstAnimControl : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstAnimControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAnimControl, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAnimControl, UnknownData_6INS, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAnimControl, 0x0030);
		}

		// class UInterpTrackInstAudioMaster : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstAudioMaster)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAudioMaster, 0x0028);
		}

		// class UInterpTrackInstProperty : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstProperty, InterpProperty, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstProperty, PropertyOuterObjectInst, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstProperty, 0x0050);
		}

		// class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstBoolProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, UnknownData_HOPD, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, ResetBool, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, UnknownData_TMEV, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstBoolProp, 0x0068);
		}

		// class UInterpTrackInstColorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, UnknownData_GMT7, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, ResetColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, UnknownData_90FP, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstColorProp, 0x0060);
		}

		// class UInterpTrackInstColorScale : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstColorScale)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstColorScale, 0x0028);
		}

		// class UInterpTrackInstDirector : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstDirector, OldViewTarget, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstDirector, 0x0030);
		}

		// class UInterpTrackInstEvent : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstEvent, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstEvent, UnknownData_G9TO, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstEvent, 0x0030);
		}

		// class UInterpTrackInstFade : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFade, 0x0028);
		}

		// class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatAnimBPParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, AnimScriptInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, ResetFloat, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, UnknownData_MNB1, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatAnimBPParam, 0x0040);
		}

		// class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, MaterialInstances, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, ResetFloats, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, PrimitiveMaterialRefs, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, InstancedTrack, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatMaterialParam, 0x0060);
		}

		// class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatParticleParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatParticleParam, ResetFloat, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatParticleParam, UnknownData_IELN, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatParticleParam, 0x0030);
		}

		// class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstFloatProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, UnknownData_B17V, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, ResetFloat, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, UnknownData_6J2E, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatProp, 0x0060);
		}

		// class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstLinearColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstLinearColorProp, UnknownData_30ZL, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstLinearColorProp, ResetColor, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstLinearColorProp, 0x0068);
		}

		// class UInterpTrackInstMove : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstMove, ResetLocation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstMove, ResetRotation, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstMove, 0x0040);
		}

		// class UInterpTrackInstParticleReplay : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstParticleReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstParticleReplay, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstParticleReplay, UnknownData_YWTW, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstParticleReplay, 0x0030);
		}

		// class UInterpTrackInstSlomo : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstSlomo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSlomo, OldTimeDilation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSlomo, UnknownData_4J1W, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstSlomo, 0x0030);
		}

		// class UInterpTrackInstSound : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, UnknownData_EAJ6, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, PlayAudioComp, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstSound, 0x0038);
		}

		// class UInterpTrackInstToggle : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstToggle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, Action, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, UnknownData_Z8G3, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, LastUpdatePosition, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, UnknownData_NX4O, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstToggle, 0x0038);
		}

		// class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstVectorMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, MaterialInstances, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, ResetVectors, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, PrimitiveMaterialRefs, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, InstancedTrack, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVectorMaterialParam, 0x0060);
		}

		// class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstVectorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, UnknownData_A0TP, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, ResetVector, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, UnknownData_P8A0, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVectorProp, 0x0068);
		}

		// class UInterpTrackInstVisibility : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstVisibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, Action, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, UnknownData_7AVP, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, LastUpdatePosition, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVisibility, 0x0030);
		}

		// class UInterpTrackLinearColorBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackLinearColorBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, LinearColorTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, UnknownData_KH0Z, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackLinearColorBase, 0x0090);
		}

		// class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
		TEST_METHOD(Class__Engine__InterpTrackLinearColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackLinearColorProp, 0x0098);
		}

		// class UInterpTrackMove : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, PosTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, EulerTrack, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LookupTrack, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LookAtGroupName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LinCurveTension, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, AngCurveTension, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, UnknownData_3O69, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, RotMode, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, UnknownData_NZJB, 0x00C5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackMove, 0x00C8);
		}

		// class UInterpTrackMoveAxis : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackMoveAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, MoveAxis, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, UnknownData_D80G, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, LookupTrack, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackMoveAxis, 0x00A8);
		}

		// class UInterpTrackParticleReplay : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackParticleReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackParticleReplay, TrackKeys, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackParticleReplay, 0x0080);
		}

		// class UInterpTrackSlomo : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackSlomo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackSlomo, 0x0090);
		}

		// class UInterpTrackSound : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackSound, Sounds, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackSound, UnknownData_5KK8, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackSound, 0x00A8);
		}

		// class UInterpTrackToggle : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackToggle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackToggle, ToggleTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackToggle, UnknownData_O3WR, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackToggle, 0x0088);
		}

		// class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackVectorMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorMaterialParam, TargetMaterials, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorMaterialParam, ParamName, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorMaterialParam, 0x00A8);
		}

		// class UInterpTrackVectorProp : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackVectorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorProp, 0x0098);
		}

		// class UInterpTrackVisibility : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackVisibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVisibility, VisibilityTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVisibility, UnknownData_IQA9, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVisibility, 0x0088);
		}

		// class UIntSerialization : public UObject
		TEST_METHOD(Class__Engine__IntSerialization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt16Variable, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_05BL, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt32Variable, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt64Variable, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt8Variable, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_RS7O, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt16Variable, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_CCX8, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt64Variable, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt8Variable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_JPT9, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt32Variable, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntSerialization, 0x0050);
		}

		// class AKillZVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__KillZVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AKillZVolume, 0x0268);
		}

		// class UKismetArrayLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetArrayLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetArrayLibrary, 0x0028);
		}

		// class UKismetGuidLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetGuidLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetGuidLibrary, 0x0028);
		}

		// class UKismetInputLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetInputLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetInputLibrary, 0x0028);
		}

		// class UKismetInternationalizationLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetInternationalizationLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetInternationalizationLibrary, 0x0028);
		}

		// class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetMaterialLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetMaterialLibrary, 0x0028);
		}

		// class UKismetMathLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetMathLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetMathLibrary, 0x0028);
		}

		// class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetNodeHelperLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetNodeHelperLibrary, 0x0028);
		}

		// class UKismetRenderingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetRenderingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetRenderingLibrary, 0x0028);
		}

		// class UKismetStringLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetStringLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetStringLibrary, 0x0028);
		}

		// class UKismetStringTableLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetStringTableLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetStringTableLibrary, 0x0028);
		}

		// class UKismetSystemLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetSystemLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetSystemLibrary, 0x0028);
		}

		// class UKismetTextLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetTextLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetTextLibrary, 0x0028);
		}

		// class ULayer : public UObject
		TEST_METHOD(Class__Engine__Layer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, UnknownData_DAXJ, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, ActorStats, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULayer, 0x0048);
		}

		// class ULevelPartitionInterface : public UInterface
		TEST_METHOD(Class__Engine__LevelPartitionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelPartitionInterface, 0x0028);
		}

		// class ULevel : public UObject
		TEST_METHOD(Class__Engine__Level)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_7PTF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, OwningWorld, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, Model, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ModelComponents, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ActorCluster, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NumTextureStreamingUnbuiltComponents, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NumTextureStreamingDirtyResources, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LevelScriptActor, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavListStart, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavListEnd, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavDataChunks, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LightmapTotalSize, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ShadowmapTotalSize, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, StaticNavigableGeometry, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, StreamingTextureGuids, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_VJE6, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LevelBuildDataId, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, MapBuildData, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LightBuildLevelOffset, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_E9NF, 0x01F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, WorldSettings, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_JXZQ, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, AssetUserData, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_ULUQ, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, DestroyedReplicatedStaticActors, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevel, 0x0298);
		}

		// class ULevelActorContainer : public UObject
		TEST_METHOD(Class__Engine__LevelActorContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelActorContainer, Actors, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelActorContainer, 0x0038);
		}

		// class ALevelBounds : public AActor
		TEST_METHOD(Class__Engine__LevelBounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, BoxComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, bAutoUpdateBounds, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, UnknownData_WHDQ, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelBounds, 0x0230);
		}

		// class ALevelScriptActor : public AActor
		TEST_METHOD(Class__Engine__LevelScriptActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelScriptActor, UnknownData_UZEH, 0x0221);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelScriptActor, 0x0228);
		}

		// class ULevelScriptBlueprint : public UBlueprint
		TEST_METHOD(Class__Engine__LevelScriptBlueprint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelScriptBlueprint, 0x00A0);
		}

		// class ULevelStreamingAlwaysLoaded : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingAlwaysLoaded)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingAlwaysLoaded, 0x0150);
		}

		// class ULevelStreamingPersistent : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingPersistent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingPersistent, 0x0150);
		}

		// class ALevelStreamingVolume : public AVolume
		TEST_METHOD(Class__Engine__LevelStreamingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, StreamingLevelNames, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, UnknownData_0I0S, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, StreamingUsage, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, UnknownData_40FW, 0x026D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelStreamingVolume, 0x0270);
		}

		// class ULightmappedSurfaceCollection : public UObject
		TEST_METHOD(Class__Engine__LightmappedSurfaceCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmappedSurfaceCollection, SourceModel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmappedSurfaceCollection, Surfaces, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmappedSurfaceCollection, 0x0040);
		}

		// class ULightMapTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__LightMapTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapTexture2D, UnknownData_WG2K, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapTexture2D, 0x0108);
		}

		// class ULightMapVirtualTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__LightMapVirtualTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapVirtualTexture2D, TypeToLayer, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapVirtualTexture2D, UnknownData_ZCVK, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapVirtualTexture2D, 0x0118);
		}

		// class ALightmassCharacterIndirectDetailVolume : public AVolume
		TEST_METHOD(Class__Engine__LightmassCharacterIndirectDetailVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassCharacterIndirectDetailVolume, 0x0258);
		}

		// class ALightmassImportanceVolume : public AVolume
		TEST_METHOD(Class__Engine__LightmassImportanceVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassImportanceVolume, 0x0258);
		}

		// class ALightmassPortal : public AActor
		TEST_METHOD(Class__Engine__LightmassPortal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALightmassPortal, PortalComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassPortal, 0x0228);
		}

		// class ULightmassPortalComponent : public USceneComponent
		TEST_METHOD(Class__Engine__LightmassPortalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPortalComponent, PreviewBox, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassPortalComponent, 0x0200);
		}

		// class ULightmassPrimitiveSettingsObject : public UObject
		TEST_METHOD(Class__Engine__LightmassPrimitiveSettingsObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPrimitiveSettingsObject, LightmassSettings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassPrimitiveSettingsObject, 0x0040);
		}

		// class ULineBatchComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__LineBatchComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULineBatchComponent, UnknownData_YXJS, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULineBatchComponent, 0x0480);
		}

		// class ULocalLightComponent : public ULightComponent
		TEST_METHOD(Class__Engine__LocalLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, Radius, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, AttenuationRadius, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, LightmassSettings, 0x0334);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalLightComponent, 0x0340);
		}

		// class ULocalPlayerSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__LocalPlayerSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPlayerSubsystem, 0x0030);
		}

		// class ALODActor : public AActor
		TEST_METHOD(Class__Engine__LODActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, StaticMeshComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, ImpostersStaticMeshComponents, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, Proxy, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, Key, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, LODDrawDistance, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, LODLevel, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, SubActors, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, CachedNumHLODLevels, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, UnknownData_VGWR, 0x02A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALODActor, 0x02A8);
		}

		// class ULODSyncComponent : public UActorComponent
		TEST_METHOD(Class__Engine__LODSyncComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, NumLODs, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, ForcedLOD, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, ComponentsToSync, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, CustomLODMapping, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, CurrentLOD, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, CurrentNumLODs, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, DriveComponents, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, SubComponents, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULODSyncComponent, 0x0140);
		}

		// class ULODSyncInterface : public UInterface
		TEST_METHOD(Class__Engine__LODSyncInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULODSyncInterface, 0x0028);
		}

		// class UMapBuildDataRegistry : public UObject
		TEST_METHOD(Class__Engine__MapBuildDataRegistry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBuildDataRegistry, LevelLightingQuality, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBuildDataRegistry, UnknownData_Q75U, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapBuildDataRegistry, 0x0238);
		}

		// class UMaterial : public UMaterialInterface
		TEST_METHOD(Class__Engine__Material)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PhysMaterial, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PhysMaterialMask, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PhysicalMaterialMap, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Metallic, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_P6VL, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Specular, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_R347, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Anisotropy, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_0G0L, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Normal, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_8ZAR, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Tangent, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_DZVY, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, EmissiveColor, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_8Q2Y, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialDomain, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendMode, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, DecalBlendMode, 0x0152);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialDecalResponse, 0x0153);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingModel, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingModels, 0x0156);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, OpacityMaskClipValue, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, WorldPositionOffset, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_9KT0, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Refraction, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_TOYM, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialAttributes, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_N9JU, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PixelDepthOffset, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_PUSZ, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingModelFromMaterialExpression, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_K7MB, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucencyLightingMode, 0x01C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_AF2X, 0x01C7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, NumCustomizedUVs, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucencyDirectionalLightingIntensity, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentShadowDensityScale, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowDensityScale, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowSecondDensityScale, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowSecondOpacity, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentBackscatteringExponent, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentMultipleScatteringExtinction, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentShadowStartOffset, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_9NWR, 0x01FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_IBSV, 0x01FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_JD8L, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_XQET, 0x0205);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, D3D11TessellationMode, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingRate, 0x020B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendableLocation, 0x020E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, StencilCompare, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, StencilRefValue, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, RefractionMode, 0x0212);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_1QLF, 0x0213);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendablePriority, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_3W7E, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UsageFlagWarnings, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, RefractionDepthBias, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, StateId, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaxDisplacement, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_81YB, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, CachedExpressionData, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterial, 0x0490);
		}

		// class UMaterialBillboardComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__MaterialBillboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialBillboardComponent, Elements, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialBillboardComponent, 0x0450);
		}

		// class UMaterialExpressionAbs : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAbs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAbs, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAbs, UnknownData_7R06, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAbs, 0x0058);
		}

		// class UMaterialExpressionActorPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionActorPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionActorPositionWS, 0x0040);
		}

		// class UMaterialExpressionAdd : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAdd)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, UnknownData_RYLM, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, UnknownData_VHB4, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAdd, 0x0070);
		}

		// class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Engine__MaterialExpressionAntialiasedTextureMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, Threshold, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, Channel, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, UnknownData_22KU, 0x0085);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAntialiasedTextureMask, 0x0088);
		}

		// class UMaterialExpressionAppendVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAppendVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, UnknownData_3W3M, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, UnknownData_QRSR, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAppendVector, 0x0068);
		}

		// class UMaterialExpressionArccosine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArccosine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosine, UnknownData_MQX1, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArccosine, 0x0058);
		}

		// class UMaterialExpressionArccosineFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArccosineFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosineFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosineFast, UnknownData_NCLI, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArccosineFast, 0x0058);
		}

		// class UMaterialExpressionArcsine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArcsine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsine, UnknownData_K81T, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArcsine, 0x0058);
		}

		// class UMaterialExpressionArcsineFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArcsineFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsineFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsineFast, UnknownData_M9YF, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArcsineFast, 0x0058);
		}

		// class UMaterialExpressionArctangent : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent, UnknownData_LVT1, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent, 0x0058);
		}

		// class UMaterialExpressionArctangent2 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, Y, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, UnknownData_Z3JE, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, X, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, UnknownData_HFCM, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent2, 0x0068);
		}

		// class UMaterialExpressionArctangent2Fast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent2Fast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, Y, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, UnknownData_V30K, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, X, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, UnknownData_YW9A, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent2Fast, 0x0068);
		}

		// class UMaterialExpressionArctangentFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangentFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangentFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangentFast, UnknownData_AT8S, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangentFast, 0x0058);
		}

		// class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericFogColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAtmosphericFogColor, WorldPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAtmosphericFogColor, UnknownData_53U3, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericFogColor, 0x0058);
		}

		// class UMaterialExpressionAtmosphericLightColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericLightColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericLightColor, 0x0040);
		}

		// class UMaterialExpressionAtmosphericLightVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericLightVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericLightVector, 0x0040);
		}

		// class UMaterialExpressionBentNormalCustomOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionBentNormalCustomOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBentNormalCustomOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBentNormalCustomOutput, UnknownData_B0H4, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBentNormalCustomOutput, 0x0058);
		}

		// class UMaterialExpressionBlackBody : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBlackBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlackBody, Temp, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlackBody, UnknownData_8YB4, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBlackBody, 0x0058);
		}

		// class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBlendMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_GTTH, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_A8XQ, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, Alpha, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_IQ4Z, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, PixelAttributeBlendType, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, VertexAttributeBlendType, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_9XF1, 0x0086);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBlendMaterialAttributes, 0x0088);
		}

		// class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBreakMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBreakMaterialAttributes, MaterialAttributes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBreakMaterialAttributes, UnknownData_WB66, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBreakMaterialAttributes, 0x0058);
		}

		// class UMaterialExpressionBumpOffset : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBumpOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_JPCR, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, Height, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_7HO6, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, HeightRatioInput, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_25M8, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, HeightRatio, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, ReferencePlane, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, ConstCoordinate, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBumpOffset, 0x0088);
		}

		// class UMaterialExpressionCameraPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCameraPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCameraPositionWS, 0x0040);
		}

		// class UMaterialExpressionCameraVectorWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCameraVectorWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCameraVectorWS, 0x0040);
		}

		// class UMaterialExpressionCeil : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCeil)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCeil, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCeil, UnknownData_5Q4Q, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCeil, 0x0058);
		}

		// class UMaterialExpressionParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, ExpressionGUID, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParameter, 0x0058);
		}

		// class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionVectorParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, DefaultValue, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, bUseCustomPrimitiveData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, PrimitiveDataIndex, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, UnknownData_A1R7, 0x006A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVectorParameter, 0x0070);
		}

		// class UMaterialExpressionChannelMaskParameter : public UMaterialExpressionVectorParameter
		TEST_METHOD(Class__Engine__MaterialExpressionChannelMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, MaskChannel, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, UnknownData_FDVU, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionChannelMaskParameter, 0x0078);
		}

		// class UMaterialExpressionClamp : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionClamp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_5S5K, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Min, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_45J1, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Max, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_QCJ2, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, ClampMode, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_T1YM, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, MinDefault, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, MaxDefault, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionClamp, 0x0088);
		}

		// class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionClearCoatNormalCustomOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClearCoatNormalCustomOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClearCoatNormalCustomOutput, UnknownData_E64S, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionClearCoatNormalCustomOutput, 0x0058);
		}

		// class UMaterialExpressionCloudSampleAttribute : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCloudSampleAttribute)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCloudSampleAttribute, 0x0040);
		}

		// class UMaterialExpressionCollectionParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCollectionParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, Collection, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, ParameterName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, ParameterId, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCollectionParameter, 0x0060);
		}

		// class UMaterialExpressionComment : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionComment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, SizeX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, SizeY, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, Text, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, CommentColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, FontSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, UnknownData_3Y14, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionComment, 0x0070);
		}

		// class UMaterialExpressionComponentMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionComponentMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, UnknownData_T80F, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, UnknownData_4SVP, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionComponentMask, 0x0058);
		}

		// class UMaterialExpressionConstant : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant, R, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant, UnknownData_MEMS, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant, 0x0048);
		}

		// class UMaterialExpressionConstant2Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant2Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant2Vector, R, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant2Vector, G, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant2Vector, 0x0048);
		}

		// class UMaterialExpressionConstant3Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant3Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant3Vector, Constant, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant3Vector, 0x0050);
		}

		// class UMaterialExpressionConstant4Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant4Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant4Vector, Constant, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant4Vector, 0x0050);
		}

		// class UMaterialExpressionConstantBiasScale : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstantBiasScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, UnknownData_XOD9, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Bias, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Scale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, UnknownData_HD97, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstantBiasScale, 0x0060);
		}

		// class UMaterialExpressionCosine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCosine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, UnknownData_SYNO, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, Period, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCosine, 0x0058);
		}

		// class UMaterialExpressionCrossProduct : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCrossProduct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, UnknownData_YMQ4, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, UnknownData_RNO5, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCrossProduct, 0x0068);
		}

		// class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionScalarParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, DefaultValue, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, bUseCustomPrimitiveData, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, PrimitiveDataIndex, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, UnknownData_OFZZ, 0x005E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionScalarParameter, 0x0060);
		}

		// class UMaterialExpressionCurveAtlasRowParameter : public UMaterialExpressionScalarParameter
		TEST_METHOD(Class__Engine__MaterialExpressionCurveAtlasRowParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, Curve, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, Atlas, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, InputTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, UnknownData_34L0, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCurveAtlasRowParameter, 0x0088);
		}

		// class UMaterialExpressionCustom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCustom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Code, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, OutputType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, UnknownData_Y3M4, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Description, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Inputs, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, AdditionalOutputs, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, AdditionalDefines, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, IncludeFilePaths, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCustom, 0x00A8);
		}

		// class UMaterialExpressionDDX : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDDX)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDX, Value, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDX, UnknownData_VM0V, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDDX, 0x0058);
		}

		// class UMaterialExpressionDDY : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDDY)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDY, Value, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDY, UnknownData_CW19, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDDY, 0x0058);
		}

		// class UMaterialExpressionDecalDerivative : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalDerivative)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalDerivative, 0x0040);
		}

		// class UMaterialExpressionDecalLifetimeOpacity : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalLifetimeOpacity)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalLifetimeOpacity, 0x0040);
		}

		// class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalMipmapLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, TextureSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, UnknownData_YRAJ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, ConstWidth, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, ConstHeight, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, UnknownData_AI4E, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalMipmapLevel, 0x0060);
		}

		// class UMaterialExpressionDeltaTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDeltaTime)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDeltaTime, 0x0040);
		}

		// class UMaterialExpressionDepthFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDepthFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, InOpacity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, UnknownData_GBQY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, FadeDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, UnknownData_I8AK, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, OpacityDefault, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, FadeDistanceDefault, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDepthFade, 0x0070);
		}

		// class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDepthOfFieldFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, FunctionValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, UnknownData_T0F3, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, Depth, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, UnknownData_BUK3, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDepthOfFieldFunction, 0x0058);
		}

		// class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDeriveNormalZ)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDeriveNormalZ, InXY, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDeriveNormalZ, UnknownData_NL54, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDeriveNormalZ, 0x0058);
		}

		// class UMaterialExpressionDesaturation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDesaturation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, UnknownData_CR06, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, Fraction, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, UnknownData_EPYV, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, LuminanceFactors, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDesaturation, 0x0078);
		}

		// class UMaterialExpressionDistance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, UnknownData_AGUX, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, UnknownData_NXVW, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistance, 0x0068);
		}

		// class UMaterialExpressionDistanceCullFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceCullFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceCullFade, 0x0040);
		}

		// class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceFieldGradient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceFieldGradient, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceFieldGradient, UnknownData_LQBM, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceFieldGradient, 0x0058);
		}

		// class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceToNearestSurface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceToNearestSurface, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceToNearestSurface, UnknownData_Q778, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceToNearestSurface, 0x0058);
		}

		// class UMaterialExpressionDivide : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDivide)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, UnknownData_LMIQ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, UnknownData_7A04, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDivide, 0x0070);
		}

		// class UMaterialExpressionDotProduct : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDotProduct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, UnknownData_FVW0, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, UnknownData_IDFE, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDotProduct, 0x0068);
		}

		// class UMaterialExpressionDynamicParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDynamicParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, ParamNames, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, DefaultValue, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, ParameterIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, UnknownData_FSKN, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDynamicParameter, 0x0068);
		}

		// class UMaterialExpressionEyeAdaptation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionEyeAdaptation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionEyeAdaptation, 0x0040);
		}

		// class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFeatureLevelSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, UnknownData_8XR7, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFeatureLevelSwitch, 0x0058);
		}

		// class UMaterialExpressionFloor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFloor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFloor, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFloor, UnknownData_T1U1, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFloor, 0x0058);
		}

		// class UMaterialExpressionFmod : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFmod)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, UnknownData_GIX9, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, UnknownData_Q0R1, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFmod, 0x0068);
		}

		// class UMaterialExpressionFontSample : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFontSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, Font, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, FontTexturePage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, UnknownData_B5OH, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFontSample, 0x0050);
		}

		// class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
		TEST_METHOD(Class__Engine__MaterialExpressionFontSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, ParameterName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, ExpressionGUID, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, Group, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFontSampleParameter, 0x0070);
		}

		// class UMaterialExpressionFrac : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFrac)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFrac, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFrac, UnknownData_K7L6, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFrac, 0x0058);
		}

		// class UMaterialExpressionFresnel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFresnel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, ExponentIn, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_FD33, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, Exponent, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, BaseReflectFractionIn, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_C5SK, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, BaseReflectFraction, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, Normal, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_T3UW, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFresnel, 0x0088);
		}

		// class UMaterialExpressionFunctionInput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFunctionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, Preview, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_HRHQ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, InputName, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_TN72, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, Description, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, ID, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, InputType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_72OP, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, PreviewValue, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_ASLD, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, SortPriority, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_JJWN, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFunctionInput, 0x00C0);
		}

		// class UMaterialExpressionFunctionOutput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFunctionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, OutputName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, Description, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, SortPriority, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, A, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_HR9Q, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_81ZK, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, ID, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_ZMQX, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFunctionOutput, 0x0088);
		}

		// class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionGetMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, MaterialAttributes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, UnknownData_G5UU, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, AttributeGetTypes, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionGetMaterialAttributes, 0x0068);
		}

		// class UMaterialExpressionGIReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionGIReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_X7Y6, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, StaticIndirect, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_9S8M, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, DynamicIndirect, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_ZO2T, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionGIReplace, 0x0080);
		}

		// class UMaterialExpressionHairAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionHairAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairAttributes, UnknownData_TPBK, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionHairAttributes, 0x0048);
		}

		// class UMaterialExpressionHairColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionHairColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, Melanin, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, UnknownData_GGOZ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, Redness, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, UnknownData_S1S2, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, DyeColor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, UnknownData_YWDU, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionHairColor, 0x0080);
		}

		// class UMaterialExpressionIf : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionIf)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_M1IE, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_81PL, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, AGreaterThanB, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_V0NZ, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, AEqualsB, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_TW1T, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ALessThanB, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_8F1K, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, EqualsThreshold, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ConstB, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ConstAEqualsB, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionIf, 0x00B0);
		}

		// class UMaterialExpressionInverseLinearInterpolate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionInverseLinearInterpolate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, UnknownData_LGQ9, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, UnknownData_R4C6, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, Value, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, UnknownData_P5HM, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, ConstA, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, ConstB, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, ConstValue, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, bClampResult, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, UnknownData_PO98, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionInverseLinearInterpolate, 0x0090);
		}

		// class UMaterialExpressionLightmapUVs : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightmapUVs)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightmapUVs, 0x0040);
		}

		// class UMaterialExpressionLightmassReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightmassReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, Realtime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, UnknownData_FXV2, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, Lightmass, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, UnknownData_A0YQ, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightmassReplace, 0x0068);
		}

		// class UMaterialExpressionLightVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightVector, 0x0040);
		}

		// class UMaterialExpressionLinearInterpolate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLinearInterpolate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_A83T, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_52IG, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, Alpha, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_KJXD, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstA, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstB, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstAlpha, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLinearInterpolate, 0x0088);
		}

		// class UMaterialExpressionLogarithm10 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLogarithm10)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm10, X, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm10, UnknownData_W3NL, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLogarithm10, 0x0058);
		}

		// class UMaterialExpressionLogarithm2 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLogarithm2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm2, X, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm2, UnknownData_T8KV, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLogarithm2, 0x0058);
		}

		// class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMakeMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, BaseColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_RAG1, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Metallic, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_YG6Q, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Specular, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_CYQW, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Roughness, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_G3X5, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Anisotropy, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_9RCR, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, EmissiveColor, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_4981, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Opacity, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_PCIH, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, OpacityMask, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_US96, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Normal, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_SXZK, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Tangent, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_D6PS, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, WorldPositionOffset, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_WOW4, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, WorldDisplacement, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_UX83, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, TessellationMultiplier, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_FSLB, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, SubsurfaceColor, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_620S, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ClearCoat, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_COLV, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ClearCoatRoughness, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_8Z5U, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, AmbientOcclusion, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_YTDS, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Refraction, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_EN2D, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, CustomizedUVs, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_CT4Q, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, PixelDepthOffset, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_MDG2, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ShadingModel, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_DOBC, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMakeMaterialAttributes, 0x0270);
		}

		// class UMaterialExpressionMapARPassthroughCameraUV : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMapARPassthroughCameraUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMapARPassthroughCameraUV, Coordinates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMapARPassthroughCameraUV, UnknownData_6HHZ, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMapARPassthroughCameraUV, 0x0058);
		}

		// class UMaterialExpressionMaterialAttributeLayers : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialAttributeLayers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, ExpressionGUID, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, Input, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_U3U7, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, DefaultLayers, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, LayerCallers, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, NumActiveLayerCallers, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_SCFB, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, BlendCallers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, NumActiveBlendCallers, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, bIsLayerGraphBuilt, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_TPZ1, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialAttributeLayers, 0x00E8);
		}

		// class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialFunctionCall)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, MaterialFunction, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, FunctionParameterInfo, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialFunctionCall, 0x0058);
		}

		// class UMaterialExpressionMaterialLayerOutput : public UMaterialExpressionFunctionOutput
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialLayerOutput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialLayerOutput, 0x0088);
		}

		// class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialProxyReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, Realtime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, UnknownData_ZI9M, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, MaterialProxy, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, UnknownData_8KF8, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialProxyReplace, 0x0068);
		}

		// class UMaterialExpressionMax : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMax)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, UnknownData_HSST, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, UnknownData_X3N0, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMax, 0x0070);
		}

		// class UMaterialExpressionMin : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, UnknownData_FDSJ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, UnknownData_867J, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMin, 0x0070);
		}

		// class UMaterialExpressionMultiply : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMultiply)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, UnknownData_8FJY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, UnknownData_ZKN8, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMultiply, 0x0070);
		}

		// class UMaterialExpressionNoise : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_BJRB, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, FilterWidth, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_LBKZ, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Scale, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Quality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, NoiseFunction, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_ZPRF, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_32VW, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Levels, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, OutputMin, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, OutputMax, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, LevelScale, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_Z0NB, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, RepeatSize, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionNoise, 0x0090);
		}

		// class UMaterialExpressionNormalize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionNormalize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNormalize, VectorInput, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNormalize, UnknownData_N6AC, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionNormalize, 0x0058);
		}

		// class UMaterialExpressionObjectBounds : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectBounds)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectBounds, 0x0040);
		}

		// class UMaterialExpressionObjectOrientation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectOrientation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectOrientation, 0x0040);
		}

		// class UMaterialExpressionObjectPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectPositionWS, 0x0040);
		}

		// class UMaterialExpressionObjectRadius : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectRadius)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectRadius, 0x0040);
		}

		// class UMaterialExpressionOneMinus : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionOneMinus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionOneMinus, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionOneMinus, UnknownData_J33N, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionOneMinus, 0x0058);
		}

		// class UMaterialExpressionPanner : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPanner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_PO25, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Time, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_W956, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Speed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_VR77, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, SpeedX, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, SpeedY, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, ConstCoordinate, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, bFractionalPart, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_WHTT, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPanner, 0x0090);
		}

		// class UMaterialExpressionParticleColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleColor, 0x0040);
		}

		// class UMaterialExpressionParticleDirection : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleDirection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleDirection, 0x0040);
		}

		// class UMaterialExpressionParticleMacroUV : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleMacroUV)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleMacroUV, 0x0040);
		}

		// class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleMotionBlurFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleMotionBlurFade, 0x0040);
		}

		// class UMaterialExpressionParticlePositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticlePositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticlePositionWS, 0x0040);
		}

		// class UMaterialExpressionParticleRadius : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRadius)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRadius, 0x0040);
		}

		// class UMaterialExpressionParticleRandom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRandom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRandom, 0x0040);
		}

		// class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRelativeTime)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRelativeTime, 0x0040);
		}

		// class UMaterialExpressionParticleSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSize, 0x0040);
		}

		// class UMaterialExpressionParticleSpeed : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSpeed)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSpeed, 0x0040);
		}

		// class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParticleSubUV, UnknownData_XD47, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSubUV, 0x0068);
		}

		// class UMaterialExpressionParticleSubUVProperties : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSubUVProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSubUVProperties, 0x0040);
		}

		// class UMaterialExpressionPerInstanceCustomData : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceCustomData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, DefaultValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, UnknownData_Y0JI, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, ConstDefaultValue, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, DataIndex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, UnknownData_JP2R, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceCustomData, 0x0060);
		}

		// class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceFadeAmount)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceFadeAmount, 0x0040);
		}

		// class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceRandom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceRandom, 0x0040);
		}

		// class UMaterialExpressionPixelDepth : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPixelDepth)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPixelDepth, 0x0040);
		}

		// class UMaterialExpressionPixelNormalWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPixelNormalWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPixelNormalWS, 0x0040);
		}

		// class UMaterialExpressionPower : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPower)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, Base, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_6ZBH, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, Exponent, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_MQOG, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, ConstExponent, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_96ZZ, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPower, 0x0070);
		}

		// class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPrecomputedAOMask)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPrecomputedAOMask, 0x0040);
		}

		// class UMaterialExpressionPreSkinnedLocalBounds : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedLocalBounds)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedLocalBounds, 0x0040);
		}

		// class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedNormal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedNormal, 0x0040);
		}

		// class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedPosition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedPosition, 0x0040);
		}

		// class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreviousFrameSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, CurrentFrame, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, UnknownData_FTU6, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, PreviousFrame, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, UnknownData_00WG, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreviousFrameSwitch, 0x0068);
		}

		// class UMaterialExpressionQualitySwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionQualitySwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, UnknownData_ZQZ0, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, Inputs, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, UnknownData_8J6A, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionQualitySwitch, 0x00A8);
		}

		// class UMaterialExpressionRayTracingQualitySwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRayTracingQualitySwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, Normal, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, UnknownData_TAA8, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, RayTraced, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, UnknownData_ZBP4, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRayTracingQualitySwitch, 0x0068);
		}

		// class UMaterialExpressionReflectionCapturePassSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionReflectionCapturePassSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionCapturePassSwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionCapturePassSwitch, UnknownData_KD32, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionCapturePassSwitch, Reflection, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionCapturePassSwitch, UnknownData_BVRL, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReflectionCapturePassSwitch, 0x0068);
		}

		// class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionReflectionVectorWS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, CustomWorldNormal, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, UnknownData_HUFD, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, UnknownData_CXDG, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReflectionVectorWS, 0x0058);
		}

		// class UMaterialExpressionReroute : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionReroute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReroute, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReroute, UnknownData_0YHC, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReroute, 0x0058);
		}

		// class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRotateAboutAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, NormalizedRotationAxis, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_UNW8, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, RotationAngle, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_50AD, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, PivotPoint, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_E0VW, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, Position, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_74FD, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, Period, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_8NSN, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRotateAboutAxis, 0x0098);
		}

		// class UMaterialExpressionRotator : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRotator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, UnknownData_E385, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Time, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, UnknownData_7464, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, CenterX, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, CenterY, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Speed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, ConstCoordinate, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRotator, 0x0078);
		}

		// class UMaterialExpressionRound : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRound, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRound, UnknownData_TDDW, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRound, 0x0058);
		}

		// class UMaterialExpressionRuntimeVirtualTextureOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, BaseColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_9TPR, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Specular, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_UB9L, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Roughness, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_CQJI, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Normal, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_ZONM, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, WorldHeight, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_G381, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Opacity, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_O1AB, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Mask, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_4FUA, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureOutput, 0x00D0);
		}

		// class UMaterialExpressionRuntimeVirtualTextureReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, UnknownData_X9ZG, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, VirtualTextureOutput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, UnknownData_VREP, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureReplace, 0x0068);
		}

		// class UMaterialExpressionRuntimeVirtualTextureSample : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, Coordinates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_8A3C, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, WorldPosition, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_4X3R, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, MipValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_VXEE, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, VirtualTexture, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, MaterialType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, bSinglePhysicalSpace, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, bAdaptive, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, MipValueMode, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, TextureAddressMode, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_00PD, 0x008D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureSample, 0x0090);
		}

		// class UMaterialExpressionRuntimeVirtualTextureSampleParameter : public UMaterialExpressionRuntimeVirtualTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, ParameterName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, ExpressionGUID, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, Group, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, 0x00B0);
		}

		// class UMaterialExpressionSaturate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSaturate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSaturate, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSaturate, UnknownData_1QII, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSaturate, 0x0058);
		}

		// class UMaterialExpressionSceneColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, InputMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_SOXO, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, Input, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_Q8YD, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, OffsetFraction, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_0CWI, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, ConstInput, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_K8OF, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneColor, 0x0078);
		}

		// class UMaterialExpressionSceneDepth : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneDepth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, InputMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_9671, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, Input, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_7TPG, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, Coordinates, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_BQJ7, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, ConstInput, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_TWPE, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneDepth, 0x0078);
		}

		// class UMaterialExpressionSceneDepthWithoutWater : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneDepthWithoutWater)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, InputMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, UnknownData_I66T, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, Input, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, UnknownData_NPV5, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, ConstInput, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, FallbackDepth, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, UnknownData_900S, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneDepthWithoutWater, 0x0068);
		}

		// class UMaterialExpressionSceneTexelSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneTexelSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneTexelSize, 0x0040);
		}

		// class UMaterialExpressionSceneTexture : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, Coordinates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, UnknownData_A542, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, SceneTextureId, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, bFiltered, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, UnknownData_LJD5, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneTexture, 0x0058);
		}

		// class UMaterialExpressionScreenPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionScreenPosition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionScreenPosition, 0x0040);
		}

		// class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSetMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSetMaterialAttributes, Inputs, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSetMaterialAttributes, AttributeSetTypes, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSetMaterialAttributes, 0x0060);
		}

		// class UMaterialExpressionShaderStageSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShaderStageSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, PixelShader, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, UnknownData_TQK8, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, VertexShader, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, UnknownData_8QMA, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShaderStageSwitch, 0x0068);
		}

		// class UMaterialExpressionShadingModel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShadingModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingModel, ShadingModel, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingModel, UnknownData_Y0TD, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadingModel, 0x0048);
		}

		// class UMaterialExpressionShadingPathSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShadingPathSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, UnknownData_XR9N, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, Inputs, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, UnknownData_B52U, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadingPathSwitch, 0x0090);
		}

		// class UMaterialExpressionShadowReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShadowReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, UnknownData_KC2H, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, Shadow, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, UnknownData_37FF, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadowReplace, 0x0068);
		}

		// class UMaterialExpressionSign : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSign)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSign, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSign, UnknownData_W8U6, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSign, 0x0058);
		}

		// class UMaterialExpressionSine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, UnknownData_CVGI, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, Period, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSine, 0x0058);
		}

		// class UMaterialExpressionSingleLayerWaterMaterialOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionSingleLayerWaterMaterialOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, ScatteringCoefficients, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_HW5S, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, AbsorptionCoefficients, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_6Q0P, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, PhaseG, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_QTVR, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, ColorScaleBehindWater, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_YDFB, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, 0x0090);
		}

		// class UMaterialExpressionSkinningVertexOffsets : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkinningVertexOffsets)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkinningVertexOffsets, 0x0040);
		}

		// class UMaterialExpressionSkyAtmosphereLightDirection : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereLightDirection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDirection, LightIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDirection, UnknownData_KHPH, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereLightDirection, 0x0048);
		}

		// class UMaterialExpressionSkyAtmosphereLightIlluminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereLightIlluminance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, LightIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, WorldPosition, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, UnknownData_EIUD, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, 0x0058);
		}

		// class UMaterialExpressionSkyAtmosphereLightDiskLuminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereLightDiskLuminance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDiskLuminance, LightIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDiskLuminance, UnknownData_6H1D, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereLightDiskLuminance, 0x0048);
		}

		// class UMaterialExpressionSkyAtmosphereAerialPerspective : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereAerialPerspective)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereAerialPerspective, WorldPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereAerialPerspective, UnknownData_K6RZ, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereAerialPerspective, 0x0058);
		}

		// class UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance, 0x0040);
		}

		// class UMaterialExpressionSkyAtmosphereViewLuminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereViewLuminance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereViewLuminance, 0x0040);
		}

		// class UMaterialExpressionSmoothStep : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSmoothStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, Min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, UnknownData_5UAG, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, Max, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, UnknownData_BXJF, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, Value, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, UnknownData_0F3A, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, ConstMin, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, ConstMax, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, ConstValue, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSmoothStep, 0x0088);
		}

		// class UMaterialExpressionSobol : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSobol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Cell, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_2SV4, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Index, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_G9D8, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Seed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_ZXEU, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, ConstIndex, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, ConstSeed, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSobol, 0x0088);
		}

		// class UMaterialExpressionSpeedTree : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSpeedTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, GeometryInput, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_B5VE, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, WindInput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_D8AX, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, LODInput, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_8JQ9, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, ExtraBendWS, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_PUE2, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, GeometryType, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, WindType, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, LODType, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_EIK2, 0x0093);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, BillboardThreshold, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, bAccurateWindVelocities, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_LXS6, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSpeedTree, 0x00A0);
		}

		// class UMaterialExpressionSphereMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSphereMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_QBEI, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_BUQD, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, Radius, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_AJ8C, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, Hardness, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_S9Q4, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, AttenuationRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, HardnessPercent, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSphereMask, 0x0098);
		}

		// class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSphericalParticleOpacity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, Density, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, UnknownData_S766, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, ConstantDensity, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSphericalParticleOpacity, 0x0058);
		}

		// class UMaterialExpressionSquareRoot : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSquareRoot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSquareRoot, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSquareRoot, UnknownData_SETR, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSquareRoot, 0x0058);
		}

		// class UMaterialExpressionStaticBool : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionStaticBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticBool, UnknownData_Y3TQ, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticBool, 0x0048);
		}

		// class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticBoolParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticBoolParameter, UnknownData_NMJO, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticBoolParameter, 0x0060);
		}

		// class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticComponentMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, UnknownData_3M8G, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticComponentMaskParameter, 0x0060);
		}

		// class UMaterialExpressionStaticSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionStaticSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_VBKF, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, A, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_2QKN, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_0WNM, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, Value, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_SXUH, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticSwitch, 0x0080);
		}

		// class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticSwitchParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticSwitchParameter, 0x0060);
		}

		// class UMaterialExpressionStep : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, Y, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, UnknownData_A90Y, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, X, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, UnknownData_9UZ2, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, ConstY, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, ConstX, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStep, 0x0070);
		}

		// class UMaterialExpressionSubtract : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSubtract)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, UnknownData_LO9Z, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, UnknownData_KSCF, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSubtract, 0x0070);
		}

		// class UMaterialExpressionTangent : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, UnknownData_GM5X, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, Period, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTangent, 0x0058);
		}

		// class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionTangentOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangentOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangentOutput, UnknownData_TOY6, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTangentOutput, 0x0058);
		}

		// class UMaterialExpressionTemporalSobol : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTemporalSobol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, Index, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_C5X0, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, Seed, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_LLSG, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, ConstIndex, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, ConstSeed, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_IPN4, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTemporalSobol, 0x0078);
		}

		// class UMaterialExpressionTextureCoordinate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureCoordinate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, CoordinateIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, UTiling, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, VTiling, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, UnknownData_WJGB, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureCoordinate, 0x0050);
		}

		// class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
		TEST_METHOD(Class__Engine__MaterialExpressionTextureObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureObject, 0x0048);
		}

		// class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureObjectParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureObjectParameter, 0x0080);
		}

		// class UMaterialExpressionTextureProperty : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, TextureObject, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, UnknownData_QUCI, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, Property, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, UnknownData_UIFF, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureProperty, 0x0058);
		}

		// class UMaterialExpressionTextureSampleParameter2DArray : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter2DArray)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter2DArray, 0x0080);
		}

		// class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterCube)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterCube, 0x0080);
		}

		// class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameterSubUV, UnknownData_16YV, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterSubUV, 0x0088);
		}

		// class UMaterialExpressionTextureSampleParameterVolume : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterVolume, 0x0080);
		}

		// class UMaterialExpressionThinTranslucentMaterialOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionThinTranslucentMaterialOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionThinTranslucentMaterialOutput, TransmittanceColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionThinTranslucentMaterialOutput, UnknownData_L3VE, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionThinTranslucentMaterialOutput, 0x0058);
		}

		// class UMaterialExpressionTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTime, UnknownData_79RA, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTime, Period, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTime, 0x0048);
		}

		// class UMaterialExpressionTransform : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, UnknownData_53R5, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, TransformSourceType, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, TransformType, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, UnknownData_FIT6, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTransform, 0x0058);
		}

		// class UMaterialExpressionTransformPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTransformPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, UnknownData_G4LB, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, TransformSourceType, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, TransformType, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, UnknownData_VKQS, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTransformPosition, 0x0058);
		}

		// class UMaterialExpressionTruncate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTruncate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTruncate, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTruncate, UnknownData_3OGD, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTruncate, 0x0058);
		}

		// class UMaterialExpressionTwoSidedSign : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTwoSidedSign)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTwoSidedSign, 0x0040);
		}

		// class UMaterialExpressionVectorNoise : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVectorNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_FNOL, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, NoiseFunction, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_01T2, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, Quality, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_A2RX, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, TileSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_CGDL, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVectorNoise, 0x0068);
		}

		// class UMaterialExpressionVertexColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexColor, 0x0040);
		}

		// class UMaterialExpressionVertexInterpolator : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionVertexInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVertexInterpolator, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVertexInterpolator, UnknownData_YJ97, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexInterpolator, 0x0060);
		}

		// class UMaterialExpressionVertexNormalWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexNormalWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexNormalWS, 0x0040);
		}

		// class UMaterialExpressionVertexTangentWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexTangentWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexTangentWS, 0x0040);
		}

		// class UMaterialExpressionViewProperty : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionViewProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionViewProperty, Property, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionViewProperty, UnknownData_VXAA, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionViewProperty, 0x0048);
		}

		// class UMaterialExpressionViewSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionViewSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionViewSize, 0x0040);
		}

		// class UMaterialExpressionVirtualTextureFeatureSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVirtualTextureFeatureSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, No, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, UnknownData_NDKS, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, Yes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, UnknownData_3O5S, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVirtualTextureFeatureSwitch, 0x0068);
		}

		// class UMaterialExpressionVolumetricAdvancedMaterialInput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVolumetricAdvancedMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVolumetricAdvancedMaterialInput, 0x0040);
		}

		// class UMaterialExpressionVolumetricAdvancedMaterialOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionVolumetricAdvancedMaterialOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, PhaseG, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_OGFO, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, PhaseG2, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_Z0ID, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, PhaseBlend, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_09B3, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, MultiScatteringContribution, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_22PW, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, MultiScatteringOcclusion, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_L4O5, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, MultiScatteringEccentricity, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_ORZD, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConservativeDensity, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_0SPU, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstPhaseG, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstPhaseG2, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstPhaseBlend, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, PerSamplePhaseEvaluation, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_1VSV, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, MultiScatteringApproximationOctaveCount, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstMultiScatteringContribution, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstMultiScatteringOcclusion, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstMultiScatteringEccentricity, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, bGroundContribution, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, bGrayScaleMaterial, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, bRayMarchVolumeShadow, 0x00EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_BYW8, 0x00EF);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, 0x00F0);
		}

		// class UMaterialExpressionWorldPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionWorldPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionWorldPosition, WorldPositionShaderOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionWorldPosition, UnknownData_XYG9, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionWorldPosition, 0x0048);
		}

		// class UMaterialFunctionInterface : public UObject
		TEST_METHOD(Class__Engine__MaterialFunctionInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, StateId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, MaterialFunctionUsage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, UnknownData_AAE7, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionInterface, 0x0040);
		}

		// class UMaterialFunction : public UMaterialFunctionInterface
		TEST_METHOD(Class__Engine__MaterialFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, Description, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, UnknownData_QBXG, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunction, 0x0058);
		}

		// class UMaterialFunctionInstance : public UMaterialFunctionInterface
		TEST_METHOD(Class__Engine__MaterialFunctionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, Parent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, Base, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, ScalarParameterValues, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, VectorParameterValues, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, TextureParameterValues, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, FontParameterValues, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, StaticSwitchParameterValues, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, StaticComponentMaskParameterValues, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, RuntimeVirtualTextureParameterValues, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionInstance, 0x00C0);
		}

		// class UMaterialFunctionMaterialLayer : public UMaterialFunction
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayer, 0x0058);
		}

		// class UMaterialFunctionMaterialLayerInstance : public UMaterialFunctionInstance
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerInstance, 0x00C0);
		}

		// class UMaterialFunctionMaterialLayerBlend : public UMaterialFunction
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerBlend)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerBlend, 0x0058);
		}

		// class UMaterialFunctionMaterialLayerBlendInstance : public UMaterialFunctionInstance
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerBlendInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerBlendInstance, 0x00C0);
		}

		// class AMaterialInstanceActor : public AActor
		TEST_METHOD(Class__Engine__MaterialInstanceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMaterialInstanceActor, TargetActors, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMaterialInstanceActor, 0x0230);
		}

		// class UMaterialInstanceDynamic : public UMaterialInstance
		TEST_METHOD(Class__Engine__MaterialInstanceDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstanceDynamic, UnknownData_KYMF, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstanceDynamic, 0x03B0);
		}

		// class UMaterialParameterCollection : public UObject
		TEST_METHOD(Class__Engine__MaterialParameterCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, StateId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, ScalarParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, VectorParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, UnknownData_RP63, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialParameterCollection, 0x0070);
		}

		// class UMaterialParameterCollectionInstance : public UObject
		TEST_METHOD(Class__Engine__MaterialParameterCollectionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, UnknownData_UTUW, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, Collection, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, UnknownData_HP4S, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialParameterCollectionInstance, 0x0108);
		}

		// class AMatineeActor : public AActor
		TEST_METHOD(Class__Engine__MatineeActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, MatineeData, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, MatineeControllerName, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, PlayRate, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_KDRT, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, ForceStartPosition, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_K46C, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, PreferredSplitScreenNum, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_OTV6, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, GroupActorInfos, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_4LPA, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, GroupInst, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, CameraCuts, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_BPXM, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, InterpPosition, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_SBEG, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, ReplicationForceIsPlaying, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_KOAE, 0x028D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnPlay, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnStop, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnPause, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_ET1V, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeActor, 0x02C8);
		}

		// class AMatineeActorCameraAnim : public AMatineeActor
		TEST_METHOD(Class__Engine__MatineeActorCameraAnim)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActorCameraAnim, CameraAnim, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeActorCameraAnim, 0x02D0);
		}

		// class UMatineeAnimInterface : public UInterface
		TEST_METHOD(Class__Engine__MatineeAnimInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeAnimInterface, 0x0028);
		}

		// class UMatineeInterface : public UInterface
		TEST_METHOD(Class__Engine__MatineeInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeInterface, 0x0028);
		}

		// class AMeshMergeCullingVolume : public AVolume
		TEST_METHOD(Class__Engine__MeshMergeCullingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMeshMergeCullingVolume, 0x0258);
		}

		// class UMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__MeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSimplificationSettings, MeshReductionModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSimplificationSettings, 0x0040);
		}

		// class UMeshVertexPainterKismetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__MeshVertexPainterKismetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshVertexPainterKismetLibrary, 0x0028);
		}

		// class UMicroTransactionBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__MicroTransactionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, AvailableProducts, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, LastError, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, LastErrorSolution, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMicroTransactionBase, 0x0068);
		}

		// class UModelComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ModelComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_FVXN, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, ModelBodySetup, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_TD6Q, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModelComponent, 0x0480);
		}

		// class UMorphTarget : public UObject
		TEST_METHOD(Class__Engine__MorphTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMorphTarget, BaseSkelMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMorphTarget, UnknownData_1J17, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMorphTarget, 0x0040);
		}

		// class UNavAgentInterface : public UInterface
		TEST_METHOD(Class__Engine__NavAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAgentInterface, 0x0028);
		}

		// class UNavAreaBase : public UObject
		TEST_METHOD(Class__Engine__NavAreaBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaBase, UnknownData_4A9J, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaBase, 0x0030);
		}

		// class UNavCollisionBase : public UObject
		TEST_METHOD(Class__Engine__NavCollisionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollisionBase, UnknownData_EUV2, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavCollisionBase, 0x0070);
		}

		// class UNavEdgeProviderInterface : public UInterface
		TEST_METHOD(Class__Engine__NavEdgeProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavEdgeProviderInterface, 0x0028);
		}

		// class UNavigationDataChunk : public UObject
		TEST_METHOD(Class__Engine__NavigationDataChunk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationDataChunk, NavigationDataName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationDataChunk, 0x0030);
		}

		// class UNavigationDataInterface : public UInterface
		TEST_METHOD(Class__Engine__NavigationDataInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationDataInterface, 0x0028);
		}

		// class ANavigationObjectBase : public AActor
		TEST_METHOD(Class__Engine__NavigationObjectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, UnknownData_1SAJ, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, CapsuleComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, GoodSprite, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, BadSprite, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, UnknownData_8LI6, 0x0241);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationObjectBase, 0x0248);
		}

		// class UNavigationSystemBase : public UObject
		TEST_METHOD(Class__Engine__NavigationSystemBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemBase, 0x0028);
		}

		// class UNavigationSystemConfig : public UObject
		TEST_METHOD(Class__Engine__NavigationSystemConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, NavigationSystemClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, SupportedAgentsMask, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, DefaultAgentName, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, UnknownData_4284, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemConfig, 0x0050);
		}

		// class UNullNavSysConfig : public UNavigationSystemConfig
		TEST_METHOD(Class__Engine__NullNavSysConfig)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNullNavSysConfig, 0x0050);
		}

		// class UNavLinkDefinition : public UObject
		TEST_METHOD(Class__Engine__NavLinkDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, Links, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, SegmentLinks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, UnknownData_1A1J, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkDefinition, 0x0050);
		}

		// class UNavPathObserverInterface : public UInterface
		TEST_METHOD(Class__Engine__NavPathObserverInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavPathObserverInterface, 0x0028);
		}

		// class UNavRelevantInterface : public UInterface
		TEST_METHOD(Class__Engine__NavRelevantInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavRelevantInterface, 0x0028);
		}

		// class USimulatedClientNetConnection : public UNetConnection
		TEST_METHOD(Class__Engine__SimulatedClientNetConnection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimulatedClientNetConnection, 0x1AF0);
		}

		// class UNetPushModelHelpers : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__NetPushModelHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetPushModelHelpers, 0x0028);
		}

		// class UNetworkPredictionInterface : public UInterface
		TEST_METHOD(Class__Engine__NetworkPredictionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkPredictionInterface, 0x0028);
		}

		// class UNetworkSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__NetworkSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, UnknownData_XCQ7, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, MaxRepArraySize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, MaxRepArrayMemory, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, UnknownData_THVJ, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, NetworkEmulationProfiles, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkSettings, 0x0058);
		}

		// class UNodeMappingContainer : public UObject
		TEST_METHOD(Class__Engine__NodeMappingContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceItems, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, TargetItems, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceToTarget, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceAsset, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, TargetAsset, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeMappingContainer, 0x0168);
		}

		// class UNodeMappingProviderInterface : public UInterface
		TEST_METHOD(Class__Engine__NodeMappingProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeMappingProviderInterface, 0x0028);
		}

		// class ANote : public AActor
		TEST_METHOD(Class__Engine__Note)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANote, 0x0220);
		}

		// class UObjectLibrary : public UObject
		TEST_METHOD(Class__Engine__ObjectLibrary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, ObjectBaseClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bHasBlueprintClasses, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, UnknownData_P09U, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, Objects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, WeakObjects, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bUseWeakReferences, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bIsFullyLoaded, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, UnknownData_893W, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectLibrary, 0x00A8);
		}

		// class UObjectReferencer : public UObject
		TEST_METHOD(Class__Engine__ObjectReferencer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectReferencer, ReferencedObjects, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectReferencer, 0x0038);
		}

		// class UObjectTraceWorldSubsystem : public UWorldSubsystem
		TEST_METHOD(Class__Engine__ObjectTraceWorldSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectTraceWorldSubsystem, UnknownData_VNOI, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectTraceWorldSubsystem, 0x0038);
		}

		// class UPackageMapClient : public UPackageMap
		TEST_METHOD(Class__Engine__PackageMapClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackageMapClient, UnknownData_49V8, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackageMapClient, 0x03F8);
		}

		// class APainCausingVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__PainCausingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_IZVC, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamagePerSec, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamageType, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, PainInterval, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_DXIT, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamageInstigator, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_6091, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APainCausingVolume, 0x0290);
		}

		// class UParticleEmitter : public UObject
		TEST_METHOD(Class__Engine__ParticleEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, EmitterName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, SubUVDataOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, EmitterRenderMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, SignificanceLevel, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_A8RD, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_GEXJ, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, LODLevels, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, PeakActiveParticles, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, InitialAllocationCount, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, QualityLevelSpawnRateScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, DetailModeBitmask, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_XHCT, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleEmitter, 0x01B8);
		}

		// class AParticleEventManager : public AActor
		TEST_METHOD(Class__Engine__ParticleEventManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AParticleEventManager, 0x0220);
		}

		// class UParticleLODLevel : public UObject
		TEST_METHOD(Class__Engine__ParticleLODLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, Level, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UnknownData_F6QL, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, RequiredModule, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, Modules, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, TypeDataModule, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawnModule, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, EventGenerator, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawningModules, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawnModules, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UpdateModules, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, OrbitModules, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, EventReceiverModules, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UnknownData_0J04, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, PeakActiveParticles, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleLODLevel, 0x00B8);
		}

		// class UParticleModule : public UObject
		TEST_METHOD(Class__Engine__ParticleModule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, LODValidity, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, UnknownData_OWI6, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModule, 0x0030);
		}

		// class UParticleModuleAccelerationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationBase, UnknownData_SRF6, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationBase, 0x0038);
		}

		// class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAcceleration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAcceleration, Acceleration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAcceleration, UnknownData_ANYE, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAcceleration, 0x0088);
		}

		// class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationConstant, Acceleration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationConstant, UnknownData_CLO6, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationConstant, 0x0048);
		}

		// class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationDrag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDrag, DragCoefficient, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDrag, DragCoefficientRaw, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationDrag, 0x0070);
		}

		// class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationDragScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDragScaleOverLife, DragScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDragScaleOverLife, DragScaleRaw, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationDragScaleOverLife, 0x0070);
		}

		// class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationOverLifetime, AccelOverLife, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationOverLifetime, 0x0080);
		}

		// class UParticleModuleAttractorBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleAttractorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorBase, 0x0030);
		}

		// class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorLine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, EndPoint0, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, EndPoint1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, Range, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, Strength, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorLine, 0x00A8);
		}

		// class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorParticle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, EmitterName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, Range, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_UZ7K, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, Strength, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_2V0T, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, SelectionMethod, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_6286, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_8UB6, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, LastSelIndex, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorParticle, 0x00B0);
		}

		// class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Position, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Range, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Strength, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, UnknownData_O25B, 0x00DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorPoint, 0x00E0);
		}

		// class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorPointGravity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Position, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Radius, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Strength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, StrengthRaw, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorPointGravity, 0x0078);
		}

		// class UParticleModuleBeamBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleBeamBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamBase, 0x0030);
		}

		// class UParticleModuleBeamModifier : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, ModifierType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_27W3, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, PositionOptions, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Position, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, TangentOptions, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_MPB2, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Tangent, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_5Z90, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, StrengthOptions, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Strength, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamModifier, 0x0108);
		}

		// class UParticleModuleBeamNoise : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_SI8P, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, Frequency, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, Frequency_LowRange, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_L1ZJ, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseRange, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseRangeScale, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_QN7O, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseSpeed, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_Y231, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseLockRadius, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_JC08, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseLockTime, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTension, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_FEOO, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTangentStrength, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTessellation, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_4AT8, 0x0155);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, FrequencyDistance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_1CFJ, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseScale, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamNoise, 0x0190);
		}

		// class UParticleModuleBeamSource : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_WMMU, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_WKT3, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, Source, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_8AUO, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceTangentMethod, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_4UVK, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceTangent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_I1SN, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceStrength, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_HXHN, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamSource, 0x0118);
		}

		// class UParticleModuleBeamTarget : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_GVYM, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_0Z12, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, Target, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_1J1R, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetTangentMethod, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_X8MQ, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetTangent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_SMLF, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetStrength, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_0HNS, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, LockRadius, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_LB2Q, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamTarget, 0x0120);
		}

		// class UParticleModuleCameraBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleCameraBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCameraBase, 0x0030);
		}

		// class UParticleModuleCameraOffset : public UParticleModuleCameraBase
		TEST_METHOD(Class__Engine__ParticleModuleCameraOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, CameraOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UnknownData_4979, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UpdateMethod, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UnknownData_F9OB, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCameraOffset, 0x0068);
		}

		// class UParticleModuleCollisionBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleCollisionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollisionBase, 0x0030);
		}

		// class UParticleModuleCollision : public UParticleModuleCollisionBase
		TEST_METHOD(Class__Engine__ParticleModuleCollision)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DampingFactor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DampingFactorRotation, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, MaxCollisions, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, CollisionCompletionOption, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_LBW8, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, CollisionTypes, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_HGBY, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_6K71, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, ParticleMass, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DirScalar, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_M1MY, 0x014D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, VerticalFudgeFactor, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_UK5L, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DelayAmount, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_JC69, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, MaxCollisionDistance, 0x018C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollision, 0x0190);
		}

		// class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
		TEST_METHOD(Class__Engine__ParticleModuleCollisionGPU)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Resilience, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, ResilienceScaleOverLife, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Friction, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RandomSpread, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RandomDistribution, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RadiusScale, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RadiusBias, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Response, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, CollisionMode, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, UnknownData_U3ZH, 0x00A6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollisionGPU, 0x00A8);
		}

		// class UParticleModuleColorBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleColorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorBase, 0x0030);
		}

		// class UParticleModuleColor : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, StartColor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, StartAlpha, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, UnknownData_OTB3, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColor, 0x00B0);
		}

		// class UParticleModuleColor_Seeded : public UParticleModuleColor
		TEST_METHOD(Class__Engine__ParticleModuleColor_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor_Seeded, RandomSeedInfo, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColor_Seeded, 0x00D0);
		}

		// class UParticleModuleColorOverLife : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColorOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, ColorOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, AlphaOverLife, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, UnknownData_ECXD, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorOverLife, 0x00B0);
		}

		// class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColorScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, ColorScaleOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, AlphaScaleOverLife, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, UnknownData_MQ4P, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorScaleOverLife, 0x00B0);
		}

		// class UParticleModuleEventBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleEventBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventBase, 0x0030);
		}

		// class UParticleModuleEventGenerator : public UParticleModuleEventBase
		TEST_METHOD(Class__Engine__ParticleModuleEventGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventGenerator, Events, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventGenerator, 0x0040);
		}

		// class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, EventGeneratorType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, UnknownData_FNM9, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, EventName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, UnknownData_35IA, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverBase, 0x0040);
		}

		// class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverKillParticles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverKillParticles, UnknownData_GTVJ, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverKillParticles, 0x0048);
		}

		// class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverSpawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, SpawnCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, UnknownData_FXNO, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, InheritVelocityScale, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, PhysicalMaterials, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, UnknownData_Q3KN, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverSpawn, 0x00D8);
		}

		// class UParticleModuleEventSendToGame : public UObject
		TEST_METHOD(Class__Engine__ParticleModuleEventSendToGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventSendToGame, 0x0028);
		}

		// class UParticleModuleKillBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleKillBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillBase, 0x0030);
		}

		// class UParticleModuleKillBox : public UParticleModuleKillBase
		TEST_METHOD(Class__Engine__ParticleModuleKillBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, LowerLeftCorner, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, UpperRightCorner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, UnknownData_JEWJ, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillBox, 0x00C8);
		}

		// class UParticleModuleKillHeight : public UParticleModuleKillBase
		TEST_METHOD(Class__Engine__ParticleModuleKillHeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillHeight, Height, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillHeight, UnknownData_DJLD, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillHeight, 0x0068);
		}

		// class UParticleModuleLifetimeBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLifetimeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetimeBase, 0x0030);
		}

		// class UParticleModuleLifetime : public UParticleModuleLifetimeBase
		TEST_METHOD(Class__Engine__ParticleModuleLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLifetime, Lifetime, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetime, 0x0060);
		}

		// class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
		TEST_METHOD(Class__Engine__ParticleModuleLifetime_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLifetime_Seeded, RandomSeedInfo, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetime_Seeded, 0x0080);
		}

		// class UParticleModuleLightBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLightBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLightBase, 0x0030);
		}

		// class UParticleModuleLight : public UParticleModuleLightBase
		TEST_METHOD(Class__Engine__ParticleModuleLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bUseInverseSquaredFalloff, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bAffectsTranslucency, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bPreviewLightRadius, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_QQG5, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, SpawnFraction, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, ColorScaleOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, BrightnessOverLife, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, RadiusScale, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, LightExponent, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, LightingChannels, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_Z7FY, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, VolumetricScatteringIntensity, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bHighQualityLights, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bShadowCastingLights, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_UYQP, 0x011A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLight, 0x0120);
		}

		// class UParticleModuleLight_Seeded : public UParticleModuleLight
		TEST_METHOD(Class__Engine__ParticleModuleLight_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight_Seeded, RandomSeedInfo, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLight_Seeded, 0x0140);
		}

		// class UParticleModuleLocationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLocationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationBase, 0x0030);
		}

		// class UParticleModuleLocation : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, StartLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, DistributeOverNPoints, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, DistributeThreshold, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocation, 0x0080);
		}

		// class UParticleModuleLocation_Seeded : public UParticleModuleLocation
		TEST_METHOD(Class__Engine__ParticleModuleLocation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocation_Seeded, 0x00A0);
		}

		// class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationBoneSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_46XU, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UniversalOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SourceLocations, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SelectionMethod, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_RN8Y, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_CQ8L, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, InheritVelocityScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SkelMeshActorParamName, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, NumPreSelectedIndices, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_D9ZZ, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationBoneSocket, 0x0070);
		}

		// class UParticleModuleLocationDirect : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationDirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, Location, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, LocationOffset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, ScaleFactor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, Direction, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationDirect, 0x0150);
		}

		// class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, EmitterName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, SelectionMethod, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_WVXZ, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_NZUI, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, InheritSourceVelocityScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_SY31, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, InheritSourceRotationScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_N4SM, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationEmitter, 0x0050);
		}

		// class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationEmitterDirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitterDirect, EmitterName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationEmitterDirect, 0x0038);
		}

		// class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, UnknownData_R420, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, VelocityScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, StartLocation, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveBase, 0x00B0);
		}

		// class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveCylinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, UnknownData_HQQV, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, StartRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, StartHeight, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, HeightAxis, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, UnknownData_183I, 0x0119);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveCylinder, 0x0120);
		}

		// class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveCylinder_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder_Seeded, RandomSeedInfo, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveCylinder_Seeded, 0x0140);
		}

		// class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveSphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveSphere, StartRadius, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveSphere, 0x00E0);
		}

		// class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveSphere_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveSphere_Seeded, RandomSeedInfo, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveSphere_Seeded, 0x0100);
		}

		// class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, StartOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Height, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Angle, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Thickness, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveTriangle, 0x0108);
		}

		// class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationSkelVertSurface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_J7H2, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UniversalOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_3ZGN, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, InheritVelocityScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, SkelMeshActorParamName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, ValidAssociatedBones, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_WH8I, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalToCompare, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalCheckToleranceDegrees, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalCheckTolerance, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, ValidMaterialIndices, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_IGH9, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, InheritUVChannel, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationSkelVertSurface, 0x0090);
		}

		// class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
		TEST_METHOD(Class__Engine__ParticleModuleLocationWorldOffset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationWorldOffset, 0x0080);
		}

		// class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
		TEST_METHOD(Class__Engine__ParticleModuleLocationWorldOffset_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationWorldOffset_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationWorldOffset_Seeded, 0x00A0);
		}

		// class UParticleModuleMaterialBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleMaterialBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMaterialBase, 0x0030);
		}

		// class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshMaterial, MeshMaterials, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshMaterial, 0x0040);
		}

		// class UParticleModuleRotationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRotationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationBase, 0x0030);
		}

		// class UParticleModuleMeshRotation : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation, StartRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation, UnknownData_63AC, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotation, 0x0080);
		}

		// class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotation_Seeded, 0x00A0);
		}

		// class UParticleModuleRotationRateBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRotationRateBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRateBase, 0x0030);
		}

		// class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRate, StartRotationRate, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRate, 0x0078);
		}

		// class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRate_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRate_Seeded, RandomSeedInfo, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRate_Seeded, 0x0098);
		}

		// class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRateMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateMultiplyLife, LifeMultiplier, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRateMultiplyLife, 0x0078);
		}

		// class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRateOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateOverLife, RotRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateOverLife, UnknownData_II9O, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRateOverLife, 0x0080);
		}

		// class UParticleModuleOrbitBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleOrbitBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbitBase, UnknownData_BKDU, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrbitBase, 0x0038);
		}

		// class UParticleModuleOrbit : public UParticleModuleOrbitBase
		TEST_METHOD(Class__Engine__ParticleModuleOrbit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, ChainMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_486U, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, OffsetAmount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, OffsetOptions, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_QXOK, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationAmount, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationOptions, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_5UK4, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationRateAmount, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationRateOptions, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_IJMV, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrbit, 0x0130);
		}

		// class UParticleModuleOrientationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleOrientationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrientationBase, 0x0030);
		}

		// class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
		TEST_METHOD(Class__Engine__ParticleModuleOrientationAxisLock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrientationAxisLock, LockAxisFlags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrientationAxisLock, UnknownData_13YW, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrientationAxisLock, 0x0038);
		}

		// class UParticleModuleParameterBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleParameterBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterBase, 0x0030);
		}

		// class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
		TEST_METHOD(Class__Engine__ParticleModuleParameterDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, DynamicParams, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, UpdateFlags, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, UnknownData_YY5A, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterDynamic, 0x0048);
		}

		// class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
		TEST_METHOD(Class__Engine__ParticleModuleParameterDynamic_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic_Seeded, RandomSeedInfo, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterDynamic_Seeded, 0x0068);
		}

		// class UParticleModulePivotOffset : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModulePivotOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModulePivotOffset, PivotOffset, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModulePivotOffset, 0x0038);
		}

		// class UParticleModuleRequired : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRequired)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, Material, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MinFacingCameraBlendDistance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MaxFacingCameraBlendDistance, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterOrigin, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, ScreenAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SortMode, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDuration, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SpawnRate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, BurstList, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDelay, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDelayLow, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, InterpolationMethod, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, ParticleBurstMethod, 0x00AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, OpacitySourceMode, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterNormalsMode, 0x00AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SubImages_Horizontal, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SubImages_Vertical, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, RandomImageTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, RandomImageChanges, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MacroUVPosition, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MacroUVRadius, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UVFlippingMode, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, BoundingMode, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_ZEEO, 0x00D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NormalsSphereCenter, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, AlphaThreshold, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterLoops, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, CutoutTexture, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MaxDrawCount, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDurationLow, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NormalsCylinderDirection, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_HUGF, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NamedMaterialOverrides, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_KWS7, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRequired, 0x0140);
		}

		// class UParticleModuleRotation : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotation, StartRotation, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotation, 0x0060);
		}

		// class UParticleModuleRotation_Seeded : public UParticleModuleRotation
		TEST_METHOD(Class__Engine__ParticleModuleRotation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotation_Seeded, RandomSeedInfo, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotation_Seeded, 0x0080);
		}

		// class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationOverLifetime, RotationOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationOverLifetime, UnknownData_I7XM, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationOverLifetime, 0x0068);
		}

		// class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRate, StartRotationRate, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRate, 0x0060);
		}

		// class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleRotationRate_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRate_Seeded, RandomSeedInfo, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRate_Seeded, 0x0080);
		}

		// class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationRateMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRateMultiplyLife, LifeMultiplier, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRateMultiplyLife, 0x0060);
		}

		// class UParticleModuleSizeBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSizeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeBase, 0x0030);
		}

		// class UParticleModuleSize : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSize, StartSize, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSize, 0x0078);
		}

		// class UParticleModuleSize_Seeded : public UParticleModuleSize
		TEST_METHOD(Class__Engine__ParticleModuleSize_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSize_Seeded, RandomSeedInfo, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSize_Seeded, 0x0098);
		}

		// class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeMultiplyLife, LifeMultiplier, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeMultiplyLife, UnknownData_SG39, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeMultiplyLife, 0x0080);
		}

		// class UParticleModuleSizeScale : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScale, SizeScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScale, UnknownData_5OWH, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeScale, 0x0080);
		}

		// class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeScaleBySpeed)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScaleBySpeed, SpeedScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScaleBySpeed, MaxScale, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeScaleBySpeed, 0x0040);
		}

		// class UParticleModuleSourceMovement : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleSourceMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSourceMovement, SourceMovementScale, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSourceMovement, 0x0078);
		}

		// class UParticleModuleSpawnBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSpawnBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnBase, UnknownData_S9DL, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawnBase, 0x0038);
		}

		// class UParticleModuleSpawn : public UParticleModuleSpawnBase
		TEST_METHOD(Class__Engine__ParticleModuleSpawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, Rate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, RateScale, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, ParticleBurstMethod, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, UnknownData_NEVV, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, BurstList, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, BurstScale, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, UnknownData_6CKF, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawn, 0x00E8);
		}

		// class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
		TEST_METHOD(Class__Engine__ParticleModuleSpawnPerUnit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnitScalar, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, MovementTolerance, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, SpawnPerUnit, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, MaxFrameDistance, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnknownData_L1N0, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawnPerUnit, 0x0078);
		}

		// class UParticleModuleSubUVBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSubUVBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUVBase, 0x0030);
		}

		// class UParticleModuleSubUV : public UParticleModuleSubUVBase
		TEST_METHOD(Class__Engine__ParticleModuleSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, Animation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, SubImageIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, UnknownData_BTSS, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUV, 0x0070);
		}

		// class UParticleModuleSubUVMovie : public UParticleModuleSubUV
		TEST_METHOD(Class__Engine__ParticleModuleSubUVMovie)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, UnknownData_KFS2, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, FrameRate, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, StartingFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, UnknownData_79U1, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUVMovie, 0x00B0);
		}

		// class UParticleModuleTrailBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleTrailBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTrailBase, 0x0030);
		}

		// class UParticleModuleTrailSource : public UParticleModuleTrailBase
		TEST_METHOD(Class__Engine__ParticleModuleTrailSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_1GHP, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_0GOJ, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceStrength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_4M9N, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceOffsetCount, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceOffsetDefaults, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SelectionMethod, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_UIC3, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_ER64, 0x008D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTrailSource, 0x0090);
		}

		// class UParticleModuleTypeDataBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataBase, 0x0030);
		}

		// class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataAnimTrail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, UnknownData_EEET, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, TilingDistance, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, DistanceTessellationStepSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, TangentTessellationStepSize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, WidthTessellationStepSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, UnknownData_NMBN, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataAnimTrail, 0x0048);
		}

		// class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataBeam2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, BeamMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_RKNO, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TextureTile, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TextureTileDistance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Sheets, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, MaxBeamCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Speed, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, InterpolationPoints, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_U330, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UpVectorStepSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, BranchParentName, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_45PE, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Distance, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperMethod, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_UE8C, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperFactor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperScale, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_CZYQ, 0x00F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataBeam2, 0x0150);
		}

		// class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataGpu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, EmitterInfo, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, ResourceData, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, CameraMotionBlurAmount, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, UnknownData_CZXX, 0x0415);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataGpu, 0x0420);
		}

		// class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, Mesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_OM8J, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, LODSizeScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, MeshAlignment, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_C1SA, 0x0047);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, RollPitchYawRange, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, AxisLockOption, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, CameraFacingUpAxisOption, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, CameraFacingOption, 0x0093);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_IP8J, 0x0095);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataMesh, 0x0098);
		}

		// class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataRibbon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxTessellationBetweenParticles, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, SheetsPerTrail, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxTrailCount, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxParticleInTrailCount, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_O8K2, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, RenderAxis, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_V7L4, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TangentSpawningScalar, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_GGXG, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TilingDistance, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, DistanceTessellationStepSize, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_3B9K, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TangentTessellationScalar, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataRibbon, 0x0060);
		}

		// class UParticleModuleVectorFieldBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldBase, 0x0030);
		}

		// class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldGlobal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, UnknownData_ML09, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, GlobalVectorFieldScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, GlobalVectorFieldTightness, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, UnknownData_KHYZ, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldGlobal, 0x0040);
		}

		// class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldLocal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, VectorField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeTranslation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeScale3D, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, Intensity, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, Tightness, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, UnknownData_HXOW, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldLocal, 0x0068);
		}

		// class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotation, MinInitialRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotation, MaxInitialRotation, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldRotation, 0x0048);
		}

		// class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotationRate, RotationRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotationRate, UnknownData_Z28G, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldRotationRate, 0x0040);
		}

		// class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScale, VectorFieldScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScale, VectorFieldScaleRaw, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldScale, 0x0068);
		}

		// class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLifeRaw, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldScaleOverLife, 0x0068);
		}

		// class UParticleModuleVelocityBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleVelocityBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityBase, UnknownData_098B, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityBase, 0x0038);
		}

		// class UParticleModuleVelocity : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, StartVelocity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, StartVelocityRadial, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocity, 0x00B0);
		}

		// class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
		TEST_METHOD(Class__Engine__ParticleModuleVelocity_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity_Seeded, RandomSeedInfo, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocity_Seeded, 0x00D0);
		}

		// class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityCone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Angle, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Velocity, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Direction, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, UnknownData_I8UH, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityCone, 0x00A8);
		}

		// class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityInheritParent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityInheritParent, Scale, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityInheritParent, 0x0080);
		}

		// class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityOverLifetime, VelOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityOverLifetime, UnknownData_1HX7, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityOverLifetime, 0x0088);
		}

		// class UParticleSpriteEmitter : public UParticleEmitter
		TEST_METHOD(Class__Engine__ParticleSpriteEmitter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSpriteEmitter, 0x01B8);
		}

		// class UParticleSystem : public UFXSystemAsset
		TEST_METHOD(Class__Engine__ParticleSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UpdateTime_FPS, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UpdateTime_Delta, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, WarmupTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, WarmupTickRate, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, Emitters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, PreviewComponent, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, CurveEdSetup, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODDistanceCheckTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MacroUVRadius, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODDistances, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODSettings, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, FixedRelativeBoundingBox, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SecondsBeforeInactive, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, Delay, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, DelayLow, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SystemUpdateMode, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODMethod, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, InsignificantReaction, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, OcclusionBoundsMethod, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_KVBG, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MaxSignificanceLevel, 0x00B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MinTimeBetweenTicks, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, InsignificanceDelay, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MacroUVPosition, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, CustomOcclusionBounds, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SoloTracking, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, NamedMaterialSlots, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_TBXS, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystem, 0x0110);
		}

		// class UParticleSystemReplay : public UObject
		TEST_METHOD(Class__Engine__ParticleSystemReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemReplay, ClipIDNumber, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemReplay, UnknownData_2BQA, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystemReplay, 0x0040);
		}

		// class UPathFollowingAgentInterface : public UInterface
		TEST_METHOD(Class__Engine__PathFollowingAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingAgentInterface, 0x0028);
		}

		// class UPawnNoiseEmitterComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PawnNoiseEmitterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, UnknownData_C3TM, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoisePosition, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, NoiseLifetime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoiseVolume, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoiseTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastLocalNoiseVolume, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastLocalNoiseTime, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, UnknownData_MZ1M, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnNoiseEmitterComponent, 0x00D8);
		}

		// class UPhysicalAnimationComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PhysicalAnimationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, StrengthMultiplyer, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, UnknownData_XQA8, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, SkeletalMeshComponent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, UnknownData_9NS9, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalAnimationComponent, 0x00F0);
		}

		// class UPhysicalMaterialMask : public UObject
		TEST_METHOD(Class__Engine__PhysicalMaterialMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, UVChannelIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, AddressX, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, AddressY, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, UnknownData_416F, 0x002E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterialMask, 0x0030);
		}

		// class UPhysicsAsset : public UObject
		TEST_METHOD(Class__Engine__PhysicsAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, UnknownData_82RH, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, BoundsBodies, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, SkeletalBodySetups, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, ConstraintSetup, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, SolverIterations, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, UnknownData_KBPX, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, ThumbnailInfo, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, BodySetup, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsAsset, 0x0138);
		}

		// class USkeletalBodySetup : public UBodySetup
		TEST_METHOD(Class__Engine__SkeletalBodySetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, bSkipScaleFromAnimation, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, UnknownData_LP88, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, PhysicalAnimationData, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalBodySetup, 0x02B8);
		}

		// class UPhysicsCollisionHandler : public UObject
		TEST_METHOD(Class__Engine__PhysicsCollisionHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, ImpactThreshold, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, ImpactReFireDelay, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, DefaultImpactSound, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, LastImpactSoundTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, UnknownData_XLU9, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsCollisionHandler, 0x0040);
		}

		// class ARigidBodyBase : public AActor
		TEST_METHOD(Class__Engine__RigidBodyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARigidBodyBase, 0x0220);
		}

		// class APhysicsConstraintActor : public ARigidBodyBase
		TEST_METHOD(Class__Engine__PhysicsConstraintActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintComp, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintActor1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintActor2, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, UnknownData_HWT3, 0x0239);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsConstraintActor, 0x0240);
		}

		// class UPhysicsConstraintComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsConstraintComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintActor1, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ComponentName1, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintActor2, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ComponentName2, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, UnknownData_VCGG, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintSetup, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, OnConstraintBroken, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintInstance, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsConstraintComponent, 0x0400);
		}

		// class UPhysicsConstraintTemplate : public UObject
		TEST_METHOD(Class__Engine__PhysicsConstraintTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, DefaultInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, ProfileHandles, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, DefaultProfile, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, UnknownData_EZGK, 0x0304);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsConstraintTemplate, 0x0308);
		}

		// class UPhysicsHandleComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PhysicsHandleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, GrabbedComponent, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_HTBV, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_PULY, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, LinearDamping, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, LinearStiffness, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, AngularDamping, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, AngularStiffness, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_67SH, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, InterpolationSpeed, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_ICU5, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsHandleComponent, 0x0160);
		}

		// class UPhysicsSettings : public UPhysicsSettingsCore
		TEST_METHOD(Class__Engine__PhysicsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysicErrorCorrection, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, LockedAxis, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultDegreesOfFreedom, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSuppressFaceRemapTable, 0x0116);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSupportUVFromHitResults, 0x0117);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableActiveActors, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableKinematicStaticPairs, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableKinematicKinematicPairs, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableCCD, 0x011B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableEnhancedDeterminism, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_WKYW, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, AnimPhysicsMinDeltaTime, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSimulateAnimPhysicsAfterReset, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_IXBJ, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxPhysicsDeltaTime, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSubstepping, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSubsteppingAsync, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_6B1Y, 0x012E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxSubstepDeltaTime, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxSubsteps, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, SyncSceneSmoothingFactor, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, InitialAverageFrameRate, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysXTreeRebuildRate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_V83H, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysicalSurfaces, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultBroadphaseSettings, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MinDeltaVelocityForHitEvents, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, ChaosSettings, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_OW18, 0x019F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSettings, 0x01A0);
		}

		// class UPhysicsSpringComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsSpringComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_GR4R, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringDamping, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringLengthAtRest, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringRadius, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringChannel, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, bIgnoreSelf, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_N5OH, 0x020A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringCompression, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_G8C5, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSpringComponent, 0x0220);
		}

		// class APhysicsThruster : public ARigidBodyBase
		TEST_METHOD(Class__Engine__PhysicsThruster)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsThruster, ThrusterComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsThruster, 0x0228);
		}

		// class UPhysicsThrusterComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsThrusterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsThrusterComponent, UnknownData_SMF7, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsThrusterComponent, 0x0200);
		}

		// class ASceneCapture : public AActor
		TEST_METHOD(Class__Engine__SceneCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture, MeshComp, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture, SceneComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCapture, 0x0230);
		}

		// class APlanarReflection : public ASceneCapture
		TEST_METHOD(Class__Engine__PlanarReflection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, PlanarReflectionComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, bShowPreviewPlane, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, UnknownData_4T77, 0x0239);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlanarReflection, 0x0240);
		}

		// class USceneCaptureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_3YRO, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, HiddenComponents, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, HiddenActors, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowOnlyComponents, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowOnlyActors, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, LODDistanceFactor, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, MaxViewDistanceOverride, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, CaptureSortPriority, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, bUseRayTracingIfEnabled, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_4OD5, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowFlagSettings, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_4BL1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ProfilingEventName, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_TC15, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponent, 0x02B0);
		}

		// class UPlanarReflectionComponent : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__PlanarReflectionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PreviewBox, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, NormalDistortionStrength, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PrefilterRoughness, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PrefilterRoughnessDistance, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, ScreenPercentage, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, ExtraFOV, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeStart, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeEnd, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeoutStart, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeoutEnd, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, AngleFromPlaneFadeStart, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, AngleFromPlaneFadeEnd, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, bShowPreviewPlane, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, bRenderSceneTwoSided, 0x02E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, UnknownData_T0JW, 0x02E6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanarReflectionComponent, 0x03A0);
		}

		// class APlaneReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__PlaneReflectionCapture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlaneReflectionCapture, 0x0228);
		}

		// class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__PlaneReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, InfluenceRadiusScale, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, UnknownData_0LOJ, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, PreviewInfluenceRadius, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, PreviewCaptureBox, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, UnknownData_UFON, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneReflectionCaptureComponent, 0x0290);
		}

		// class UPlatformEventsComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PlatformEventsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformEventsComponent, PlatformChangedToLaptopModeDelegate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformEventsComponent, PlatformChangedToTabletModeDelegate, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformEventsComponent, 0x00D0);
		}

		// class UPlatformInterfaceWebResponse : public UObject
		TEST_METHOD(Class__Engine__PlatformInterfaceWebResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, OriginalURL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, ResponseCode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, Tag, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, StringResponse, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, BinaryResponse, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, UnknownData_D43G, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformInterfaceWebResponse, 0x00B0);
		}

		// class UPlayerInput : public UObject
		TEST_METHOD(Class__Engine__PlayerInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_47NM, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, DebugExecBindings, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_K9OK, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, InvertedAxis, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_ETCM, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerInput, 0x03A8);
		}

		// class APlayerStart : public ANavigationObjectBase
		TEST_METHOD(Class__Engine__PlayerStart)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerStart, PlayerStartTag, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerStart, 0x0250);
		}

		// class APlayerStartPIE : public APlayerStart
		TEST_METHOD(Class__Engine__PlayerStartPIE)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerStartPIE, 0x0250);
		}

		// class UPluginCommandlet : public UCommandlet
		TEST_METHOD(Class__Engine__PluginCommandlet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPluginCommandlet, UnknownData_C7ND, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPluginCommandlet, 0x00A0);
		}

		// class APointLight : public ALight
		TEST_METHOD(Class__Engine__PointLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APointLight, PointLightComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APointLight, 0x0238);
		}

		// class UPointLightComponent : public ULocalLightComponent
		TEST_METHOD(Class__Engine__PointLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, UnknownData_FRFT, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, LightFalloffExponent, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SourceRadius, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SoftSourceRadius, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SourceLength, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, UnknownData_S0UX, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPointLightComponent, 0x035C);
		}

		// class UPolys : public UObject
		TEST_METHOD(Class__Engine__Polys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolys, UnknownData_YN1K, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolys, 0x0038);
		}

		// class UPoseableMeshComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__Engine__PoseableMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseableMeshComponent, UnknownData_AQOL, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseableMeshComponent, 0x07F0);
		}

		// class UPoseAsset : public UAnimationAsset
		TEST_METHOD(Class__Engine__PoseAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, PoseContainer, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, bAdditivePose, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, UnknownData_9D0T, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, BasePoseIndex, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, RetargetSource, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseAsset, 0x0120);
		}

		// class UPoseWatch : public UObject
		TEST_METHOD(Class__Engine__PoseWatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, Node, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, PoseWatchColour, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, UnknownData_IC81, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseWatch, 0x0038);
		}

		// class UPostProcessComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PostProcessComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, UnknownData_E2WY, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, Settings, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, Priority, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, BlendRadius, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, BlendWeight, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, UnknownData_RZAN, 0x075D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPostProcessComponent, 0x0760);
		}

		// class APostProcessVolume : public AVolume
		TEST_METHOD(Class__Engine__PostProcessVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, UnknownData_24ZI, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, Settings, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, Priority, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, BlendRadius, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, BlendWeight, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, UnknownData_2BW0, 0x07BD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APostProcessVolume, 0x07C0);
		}

		// class APrecomputedVisibilityOverrideVolume : public AVolume
		TEST_METHOD(Class__Engine__PrecomputedVisibilityOverrideVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideVisibleActors, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideInvisibleActors, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideInvisibleLevels, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrecomputedVisibilityOverrideVolume, 0x0288);
		}

		// class APrecomputedVisibilityVolume : public AVolume
		TEST_METHOD(Class__Engine__PrecomputedVisibilityVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrecomputedVisibilityVolume, 0x0258);
		}

		// class UPreviewCollectionInterface : public UInterface
		TEST_METHOD(Class__Engine__PreviewCollectionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewCollectionInterface, 0x0028);
		}

		// class UPreviewMeshCollection : public UDataAsset
		TEST_METHOD(Class__Engine__PreviewMeshCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, UnknownData_12L5, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, Skeleton, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, SkeletalMeshes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewMeshCollection, 0x0050);
		}

		// class UPrimaryAssetLabel : public UPrimaryDataAsset
		TEST_METHOD(Class__Engine__PrimaryAssetLabel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, Rules, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, UnknownData_OLT8, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, ExplicitAssets, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, ExplicitBlueprints, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, AssetCollection, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimaryAssetLabel, 0x0068);
		}

		// class UProxyLODMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__ProxyLODMeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProxyLODMeshSimplificationSettings, ProxyLODMeshReductionModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProxyLODMeshSimplificationSettings, 0x0040);
		}

		// class ARadialForceActor : public ARigidBodyBase
		TEST_METHOD(Class__Engine__RadialForceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARadialForceActor, ForceComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARadialForceActor, 0x0228);
		}

		// class URadialForceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__RadialForceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_QW8X, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ImpulseStrength, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_DP42, 0x0205);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ForceStrength, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, DestructibleDamage, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ObjectTypesToAffect, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_CV3K, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialForceComponent, 0x0230);
		}

		// class ARectLight : public ALight
		TEST_METHOD(Class__Engine__RectLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARectLight, RectLightComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARectLight, 0x0238);
		}

		// class URectLightComponent : public ULocalLightComponent
		TEST_METHOD(Class__Engine__RectLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceWidth, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceHeight, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, BarnDoorAngle, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, BarnDoorLength, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceTexture, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, UnknownData_PBSE, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URectLightComponent, 0x0360);
		}

		// class URendererSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__RendererSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_L2PQ, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MaxMobileCascades, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobileMSAASampleCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_1CNI, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_MM9W, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForLights, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForEarlyZPass, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForCSMdepth, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_74O4, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VirtualTextureTileSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VirtualTextureTileBorderSize, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VirtualTextureFeedbackFactor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_TFEN, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, ReflectionCaptureResolution, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_H4XG, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TessellationAdaptivePixelsPerTriangle, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_9APN, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TranslucentSortPolicy, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_2OUZ, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TranslucentSortAxis, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, CustomDepthStencil, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_DR4G, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_S33B, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, bEnableAlphaChannelInPostProcessing, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_BVQ0, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_VGMV, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAutoExposure, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_WXUI, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAutoExposureBias, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_NMDR, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAntiAliasing, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultLightUnits, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultBackBufferPixelFormat, 0x00A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_EJR1, 0x00A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_XAQ7, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, EarlyZPass, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_1JTQ, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_9IM0, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, ClearSceneMethod, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_MCMV, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_N7U2, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GPUSimulationTextureSizeX, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GPUSimulationTextureSizeY, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_X40E, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GBufferFormat, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_3ML0, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_ONBI, 0x00CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, WireframeCullThreshold, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_LCOA, 0x00D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultSkinCacheBehavior, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_FT8L, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, SkinCacheSceneMemoryLimitInMB, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_W6WN, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobileNumDynamicPointLights, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_K45K, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnlimitedBonInfluencesThreshold, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobilePlanarReflectionMode, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, bStreamSkeletalMeshLODs, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, bDiscardSkeletalMeshOptionalLODs, 0x00F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_ARDH, 0x00F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VisualizeCalibrationColorMaterialPath, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VisualizeCalibrationCustomMaterialPath, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VisualizeCalibrationGrayscaleMaterialPath, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URendererSettings, 0x0140);
		}

		// class URendererOverrideSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__RendererOverrideSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererOverrideSettings, UnknownData_JLDP, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URendererOverrideSettings, 0x0040);
		}

		// class UReplayNetConnection : public UNetConnection
		TEST_METHOD(Class__Engine__ReplayNetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplayNetConnection, UnknownData_82CV, 0x1AF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplayNetConnection, 0x22F0);
		}

		// class UReplaySubsystem : public UGameInstanceSubsystem
		TEST_METHOD(Class__Engine__ReplaySubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplaySubsystem, UnknownData_GDPK, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplaySubsystem, 0x0038);
		}

		// class UReporterBase : public UObject
		TEST_METHOD(Class__Engine__ReporterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReporterBase, UnknownData_YLQ4, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReporterBase, 0x0030);
		}

		// class UReporterGraph : public UReporterBase
		TEST_METHOD(Class__Engine__ReporterGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReporterGraph, UnknownData_8IF1, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReporterGraph, 0x00A8);
		}

		// class UReverbEffect : public UObject
		TEST_METHOD(Class__Engine__ReverbEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, bBypassEarlyReflections, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, UnknownData_IN39, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, ReflectionsDelay, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, GainHF, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, ReflectionsGain, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, bBypassLateReflections, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, UnknownData_QA06, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, LateDelay, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, DecayTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Density, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Diffusion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, AirAbsorptionGainHF, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, DecayHFRatio, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, LateGain, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Gain, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, RoomRolloffFactor, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverbEffect, 0x0060);
		}

		// class URig : public UObject
		TEST_METHOD(Class__Engine__Rig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, UnknownData_J3UW, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, TransformBases, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, Nodes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URig, 0x0050);
		}

		// class URotatingMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__RotatingMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, RotationRate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, PivotTranslation, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, UnknownData_8V04, 0x0109);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URotatingMovementComponent, 0x0110);
		}

		// class URuntimeOptionsBase : public UObject
		TEST_METHOD(Class__Engine__RuntimeOptionsBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeOptionsBase, UnknownData_PTN4, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeOptionsBase, 0x0038);
		}

		// class URuntimeVirtualTexture : public UObject
		TEST_METHOD(Class__Engine__RuntimeVirtualTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, TileCount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, TileSize, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, TileBorderSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, MaterialType, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bCompressTextures, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bClearTextures, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bSinglePhysicalSpace, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bPrivateSpace, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bAdaptive, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bContinuousUpdate, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_4AGG, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, RemoveLowMips, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, LODGroup, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_PVWY, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, Size, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, StreamingTexture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_BIIP, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeVirtualTexture, 0x00A0);
		}

		// class URuntimeVirtualTextureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__RuntimeVirtualTextureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_O7FF, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, BoundsAlignActor, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bSetBoundsButton, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bSnapBoundsToLandscape, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_TMU6, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, VirtualTexture, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bEnableScalability, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_RE87, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, ScalabilityGroup, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bHidePrimitives, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_CFLM, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, StreamingTexture, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, StreamLowMips, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bBuildStreamingMipsButton, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bEnableCompressCrunch, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bUseStreamingLowMipsInEditor, 0x024E);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bBuildDebugStreamingMips, 0x024F);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_T2LD, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeVirtualTextureComponent, 0x0270);
		}

		// class ARuntimeVirtualTextureVolume : public AActor
		TEST_METHOD(Class__Engine__RuntimeVirtualTextureVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARuntimeVirtualTextureVolume, VirtualTextureComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARuntimeVirtualTextureVolume, 0x0228);
		}

		// class URVOAvoidanceInterface : public UInterface
		TEST_METHOD(Class__Engine__RVOAvoidanceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URVOAvoidanceInterface, 0x0028);
		}

		// class UScene : public UObject
		TEST_METHOD(Class__Engine__Scene)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScene, 0x0028);
		}

		// class ASceneCapture2D : public ASceneCapture
		TEST_METHOD(Class__Engine__SceneCapture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture2D, CaptureComponent2D, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCapture2D, 0x0238);
		}

		// class USceneCaptureComponent2D : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponent2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ProjectionType, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_OB5B, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, FOVAngle, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, OrthoWidth, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_VFDV, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, TextureTarget, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CompositeMode, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_A4MK, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, PostProcessSettings, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, PostProcessBlendWeight, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_VQ1Y, 0x0825);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CustomNearClippingPlane, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bUseCustomProjectionMatrix, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_Y3XW, 0x082D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CustomProjectionMatrix, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bEnableClipPlane, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_JTDP, 0x0871);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ClipPlaneBase, 0x0874);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ClipPlaneNormal, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_33TH, 0x088D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bDisableFlipCopyGLES, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_PNZ5, 0x0891);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponent2D, 0x08B0);
		}

		// class USceneCaptureComponentCube : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponentCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTarget, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, bCaptureRotation, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, UnknownData_UDSB, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetLeft, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetRight, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetODS, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, IPD, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, UnknownData_JK1N, 0x02DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponentCube, 0x02E0);
		}

		// class ASceneCaptureCube : public ASceneCapture
		TEST_METHOD(Class__Engine__SceneCaptureCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCaptureCube, CaptureComponentCube, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCaptureCube, 0x0238);
		}

		// class USCS_Node : public UObject
		TEST_METHOD(Class__Engine__SCS_Node)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ComponentClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ComponentTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, CookedComponentInstancingData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, AttachToName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ParentComponentOrVariableName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ParentComponentOwnerClassName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, bIsParentComponentNative, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, UnknownData_JE3O, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ChildNodes, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, MetaDataArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, VariableGuid, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, InternalVariableName, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USCS_Node, 0x00D8);
		}

		// class USelection : public UObject
		TEST_METHOD(Class__Engine__Selection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USelection, UnknownData_THSM, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelection, 0x00A0);
		}

		// class AServerStatReplicator : public AInfo
		TEST_METHOD(Class__Engine__ServerStatReplicator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, bUpdateStatNet, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, bOverwriteClientStats, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_7QH1, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, Channels, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRate, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRate, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_V5GX, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, MaxPacketOverhead, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientMax, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientMin, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientAvg, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientMax, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientMin, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientAvg, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientMax, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientMin, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientAvg, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientMax, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientMin, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientAvg, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetNumClients, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPackets, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPackets, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InBunches, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutBunches, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutLoss, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InLoss, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoiceBytesSent, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoiceBytesRecv, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoicePacketsSent, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoicePacketsRecv, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PercentInVoice, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PercentOutVoice, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumActorChannels, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumConsideredActors, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PrioritizedActors, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumRelevantActors, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumRelevantDeletedActors, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumReplicatedActorAttempts, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumReplicatedActors, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumActors, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetActors, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumDormantActors, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumInitiallyDormantActors, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsAckd, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsPending, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsUnAckd, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, ObjPathBytes, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetGUIDOutRate, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetGUIDInRate, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetSaturated, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_ER0R, 0x02E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AServerStatReplicator, 0x02E8);
		}

		// class UShadowMapTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__ShadowMapTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShadowMapTexture2D, ShadowmapFlags, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShadowMapTexture2D, UnknownData_CK7T, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShadowMapTexture2D, 0x0108);
		}

		// class USimpleConstructionScript : public UObject
		TEST_METHOD(Class__Engine__SimpleConstructionScript)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, RootNodes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, AllNodes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, DefaultSceneRootNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, UnknownData_AEXH, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleConstructionScript, 0x00A0);
		}

		// class ASkeletalMeshActor : public AActor
		TEST_METHOD(Class__Engine__SkeletalMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_4N6X, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_SXD2, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, SkeletalMeshComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMesh, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedPhysAsset, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMaterial0, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMaterial1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_DA13, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkeletalMeshActor, 0x02A8);
		}

		// class USkeletalMeshEditorData : public UObject
		TEST_METHOD(Class__Engine__SkeletalMeshEditorData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshEditorData, 0x0028);
		}

		// class USkeletalMeshLODSettings : public UDataAsset
		TEST_METHOD(Class__Engine__SkeletalMeshLODSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MinLOD, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, DisableBelowMinLodStripping, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, bOverrideLODStreamingSettings, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, bSupportLODStreaming, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, UnknownData_TOV2, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MaxNumStreamedLODs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MaxNumOptionalLODs, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, LODGroups, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshLODSettings, 0x0050);
		}

		// class USkeletalMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__SkeletalMeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimplificationSettings, SkeletalMeshReductionModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSimplificationSettings, 0x0040);
		}

		// class USkeletalMeshSocket : public UObject
		TEST_METHOD(Class__Engine__SkeletalMeshSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, SocketName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, BoneName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeLocation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, bForceAlwaysAnimated, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, UnknownData_OMR3, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSocket, 0x0060);
		}

		// class USkyAtmosphereComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SkyAtmosphereComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, UnknownData_TWLH, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, BottomRadius, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, GroundAlbedo, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, AtmosphereHeight, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MultiScatteringFactor, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, TraceSampleCountScale, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, RayleighScatteringScale, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, RayleighScattering, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, RayleighExponentialDistribution, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieScatteringScale, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieScattering, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieAbsorptionScale, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieAbsorption, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieAnisotropy, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieExponentialDistribution, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, OtherAbsorptionScale, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, OtherAbsorption, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, OtherTentDistribution, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, SkyLuminanceFactor, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, AerialPespectiveViewDistanceScale, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, HeightFogContribution, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, TransmittanceMinLightElevationAngle, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, AerialPerspectiveStartDepth, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, UnknownData_9BOT, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, bStaticLightingBuiltGUID, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, UnknownData_LS0Q, 0x02CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkyAtmosphereComponent, 0x02D0);
		}

		// class ASkyAtmosphere : public AInfo
		TEST_METHOD(Class__Engine__SkyAtmosphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyAtmosphere, SkyAtmosphereComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkyAtmosphere, 0x0228);
		}

		// class USkyLightComponent : public ULightComponentBase
		TEST_METHOD(Class__Engine__SkyLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_URS1, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, Cubemap, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SourceCubemapAngle, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CubemapResolution, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SkyDistanceThreshold, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, bCaptureEmissiveOnly, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, bLowerHemisphereIsBlack, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_I831, 0x0246);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, LowerHemisphereColor, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionMaxDistance, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, Contrast, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionExponent, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, MinOcclusion, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionTint, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_UC9K, 0x026D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CloudAmbientOcclusionStrength, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CloudAmbientOcclusionExtent, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CloudAmbientOcclusionMapResolutionScale, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CloudAmbientOcclusionApertureScale, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionCombineMode, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_XWKB, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, BlendDestinationCubemap, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_SEAC, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkyLightComponent, 0x0410);
		}

		// class USlateBrushAsset : public UObject
		TEST_METHOD(Class__Engine__SlateBrushAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateBrushAsset, Brush, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateBrushAsset, 0x00B0);
		}

		// class USlateTextureAtlasInterface : public UInterface
		TEST_METHOD(Class__Engine__SlateTextureAtlasInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateTextureAtlasInterface, 0x0028);
		}

		// class USmokeTestCommandlet : public UCommandlet
		TEST_METHOD(Class__Engine__SmokeTestCommandlet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmokeTestCommandlet, 0x0080);
		}

		// class USoundAttenuation : public UObject
		TEST_METHOD(Class__Engine__SoundAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundAttenuation, Attenuation, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundAttenuation, 0x03C8);
		}

		// class USoundClass : public UObject
		TEST_METHOD(Class__Engine__SoundClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, Properties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, ChildClasses, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, PassiveSoundMixModifiers, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, ParentClass, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundClass, 0x00D0);
		}

		// class USoundConcurrency : public UObject
		TEST_METHOD(Class__Engine__SoundConcurrency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundConcurrency, Concurrency, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundConcurrency, 0x0050);
		}

		// class USoundCue : public USoundBase
		TEST_METHOD(Class__Engine__SoundCue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_1MKY, 0x01B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, FirstNode, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, VolumeMultiplier, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, PitchMultiplier, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, AttenuationOverrides, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, SubtitlePriority, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_X4PZ, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_CHYQ, 0x0579);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, CookedQualityIndex, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_ITQU, 0x0581);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundCue, 0x0590);
		}

		// class USoundEffectSourcePresetChain : public UObject
		TEST_METHOD(Class__Engine__SoundEffectSourcePresetChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectSourcePresetChain, Chain, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectSourcePresetChain, UnknownData_JKUV, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSourcePresetChain, 0x0040);
		}

		// class USoundGroups : public UObject
		TEST_METHOD(Class__Engine__SoundGroups)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundGroups, SoundGroupProfiles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundGroups, UnknownData_V4HL, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundGroups, 0x0088);
		}

		// class USoundMix : public UObject
		TEST_METHOD(Class__Engine__SoundMix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, UnknownData_MGGF, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, EQPriority, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, EQSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, SoundClassEffects, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, InitialDelay, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, FadeInTime, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, Duration, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, FadeOutTime, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundMix, 0x0090);
		}

		// class USoundNode : public UObject
		TEST_METHOD(Class__Engine__SoundNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNode, ChildNodes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNode, UnknownData_4JF4, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNode, 0x0048);
		}

		// class USoundNodeAssetReferencer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeAssetReferencer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAssetReferencer, 0x0048);
		}

		// class USoundNodeAttenuation : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, AttenuationSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, AttenuationOverrides, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, UnknownData_BM19, 0x03F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAttenuation, 0x03F8);
		}

		// class USoundNodeBranch : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeBranch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeBranch, BoolParameterName, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeBranch, 0x0050);
		}

		// class USoundNodeConcatenator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeConcatenator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeConcatenator, InputVolume, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeConcatenator, 0x0058);
		}

		// class USoundNodeDelay : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDelay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDelay, DelayMin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDelay, DelayMax, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDelay, 0x0050);
		}

		// class USoundNodeDialoguePlayer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDialoguePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDialoguePlayer, DialogueWaveParameter, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDialoguePlayer, UnknownData_HC2O, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDialoguePlayer, 0x0070);
		}

		// class USoundNodeDistanceCrossFade : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDistanceCrossFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDistanceCrossFade, CrossFadeInput, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDistanceCrossFade, 0x0058);
		}

		// class USoundNodeDoppler : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDoppler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, DopplerIntensity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, bUseSmoothing, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, UnknownData_SDYM, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, SmoothingInterpSpeed, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, UnknownData_NSBD, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDoppler, 0x0058);
		}

		// class USoundNodeEnveloper : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeEnveloper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, DurationAfterLoop, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopCount, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, UnknownData_F01H, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeInterpCurve, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchInterpCurve, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchCurve, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchMin, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchMax, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeMin, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeMax, 0x018C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeEnveloper, 0x0190);
		}

		// class USoundNodeGroupControl : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeGroupControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeGroupControl, GroupSizes, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeGroupControl, 0x0058);
		}

		// class USoundNodeLooping : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeLooping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeLooping, LoopCount, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeLooping, UnknownData_UPQ7, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeLooping, 0x0050);
		}

		// class USoundNodeMature : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeMature)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeMature, 0x0048);
		}

		// class USoundNodeMixer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeMixer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeMixer, InputVolume, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeMixer, 0x0058);
		}

		// class USoundNodeModulator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeModulator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, PitchMin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, PitchMax, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, VolumeMin, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, VolumeMax, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeModulator, 0x0058);
		}

		// class USoundNodeModulatorContinuous : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeModulatorContinuous)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, PitchModulationParams, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, VolumeModulationParams, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeModulatorContinuous, 0x0088);
		}

		// class USoundNodeOscillator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, UnknownData_E9LR, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, AmplitudeMin, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, AmplitudeMax, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, FrequencyMin, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, FrequencyMax, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, OffsetMin, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, OffsetMax, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, CenterMin, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, CenterMax, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, UnknownData_YJ53, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeOscillator, 0x0070);
		}

		// class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
		TEST_METHOD(Class__Engine__SoundNodeParamCrossFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeParamCrossFade, ParamName, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeParamCrossFade, 0x0060);
		}

		// class USoundNodeQualityLevel : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeQualityLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeQualityLevel, CookedQualityLevelIndex, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeQualityLevel, UnknownData_C4P6, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeQualityLevel, 0x0050);
		}

		// class USoundNodeRandom : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeRandom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, Weights, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, HasBeenUsed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, NumRandomUsed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, PreselectAtLevelLoad, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, UnknownData_2RMG, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeRandom, 0x0078);
		}

		// class USoundNodeSoundClass : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeSoundClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSoundClass, SoundClassOverride, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSoundClass, UnknownData_RGCR, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeSoundClass, 0x0058);
		}

		// class USoundNodeSwitch : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSwitch, IntParameterName, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeSwitch, 0x0050);
		}

		// class USoundNodeWaveParam : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeWaveParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWaveParam, WaveParameterName, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeWaveParam, 0x0050);
		}

		// class USoundNodeWavePlayer : public USoundNodeAssetReferencer
		TEST_METHOD(Class__Engine__SoundNodeWavePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, SoundWaveAssetPtr, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, SoundWave, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, UnknownData_G573, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, UnknownData_FD9D, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeWavePlayer, 0x0088);
		}

		// class USoundSourceBus : public USoundWave
		TEST_METHOD(Class__Engine__SoundSourceBus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, SourceBusChannels, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, UnknownData_R7KW, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, SourceBusDuration, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, AudioBus, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, UnknownData_545I, 0x0381);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSourceBus, 0x0388);
		}

		// class USoundSubmixBase : public UObject
		TEST_METHOD(Class__Engine__SoundSubmixBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmixBase, ChildSubmixes, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmixBase, 0x0038);
		}

		// class USoundSubmixWithParentBase : public USoundSubmixBase
		TEST_METHOD(Class__Engine__SoundSubmixWithParentBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmixWithParentBase, ParentSubmix, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmixWithParentBase, 0x0040);
		}

		// class USoundSubmix : public USoundSubmixWithParentBase
		TEST_METHOD(Class__Engine__SoundSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_1L0J, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, SubmixEffectChain, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, AmbisonicsPluginSettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, EnvelopeFollowerAttackTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, EnvelopeFollowerReleaseTime, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, GainMode, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_I5KT, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, OutputVolume, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, WetLevel, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, DryLevel, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, OnSubmixRecordedFileDone, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_CEKY, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmix, 0x0090);
		}

		// class USoundfieldSubmix : public USoundSubmixWithParentBase
		TEST_METHOD(Class__Engine__SoundfieldSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, SoundfieldEncodingFormat, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, EncodingSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, SoundfieldEffectChain, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, EncodingSettingsClass, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldSubmix, 0x0068);
		}

		// class UEndpointSubmix : public USoundSubmixBase
		TEST_METHOD(Class__Engine__EndpointSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndpointSubmix, EndpointType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndpointSubmix, EndpointSettingsClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndpointSubmix, EndpointSettings, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndpointSubmix, 0x0050);
		}

		// class USoundfieldEndpointSubmix : public USoundSubmixBase
		TEST_METHOD(Class__Engine__SoundfieldEndpointSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, SoundfieldEndpointType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EndpointSettingsClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EndpointSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EncodingSettingsClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EncodingSettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, SoundfieldEffectChain, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEndpointSubmix, 0x0070);
		}

		// class ASpectatorPawn : public ADefaultPawn
		TEST_METHOD(Class__Engine__SpectatorPawn)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorPawn, 0x02A8);
		}

		// class USpectatorPawnMovement : public UFloatingPawnMovement
		TEST_METHOD(Class__Engine__SpectatorPawnMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorPawnMovement, UnknownData_NUZN, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpectatorPawnMovement, 0x0158);
		}

		// class ASphereReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__SphereReflectionCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASphereReflectionCapture, DrawCaptureRadius, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASphereReflectionCapture, 0x0230);
		}

		// class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__SphereReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, InfluenceRadius, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, CaptureDistanceScale, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, PreviewInfluenceRadius, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereReflectionCaptureComponent, 0x0280);
		}

		// class USplineMetadata : public UObject
		TEST_METHOD(Class__Engine__SplineMetadata)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineMetadata, 0x0028);
		}

		// class ASplineMeshActor : public AActor
		TEST_METHOD(Class__Engine__SplineMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineMeshActor, SplineMeshComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASplineMeshActor, 0x0228);
		}

		// class USplineMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Engine__SplineMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_M91J, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineParams, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineUpDir, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineBoundaryMin, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, CachedMeshBodySetupGuid, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, BodySetup, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineBoundaryMax, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, ForwardAxis, 0x055D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_BSLU, 0x055E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, VirtualTextureMainPassMaxDrawDistance, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_K1LE, 0x0564);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineMeshComponent, 0x0570);
		}

		// class USpotLightComponent : public UPointLightComponent
		TEST_METHOD(Class__Engine__SpotLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, OuterConeAngle, 0x035C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpotLightComponent, 0x0360);
		}

		// class UStaticMesh : public UStreamableRenderAsset
		TEST_METHOD(Class__Engine__StaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_U3B7, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, MinLOD, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LpvBiasMultiplier, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, StaticMaterials, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightmapUVDensity, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightMapResolution, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightMapCoordinateIndex, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, DistanceFieldSelfShadowBias, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, BodySetup, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LODForCollision, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_Q3JK, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, Sockets, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_UN0A, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, PositiveBoundsExtension, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, NegativeBoundsExtension, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, ExtendedBounds, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, ElementToIgnoreForTexFactor, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, AssetUserData, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, EditableMesh, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, NavCollision, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMesh, 0x0150);
		}

		// class UStaticMeshSocket : public UObject
		TEST_METHOD(Class__Engine__StaticMeshSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, SocketName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeRotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, UnknownData_2L07, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, Tag, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshSocket, 0x0068);
		}

		// class UStereoLayerShape : public UObject
		TEST_METHOD(Class__Engine__StereoLayerShape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShape, 0x0028);
		}

		// class UStereoLayerShapeQuad : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeQuad)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeQuad, 0x0028);
		}

		// class UStereoLayerShapeCylinder : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeCylinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, Radius, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, OverlayArc, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, Height, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, UnknownData_I6J5, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeCylinder, 0x0038);
		}

		// class UStereoLayerShapeCubemap : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeCubemap)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeCubemap, 0x0028);
		}

		// class UStereoLayerShapeEquirect : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeEquirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, LeftUVRect, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, RightUVRect, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, LeftScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, RightScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, LeftBias, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, RightBias, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeEquirect, 0x0070);
		}

		// class UStereoLayerComponent : public USceneComponent
		TEST_METHOD(Class__Engine__StereoLayerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_ZXTA, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Texture, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, LeftTexture, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_CVGJ, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, QuadSize, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UVRect, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderRadius, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderOverlayArc, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderHeight, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, EquirectProps, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, StereoLayerType, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, StereoLayerShape, 0x0285);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_9F8Q, 0x0286);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Shape, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Priority, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_TG9J, 0x0294);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerComponent, 0x02E0);
		}

		// class UStereoLayerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__StereoLayerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerFunctionLibrary, 0x0028);
		}

		// class UStringTable : public UObject
		TEST_METHOD(Class__Engine__StringTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStringTable, UnknownData_CMBJ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStringTable, 0x0040);
		}

		// class USubsurfaceProfile : public UObject
		TEST_METHOD(Class__Engine__SubsurfaceProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsurfaceProfile, Settings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsurfaceProfile, UnknownData_ET7T, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsurfaceProfile, 0x00B8);
		}

		// class USubsystemBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__SubsystemBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsystemBlueprintLibrary, 0x0028);
		}

		// class USubUVAnimation : public UObject
		TEST_METHOD(Class__Engine__SubUVAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubUVTexture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubImages_Horizontal, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubImages_Vertical, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, BoundingMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, OpacitySourceMode, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, UnknownData_ZQYX, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, AlphaThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, UnknownData_1L28, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubUVAnimation, 0x0068);
		}

		// class USystemTimeTimecodeProvider : public UTimecodeProvider
		TEST_METHOD(Class__Engine__SystemTimeTimecodeProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, FrameRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, bGenerateFullFrame, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, bUseHighPerformanceClock, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, UnknownData_BN6X, 0x003A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USystemTimeTimecodeProvider, 0x0040);
		}

		// class ATargetPoint : public AActor
		TEST_METHOD(Class__Engine__TargetPoint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATargetPoint, 0x0220);
		}

		// class UTextPropertyTestObject : public UObject
		TEST_METHOD(Class__Engine__TextPropertyTestObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, DefaultedText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, UndefaultedText, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, TransientText, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextPropertyTestObject, 0x0070);
		}

		// class ATextRenderActor : public AActor
		TEST_METHOD(Class__Engine__TextRenderActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATextRenderActor, TextRender, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATextRenderActor, 0x0228);
		}

		// class UTextRenderComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__TextRenderComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, Text, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, TextMaterial, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, Font, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, HorizontalAlignment, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, VerticalAlignment, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, UnknownData_UF5A, 0x046A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, TextRenderColor, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, XScale, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, YScale, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, WorldSize, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, InvDefaultSize, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, HorizSpacingAdjust, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, VertSpacingAdjust, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, UnknownData_7GGK, 0x0489);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextRenderComponent, 0x0490);
		}

		// class UTexture2DArray : public UTexture
		TEST_METHOD(Class__Engine__Texture2DArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DArray, UnknownData_431O, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DArray, AddressX, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DArray, AddressY, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DArray, AddressZ, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DArray, UnknownData_OR7P, 0x0133);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2DArray, 0x0138);
		}

		// class UTexture2DDynamic : public UTexture
		TEST_METHOD(Class__Engine__Texture2DDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, UnknownData_JQ2Y, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, Format, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, UnknownData_8ZGW, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2DDynamic, 0x00F0);
		}

		// class UTextureLightProfile : public UTexture2D
		TEST_METHOD(Class__Engine__TextureLightProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLightProfile, Brightness, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLightProfile, TextureMultiplier, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureLightProfile, 0x0108);
		}

		// class UTextureMipDataProviderFactory : public UAssetUserData
		TEST_METHOD(Class__Engine__TextureMipDataProviderFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureMipDataProviderFactory, 0x0028);
		}

		// class UTextureRenderTarget2DArray : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTarget2DArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, SizeX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, SizeY, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, Slices, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, ClearColor, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, OverrideFormat, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, UnknownData_6SRY, 0x00FE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget2DArray, 0x0100);
		}

		// class UTextureRenderTargetCube : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTargetCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, SizeX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, ClearColor, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, OverrideFormat, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, UnknownData_MAOF, 0x00F6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTargetCube, 0x00F8);
		}

		// class UTextureRenderTargetVolume : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTargetVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, SizeX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, SizeY, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, SizeZ, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, ClearColor, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, OverrideFormat, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, UnknownData_JLY6, 0x00FE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTargetVolume, 0x0100);
		}

		// class UThumbnailInfo : public UObject
		TEST_METHOD(Class__Engine__ThumbnailInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThumbnailInfo, 0x0028);
		}

		// class UTimelineComponent : public UActorComponent
		TEST_METHOD(Class__Engine__TimelineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineComponent, TheTimeline, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineComponent, UnknownData_RBL7, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimelineComponent, 0x0150);
		}

		// class UTimelineTemplate : public UObject
		TEST_METHOD(Class__Engine__TimelineTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, TimelineLength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, LengthMode, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UnknownData_NXZ5, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, EventTracks, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, FloatTracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, VectorTracks, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, LinearColorTracks, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, MetaDataArray, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, TimelineGuid, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, VariableName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, DirectionPropertyName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UpdateFunctionName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, FinishedFunctionName, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimelineTemplate, 0x00B0);
		}

		// class UTireType : public UDataAsset
		TEST_METHOD(Class__Engine__TireType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireType, FrictionScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireType, UnknownData_ZKJJ, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTireType, 0x0038);
		}

		// class UTouchInterface : public UObject
		TEST_METHOD(Class__Engine__TouchInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, Controls, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, ActiveOpacity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, InactiveOpacity, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, TimeUntilDeactive, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, TimeUntilReset, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, ActivationDelay, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, bPreventRecenter, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, UnknownData_ONYU, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, StartupDelay, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, UnknownData_UHZ4, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTouchInterface, 0x0058);
		}

		// class ATriggerCapsule : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerCapsule)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerCapsule, 0x0228);
		}

		// class ATriggerSphere : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerSphere)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerSphere, 0x0228);
		}

		// class ATriggerVolume : public AVolume
		TEST_METHOD(Class__Engine__TriggerVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerVolume, 0x0258);
		}

		// class UTwitterIntegrationBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__TwitterIntegrationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwitterIntegrationBase, 0x0038);
		}

		// class UUserDefinedEnum : public UEnum
		TEST_METHOD(Class__Engine__UserDefinedEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedEnum, DisplayNameMap, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedEnum, 0x00B0);
		}

		// class UUserDefinedStruct : public UScriptStruct
		TEST_METHOD(Class__Engine__UserDefinedStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, Status, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, UnknownData_9IDO, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, Guid, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, UnknownData_YR83, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedStruct, 0x0108);
		}

		// class UUserInterfaceSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__UserInterfaceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, RenderFocusRule, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_PVEC, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, HardwareCursors, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, SoftwareCursors, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, DefaultCursor, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, TextEditBeamCursor, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CrosshairsCursor, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, HandCursor, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, GrabHandCursor, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, GrabHandClosedCursor, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, SlashedCircleCursor, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, ApplicationScale, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UIScaleRule, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_2A7I, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRuleClass, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UIScaleCurve, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, bAllowHighDPIInGameMode, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_F5KL, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, DesignScreenSize, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, bLoadWidgetsOnDedicatedServer, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_AK7W, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CursorClasses, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRuleClassInstance, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRule, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_JIK9, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserInterfaceSettings, 0x0270);
		}

		// class UVectorField : public UObject
		TEST_METHOD(Class__Engine__VectorField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorField, Bounds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorField, Intensity, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorField, 0x0048);
		}

		// class UVectorFieldAnimated : public UVectorField
		TEST_METHOD(Class__Engine__VectorFieldAnimated)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, Texture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, ConstructionOp, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, UnknownData_L3UC, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeX, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeY, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeZ, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, SubImagesX, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, SubImagesY, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, FrameCount, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, FramesPerSecond, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, UnknownData_V47I, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseField, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseMax, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldAnimated, 0x0088);
		}

		// class UVectorFieldComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__VectorFieldComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, VectorField, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, Intensity, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, Tightness, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, UnknownData_77J5, 0x0451);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldComponent, 0x0470);
		}

		// class UVectorFieldStatic : public UVectorField
		TEST_METHOD(Class__Engine__VectorFieldStatic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeZ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, bAllowCPUAccess, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, UnknownData_Z5QD, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldStatic, 0x0098);
		}

		// class AVectorFieldVolume : public AActor
		TEST_METHOD(Class__Engine__VectorFieldVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVectorFieldVolume, VectorFieldComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVectorFieldVolume, 0x0228);
		}

		// class UViewportStatsSubsystem : public UWorldSubsystem
		TEST_METHOD(Class__Engine__ViewportStatsSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewportStatsSubsystem, UnknownData_GGRN, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewportStatsSubsystem, 0x0050);
		}

		// class UVirtualTexture : public UObject
		TEST_METHOD(Class__Engine__VirtualTexture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTexture, 0x0028);
		}

		// class ULightMapVirtualTexture : public UVirtualTexture
		TEST_METHOD(Class__Engine__LightMapVirtualTexture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapVirtualTexture, 0x0028);
		}

		// class URuntimeVirtualTextureStreamingProxy : public UTexture2D
		TEST_METHOD(Class__Engine__RuntimeVirtualTextureStreamingProxy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeVirtualTextureStreamingProxy, 0x0100);
		}

		// class UVirtualTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__VirtualTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture2D, Settings, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture2D, bContinuousUpdate, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture2D, bSinglePhysicalSpace, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture2D, UnknownData_PQPZ, 0x010E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTexture2D, 0x0110);
		}

		// class UVirtualTextureBuilder : public UObject
		TEST_METHOD(Class__Engine__VirtualTextureBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureBuilder, Texture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureBuilder, BuildHash, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTextureBuilder, 0x0038);
		}

		// class UVirtualTexturePoolConfig : public UObject
		TEST_METHOD(Class__Engine__VirtualTexturePoolConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexturePoolConfig, DefaultSizeInMegabyte, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexturePoolConfig, UnknownData_7O4Z, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexturePoolConfig, Pools, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTexturePoolConfig, 0x0040);
		}

		// class UVisualLoggerAutomationTests : public UObject
		TEST_METHOD(Class__Engine__VisualLoggerAutomationTests)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerAutomationTests, 0x0028);
		}

		// class UVisualLoggerDebugSnapshotInterface : public UInterface
		TEST_METHOD(Class__Engine__VisualLoggerDebugSnapshotInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerDebugSnapshotInterface, 0x0028);
		}

		// class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__VisualLoggerKismetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerKismetLibrary, 0x0028);
		}

		// class UVoiceChannel : public UChannel
		TEST_METHOD(Class__Engine__VoiceChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceChannel, UnknownData_LRFQ, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoiceChannel, 0x0080);
		}

		// class UVOIPTalker : public UActorComponent
		TEST_METHOD(Class__Engine__VOIPTalker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVOIPTalker, Settings, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVOIPTalker, UnknownData_H8SV, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVOIPTalker, 0x00E8);
		}

		// class UVOIPStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__VOIPStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVOIPStatics, 0x0028);
		}

		// class UVolumeTexture : public UTexture
		TEST_METHOD(Class__Engine__VolumeTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumeTexture, UnknownData_BCQ8, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVolumeTexture, 0x0130);
		}

		// class UVolumetricCloudComponent : public USceneComponent
		TEST_METHOD(Class__Engine__VolumetricCloudComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, UnknownData_OYT9, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, LayerHeight, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, TracingStartMaxDistance, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, TracingMaxDistance, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, PlanetRadius, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, GroundAlbedo, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, Material, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, UnknownData_DYLH, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, SkyLightCloudBottomOcclusion, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, ViewSampleCountScale, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, ReflectionSampleCountScale, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, ShadowViewSampleCountScale, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, ShadowReflectionSampleCountScale, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, ShadowTracingDistance, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, UnknownData_WOWE, 0x0234);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVolumetricCloudComponent, 0x0240);
		}

		// class AVolumetricCloud : public AInfo
		TEST_METHOD(Class__Engine__VolumetricCloud)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVolumetricCloud, VolumetricCloudComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolumetricCloud, 0x0228);
		}

		// class AVolumetricLightmapDensityVolume : public AVolume
		TEST_METHOD(Class__Engine__VolumetricLightmapDensityVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVolumetricLightmapDensityVolume, AllowedMipLevelRange, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolumetricLightmapDensityVolume, 0x0260);
		}

		// class AWindDirectionalSource : public AInfo
		TEST_METHOD(Class__Engine__WindDirectionalSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWindDirectionalSource, Component, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWindDirectionalSource, 0x0228);
		}

		// class UWindDirectionalSourceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__WindDirectionalSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, UnknownData_YMMF, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Speed, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, MinGustAmount, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, MaxGustAmount, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Radius, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, UnknownData_33QC, 0x020D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindDirectionalSourceComponent, 0x0220);
		}

		// class UWorldComposition : public UObject
		TEST_METHOD(Class__Engine__WorldComposition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, UnknownData_06T5, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TilesStreaming, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TilesStreamingTimeThreshold, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, bLoadAllTilesDuringCinematic, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, bRebaseOriginIn3DSpace, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, UnknownData_N4FH, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, RebaseOriginDistance, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldComposition, 0x0068);
		}

		// class UHierarchicalLODSetup : public UObject
		TEST_METHOD(Class__Engine__HierarchicalLODSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalLODSetup, HierarchicalLODSetup, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalLODSetup, OverrideBaseMaterial, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHierarchicalLODSetup, 0x0060);
		}

		// class UIpConnection : public UNetConnection
		TEST_METHOD(Class__OnlineSubsystemUtils__IpConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, UnknownData_7J94, 0x1AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, SocketErrorDisconnectDelay, 0x1B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, UnknownData_15P3, 0x1B44);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpConnection, 0x1B90);
		}

		// class UIpNetDriver : public UNetDriver
		TEST_METHOD(Class__OnlineSubsystemUtils__IpNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_0517, 0x0749);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, MaxPortCountToTry, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_1MNI, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ServerDesiredSocketReceiveBufferBytes, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ServerDesiredSocketSendBufferBytes, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ClientDesiredSocketReceiveBufferBytes, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ClientDesiredSocketSendBufferBytes, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_V20F, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, MaxSecondsInReceive, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, NbPacketsBetweenReceiveTimeTest, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ResolutionConnectionTimeout, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_1WPJ, 0x0780);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpNetDriver, 0x07B8);
		}

		// class UAchievementBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementBlueprintLibrary, 0x0028);
		}

		// class UAchievementQueryCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, UnknownData_MOOZ, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementQueryCallbackProxy, 0x0068);
		}

		// class UAchievementWriteCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementWriteCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, UnknownData_X6GQ, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementWriteCallbackProxy, 0x0080);
		}

		// class UConnectionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__ConnectionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, UnknownData_TP8J, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConnectionCallbackProxy, 0x0078);
		}

		// class UCreateSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__CreateSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, UnknownData_2J16, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreateSessionCallbackProxy, 0x0098);
		}

		// class UDestroySessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__DestroySessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, UnknownData_870Y, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestroySessionCallbackProxy, 0x0078);
		}

		// class UEndMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__EndMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, UnknownData_ZRZW, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndMatchCallbackProxy, 0x0080);
		}

		// class UEndTurnCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__EndTurnCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, UnknownData_6BPK, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndTurnCallbackProxy, 0x0078);
		}

		// class UFindSessionsCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__FindSessionsCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, UnknownData_3ZSN, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindSessionsCallbackProxy, 0x0090);
		}

		// class UFindTurnBasedMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__FindTurnBasedMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, UnknownData_Q01N, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindTurnBasedMatchCallbackProxy, 0x0088);
		}

		// class UInAppPurchaseCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, UnknownData_UCJ5, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseCallbackProxy, 0x0080);
		}

		// class UInAppPurchaseCallbackProxy2 : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseCallbackProxy2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy2, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy2, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy2, UnknownData_F6ZF, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseCallbackProxy2, 0x00A8);
		}

		// class UInAppPurchaseQueryCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, UnknownData_3RNR, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseQueryCallbackProxy, 0x0090);
		}

		// class UInAppPurchaseQueryCallbackProxy2 : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseQueryCallbackProxy2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy2, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy2, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy2, UnknownData_5TLO, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseQueryCallbackProxy2, 0x0068);
		}

		// class UInAppPurchaseRestoreCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseRestoreCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, UnknownData_Y0AU, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseRestoreCallbackProxy, 0x0090);
		}

		// class UInAppPurchaseRestoreCallbackProxy2 : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseRestoreCallbackProxy2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy2, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy2, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy2, UnknownData_SNL6, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseRestoreCallbackProxy2, 0x00A8);
		}

		// class UJoinSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__JoinSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, UnknownData_Y5T2, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJoinSessionCallbackProxy, 0x0180);
		}

		// class ULeaderboardBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardBlueprintLibrary, 0x0028);
		}

		// class ULeaderboardFlushCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardFlushCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, UnknownData_2U3P, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardFlushCallbackProxy, 0x0068);
		}

		// class ULeaderboardQueryCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, UnknownData_Y7PK, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardQueryCallbackProxy, 0x0098);
		}

		// class ULogoutCallbackProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__OnlineSubsystemUtils__LogoutCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, UnknownData_OEY0, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULogoutCallbackProxy, 0x0068);
		}

		// class AOnlineBeacon : public AActor
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeacon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, UnknownData_ZG06, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, BeaconConnectionInitialTimeout, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, BeaconConnectionTimeout, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, NetDriver, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, UnknownData_JXOJ, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeacon, 0x0250);
		}

		// class AOnlineBeaconClient : public AOnlineBeacon
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, BeaconOwner, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, BeaconConnection, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, ConnectionState, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, UnknownData_K5IH, 0x0261);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconClient, 0x02B0);
		}

		// class AOnlineBeaconHost : public AOnlineBeacon
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, ListenPort, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, UnknownData_YL9R, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, ClientActors, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, UnknownData_HO03, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconHost, 0x0308);
		}

		// class AOnlineBeaconHostObject : public AActor
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconHostObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, BeaconTypeName, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, ClientBeaconActorClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, ClientActors, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconHostObject, 0x0248);
		}

		// class UOnlineEngineInterfaceImpl : public UOnlineEngineInterface
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineEngineInterfaceImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineEngineInterfaceImpl, VoiceSubsystemNameOverride, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineEngineInterfaceImpl, UnknownData_HI2C, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineEngineInterfaceImpl, 0x0128);
		}

		// class UOnlinePIESettings : public UDeveloperSettings
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlinePIESettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, bOnlinePIEEnabled, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, UnknownData_5N7T, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, Logins, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlinePIESettings, 0x0050);
		}

		// class UOnlineSessionClient : public UOnlineSession
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineSessionClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, UnknownData_RMO2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, bIsFromInvite, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, bHandlingDisconnect, 0x01D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, UnknownData_7CLL, 0x01DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSessionClient, 0x01E0);
		}

		// class APartyBeaconClient : public AOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, UnknownData_O5TR, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, DestSessionId, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, PendingReservation, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, RequestType, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, bPendingReservationSent, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, bCancelReservation, 0x0342);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, UnknownData_NXB5, 0x0343);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APartyBeaconClient, 0x0370);
		}

		// class APartyBeaconHost : public AOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, State, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_0527, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, bLogoutOnSessionTimeout, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_RPKW, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, SessionTimeoutSecs, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, TravelSessionTimeoutSecs, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_AX32, 0x02BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APartyBeaconHost, 0x02C0);
		}

		// class UPartyBeaconState : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, SessionName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumConsumedReservations, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, MaxReservations, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumTeams, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumPlayersPerTeam, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, TeamAssignmentMethod, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, ReservedHostTeamNum, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, ForceTeamNum, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, bRestrictCrossConsole, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, bEnableRemovalRequests, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, UnknownData_10M7, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, Reservations, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, UnknownData_060J, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyBeaconState, 0x0078);
		}

		// class UQuitMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__QuitMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, UnknownData_WVUT, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuitMatchCallbackProxy, 0x0078);
		}

		// class UShowLoginUICallbackProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__OnlineSubsystemUtils__ShowLoginUICallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, UnknownData_JPOB, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShowLoginUICallbackProxy, 0x0060);
		}

		// class ASpectatorBeaconClient : public AOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__SpectatorBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, UnknownData_T479, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, DestSessionId, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, PendingReservation, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, RequestType, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, bPendingReservationSent, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, bCancelReservation, 0x036A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, UnknownData_N1JV, 0x036B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorBeaconClient, 0x0398);
		}

		// class ASpectatorBeaconHost : public AOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__SpectatorBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, State, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, UnknownData_RUO6, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, bLogoutOnSessionTimeout, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, UnknownData_KEML, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, SessionTimeoutSecs, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, TravelSessionTimeoutSecs, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, UnknownData_DKHY, 0x02BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorBeaconHost, 0x02C0);
		}

		// class USpectatorBeaconState : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__SpectatorBeaconState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, SessionName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, NumConsumedReservations, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, MaxReservations, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, bRestrictCrossConsole, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, UnknownData_TV1R, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, Reservations, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, UnknownData_71JE, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpectatorBeaconState, 0x0060);
		}

		// class ATestBeaconClient : public AOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__TestBeaconClient)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestBeaconClient, 0x02B0);
		}

		// class ATestBeaconHost : public AOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__TestBeaconHost)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestBeaconHost, 0x0248);
		}

		// class UTurnBasedBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__TurnBasedBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurnBasedBlueprintLibrary, 0x0028);
		}

		// class UVoipListenerSynthComponent : public USynthComponent
		TEST_METHOD(Class__OnlineSubsystemUtils__VoipListenerSynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoipListenerSynthComponent, UnknownData_KIXC, 0x06C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoipListenerSynthComponent, 0x0720);
		}

		// class UNiagaraDataInterface : public UNiagaraDataInterfaceBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterface, UnknownData_BIDG, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterface, 0x0038);
		}

		// class UMovieSceneNiagaraTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraTrack, Sections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraTrack, 0x0088);
		}

		// class UMovieSceneNiagaraParameterTrack : public UMovieSceneNiagaraTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraParameterTrack, Parameter, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraParameterTrack, 0x00A8);
		}

		// class UMovieSceneNiagaraBoolParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraBoolParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraBoolParameterTrack, UnknownData_Q0QG, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraBoolParameterTrack, 0x00B0);
		}

		// class UMovieSceneNiagaraColorParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraColorParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraColorParameterTrack, UnknownData_HZS7, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraColorParameterTrack, 0x00B0);
		}

		// class UMovieSceneNiagaraFloatParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraFloatParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraFloatParameterTrack, UnknownData_CQBW, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraFloatParameterTrack, 0x00B0);
		}

		// class UMovieSceneNiagaraIntegerParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraIntegerParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraIntegerParameterTrack, UnknownData_BFVJ, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraIntegerParameterTrack, 0x00B0);
		}

		// class UMovieSceneNiagaraSystemSpawnSection : public UMovieSceneSection
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraSystemSpawnSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, SectionStartBehavior, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_0FDJ, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, SectionEvaluateBehavior, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_22TL, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, SectionEndBehavior, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_PIJF, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, AgeUpdateMode, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_86QD, 0x00F5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraSystemSpawnSection, 0x00F8);
		}

		// class UMovieSceneNiagaraSystemTrack : public UMovieSceneNiagaraTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraSystemTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemTrack, UnknownData_XGDA, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraSystemTrack, 0x0090);
		}

		// class UMovieSceneNiagaraVectorParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraVectorParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraVectorParameterTrack, UnknownData_RZ2R, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraVectorParameterTrack, ChannelsUsed, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraVectorParameterTrack, UnknownData_R730, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraVectorParameterTrack, 0x00B8);
		}

		// class ANiagaraActor : public AActor
		TEST_METHOD(Class__Niagara__NiagaraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraActor, NiagaraComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraActor, UnknownData_JJPH, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANiagaraActor, 0x0230);
		}

		// class UNiagaraComponent : public UFXSystemComponent
		TEST_METHOD(Class__Niagara__NiagaraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, Asset, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, TickBehavior, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_U44A, 0x0449);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, OverrideParameters, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_MV24, 0x0519);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_92CG, 0x0545);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, MaxTimeBeforeForceUpdateTransform, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_2BXP, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, EmitterMaterials, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_UUAM, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, OnSystemFinished, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachParent, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachSocketName, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachLocationRule, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachRotationRule, 0x0589);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachScaleRule, 0x058A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_0AMU, 0x058B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraComponent, 0x05F0);
		}

		// class UNiagaraComponentPool : public UObject
		TEST_METHOD(Class__Niagara__NiagaraComponentPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentPool, WorldParticleSystemPools, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentPool, UnknownData_53XX, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraComponentPool, 0x0080);
		}

		// class UNiagaraRendererProperties : public UNiagaraMergeable
		TEST_METHOD(Class__Niagara__NiagaraRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, Platforms, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, SortOrderHint, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, bIsEnabled, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, bMotionBlurEnabled, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, UnknownData_1B6U, 0x005E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraRendererProperties, 0x0080);
		}

		// class UNiagaraComponentRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraComponentRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, ComponentType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, ComponentCountLimit, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, UnknownData_7CFP, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, EnabledBinding, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, bAssignComponentsOnParticleID, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, bOnlyCreateComponentsOnParticleSpawn, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, UnknownData_YDBN, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, TemplateComponent, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, PropertyBindings, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, UnknownData_TCSJ, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraComponentRendererProperties, 0x0160);
		}

		// class UNiagaraComponentSettings : public UObject
		TEST_METHOD(Class__Niagara__NiagaraComponentSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentSettings, SuppressActivationList, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentSettings, ForceAutoPooolingList, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentSettings, SuppressEmitterList, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraComponentSettings, 0x0118);
		}

		// class UNiagaraConvertInPlaceUtilityBase : public UObject
		TEST_METHOD(Class__Niagara__NiagaraConvertInPlaceUtilityBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraConvertInPlaceUtilityBase, 0x0028);
		}

		// class UNiagaraDataInterface2DArrayTexture : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterface2DArrayTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterface2DArrayTexture, Texture, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterface2DArrayTexture, 0x0040);
		}

		// class UNiagaraDataInterfaceArray : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArray, UnknownData_5E5G, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArray, MaxElements, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArray, UnknownData_ADXI, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArray, 0x0050);
		}

		// class UNiagaraDataInterfaceArrayFloat : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayFloat, FloatData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayFloat, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayFloat2 : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayFloat2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayFloat2, FloatData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayFloat2, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayFloat3 : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayFloat3)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayFloat3, FloatData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayFloat3, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayFloat4 : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayFloat4)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayFloat4, FloatData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayFloat4, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayColor : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayColor, ColorData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayColor, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayQuat : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayQuat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayQuat, QuatData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayQuat, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayFunctionLibrary, 0x0028);
		}

		// class UNiagaraDataInterfaceArrayInt32 : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayInt32)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayInt32, IntData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayInt32, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayBool : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayBool, BoolData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayBool, 0x0060);
		}

		// class UNiagaraDataInterfaceAudioSubmix : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSubmix, Submix, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioSubmix, 0x0040);
		}

		// class UNiagaraDataInterfaceAudioOscilloscope : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioOscilloscope)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioOscilloscope, Submix, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioOscilloscope, Resolution, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioOscilloscope, ScopeInMilliseconds, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioOscilloscope, 0x0048);
		}

		// class UNiagaraDataInterfaceAudioPlayer : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, SoundToPlay, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, Attenuation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, Concurrency, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, ParameterNames, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, bLimitPlaysPerTick, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, UnknownData_I1YA, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, MaxPlaysPerTick, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, bStopWhenComponentIsDestroyed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, UnknownData_TSYT, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioPlayer, 0x0070);
		}

		// class UNiagaraDataInterfaceAudioSpectrum : public UNiagaraDataInterfaceAudioSubmix
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioSpectrum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, Resolution, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, MinimumFrequency, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, MaximumFrequency, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, NoiseFloorDb, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioSpectrum, 0x0050);
		}

		// class UNiagaraDataInterfaceCamera : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCamera)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCamera, PlayerControllerIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCamera, bRequireCurrentFrameData, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCamera, UnknownData_YARU, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCamera, 0x0040);
		}

		// class UNiagaraDataInterfaceCollisionQuery : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCollisionQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCollisionQuery, UnknownData_5SCL, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCollisionQuery, 0x0048);
		}

		// class UNiagaraDataInterfaceCurveBase : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, ShaderLUT, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTMinTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTMaxTime, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTInvTimeRange, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTNumSamplesMinusOne, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, UnknownData_4KU8, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, ExposedName, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, UnknownData_RPU4, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, ExposedTexture, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCurveBase, 0x0070);
		}

		// class UNiagaraDataInterfaceColorCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceColorCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, RedCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, GreenCurve, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, BlueCurve, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, AlphaCurve, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceColorCurve, 0x0270);
		}

		// class UNiagaraDataInterfaceCurlNoise : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCurlNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurlNoise, Seed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurlNoise, UnknownData_8PJX, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCurlNoise, 0x0048);
		}

		// class UNiagaraDataInterfaceCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurve, Curve, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCurve, 0x00F0);
		}

		// class UNiagaraParticleCallbackHandler : public UInterface
		TEST_METHOD(Class__Niagara__NiagaraParticleCallbackHandler)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraParticleCallbackHandler, 0x0028);
		}

		// class UNiagaraDataInterfaceExport : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceExport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, CallbackHandlerParameter, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, GPUAllocationMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, UnknownData_AKBR, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, GPUAllocationFixedSize, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, GPUAllocationPerParticleSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, UnknownData_DRUF, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceExport, 0x0068);
		}

		// class UNiagaraDataInterfaceGBuffer : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGBuffer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGBuffer, 0x0038);
		}

		// class UNiagaraDataInterfaceRWBase : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceRWBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRWBase, OutputShaderStages, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRWBase, IterationShaderStages, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceRWBase, 0x00D8);
		}

		// class UNiagaraDataInterfaceGrid2D : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumCellsX, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumCellsY, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumCellsMaxAxis, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumAttributes, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, SetGridFromMaxAxis, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, UnknownData_OF6F, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, WorldBBoxSize, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, UnknownData_PSZT, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid2D, 0x00F8);
		}

		// class UNiagaraDataInterfaceGrid2DCollection : public UNiagaraDataInterfaceGrid2D
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid2DCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollection, RenderTargetUserParameter, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollection, OverrideBufferFormat, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollection, UnknownData_U8ON, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollection, ManagedRenderTargets, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid2DCollection, 0x01C0);
		}

		// class UNiagaraDataInterfaceGrid2DCollectionReader : public UNiagaraDataInterfaceGrid2D
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid2DCollectionReader)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollectionReader, EmitterName, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollectionReader, DIName, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollectionReader, UnknownData_CTLZ, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid2DCollectionReader, 0x0168);
		}

		// class UNiagaraDataInterfaceGrid3D : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid3D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, NumCells, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, CellSize, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, NumCellsMaxAxis, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, SetResolutionMethod, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, UnknownData_767Z, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, WorldBBoxSize, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, UnknownData_OOT9, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid3D, 0x0100);
		}

		// class UNiagaraDataInterfaceGrid3DCollection : public UNiagaraDataInterfaceGrid3D
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid3DCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3DCollection, NumAttributes, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3DCollection, UnknownData_0BJA, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3DCollection, RenderTargetUserParameter, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3DCollection, BufferFormat, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3DCollection, UnknownData_B5VR, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid3DCollection, 0x0180);
		}

		// class UNiagaraDataInterfaceLandscape : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceLandscape)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceLandscape, SourceLandscape, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceLandscape, 0x0040);
		}

		// class UNiagaraDataInterfaceNeighborGrid3D : public UNiagaraDataInterfaceGrid3D
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceNeighborGrid3D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceNeighborGrid3D, MaxNeighborsPerCell, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceNeighborGrid3D, UnknownData_9L8O, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceNeighborGrid3D, 0x0108);
		}

		// class UNiagaraDataInterfaceOcclusion : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceOcclusion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceOcclusion, 0x0038);
		}

		// class UNiagaraDataInterfaceParticleRead : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceParticleRead)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceParticleRead, EmitterName, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceParticleRead, 0x00E8);
		}

		// class UNiagaraDataInterfacePlatformSet : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfacePlatformSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfacePlatformSet, Platforms, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfacePlatformSet, 0x0068);
		}

		// class UNiagaraDataInterfaceRenderTarget2D : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceRenderTarget2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2D, Size, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2D, OverrideRenderTargetFormat, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2D, UnknownData_D27O, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2D, RenderTargetUserParameter, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2D, ManagedRenderTargets, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceRenderTarget2D, 0x0158);
		}

		// class UNiagaraDataInterfaceRenderTarget2DArray : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceRenderTarget2DArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2DArray, Size, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2DArray, OverrideRenderTargetFormat, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2DArray, UnknownData_9LUU, 0x00E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2DArray, RenderTargetUserParameter, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2DArray, ManagedRenderTargets, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceRenderTarget2DArray, 0x0158);
		}

		// class UNiagaraDataInterfaceRenderTargetVolume : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceRenderTargetVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTargetVolume, Size, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTargetVolume, OverrideRenderTargetFormat, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTargetVolume, UnknownData_Q9PF, 0x00E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTargetVolume, RenderTargetUserParameter, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTargetVolume, ManagedRenderTargets, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceRenderTargetVolume, 0x0158);
		}

		// class UNiagaraDataInterfaceSimpleCounter : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceSimpleCounter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceSimpleCounter, 0x0038);
		}

		// class UNiagaraDataInterfaceSkeletalMesh : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceSkeletalMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SourceMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_WVLE, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, Source, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, MeshUserParameter, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SourceComponent, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SkinningMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_F0CF, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SamplingRegions, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, WholeMeshLOD, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_UACN, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, FilteredBones, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, FilteredSockets, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, ExcludeBoneName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, bRequireCurrentFrameData, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_OAOW, 0x00BA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceSkeletalMesh, 0x00C0);
		}

		// class UNiagaraDataInterfaceSpline : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceSpline)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSpline, Source, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceSpline, 0x0040);
		}

		// class UNiagaraDataInterfaceStaticMesh : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceStaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, SourceMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, UnknownData_BDXG, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, DefaultMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, Source, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, SourceComponent, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, SectionFilter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, bUsePhysicsBodyVelocity, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, UnknownData_8MVV, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, FilteredSockets, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, UnknownData_RE9O, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceStaticMesh, 0x0088);
		}

		// class UNiagaraDataInterfaceTexture : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceTexture, Texture, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceTexture, 0x0040);
		}

		// class UNiagaraDataInterfaceVector2DCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVector2DCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector2DCurve, XCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector2DCurve, YCurve, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVector2DCurve, 0x0170);
		}

		// class UNiagaraDataInterfaceVector4Curve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVector4Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, XCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, YCurve, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, ZCurve, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, WCurve, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVector4Curve, 0x0270);
		}

		// class UNiagaraDataInterfaceVectorCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVectorCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorCurve, XCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorCurve, YCurve, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorCurve, ZCurve, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVectorCurve, 0x01F0);
		}

		// class UNiagaraDataInterfaceVectorField : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVectorField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, Field, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, bTileX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, bTileY, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, bTileZ, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, UnknownData_RYTB, 0x0043);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVectorField, 0x0048);
		}

		// class UNiagaraDataInterfaceVolumeTexture : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVolumeTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVolumeTexture, Texture, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVolumeTexture, 0x0040);
		}

		// class UNiagaraEditorDataBase : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEditorDataBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEditorDataBase, 0x0028);
		}

		// class UNiagaraSignificanceHandler : public UObject
		TEST_METHOD(Class__Niagara__NiagaraSignificanceHandler)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSignificanceHandler, 0x0028);
		}

		// class UNiagaraSignificanceHandlerDistance : public UNiagaraSignificanceHandler
		TEST_METHOD(Class__Niagara__NiagaraSignificanceHandlerDistance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSignificanceHandlerDistance, 0x0028);
		}

		// class UNiagaraSignificanceHandlerAge : public UNiagaraSignificanceHandler
		TEST_METHOD(Class__Niagara__NiagaraSignificanceHandlerAge)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSignificanceHandlerAge, 0x0028);
		}

		// class UNiagaraEffectType : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEffectType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UpdateFrequency, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UnknownData_LJGJ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, CullReaction, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UnknownData_90XB, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, SignificanceHandler, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, DetailLevelScalabilitySettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, SystemScalabilitySettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, EmitterScalabilitySettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UnknownData_1XY6, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEffectType, 0x0110);
		}

		// class UNiagaraEmitter : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, bLocalSpace, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, bDeterminism, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_QRBJ, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, RandomSeed, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, AllocationMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_6FKD, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, PreAllocationCount, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UpdateScriptProps, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SpawnScriptProps, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SimTarget, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_HUG5, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, FixedBounds, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MinDetailLevel, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MaxDetailLevel, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, GlobalSpawnCountScaleOverrides, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_XCPH, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, Platforms, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, ScalabilityOverrides, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_Y6PP, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MaxDeltaTimePerTick, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, DefaultShaderStageIndex, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MaxUpdateIterations, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SpawnStages, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_JR49, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UniqueEmitterName, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, RendererProperties, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, EventHandlerScriptProps, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SimulationStages, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, GPUComputeScript, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SharedEventGeneratorIds, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_MLQ5, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEmitter, 0x02A0);
		}

		// class UNiagaraEventReceiverEmitterAction : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEventReceiverEmitterAction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEventReceiverEmitterAction, 0x0028);
		}

		// class UNiagaraEventReceiverEmitterAction_SpawnParticles : public UNiagaraEventReceiverEmitterAction
		TEST_METHOD(Class__Niagara__NiagaraEventReceiverEmitterAction_SpawnParticles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEventReceiverEmitterAction_SpawnParticles, NumParticles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEventReceiverEmitterAction_SpawnParticles, UnknownData_LIL9, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEventReceiverEmitterAction_SpawnParticles, 0x0030);
		}

		// class UNiagaraFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Niagara__NiagaraFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraFunctionLibrary, 0x0028);
		}

		// class UNiagaraLightRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraLightRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, UnknownData_P3TW, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, RadiusScale, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, ColorAdd, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, UnknownData_85XG, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, LightRenderingEnabledBinding, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, LightExponentBinding, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, PositionBinding, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, ColorBinding, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, RadiusBinding, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, VolumetricScatteringBinding, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, UnknownData_LR6Z, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraLightRendererProperties, 0x02D8);
		}

		// class UNiagaraMeshRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraMeshRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, ParticleMesh, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, SortMode, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_6WO8, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_XC6V, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, OverrideMaterials, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, SubImageSize, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_YO28, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, FacingMode, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_IGX2, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_5FIA, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, LockedAxis, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, LockedAxisSpace, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_M0AP, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, PivotOffset, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, PivotOffsetSpace, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_7HAR, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_YJU3, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, MinCameraDistance, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, MaxCameraDistance, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, RendererVisibility, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_LVDU, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, PositionBinding, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, ColorBinding, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, VelocityBinding, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, MeshOrientationBinding, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, ScaleBinding, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, SubImageIndexBinding, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterialBinding, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterial1Binding, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterial2Binding, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterial3Binding, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, MaterialRandomBinding, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, CustomSortingBinding, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, NormalizedAgeBinding, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, CameraOffsetBinding, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, RendererVisibilityTagBinding, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_QIW7, 0x0610);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraMeshRendererProperties, 0x0678);
		}

		// class UNiagaraMessageDataBase : public UObject
		TEST_METHOD(Class__Niagara__NiagaraMessageDataBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraMessageDataBase, 0x0028);
		}

		// class UNiagaraParameterCollectionInstance : public UObject
		TEST_METHOD(Class__Niagara__NiagaraParameterCollectionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, Collection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, OverridenParameters, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, ParameterStorage, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, UnknownData_08AA, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraParameterCollectionInstance, 0x00C0);
		}

		// class UNiagaraParameterCollection : public UObject
		TEST_METHOD(Class__Niagara__NiagaraParameterCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, Namespace, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, Parameters, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, SourceMaterialCollection, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, DefaultInstance, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, CompileId, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraParameterCollection, 0x0060);
		}

		// class UNiagaraPrecompileContainer : public UObject
		TEST_METHOD(Class__Niagara__NiagaraPrecompileContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPrecompileContainer, Scripts, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPrecompileContainer, System, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPrecompileContainer, 0x0040);
		}

		// class ANiagaraPreviewBase : public AActor
		TEST_METHOD(Class__Niagara__NiagaraPreviewBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANiagaraPreviewBase, 0x0220);
		}

		// class UNiagaraPreviewAxis : public UObject
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis, 0x0028);
		}

		// class UNiagaraPreviewAxis_InterpParamBase : public UNiagaraPreviewAxis
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamBase, Param, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamBase, Count, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamBase, UnknownData_BUN1, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamBase, 0x0038);
		}

		// class UNiagaraPreviewAxis_InterpParamInt32 : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamInt32)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamInt32, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamInt32, Max, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamInt32, 0x0040);
		}

		// class UNiagaraPreviewAxis_InterpParamFloat : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamFloat, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamFloat, Max, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamFloat, 0x0040);
		}

		// class UNiagaraPreviewAxis_InterpParamVector2D : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector2D, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector2D, Max, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamVector2D, 0x0048);
		}

		// class UNiagaraPreviewAxis_InterpParamVector : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector, Max, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamVector, 0x0050);
		}

		// class UNiagaraPreviewAxis_InterpParamVector4 : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamVector4)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector4, UnknownData_H4LF, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector4, Min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector4, Max, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamVector4, 0x0060);
		}

		// class UNiagaraPreviewAxis_InterpParamLinearColor : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamLinearColor, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamLinearColor, Max, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamLinearColor, 0x0058);
		}

		// class ANiagaraPreviewGrid : public AActor
		TEST_METHOD(Class__Niagara__NiagaraPreviewGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, System, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, ResetMode, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, UnknownData_DCMX, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewAxisX, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewAxisY, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewClass, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, SpacingX, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, SpacingY, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, NumX, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, NumY, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewComponents, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, UnknownData_TKKN, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANiagaraPreviewGrid, 0x0270);
		}

		// class UNiagaraRibbonRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraRibbonRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, Material, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, MaterialUserParamBinding, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, FacingMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_4IJ4, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV0Settings, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV1Settings, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DrawDirection, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_7OTP, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, CurveTension, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, TessellationMode, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_I77R, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, TessellationFactor, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, bUseConstantFactor, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_GG6L, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, TessellationAngle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, bScreenSpaceTessellation, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_BUFD, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, PositionBinding, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, ColorBinding, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, VelocityBinding, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, NormalizedAgeBinding, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonTwistBinding, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonWidthBinding, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonFacingBinding, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonIdBinding, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonLinkOrderBinding, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, MaterialRandomBinding, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterialBinding, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterial1Binding, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterial2Binding, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterial3Binding, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, U0OverrideBinding, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, V0RangeOverrideBinding, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, U1OverrideBinding, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, V1RangeOverrideBinding, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_70YF, 0x0740);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraRibbonRendererProperties, 0x07D8);
		}

		// class UNiagaraScript : public UNiagaraScriptBase
		TEST_METHOD(Class__Niagara__NiagaraScript)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, Usage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UnknownData_UEMJ, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UsageIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UsageId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, RapidIterationParameters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, ScriptExecutionParamStore, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, ScriptExecutionBoundParameters, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedScriptVMId, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UnknownData_1U3J, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedScriptVM, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedParameterCollectionReferences, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedDefaultDataInterfaces, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UnknownData_RK6R, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraScript, 0x02C0);
		}

		// class UNiagaraScriptSourceBase : public UObject
		TEST_METHOD(Class__Niagara__NiagaraScriptSourceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScriptSourceBase, UnknownData_VDG8, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraScriptSourceBase, 0x0048);
		}

		// class UNiagaraSettings : public UDeveloperSettings
		TEST_METHOD(Class__Niagara__NiagaraSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, DefaultEffectType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, QualityLevels, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, ComponentRendererWarningsPerClass, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, DefaultRenderTargetFormat, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, DefaultGridFormat, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, UnknownData_DZYZ, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, DefaultEffectTypePtr, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSettings, 0x00C0);
		}

		// class UNiagaraSimulationStageBase : public UNiagaraMergeable
		TEST_METHOD(Class__Niagara__NiagaraSimulationStageBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageBase, Script, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageBase, SimulationStageName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageBase, UnknownData_IKUX, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSimulationStageBase, 0x0040);
		}

		// class UNiagaraSimulationStageGeneric : public UNiagaraSimulationStageBase
		TEST_METHOD(Class__Niagara__NiagaraSimulationStageGeneric)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, IterationSource, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, UnknownData_WK3K, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, Iterations, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, UnknownData_JRIA, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, DataInterface, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSimulationStageGeneric, 0x0070);
		}

		// class UNiagaraSpriteRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraSpriteRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, Material, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SourceMode, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_2OCD, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaterialUserParamBinding, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, Alignment, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, FacingMode, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_WZ2C, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, PivotInUVSpace, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SortMode, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_E0BR, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SubImageSize, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_9GXH, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MinFacingCameraBlendDistance, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaxFacingCameraBlendDistance, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_QWHD, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MinCameraDistance, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaxCameraDistance, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, RendererVisibility, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_5FH5, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, PositionBinding, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, ColorBinding, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, VelocityBinding, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteRotationBinding, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteSizeBinding, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteFacingBinding, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteAlignmentBinding, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SubImageIndexBinding, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterialBinding, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterial1Binding, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterial2Binding, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterial3Binding, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, CameraOffsetBinding, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UVScaleBinding, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaterialRandomBinding, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, CustomSortingBinding, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, NormalizedAgeBinding, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, RendererVisibilityTagBinding, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaterialParameterBindings, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_A3LG, 0x0728);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSpriteRendererProperties, 0x07A0);
		}

		// class UNiagaraSystem : public UFXSystemAsset
		TEST_METHOD(Class__Niagara__NiagaraSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bDumpDebugSystemInfo, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bDumpDebugEmitterInfo, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bRequireCurrentFrameData, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_4GYJ, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_TJ5I, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, EffectType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bOverrideScalabilitySettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_IZXU, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, ScalabilityOverrides, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemScalabilityOverrides, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, EmitterHandles, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, ParameterCollectionOverrides, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemSpawnScript, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemUpdateScript, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_ZG6A, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemCompiledData, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, ExposedParameters, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, FixedBounds, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bAutoDeactivate, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_GH4H, 0x03A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, WarmupTime, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, WarmupTickCount, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, WarmupTickDelta, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bHasSystemScriptDIsWithPerInstanceData, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_RQNL, 0x03B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UserDINamesReadInSystemScripts, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_0XPW, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSystem, 0x0480);
		}

		// class AAROriginActor : public AActor
		TEST_METHOD(Class__AugmentedReality__AROriginActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAROriginActor, 0x0220);
		}

		// class UARSessionConfig : public UDataAsset
		TEST_METHOD(Class__AugmentedReality__ARSessionConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bGenerateMeshDataFromTrackedGeometry, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bGenerateCollisionForMeshData, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bGenerateNavMeshForMeshData, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseMeshDataForOcclusion, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bRenderMeshDataInWireframe, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bTrackSceneObjects, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUsePersonSegmentationForOcclusion, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseSceneDepthForOcclusion, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseAutomaticImageScaleEstimation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseStandardOnboardingUX, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, WorldAlignment, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, SessionType, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, PlaneDetectionMode, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bHorizontalPlaneDetection, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bVerticalPlaneDetection, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bEnableAutoFocus, 0x003F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, LightEstimationMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FrameSyncMode, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bEnableAutomaticCameraOverlay, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bEnableAutomaticCameraTracking, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bResetCameraTracking, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bResetTrackedObjects, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_LP90, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, CandidateImages, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, MaxNumSimultaneousImagesTracked, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, EnvironmentCaptureProbeType, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_9XNY, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, WorldMapData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, CandidateObjects, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, DesiredVideoFormat, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseOptimalVideoFormat, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FaceTrackingDirection, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FaceTrackingUpdate, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_IHY3, 0x008F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, MaxNumberOfTrackedFaces, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_8DZO, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, SerializedARCandidateImageDatabase, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, EnabledSessionTrackingFeature, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, SceneReconstructionMethod, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_3MT5, 0x00AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, PlaneComponentClass, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, PointComponentClass, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FaceComponentClass, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, ImageComponentClass, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, QRCodeComponentClass, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, PoseComponentClass, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, EnvironmentProbeComponentClass, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, ObjectComponentClass, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, MeshComponentClass, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, GeoAnchorComponentClass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, DefaultMeshMaterial, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, DefaultWireframeMeshMaterial, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARSessionConfig, 0x0110);
		}

		// class UARLightEstimate : public UObject
		TEST_METHOD(Class__AugmentedReality__ARLightEstimate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARLightEstimate, 0x0028);
		}

		// class UARBasicLightEstimate : public UARLightEstimate
		TEST_METHOD(Class__AugmentedReality__ARBasicLightEstimate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBasicLightEstimate, AmbientIntensityLumens, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBasicLightEstimate, AmbientColorTemperatureKelvin, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBasicLightEstimate, AmbientColor, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBasicLightEstimate, 0x0040);
		}

		// class UARCandidateImage : public UDataAsset
		TEST_METHOD(Class__AugmentedReality__ARCandidateImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, CandidateTexture, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, FriendlyName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, Width, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, Height, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, Orientation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, UnknownData_897P, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARCandidateImage, 0x0058);
		}

		// class AARActor : public AActor
		TEST_METHOD(Class__AugmentedReality__ARActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARActor, 0x0220);
		}

		// class UARBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AugmentedReality__ARBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBlueprintLibrary, 0x0028);
		}

		// class UARTraceResultLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AugmentedReality__ARTraceResultLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTraceResultLibrary, 0x0028);
		}

		// class UARBaseAsyncTaskBlueprintProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__AugmentedReality__ARBaseAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBaseAsyncTaskBlueprintProxy, UnknownData_HW7G, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBaseAsyncTaskBlueprintProxy, 0x0050);
		}

		// class UARSaveWorldAsyncTaskBlueprintProxy : public UARBaseAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__ARSaveWorldAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSaveWorldAsyncTaskBlueprintProxy, OnSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSaveWorldAsyncTaskBlueprintProxy, OnFailed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSaveWorldAsyncTaskBlueprintProxy, UnknownData_AQVD, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARSaveWorldAsyncTaskBlueprintProxy, 0x0080);
		}

		// class UARGetCandidateObjectAsyncTaskBlueprintProxy : public UARBaseAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__ARGetCandidateObjectAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, OnSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, OnFailed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, UnknownData_B7IF, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, 0x0098);
		}

		// class UARComponent : public USceneComponent
		TEST_METHOD(Class__AugmentedReality__ARComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, NativeID, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, UnknownData_4IHH, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, bUseDefaultReplication, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, UnknownData_K3YS, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, DefaultMeshMaterial, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, DefaultWireframeMeshMaterial, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, MRMeshComponent, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, MyTrackedGeometry, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, UnknownData_SHXB, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARComponent, 0x0280);
		}

		// class UARPlaneComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARPlaneComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPlaneComponent, 0x0300);
		}

		// class UARPointComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARPointComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPointComponent, 0x0280);
		}

		// class UARFaceComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARFaceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceComponent, ReplicatedPayload, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceComponent, UnknownData_57Z1, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARFaceComponent, 0x02E0);
		}

		// class UARImageComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARImageComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARImageComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARImageComponent, 0x02E0);
		}

		// class UARQRCodeComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARQRCodeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARQRCodeComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARQRCodeComponent, 0x02F0);
		}

		// class UARPoseComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARPoseComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPoseComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPoseComponent, 0x02C0);
		}

		// class UAREnvironmentProbeComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__AREnvironmentProbeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentProbeComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAREnvironmentProbeComponent, 0x02B0);
		}

		// class UARObjectComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARObjectComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARObjectComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARObjectComponent, 0x02B0);
		}

		// class UARMeshComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARMeshComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARMeshComponent, 0x02E0);
		}

		// class UARGeoAnchorComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARGeoAnchorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGeoAnchorComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARGeoAnchorComponent, 0x02F0);
		}

		// class UARDependencyHandler : public UObject
		TEST_METHOD(Class__AugmentedReality__ARDependencyHandler)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARDependencyHandler, 0x0028);
		}

		// class UARGeoTrackingSupport : public UObject
		TEST_METHOD(Class__AugmentedReality__ARGeoTrackingSupport)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARGeoTrackingSupport, 0x0028);
		}

		// class UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy : public UARBaseAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy, OnSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy, OnFailed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy, UnknownData_R2IM, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy, 0x00A0);
		}

		// class UGetGeoLocationAsyncTaskBlueprintProxy : public UARBaseAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__GetGeoLocationAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetGeoLocationAsyncTaskBlueprintProxy, OnSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetGeoLocationAsyncTaskBlueprintProxy, OnFailed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetGeoLocationAsyncTaskBlueprintProxy, UnknownData_Q1DS, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetGeoLocationAsyncTaskBlueprintProxy, 0x00A0);
		}

		// class UARLifeCycleComponent : public USceneComponent
		TEST_METHOD(Class__AugmentedReality__ARLifeCycleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARLifeCycleComponent, OnARActorSpawnedDelegate, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARLifeCycleComponent, OnARActorToBeDestroyedDelegate, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARLifeCycleComponent, UnknownData_AUPB, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARLifeCycleComponent, 0x0230);
		}

		// class UARPin : public UObject
		TEST_METHOD(Class__AugmentedReality__ARPin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, TrackedGeometry, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, PinnedComponent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, UnknownData_BMTN, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, LocalToTrackingTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, LocalToAlignedTrackingTransform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, TrackingState, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, UnknownData_7PY2, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, OnARTrackingStateChanged, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, OnARTransformUpdated, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, UnknownData_2UCZ, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPin, 0x00F0);
		}

		// class AARSharedWorldGameMode : public AGameMode
		TEST_METHOD(Class__AugmentedReality__ARSharedWorldGameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameMode, BufferSizePerChunk, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameMode, UnknownData_LJWA, 0x030C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSharedWorldGameMode, 0x0370);
		}

		// class AARSharedWorldGameState : public AGameState
		TEST_METHOD(Class__AugmentedReality__ARSharedWorldGameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, PreviewImageData, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, ARWorldData, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, PreviewImageBytesTotal, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, ARWorldBytesTotal, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, PreviewImageBytesDelivered, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, ARWorldBytesDelivered, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, UnknownData_58J6, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSharedWorldGameState, 0x02C8);
		}

		// class AARSharedWorldPlayerController : public APlayerController
		TEST_METHOD(Class__AugmentedReality__ARSharedWorldPlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldPlayerController, UnknownData_SPZR, 0x0570);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSharedWorldPlayerController, 0x0578);
		}

		// class AARSkyLight : public ASkyLight
		TEST_METHOD(Class__AugmentedReality__ARSkyLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSkyLight, CaptureProbe, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSkyLight, UnknownData_VMC0, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSkyLight, 0x0240);
		}

		// class UARTexture : public UTexture
		TEST_METHOD(Class__AugmentedReality__ARTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, TextureType, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, UnknownData_EEAQ, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, Timestamp, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, ExternalTextureGuid, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, Size, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTexture, 0x00F8);
		}

		// class UARTextureCameraImage : public UARTexture
		TEST_METHOD(Class__AugmentedReality__ARTextureCameraImage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTextureCameraImage, 0x00F8);
		}

		// class UARTextureCameraDepth : public UARTexture
		TEST_METHOD(Class__AugmentedReality__ARTextureCameraDepth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, DepthQuality, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, DepthAccuracy, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, bIsTemporallySmoothed, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, UnknownData_ZYHO, 0x00FB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTextureCameraDepth, 0x0100);
		}

		// class UAREnvironmentCaptureProbeTexture : public UTextureCube
		TEST_METHOD(Class__AugmentedReality__AREnvironmentCaptureProbeTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, TextureType, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, UnknownData_RYLQ, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, Timestamp, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, ExternalTextureGuid, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, Size, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAREnvironmentCaptureProbeTexture, 0x0150);
		}

		// class UARTraceResultDummy : public UObject
		TEST_METHOD(Class__AugmentedReality__ARTraceResultDummy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTraceResultDummy, 0x0028);
		}

		// class UARTrackedGeometry : public UObject
		TEST_METHOD(Class__AugmentedReality__ARTrackedGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UniqueId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_I797, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, LocalToTrackingTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, LocalToAlignedTrackingTransform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, TrackingState, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_ZSAG, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnderlyingMesh, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, ObjectClassification, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_FCXB, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, LastUpdateFrameNumber, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_LSTW, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, DebugName, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_6U6O, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedGeometry, 0x00F8);
		}

		// class UARPlaneGeometry : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARPlaneGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, UnknownData_JH0M, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, Center, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, Extent, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, UnknownData_M8XX, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, BoundaryPolygon, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, SubsumedBy, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPlaneGeometry, 0x0130);
		}

		// class UARTrackedPoint : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedPoint, UnknownData_4BK2, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedPoint, 0x0100);
		}

		// class UARTrackedImage : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedImage, DetectedImage, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedImage, EstimatedSize, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedImage, 0x0108);
		}

		// class UARTrackedQRCode : public UARTrackedImage
		TEST_METHOD(Class__AugmentedReality__ARTrackedQRCode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedQRCode, QRCode, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedQRCode, Version, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedQRCode, UnknownData_BHTG, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedQRCode, 0x0120);
		}

		// class UARFaceGeometry : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARFaceGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, LookAtTarget, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, bIsTracked, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, UnknownData_X2XV, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, BlendShapes, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, UnknownData_Q21C, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, LeftEyeTransform, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, RightEyeTransform, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARFaceGeometry, 0x01F0);
		}

		// class UAREnvironmentCaptureProbe : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__AREnvironmentCaptureProbe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbe, Extent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbe, UnknownData_M5VC, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbe, EnvironmentCaptureTexture, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAREnvironmentCaptureProbe, 0x0110);
		}

		// class UARTrackedObject : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedObject, DetectedObject, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedObject, 0x0100);
		}

		// class UARTrackedPose : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedPose, TrackedPose, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedPose, UnknownData_R8EG, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedPose, 0x0150);
		}

		// class UARMeshGeometry : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARMeshGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARMeshGeometry, UnknownData_31HL, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARMeshGeometry, 0x0100);
		}

		// class UARGeoAnchor : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARGeoAnchor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGeoAnchor, UnknownData_D9N4, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGeoAnchor, UnknownData_FU1P, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARGeoAnchor, 0x0110);
		}

		// class UARTrackableNotifyComponent : public UActorComponent
		TEST_METHOD(Class__AugmentedReality__ARTrackableNotifyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedGeometry, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedGeometry, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedGeometry, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedPlane, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedPlane, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedPlane, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedPoint, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedPoint, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedPoint, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedImage, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedImage, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedImage, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedFace, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedFace, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedFace, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedEnvProbe, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedEnvProbe, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedEnvProbe, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedObject, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedObject, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedObject, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackableNotifyComponent, 0x0200);
		}

		// class UARTypesDummyClass : public UObject
		TEST_METHOD(Class__AugmentedReality__ARTypesDummyClass)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTypesDummyClass, 0x0028);
		}

		// class UARCandidateObject : public UDataAsset
		TEST_METHOD(Class__AugmentedReality__ARCandidateObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, CandidateObjectData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, FriendlyName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, BoundingBox, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, UnknownData_6ZEK, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARCandidateObject, 0x0070);
		}

		// class UMagicLeapPlanesComponent : public USceneComponent
		TEST_METHOD(Class__MagicLeapPlanes__MagicLeapPlanesComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, QueryFlags, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, SearchVolume, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, MaxResults, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, MinHolePerimeter, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, MinPlaneArea, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, QueryType, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, UnknownData_77Z8, 0x021D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, SimilarityThreshold, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, UnknownData_IH86, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, OnPlanesQueryResult, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, OnPersistentPlanesQueryResult, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, UnknownData_FFVN, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapPlanesComponent, 0x0260);
		}

		// class UMagicLeapPlanesFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapPlanes__MagicLeapPlanesFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapPlanesFunctionLibrary, 0x0028);
		}

		// class UMagicLeapPrivilegesFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapPrivileges__MagicLeapPrivilegesFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapPrivilegesFunctionLibrary, 0x0028);
		}

		// class UImgMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__ImgMedia__ImgMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, FrameRateOverride, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, ProxyOverride, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, SequencePath, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImgMediaSource, 0x00B0);
		}

		// class UPlayerComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__PlayerComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerComponent, 0x00B0);
		}

		// class UAchievementManager : public UPlayerComponent
		TEST_METHOD(Class__Frontiers__AchievementManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementManager, UnknownData_BX5Y, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementManager, 0x0110);
		}

		// class UActiveTrait : public UActorComponent
		TEST_METHOD(Class__Frontiers__ActiveTrait)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTrait, UnknownData_7LKW, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTrait, OnRepValue, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTrait, OnRepMaxValue, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTrait, OnHitMin, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTrait, OnHitMax, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTrait, OnRateChanged, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTrait, UnknownData_P0W1, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTrait, ActiveTraitValue, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTrait, MaxValue, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTrait, ActiveTraitRowName, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTrait, LockedRefCount, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTrait, IncreaseLockedRefCount, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTrait, DecreaseLockedRefCount, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTrait, UnknownData_7JIC, 0x0134);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActiveTrait, 0x01B8);
		}

		// class UActiveTraitNoReplicate : public UActiveTrait
		TEST_METHOD(Class__Frontiers__ActiveTraitNoReplicate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActiveTraitNoReplicate, 0x01B8);
		}

		// class UActiveTraitReplicateCheap : public UActiveTrait
		TEST_METHOD(Class__Frontiers__ActiveTraitReplicateCheap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTraitReplicateCheap, ValueFraction, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTraitReplicateCheap, UnknownData_L9JN, 0x01B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActiveTraitReplicateCheap, 0x01C0);
		}

		// class UActiveTraitMonitorComponent : public UPlayerComponent
		TEST_METHOD(Class__Frontiers__ActiveTraitMonitorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTraitMonitorComponent, Actions, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTraitMonitorComponent, bOnlyLocalPlayerOnClient, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTraitMonitorComponent, UnknownData_SAM7, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTraitMonitorComponent, TriggerCooldown, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTraitMonitorComponent, AllowedTickType, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTraitMonitorComponent, UnknownData_PZ4M, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActiveTraitMonitorComponent, 0x00D0);
		}

		// class UActorChainInterface : public UInterface
		TEST_METHOD(Class__Frontiers__ActorChainInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorChainInterface, 0x0028);
		}

		// class UActorFunctionLibraryShared : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Frontiers__ActorFunctionLibraryShared)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorFunctionLibraryShared, 0x0028);
		}

		// class UActorFunctionLibrary : public UActorFunctionLibraryShared
		TEST_METHOD(Class__Frontiers__ActorFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorFunctionLibrary, 0x0028);
		}

		// class UActorLimiter : public UActorComponent
		TEST_METHOD(Class__Frontiers__ActorLimiter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorLimiter, UnknownData_VXR2, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorLimiter, PrePickedClasses, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorLimiter, UnknownData_SMCA, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorLimiter, 0x0150);
		}

		// class UActorMortalityComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__ActorMortalityComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorMortalityComponent, PreDeathDelegate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorMortalityComponent, OnDeathDelegate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorMortalityComponent, PostDeathDelegate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorMortalityComponent, ClientDestroyDeadDelegate, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorMortalityComponent, OnReviveDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorMortalityComponent, AllyReviveStatusEffects, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorMortalityComponent, UnknownData_NDUC, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorMortalityComponent, DeathInfo, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorMortalityComponent, DeadCollisionChannel, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorMortalityComponent, UnknownData_6O3W, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorMortalityComponent, DeadCollisionProfileName, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorMortalityComponent, UnknownData_66JF, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorMortalityComponent, OnReviveStatusEffect, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorMortalityComponent, ReviveStatusDuration, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorMortalityComponent, UnknownData_2N49, 0x0184);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorMortalityComponent, 0x0188);
		}

		// class AActorProxy : public AActor
		TEST_METHOD(Class__Frontiers__ActorProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AActorProxy, UnknownData_MTQ4, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActorProxy, GameplayTags, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AActorProxy, 0x0248);
		}

		// class AActorProxyNode : public AActor
		TEST_METHOD(Class__Frontiers__ActorProxyNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AActorProxyNode, SpawnedActors, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActorProxyNode, bSpawnWithRandomRotation, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActorProxyNode, UnknownData_DQ45, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActorProxyNode, MaxYawRotation, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActorProxyNode, ActorProxies, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActorProxyNode, MonsterSpawners, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActorProxyNode, Gadgets, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActorProxyNode, Breakables, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActorProxyNode, Hazards, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActorProxyNode, ActorLimitGameplayTags, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActorProxyNode, UnknownData_5QA5, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AActorProxyNode, 0x02A0);
		}

		// class USpawnEntryBase : public UObject
		TEST_METHOD(Class__Frontiers__SpawnEntryBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnEntryBase, UnknownData_4KPN, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnEntryBase, 0x0030);
		}

		// class USpawnDataEntryGotoSpawnRowBase : public USpawnEntryBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryGotoSpawnRowBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnDataEntryGotoSpawnRowBase, UnknownData_427K, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryGotoSpawnRowBase, 0x0038);
		}

		// class USpawnDataEntryGotoAffixSpawnRow : public USpawnDataEntryGotoSpawnRowBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryGotoAffixSpawnRow)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryGotoAffixSpawnRow, 0x0038);
		}

		// class USpawnDataEntryAddAffixByName : public USpawnEntryBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryAddAffixByName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnDataEntryAddAffixByName, UnknownData_COG4, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryAddAffixByName, 0x0038);
		}

		// class USpawnDataEntryGameplayTags : public USpawnEntryBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryGameplayTags)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnDataEntryGameplayTags, UnknownData_JKY8, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryGameplayTags, 0x0050);
		}

		// class USpawnDataEntryAddAffixByFilter : public USpawnDataEntryGameplayTags
		TEST_METHOD(Class__Frontiers__SpawnDataEntryAddAffixByFilter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryAddAffixByFilter, 0x0050);
		}

		// class UAllowedTypeFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Frontiers__AllowedTypeFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAllowedTypeFunctionLibrary, 0x0028);
		}

		// class ASkillShape : public AActor
		TEST_METHOD(Class__Frontiers__SkillShape)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape, UnknownData_3UMM, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape, OverlappedActors, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape, SkillDelegate, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape, bDestroySelfOnOverlap, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape, bAllowDeadActorNotifyOnEndOverlap, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape, bSortTargetsByDistanceToOwner, 0x0262);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape, bCheckLineOfSight, 0x0263);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape, UnknownData_LE82, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape, StatusEffects, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape, UnknownData_GLVU, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkillShape, 0x0288);
		}

		// class AAllyReviveShape : public ASkillShape
		TEST_METHOD(Class__Frontiers__AllyReviveShape)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAllyReviveShape, ReviveExpireTimerDecal, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAllyReviveShape, RevivingTimerDecal, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAllyReviveShape, ReviveExpireStatusEffectClass, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAllyReviveShape, RevivingStatusEffectClass, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAllyReviveShape, CanBeRevivedStatusEffectClass, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAllyReviveShape, ReviveDuration, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAllyReviveShape, ReviveExpireDuration, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAllyReviveShape, _, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAllyReviveShape, CurrentReviveExpireDuration, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAllyReviveShape, UnknownData_G5KX, 0x02C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAllyReviveShape, 0x02E0);
		}

		// class AAnimatedMesh : public AActor
		TEST_METHOD(Class__Frontiers__AnimatedMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimatedMesh, FXMesh, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAnimatedMesh, 0x0228);
		}

		// class UAnimNotify_AttachActor : public UAnimNotifyState
		TEST_METHOD(Class__Frontiers__AnimNotify_AttachActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AttachActor, ActorClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AttachActor, Allowed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AttachActor, UnknownData_1P0N, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AttachActor, AttachmentBone, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AttachActor, Offset, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AttachActor, Rotation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AttachActor, UnknownData_TS77, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_AttachActor, 0x0060);
		}

		// class UAnimNotify_HideAttachedActors : public UAnimNotifyState
		TEST_METHOD(Class__Frontiers__AnimNotify_HideAttachedActors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_HideAttachedActors, Allowed, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_HideAttachedActors, UnknownData_HHC5, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_HideAttachedActors, 0x0038);
		}

		// class USkillAnimNotify : public UAnimNotify
		TEST_METHOD(Class__Frontiers__SkillAnimNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillAnimNotify, UnknownData_LYD0, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillAnimNotify, Conditions, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillAnimNotify, bPlayInEditorPreview, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillAnimNotify, UnknownData_O5QR, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillAnimNotify, 0x0058);
		}

		// class USkillAnimNotify_Cosmetic : public USkillAnimNotify
		TEST_METHOD(Class__Frontiers__SkillAnimNotify_Cosmetic)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillAnimNotify_Cosmetic, 0x0058);
		}

		// class UAnimNotify_CameraShake : public USkillAnimNotify_Cosmetic
		TEST_METHOD(Class__Frontiers__AnimNotify_CameraShake)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_CameraShake, ShakeData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_CameraShake, 0x0078);
		}

		// class UAnimNotify_DeactivateParticles : public UAnimNotify
		TEST_METHOD(Class__Frontiers__AnimNotify_DeactivateParticles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_DeactivateParticles, bDetachParticles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_DeactivateParticles, UnknownData_SRNR, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_DeactivateParticles, 0x0040);
		}

		// class UAnimNotify_DebugDraw : public USkillAnimNotify_Cosmetic
		TEST_METHOD(Class__Frontiers__AnimNotify_DebugDraw)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_DebugDraw, Radius, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_DebugDraw, Duration, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_DebugDraw, bAtSource, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_DebugDraw, UnknownData_0CWU, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_DebugDraw, 0x0068);
		}

		// class UAnimNotify_DisableOcclusion : public USkillAnimNotify
		TEST_METHOD(Class__Frontiers__AnimNotify_DisableOcclusion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_DisableOcclusion, 0x0058);
		}

		// class UAnimNotify_DropLoot : public UAnimNotify
		TEST_METHOD(Class__Frontiers__AnimNotify_DropLoot)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_DropLoot, 0x0038);
		}

		// class UAnimNotify_EndSlot : public UAnimNotify
		TEST_METHOD(Class__Frontiers__AnimNotify_EndSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_EndSlot, SlotName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_EndSlot, BlendTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_EndSlot, UnknownData_1C1L, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_EndSlot, 0x0048);
		}

		// class UAnimNotify_Harvest : public USkillAnimNotify
		TEST_METHOD(Class__Frontiers__AnimNotify_Harvest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_Harvest, HarvestPoints, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_Harvest, UnknownData_F89W, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_Harvest, 0x0060);
		}

		// class UAnimNotify_Pause : public UAnimNotify
		TEST_METHOD(Class__Frontiers__AnimNotify_Pause)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_Pause, 0x0038);
		}

		// class UAnimNotify_PlayAnimationOnChildMesh : public UAnimNotify
		TEST_METHOD(Class__Frontiers__AnimNotify_PlayAnimationOnChildMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayAnimationOnChildMesh, AnimInstanceTag, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayAnimationOnChildMesh, AnimToPlayTag, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayAnimationOnChildMesh, BasePlayRate, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayAnimationOnChildMesh, UnknownData_XFA3, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayAnimationOnChildMesh, 0x0050);
		}

		// class UAnimNotify_Selectable : public UAnimNotify
		TEST_METHOD(Class__Frontiers__AnimNotify_Selectable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_Selectable, bSelectable, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_Selectable, UnknownData_HAF1, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_Selectable, 0x0040);
		}

		// class UAnimNotify_SetMeshVisibility : public UAnimNotify
		TEST_METHOD(Class__Frontiers__AnimNotify_SetMeshVisibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_SetMeshVisibility, bVisible, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_SetMeshVisibility, UnknownData_I1MK, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_SetMeshVisibility, 0x0040);
		}

		// class UAnimNotify_SetScalarMaterialParamter : public USkillAnimNotify
		TEST_METHOD(Class__Frontiers__AnimNotify_SetScalarMaterialParamter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_SetScalarMaterialParamter, MaterialParameter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_SetScalarMaterialParamter, ScalarValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_SetScalarMaterialParamter, UnknownData_G8ZK, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_SetScalarMaterialParamter, 0x0070);
		}

		// class UAnimNotify_SpawnAnimatedMesh : public USkillAnimNotify_Cosmetic
		TEST_METHOD(Class__Frontiers__AnimNotify_SpawnAnimatedMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_SpawnAnimatedMesh, bWorldSpace, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_SpawnAnimatedMesh, bUseCharacterAnimPlayRate, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_SpawnAnimatedMesh, UnknownData_JVDP, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_SpawnAnimatedMesh, MeshToSpawn, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_SpawnAnimatedMesh, Material, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_SpawnAnimatedMesh, AnimationToPlay, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_SpawnAnimatedMesh, SocketName, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_SpawnAnimatedMesh, 0x0080);
		}

		// class UAnimNotify_TLEffect : public USkillAnimNotify_Cosmetic
		TEST_METHOD(Class__Frontiers__AnimNotify_TLEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_TLEffect, bStopSoundWhenSkillStops, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_TLEffect, bPlayAtTarget, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_TLEffect, bRequireSkillToExecute, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_TLEffect, UnknownData_BDSN, 0x005B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_TLEffect, Effects, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_TLEffect, 0x0130);
		}

		// class UAnimNotifyState_DisableOcclusion : public UAnimNotifyState
		TEST_METHOD(Class__Frontiers__AnimNotifyState_DisableOcclusion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_DisableOcclusion, 0x0030);
		}

		// class UAnimNotifyState_HideAttachments : public UAnimNotifyState
		TEST_METHOD(Class__Frontiers__AnimNotifyState_HideAttachments)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_HideAttachments, bAllSlots, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_HideAttachments, AttachmentSlot, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_HideAttachments, UnknownData_UY5T, 0x0032);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_HideAttachments, 0x0038);
		}

		// class UAnimNotifyState_LockTarget : public UAnimNotifyState
		TEST_METHOD(Class__Frontiers__AnimNotifyState_LockTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_LockTarget, 0x0030);
		}

		// class UAnimNotifyState_NoRootMotion : public UAnimNotifyState
		TEST_METHOD(Class__Frontiers__AnimNotifyState_NoRootMotion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_NoRootMotion, 0x0030);
		}

		// class UAnimNotifyState_PlayFMODEvent : public UAnimNotifyState
		TEST_METHOD(Class__Frontiers__AnimNotifyState_PlayFMODEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_PlayFMODEvent, Context, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_PlayFMODEvent, 0x0068);
		}

		// class UAnimNotifyFMODEventContext : public UActorComponent
		TEST_METHOD(Class__Frontiers__AnimNotifyFMODEventContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyFMODEventContext, Context, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyFMODEventContext, AttachedComponent, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyFMODEventContext, UnattachedEventInstance, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyFMODEventContext, UnknownData_4N56, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyFMODEventContext, 0x00F8);
		}

		// class UAnimNotifyState_SkillCooldown : public UAnimNotifyState
		TEST_METHOD(Class__Frontiers__AnimNotifyState_SkillCooldown)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_SkillCooldown, 0x0030);
		}

		// class USkillAnimNotifyState : public UAnimNotifyState
		TEST_METHOD(Class__Frontiers__SkillAnimNotifyState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillAnimNotifyState, UnknownData_X02U, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillAnimNotifyState, Conditions, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillAnimNotifyState, bPlayInEditorPreview, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillAnimNotifyState, UnknownData_1INM, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillAnimNotifyState, 0x0050);
		}

		// class UAnimNotifyState_StatusEffect : public USkillAnimNotifyState
		TEST_METHOD(Class__Frontiers__AnimNotifyState_StatusEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_StatusEffect, StatusEffectClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_StatusEffect, bCallSkillStart, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_StatusEffect, UnknownData_ON1U, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_StatusEffect, 0x0060);
		}

		// class UAnimNotifyStatusEffectContext : public UActorComponent
		TEST_METHOD(Class__Frontiers__AnimNotifyStatusEffectContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyStatusEffectContext, StatusEffectClass, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyStatusEffectContext, StatusEffect, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyStatusEffectContext, 0x00C0);
		}

		// class UAnimNotifyState_SkillChannelCost : public UAnimNotifyState_StatusEffect
		TEST_METHOD(Class__Frontiers__AnimNotifyState_SkillChannelCost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_SkillChannelCost, bCheckChanneling, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_SkillChannelCost, bCheckResources, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_SkillChannelCost, UnknownData_0FPE, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_SkillChannelCost, ResourceThreshold, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_SkillChannelCost, 0x0068);
		}

		// class UAnimNotifyState_SwapAttachments : public UAnimNotifyState
		TEST_METHOD(Class__Frontiers__AnimNotifyState_SwapAttachments)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_SwapAttachments, ToAttachRight, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_SwapAttachments, ToAttachLeft, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_SwapAttachments, 0x0040);
		}

		// class UAnimNotifyState_TLEffect : public USkillAnimNotifyState
		TEST_METHOD(Class__Frontiers__AnimNotifyState_TLEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TLEffect, EffectDefinition, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TLEffect, bStopSoundWhenSkillStops, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TLEffect, bRequireSkillToExecute, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TLEffect, bPlayAtTarget, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TLEffect, bDestroyAtEnd, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TLEffect, bDetachOnDeactivate, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TLEffect, UnknownData_I4F2, 0x0125);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_TLEffect, 0x0130);
		}

		// class UAppSettings : public UGameUserSettings
		TEST_METHOD(Class__Frontiers__AppSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppSettings, DefaultFullscreenMode, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppSettings, bDefaultUseVSync, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppSettings, UnknownData_6KKV, 0x013D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAppSettings, 0x0140);
		}

		// class UArea : public UObject
		TEST_METHOD(Class__Frontiers__Area)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArea, MaxAttempts, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArea, UnknownData_46FA, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArea, Seed, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArea, bRandomSeed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArea, UnknownData_RVBW, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArea, TemplateClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArea, ConductorHandlers, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArea, UnknownData_Q6IV, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArea, DefaultMapWorksSpawnEntries, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArea, DefaultPetSpawnEntries, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArea, ActorLimits, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArea, bAllowFogOfWar, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArea, bMonsterLevelsIncreaseToCenter, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArea, UnknownData_I857, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArea, GraphRulesetReferences, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArea, RulesetReferences, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArea, 0x00B8);
		}

		// class AAreaLoader : public AInfo
		TEST_METHOD(Class__Frontiers__AreaLoader)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAreaLoader, bIsDefault, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAreaLoader, bTriggerOnBeginPlay, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAreaLoader, bQueryZoneControllerForArea, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAreaLoader, UnknownData_CIGP, 0x0223);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAreaLoader, RetryTimeoutSeconds, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAreaLoader, AreaDataRow, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAreaLoader, bIsMapworks, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAreaLoader, UnknownData_O11U, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAreaLoader, AreaGuid, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAreaLoader, UnknownData_IEXW, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAreaLoader, AreaBounds, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAreaLoader, CameraYawForArea, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAreaLoader, RandomSeed, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAreaLoader, UnknownData_VEW6, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAreaLoader, LevelsToPreload, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAreaLoader, AreaClass, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAreaLoader, Forts, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAreaLoader, ActorLimiter, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAreaLoader, AreaQuest, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAreaLoader, MonsterClasses, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAreaLoader, CachedMonsters, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAreaLoader, UnknownData_3WR0, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAreaLoader, AssetLoader, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAreaLoader, 0x0328);
		}

		// class UAreaManagerComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__AreaManagerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAreaManagerComponent, AreaPadding, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAreaManagerComponent, UnknownData_B9W5, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAreaManagerComponent, WarpBackFallbackClass, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAreaManagerComponent, Areas, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAreaManagerComponent, UnknownData_NPV4, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAreaManagerComponent, 0x0100);
		}

		// class UQuestUpdater : public UPlayerComponent
		TEST_METHOD(Class__Frontiers__QuestUpdater)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestUpdater, UnknownData_92PN, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestUpdater, ParentQuestComponent, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestUpdater, UnknownData_XJJZ, 0x0178);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestUpdater, 0x01E8);
		}

		// class UAreaQuestComponent : public UQuestUpdater
		TEST_METHOD(Class__Frontiers__AreaQuestComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAreaQuestComponent, PlayerQuestComponents, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAreaQuestComponent, UnknownData_40O1, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAreaQuestComponent, 0x0200);
		}

		// class UBulkAssetPreloader : public UObject
		TEST_METHOD(Class__Frontiers__BulkAssetPreloader)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBulkAssetPreloader, UnknownData_Z3WD, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBulkAssetPreloader, ObjectPreloads, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBulkAssetPreloader, 0x0098);
		}

		// class UPostProcessInfo : public UObject
		TEST_METHOD(Class__Frontiers__PostProcessInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessInfo, TextureImportRules, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessInfo, FBXImportRules, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPostProcessInfo, 0x0048);
		}

		// class UConductorHandler : public UActorComponent
		TEST_METHOD(Class__Frontiers__ConductorHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConductorHandler, GenerationGuid, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConductorHandler, 0x00C0);
		}

		// class UAudioAmbianceHandler : public UConductorHandler
		TEST_METHOD(Class__Frontiers__AudioAmbianceHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAmbianceHandler, MusicEvent, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAmbianceHandler, AmbienceEvent, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAmbianceHandler, BeginDayEvent, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAmbianceHandler, BeginNightEvent, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAmbianceHandler, TimeChangeTriggerDelay, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAmbianceHandler, UnknownData_GCP6, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAmbianceHandler, Banks, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAmbianceHandler, UnknownData_QY6F, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioAmbianceHandler, 0x0170);
		}

		// class UAudioAreaAmbianceComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__AudioAreaAmbianceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAreaAmbianceComponent, UnknownData_3FB9, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAreaAmbianceComponent, AmbienceEvent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAreaAmbianceComponent, MusicEvent, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAreaAmbianceComponent, BeginDayEvent, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAreaAmbianceComponent, BeginNightEvent, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAreaAmbianceComponent, MusicMuteEvent, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAreaAmbianceComponent, MusicPlayTimeMinSeconds, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAreaAmbianceComponent, MusicPlayTimeMaxSeconds, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAreaAmbianceComponent, MusicOffTimeMinSeconds, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAreaAmbianceComponent, MusicOffTimeMaxSeconds, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAreaAmbianceComponent, MusicMuteLowIntensityTime, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAreaAmbianceComponent, MonsterRadius, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAreaAmbianceComponent, MediumIntensity, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAreaAmbianceComponent, HighIntensity, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAreaAmbianceComponent, MinTimeAtLowIntensity, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAreaAmbianceComponent, MinTimeAtMediumIntensity, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAreaAmbianceComponent, HoldTimeAtMediumIntensity, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAreaAmbianceComponent, MinTimeAtHighIntensity, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAreaAmbianceComponent, MaxTimeAtHighIntensity, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAreaAmbianceComponent, UnknownData_Q6KF, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAreaAmbianceComponent, PreviousAmbienceEvent, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAreaAmbianceComponent, PreviousMusicEvent, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAreaAmbianceComponent, UnknownData_VFD5, 0x01A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioAreaAmbianceComponent, 0x0220);
		}

		// class UAudioEffectMap : public UActorComponent
		TEST_METHOD(Class__Frontiers__AudioEffectMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioEffectMap, EffectReferenceArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioEffectMap, CachedEffectReferences, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioEffectMap, 0x0110);
		}

		// class UAudioInputSubsystem : public UGameInstanceSubsystem
		TEST_METHOD(Class__Frontiers__AudioInputSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioInputSubsystem, UnknownData_ZPRM, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioInputSubsystem, 0x0080);
		}

		// class UAudioFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Frontiers__AudioFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioFunctionLibrary, 0x0028);
		}

		// class UAutoOperateSphereComponent : public USphereComponent
		TEST_METHOD(Class__Frontiers__AutoOperateSphereComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoOperateSphereComponent, UnknownData_OQ5J, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutoOperateSphereComponent, 0x0470);
		}

		// class UAutoOperateTriggerSphere : public USphereComponent
		TEST_METHOD(Class__Frontiers__AutoOperateTriggerSphere)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutoOperateTriggerSphere, 0x0460);
		}

		// class UBlobShadowComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Frontiers__BlobShadowComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlobShadowComponent, SocketName, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlobShadowComponent, ForceFallbackRadius, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlobShadowComponent, UnknownData_V9ZD, 0x04D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlobShadowComponent, FallbackRadius, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlobShadowComponent, ScaleFactor, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlobShadowComponent, IgnoreMaxSizeLimit, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlobShadowComponent, UnknownData_HZIV, 0x04E5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlobShadowComponent, 0x04F0);
		}

		// class UBossFightComponent : public UPlayerComponent
		TEST_METHOD(Class__Frontiers__BossFightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossFightComponent, ShowBossUICount, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossFightComponent, UnknownData_5JG7, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossFightComponent, BossMonster, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBossFightComponent, 0x00C0);
		}

		// class UBossFightObserverComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__BossFightObserverComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossFightObserverComponent, OnBossFightStateChanged, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossFightObserverComponent, UnknownData_7GR1, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossFightObserverComponent, BossFightState, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossFightObserverComponent, UnknownData_W0BX, 0x00C2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBossFightObserverComponent, 0x00C8);
		}

		// class UBossMonsterComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__BossMonsterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossMonsterComponent, BossStatusEffectClass, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossMonsterComponent, RowHandle, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossMonsterComponent, BossDataStatusEffect, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBossMonsterComponent, 0x00D0);
		}

		// class UBossMonsterInfoVolume : public USphereComponent
		TEST_METHOD(Class__Frontiers__BossMonsterInfoVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBossMonsterInfoVolume, 0x0460);
		}

		// class UBossFightManager : public UActorComponent
		TEST_METHOD(Class__Frontiers__BossFightManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossFightManager, UnknownData_IOA8, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossFightManager, BossMapMarker, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossFightManager, BossComponentClass, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossFightManager, UnknownData_RKYS, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBossFightManager, 0x0118);
		}

		// class ABossFightShape : public AActor
		TEST_METHOD(Class__Frontiers__BossFightShape)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABossFightShape, BossFightState, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABossFightShape, UnknownData_S68T, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABossFightShape, LivingPlayers, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABossFightShape, DeadPlayers, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABossFightShape, Monsters, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABossFightShape, bIsBossArena, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABossFightShape, UnknownData_SB89, 0x0259);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABossFightShape, 0x0260);
		}

		// class ACameraDistanceVolume : public ATriggerBox
		TEST_METHOD(Class__Frontiers__CameraDistanceVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraDistanceVolume, CameraDistance, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraDistanceVolume, CameraPitch, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraDistanceVolume, UnknownData_JNPI, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraDistanceVolume, 0x0240);
		}

		// class ACameraTriggerBox : public ATriggerBox
		TEST_METHOD(Class__Frontiers__CameraTriggerBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraTriggerBox, TransitionParams, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraTriggerBox, 0x0238);
		}

		// class ATLCharacterCreateBaseActor : public AActor
		TEST_METHOD(Class__Frontiers__TLCharacterCreateBaseActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacterCreateBaseActor, UnknownData_I7JU, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacterCreateBaseActor, PlayerPortrait, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacterCreateBaseActor, PhotoboothClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacterCreateBaseActor, UnknownData_1CEC, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacterCreateBaseActor, AnimStateStatusEffects, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacterCreateBaseActor, CharacterSelectAnimClass, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacterCreateBaseActor, CurrentStatusEffect, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATLCharacterCreateBaseActor, 0x02A0);
		}

		// class ATLCharacterCreateActor : public ATLCharacterCreateBaseActor
		TEST_METHOD(Class__Frontiers__TLCharacterCreateActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacterCreateActor, UnknownData_4CD5, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacterCreateActor, PlayerData, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATLCharacterCreateActor, 0x02B8);
		}

		// class ATLCharacterCreatePetActor : public ATLCharacterCreateBaseActor
		TEST_METHOD(Class__Frontiers__TLCharacterCreatePetActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacterCreatePetActor, MinionData, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATLCharacterCreatePetActor, 0x02B0);
		}

		// class UCharacterCustomizationComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__CharacterCustomizationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCustomizationComponent, CharacterCustomization, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCustomizationComponent, SkinDyeRow, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCustomizationComponent, HairDyeRow, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCustomizationComponent, HeadItemRow, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCustomizationComponent, HairItemRow, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterCustomizationComponent, 0x0110);
		}

		// class UTLCharacterSelectAnimInstance : public UAnimInstance
		TEST_METHOD(Class__Frontiers__TLCharacterSelectAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCharacterSelectAnimInstance, UnknownData_MKMR, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCharacterSelectAnimInstance, Animations, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCharacterSelectAnimInstance, SequencerBlend, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCharacterSelectAnimInstance, SequencerBlendTime, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCharacterSelectAnimInstance, SequencerPoseSnapshotName, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCharacterSelectAnimInstance, EmptyAnimation, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCharacterSelectAnimInstance, UnknownData_V1JA, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLCharacterSelectAnimInstance, 0x0360);
		}

		// class UChatChannel : public UObject
		TEST_METHOD(Class__Frontiers__ChatChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatChannel, UnknownData_PMZF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatChannel, session, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatChannel, UnknownData_W2A1, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChatChannel, 0x0130);
		}

		// class UChatComponent : public UPlayerComponent
		TEST_METHOD(Class__Frontiers__ChatComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatComponent, UnknownData_NFAY, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChatComponent, 0x0148);
		}

		// class UChatSession : public UObject
		TEST_METHOD(Class__Frontiers__ChatSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatSession, ChatChannels, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatSession, UnknownData_YIBU, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatSession, OwningLocalPlayer, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatSession, UnknownData_JKDB, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatSession, GameSettings, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatSession, UnknownData_K0BB, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChatSession, 0x0160);
		}

		// class ACinematicActor : public AActor
		TEST_METHOD(Class__Frontiers__CinematicActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACinematicActor, 0x0220);
		}

		// class UColorRange : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Frontiers__ColorRange)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UColorRange, 0x0028);
		}

		// class UCombatConductorHandler : public UConductorHandler
		TEST_METHOD(Class__Frontiers__CombatConductorHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombatConductorHandler, DamageSettings, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCombatConductorHandler, 0x00D0);
		}

		// class UTLWidgetComponent : public UWidgetComponent
		TEST_METHOD(Class__Frontiers__TLWidgetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLWidgetComponent, UnknownData_RBRG, 0x0590);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLWidgetComponent, 0x05B0);
		}

		// class UCombatNotifyWidgetComponent : public UTLWidgetComponent
		TEST_METHOD(Class__Frontiers__CombatNotifyWidgetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombatNotifyWidgetComponent, UnknownData_C0VJ, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombatNotifyWidgetComponent, AnimationCurve, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombatNotifyWidgetComponent, RandomSpacingFactor, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombatNotifyWidgetComponent, MaxDuration, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombatNotifyWidgetComponent, UnknownData_RVZK, 0x0658);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCombatNotifyWidgetComponent, 0x0670);
		}

		// class UCombatNotifyComponentPool : public UActorComponent
		TEST_METHOD(Class__Frontiers__CombatNotifyComponentPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombatNotifyComponentPool, AvailableComponents, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombatNotifyComponentPool, UsedComponents, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCombatNotifyComponentPool, 0x0150);
		}

		// class AConductor : public AActor
		TEST_METHOD(Class__Frontiers__Conductor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AConductor, SkyLight, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConductor, AreaHeightFog, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConductor, DirectionalLight, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConductor, ObjectsToHandle, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConductor, DefaultHandler, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConductor, MapProxyReference, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConductor, MapProxy, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConductor, bIsGameConductor, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AConductor, UnknownData_2R0M, 0x0261);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AConductor, 0x0268);
		}

		// class UConductorComponent : public UPlayerComponent
		TEST_METHOD(Class__Frontiers__ConductorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConductorComponent, Handlers, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConductorComponent, UnknownData_IINY, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConductorComponent, 0x00D8);
		}

		// class UConsoleUtility : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Frontiers__ConsoleUtility)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsoleUtility, 0x0028);
		}

		// class UContractComponent : public UPlayerComponent
		TEST_METHOD(Class__Frontiers__ContractComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractComponent, UnknownData_V38W, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractComponent, ContractStates, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractComponent, CurrentContract, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContractComponent, 0x0108);
		}

		// class UCraftingIndicatorComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Frontiers__CraftingIndicatorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingIndicatorComponent, UnknownData_GC3L, 0x04D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingIndicatorComponent, 0x04F0);
		}

		// class ACritter : public ACharacter
		TEST_METHOD(Class__Frontiers__Critter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACritter, BehaviorTree, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACritter, UnknownData_H8T4, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACritter, CombatFX, 0x04C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACritter, 0x04D0);
		}

		// class UCritterSpawnerComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__CritterSpawnerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCritterSpawnerComponent, UnknownData_3ZCE, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCritterSpawnerComponent, LevelSearchRadius, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCritterSpawnerComponent, UnknownData_TOG7, 0x015C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCritterSpawnerComponent, 0x0160);
		}

		// class UDeathOptionsComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__DeathOptionsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathOptionsComponent, PostResurrectStatusEffectClass, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathOptionsComponent, PostResurrectSafetyDurationSeconds, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathOptionsComponent, UnknownData_W6XG, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathOptionsComponent, GoldCosts, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeathOptionsComponent, 0x00D0);
		}

		// class UDecorator_ActorsInRange : public UBTDecorator
		TEST_METHOD(Class__Frontiers__Decorator_ActorsInRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_ActorsInRange, Radius, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_ActorsInRange, UnknownData_3IU3, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_ActorsInRange, GameplayTagQuery, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_ActorsInRange, CollisionChannel, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_ActorsInRange, bUseMinActors, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_ActorsInRange, UnknownData_VKZ9, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_ActorsInRange, MinActorCount, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_ActorsInRange, bUseMaxActors, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_ActorsInRange, UnknownData_J8BJ, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_ActorsInRange, MaxActorCount, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecorator_ActorsInRange, 0x00C8);
		}

		// class UDecorator_HasLOS : public UBTDecorator
		TEST_METHOD(Class__Frontiers__Decorator_HasLOS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_HasLOS, BlackboardKeyTargetObject, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecorator_HasLOS, 0x0070);
		}

		// class UDecorator_HasStatusEffect : public UBTDecorator
		TEST_METHOD(Class__Frontiers__Decorator_HasStatusEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_HasStatusEffect, StatusEffect, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecorator_HasStatusEffect, 0x0070);
		}

		// class UDecorator_RandomSuccess : public UBTDecorator
		TEST_METHOD(Class__Frontiers__Decorator_RandomSuccess)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_RandomSuccess, SuccessProbability, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_RandomSuccess, UnknownData_YZ18, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecorator_RandomSuccess, 0x0070);
		}

		// class UDecorator_StatusEffect : public UBTDecorator
		TEST_METHOD(Class__Frontiers__Decorator_StatusEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_StatusEffect, StatusEffectToApply, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecorator_StatusEffect, 0x0070);
		}

		// class UDecorator_TargetInRange : public UBTDecorator
		TEST_METHOD(Class__Frontiers__Decorator_TargetInRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_TargetInRange, BlackboardTargetKey, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_TargetInRange, bUseMinRange, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_TargetInRange, UnknownData_TGQQ, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_TargetInRange, MinRange, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_TargetInRange, bUseMaxRange, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_TargetInRange, UnknownData_2T9R, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_TargetInRange, MaxRange, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecorator_TargetInRange, 0x0080);
		}

		// class UDecorator_TraitValue : public UBTDecorator
		TEST_METHOD(Class__Frontiers__Decorator_TraitValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_TraitValue, bActiveTrait, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_TraitValue, UnknownData_RRAF, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_TraitValue, Trait, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_TraitValue, ActiveTrait, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_TraitValue, bUseActiveTraitPercent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_TraitValue, UnknownData_3FQK, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_TraitValue, ComparisonValue, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_TraitValue, ComparisonType, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_TraitValue, UnknownData_EHMV, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecorator_TraitValue, 0x00A0);
		}

		// class UDifficultyDataHelpers : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Frontiers__DifficultyDataHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDifficultyDataHelpers, 0x0028);
		}

		// class UDiminishingReturnsComponent : public UPlayerComponent
		TEST_METHOD(Class__Frontiers__DiminishingReturnsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDiminishingReturnsComponent, Resistances, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDiminishingReturnsComponent, 0x00C0);
		}

		// class UDisplayNameInterface : public UInterface
		TEST_METHOD(Class__Frontiers__DisplayNameInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisplayNameInterface, 0x0028);
		}

		// class UDLCSubsystem : public UGameInstanceSubsystem
		TEST_METHOD(Class__Frontiers__DLCSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDLCSubsystem, UnknownData_6TGH, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDLCSubsystem, 0x0040);
		}

		// class ADRLGLevelProxy : public AActor
		TEST_METHOD(Class__Frontiers__DRLGLevelProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADRLGLevelProxy, LevelEntries, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADRLGLevelProxy, SubLevelAssetPtr, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADRLGLevelProxy, bAnyRotation, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADRLGLevelProxy, bRandomlyRotateAfterGeneration, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADRLGLevelProxy, bRandomlyFlipAfterGeneration, 0x025A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADRLGLevelProxy, bCanRotate0, 0x025B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADRLGLevelProxy, bCanRotate90, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADRLGLevelProxy, bCanRotate180, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADRLGLevelProxy, bCanRotate270, 0x025E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADRLGLevelProxy, UnknownData_9LLS, 0x025F);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADRLGLevelProxy, WarpTo, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADRLGLevelProxy, 0x0270);
		}

		// class ADRLGRuleSet : public AInfo
		TEST_METHOD(Class__Frontiers__DRLGRuleSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADRLGRuleSet, RuleSetName, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADRLGRuleSet, RuleSet, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADRLGRuleSet, 0x0238);
		}

		// class ADRLGTemplate : public AInfo
		TEST_METHOD(Class__Frontiers__DRLGTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADRLGTemplate, Levels, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADRLGTemplate, 0x0230);
		}

		// class UDungeonAssembler : public UActorComponent
		TEST_METHOD(Class__Frontiers__DungeonAssembler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonAssembler, DungeonSpawnEntryRow, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonAssembler, 0x00C0);
		}

		// class UDungeonMaster : public UActorComponent
		TEST_METHOD(Class__Frontiers__DungeonMaster)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMaster, UnknownData_Z5K3, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonMaster, 0x0170);
		}

		// class UDungeonPlayerComponent : public UPlayerComponent
		TEST_METHOD(Class__Frontiers__DungeonPlayerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPlayerComponent, DungeonSeed, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPlayerComponent, PlayingDungeonChallengeLevel, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPlayerComponent, bPlayingDungeonChangedProgress, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPlayerComponent, UnknownData_JG55, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPlayerComponent, PlayingDungeonQuality, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPlayerComponent, PlayingDungeonStatus, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPlayerComponent, UnknownData_GTV2, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPlayerComponent, PlayingDungeonAccountIdHash, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPlayerComponent, PortalLocationComponentClass, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPlayerComponent, DungeonMenuClass, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPlayerComponent, UnknownData_AJJP, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonPlayerComponent, 0x0100);
		}

		// class USpawnDataEntryGotoDungeonSpawnRow : public USpawnDataEntryGotoSpawnRowBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryGotoDungeonSpawnRow)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryGotoDungeonSpawnRow, 0x0038);
		}

		// class USpawnDataEntryGotoDungeonSpawnRowByQuality : public USpawnDataEntryGotoDungeonSpawnRow
		TEST_METHOD(Class__Frontiers__SpawnDataEntryGotoDungeonSpawnRowByQuality)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnDataEntryGotoDungeonSpawnRowByQuality, UnknownData_45UB, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryGotoDungeonSpawnRowByQuality, 0x0040);
		}

		// class USpawnDataEntryGotoDungeonSpawnRowByChallengeLevel : public USpawnDataEntryGotoDungeonSpawnRow
		TEST_METHOD(Class__Frontiers__SpawnDataEntryGotoDungeonSpawnRowByChallengeLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnDataEntryGotoDungeonSpawnRowByChallengeLevel, UnknownData_K92V, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryGotoDungeonSpawnRowByChallengeLevel, 0x0048);
		}

		// class USpawnDataEntryGotoDungeonSpawnRowIfEndOfCluster : public USpawnDataEntryGotoDungeonSpawnRow
		TEST_METHOD(Class__Frontiers__SpawnDataEntryGotoDungeonSpawnRowIfEndOfCluster)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnDataEntryGotoDungeonSpawnRowIfEndOfCluster, UnknownData_UC1I, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryGotoDungeonSpawnRowIfEndOfCluster, 0x0040);
		}

		// class USpawnDataEntryAddUniqueMapworksRowByName : public USpawnEntryBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryAddUniqueMapworksRowByName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnDataEntryAddUniqueMapworksRowByName, UnknownData_RNUH, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryAddUniqueMapworksRowByName, 0x0040);
		}

		// class USpawnDataEntryAddUniqueMapworksRowByFilter : public USpawnEntryBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryAddUniqueMapworksRowByFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnDataEntryAddUniqueMapworksRowByFilter, UnknownData_VNKN, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryAddUniqueMapworksRowByFilter, 0x0050);
		}

		// class UDye : public UObject
		TEST_METHOD(Class__Frontiers__Dye)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDye, TextureMatrix, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDye, MatrixRowA, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDye, MatrixRowB, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDye, MatrixRowC, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDye, MatrixRowD, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDye, MatrixRowE, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDye, MatrixRowF, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDye, MatrixRowG, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDye, MatrixRowH, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDye, GeneratedTexture, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDye, 0x03F8);
		}

		// class ADyeSetEditor : public AActor
		TEST_METHOD(Class__Frontiers__DyeSetEditor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADyeSetEditor, 0x0220);
		}

		// class UElementalEffectComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__ElementalEffectComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UElementalEffectComponent, WeaponAffixEffectsArray, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UElementalEffectComponent, 0x00C0);
		}

		// class UEmberWeaponBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Frontiers__EmberWeaponBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEmberWeaponBlueprintLibrary, 0x0028);
		}

		// class UEntitlementManager : public UActorComponent
		TEST_METHOD(Class__Frontiers__EntitlementManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEntitlementManager, AccountExclusives, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEntitlementManager, CharacterExclusives, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEntitlementManager, 0x00D0);
		}

		// class UEnvironmentVariableComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__EnvironmentVariableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvironmentVariableComponent, EnvironmentVariable, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvironmentVariableComponent, EnvironmentValue, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvironmentVariableComponent, 0x00C0);
		}

		// class UFadeMaterialSwapComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__FadeMaterialSwapComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFadeMaterialSwapComponent, FadeMaterial, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFadeMaterialSwapComponent, StaticMeshComponentFilter, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFadeMaterialSwapComponent, bSkipUnlitMeshes, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFadeMaterialSwapComponent, UnknownData_D8QI, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFadeMaterialSwapComponent, MaterialInstances, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFadeMaterialSwapComponent, 0x00D8);
		}

		// class UFMODBankSet : public UObject
		TEST_METHOD(Class__Frontiers__FMODBankSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFMODBankSet, BankSet, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFMODBankSet, 0x0068);
		}

		// class UFoliageSoundInteractorComponent : public USceneComponent
		TEST_METHOD(Class__Frontiers__FoliageSoundInteractorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageSoundInteractorComponent, UnknownData_13VN, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageSoundInteractorComponent, TickRate, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageSoundInteractorComponent, VelocityDeadzone, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageSoundInteractorComponent, UnknownData_IUEF, 0x0204);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageSoundInteractorComponent, 0x0280);
		}

		// class UAnimNotify_PlayerFootstep : public UAnimNotify
		TEST_METHOD(Class__Frontiers__AnimNotify_PlayerFootstep)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayerFootstep, 0x0038);
		}

		// class UPlayerFootstepAssetUserData : public UAssetUserData
		TEST_METHOD(Class__Frontiers__PlayerFootstepAssetUserData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerFootstepAssetUserData, SurfaceType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerFootstepAssetUserData, UnknownData_G0KQ, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerFootstepAssetUserData, 0x0030);
		}

		// class UPlayerFootstepComponent : public UPlayerComponent
		TEST_METHOD(Class__Frontiers__PlayerFootstepComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerFootstepComponent, Footsteps, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerFootstepComponent, DefaultFootstep, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerFootstepComponent, 0x00D8);
		}

		// class UFortEditComponent : public UPlayerComponent
		TEST_METHOD(Class__Frontiers__FortEditComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditComponent, UnknownData_G8KX, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditComponent, FortEditModePawnClass, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditComponent, FadeMaterialSwapClass, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditComponent, CraftingWidgetClass, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditComponent, BaseSkillBuildingTags, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditComponent, FortEditMode, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditComponent, UnknownData_CGC0, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditComponent, PropToPlace, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditComponent, FortEditPawn, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditComponent, PropToPlaceActor, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditComponent, UnknownData_ELLJ, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditComponent, bPropToPlaceWasPickedUp, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditComponent, UnknownData_E6DU, 0x0155);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditComponent, PropRotationDegrees, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditComponent, UnknownData_WJ20, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditComponent, CachedFortVolume, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditComponent, bIsInOwnFortArea, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditComponent, bIsBlockedFort, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditComponent, UnknownData_84X8, 0x016A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFortEditComponent, 0x0198);
		}

		// class AFortEditPawn : public APawn
		TEST_METHOD(Class__Frontiers__FortEditPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFortEditPawn, DepthOfFieldSettings, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFortEditPawn, ViewTransitionTime, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFortEditPawn, MovementComponent, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFortEditPawn, FortEditWidget, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFortEditPawn, UnknownData_YRBT, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFortEditPawn, CameraArm, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFortEditPawn, FortInputComponent, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFortEditPawn, UnknownData_PAN6, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFortEditPawn, 0x02C0);
		}

		// class UFortEditPawnMovement : public UFloatingPawnMovement
		TEST_METHOD(Class__Frontiers__FortEditPawnMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditPawnMovement, FortVolume, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFortEditPawnMovement, 0x0158);
		}

		// class UFortPropComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__FortPropComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropComponent, UnknownData_PEGU, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropComponent, CraftingEffect, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropComponent, PlaceEffect, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropComponent, UpgradeEffect, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropComponent, SacrificeEffect, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropComponent, InventoryId, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropComponent, UnknownData_BOWM, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropComponent, InventoryOwner, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropComponent, Vendor, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropComponent, AttachedActors, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropComponent, VendorPosingAsProp, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropComponent, bSupportsAssignedPet, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropComponent, bIsForFlyingPets, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropComponent, UnknownData_Q925, 0x043A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropComponent, PetAttachComponent, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropComponent, FortVolume, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropComponent, UnknownData_VE89, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropComponent, AssignedPetActor, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropComponent, FortPropTableRowHandle, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropComponent, AssignedPetInventoryGuid, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropComponent, AssignedPetRow, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropComponent, ParentProp, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropComponent, OpenUIAudioEvent, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropComponent, CloseUIAudioEvent, 0x04C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFortPropComponent, 0x04E0);
		}

		// class USpawnDataEntryAddFortPropByName : public USpawnEntryBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryAddFortPropByName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnDataEntryAddFortPropByName, UnknownData_6EM9, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryAddFortPropByName, 0x0040);
		}

		// class USpawnDataEntryAddFortPropByFilter : public USpawnDataEntryGameplayTags
		TEST_METHOD(Class__Frontiers__SpawnDataEntryAddFortPropByFilter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryAddFortPropByFilter, 0x0050);
		}

		// class USpawnDataEntryGotoFortPropSpawnRow : public USpawnDataEntryGotoSpawnRowBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryGotoFortPropSpawnRow)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryGotoFortPropSpawnRow, 0x0038);
		}

		// class UFortDataManager : public UActorComponent
		TEST_METHOD(Class__Frontiers__FortDataManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortDataManager, CachedDefaultForts, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFortDataManager, 0x00C0);
		}

		// class APlaceNameTriggerBox : public ATriggerBox
		TEST_METHOD(Class__Frontiers__PlaceNameTriggerBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlaceNameTriggerBox, PlaceName, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlaceNameTriggerBox, 0x0240);
		}

		// class AFortVolume : public APlaceNameTriggerBox
		TEST_METHOD(Class__Frontiers__FortVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFortVolume, FortOwner, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFortVolume, UnknownData_ISLL, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFortVolume, UserGeneratedContentBlocker, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFortVolume, UnknownData_FGX7, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFortVolume, 0x0298);
		}

		// class UFriendsComponent : public UPlayerComponent
		TEST_METHOD(Class__Frontiers__FriendsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendsComponent, UnknownData_BXJF, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFriendsComponent, 0x0148);
		}

		// class ATLActorShared : public AActor
		TEST_METHOD(Class__Frontiers__TLActorShared)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLActorShared, UnknownData_ARFS, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLActorShared, GameplayTags, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATLActorShared, 0x0248);
		}

		// class ATLActor : public ATLActorShared
		TEST_METHOD(Class__Frontiers__TLActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLActor, UnknownData_GYT3, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLActor, bAutoOperateEnabled, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLActor, UnknownData_6G3G, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLActor, AutoOperateDelay, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLActor, bKillOnTakeDamage, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLActor, UnknownData_1FTN, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLActor, PickupEffects, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLActor, Team, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLActor, bShowAltNameplate, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLActor, NeverShowOcclusionShader, 0x0382);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLActor, bIsSelectable, 0x0383);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLActor, UnknownData_C7MW, 0x0384);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATLActor, 0x0388);
		}

		// class AGadget : public ATLActor
		TEST_METHOD(Class__Frontiers__Gadget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGadget, UnknownData_VN7R, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGadget, UnknownData_PB6W, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGadget, ItemSpawnRow, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGadget, OperateSkillSlot, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGadget, PreviousAnimTickOption, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGadget, UnknownData_0AQO, 0x03AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGadget, IdleAnim, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGadget, OperateAnim, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGadget, IdleAnimWhenAlreadyOperated, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGadget, ResetAnim, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGadget, OperateSound, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGadget, OperateFailedSound, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGadget, UnknownData_VKCD, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGadget, bLoopOperateAnim, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGadget, UnknownData_D7I9, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGadget, SpawnOffset, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGadget, NumOperationalStatuses, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGadget, bLoopOperationalStatus, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGadget, bResetEverywhere, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGadget, UnknownData_J0YX, 0x0426);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGadget, OperationalStatusResetDelay, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGadget, UnknownData_U6TG, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGadget, DisplayName, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGadget, Sharing, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGadget, bForceIntoPersistentLevel, 0x0449);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGadget, bCanBeOperated, 0x044A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGadget, UnknownData_DRX8, 0x044B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGadget, InitialOperationalStatus, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGadget, UnknownData_FP7A, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGadget, 0x04A0);
		}

		// class UAnimNotify_GadgetOperateHit : public UAnimNotify
		TEST_METHOD(Class__Frontiers__AnimNotify_GadgetOperateHit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_GadgetOperateHit, HitIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_GadgetOperateHit, UnknownData_3IRY, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_GadgetOperateHit, 0x0040);
		}

		// class UPlayerGadgetComponent : public UPlayerComponent
		TEST_METHOD(Class__Frontiers__PlayerGadgetComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerGadgetComponent, 0x00B0);
		}

		// class UGamePadComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__GamePadComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamePadComponent, UnknownData_H3BX, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamePadComponent, ControllerButtonConstantsClass, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamePadComponent, UnknownData_YZRX, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGamePadComponent, 0x0100);
		}

		// class UGeneratedIconCache : public UObject
		TEST_METHOD(Class__Frontiers__GeneratedIconCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratedIconCache, CachedItemIcons, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneratedIconCache, 0x0078);
		}

		// class UGeneratedIconManager : public UActorComponent
		TEST_METHOD(Class__Frontiers__GeneratedIconManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratedIconManager, PendingGeneratedIcons, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneratedIconManager, 0x00C0);
		}

		// class UStatusEffect : public UObject
		TEST_METHOD(Class__Frontiers__StatusEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, UnknownData_MCK5, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, AffixTextArea, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, AffixTextActor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, Description, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, Icon, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, bShowInUI, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, bShowCountdown, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, bClientTimer, 0x009A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, bRefreshOnReapply, 0x009B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, bRefreshAllStacks, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, UnknownData_45RO, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, MaxInstancesPerActor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, bLimitEffectiveInstances, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, UnknownData_9AZH, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, MaxEffectiveInstancesPerActor, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, UnknownData_H8KK, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, Owner, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, Inflictor, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, SkillTraitTags, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, InitialTraits, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, InstigatorCharacter, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, InstigatorTraitSnapshot, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, UnknownData_PVHY, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, BlueprintRelevantInstigatorTraits, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, GameplayTags, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, ActionGroupTag, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, AssetsLoaded, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, ExpireTime, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, StartTime, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, LastDamageOverTimeEvent, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, PrimaryDamageElement, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, ParticlePriority, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, Effects, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, Skill, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, SkillInstanceId, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, SkillLevel, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, bRemoveOnDeath, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, bIsDamageSource, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, bCanCauseGetHit, 0x023A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, bShouldEventTimerTick, 0x023B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, EventTimerFrequency, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, DisallowedTags, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, bWantsInstigatorTraitSnapshot, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, UnknownData_O3ZG, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, bApplied, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect, UnknownData_DE4G, 0x0279);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect, 0x0280);
		}

		// class UGenericBeamStatusEffect : public UStatusEffect
		TEST_METHOD(Class__Frontiers__GenericBeamStatusEffect)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericBeamStatusEffect, 0x0280);
		}

		// class UGradientColorComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__GradientColorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGradientColorComponent, ImportDyeBase, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGradientColorComponent, TextureMatrixPreview, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGradientColorComponent, GradientMatrixBuilderMaterial, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGradientColorComponent, QuickPassThruMaterial, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGradientColorComponent, GradientMatrixBuilderMatInst, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGradientColorComponent, ColorGradientBuiderMaterial, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGradientColorComponent, GradientRowA, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGradientColorComponent, GradientRowB, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGradientColorComponent, GradientRowC, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGradientColorComponent, GradientRowD, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGradientColorComponent, GradientRowE, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGradientColorComponent, GradientRowF, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGradientColorComponent, GradientRowG, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGradientColorComponent, PropertyToChange, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGradientColorComponent, MyOwner, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGradientColorComponent, PropertyToUpdate, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGradientColorComponent, 0x0330);
		}

		// class UHandledComponentInterface : public UInterface
		TEST_METHOD(Class__Frontiers__HandledComponentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHandledComponentInterface, 0x0028);
		}

		// class AHarvestGadget : public AGadget
		TEST_METHOD(Class__Frontiers__HarvestGadget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHarvestGadget, HarvestPointsNeeded, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHarvestGadget, PointsHarvested, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHarvestGadget, HarvestedParent, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHarvestGadget, UnharvestedParent, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHarvestGadget, UnknownData_C26I, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHarvestGadget, FinishedHarvestingEffect, 0x04C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHarvestGadget, 0x0590);
		}

		// class UGenericHazardStatusEffect : public UStatusEffect
		TEST_METHOD(Class__Frontiers__GenericHazardStatusEffect)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericHazardStatusEffect, 0x0280);
		}

		// class AHazard : public ASkillShape
		TEST_METHOD(Class__Frontiers__Hazard)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard, UnknownData_2ITI, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard, bUseInsigatorDamage, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard, UnknownData_7EZY, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard, GameplayTags, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard, bStartActive, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard, bActivateOnTouch, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard, Team, 0x02CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard, UnknownData_Y9H0, 0x02CB);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard, TargetFilter, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard, DamageTypeTag, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard, bScaleDamageByArea, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard, bScaleDamageByMonsterDamage, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard, UnknownData_ZWR2, 0x03CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard, TouchDamageMin, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard, TouchDamageMax, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard, MotionDamage, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard, MotionDamageTriggerDistance, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard, DamagePerSecond, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard, ActivationDelay, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard, PulseInterval, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard, PulsesPerActivation, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard, PulseCount, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard, MaxActivations, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard, ActivationCount, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard, UnknownData_SO2V, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard, Traits, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard, StatusEffectClass, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard, bApplyLingeringDuration, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard, UnknownData_WMOT, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard, StatusEffectDuration, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard, bIsActive, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard, bIsPendingActivation, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard, UnknownData_EU1A, 0x041A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHazard, 0x0440);
		}

		// class UHideableStaticMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Frontiers__HideableStaticMeshComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHideableStaticMeshComponent, 0x04D0);
		}

		// class AHideableActor : public ATLActor
		TEST_METHOD(Class__Frontiers__HideableActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideableActor, FadeMaterial, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideableActor, FadeSpeed, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideableActor, HideAtEnd, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideableActor, UnknownData_I4SP, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideableActor, FadeSwapComponent, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHideableActor, UnknownData_2120, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHideableActor, 0x03B0);
		}

		// class UHighlightMaterialComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__HighlightMaterialComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHighlightMaterialComponent, HighlightMaterial, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHighlightMaterialComponent, bOverrideHighlightColor, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHighlightMaterialComponent, UnknownData_78P8, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHighlightMaterialComponent, HighlightColor, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHighlightMaterialComponent, UnknownData_6VI6, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHighlightMaterialComponent, DeactivateMaterial, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHighlightMaterialComponent, MeshMaterialTracker, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHighlightMaterialComponent, 0x0128);
		}

		// class UIconCaptureComponent : public UArrowComponent
		TEST_METHOD(Class__Frontiers__IconCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIconCaptureComponent, UnknownData_UDGD, 0x045C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIconCaptureComponent, 0x0460);
		}

		// class AItemActor : public ATLActor
		TEST_METHOD(Class__Frontiers__ItemActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemActor, CameraRigReference, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AItemActor, 0x0390);
		}

		// class USpawnDataEntryGotoItemModifySpawnRow : public USpawnDataEntryGotoSpawnRowBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryGotoItemModifySpawnRow)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryGotoItemModifySpawnRow, 0x0038);
		}

		// class USpawnDataEntryItemModifyAddAffixByName : public USpawnEntryBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryItemModifyAddAffixByName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnDataEntryItemModifyAddAffixByName, UnknownData_XPR8, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryItemModifyAddAffixByName, 0x0040);
		}

		// class USpawnDataEntryItemModifyRemoveAffix : public USpawnEntryBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryItemModifyRemoveAffix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnDataEntryItemModifyRemoveAffix, UnknownData_SHG8, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryItemModifyRemoveAffix, 0x0038);
		}

		// class USpawnDataEntryItemModifySetDye : public USpawnEntryBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryItemModifySetDye)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnDataEntryItemModifySetDye, UnknownData_GBY9, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryItemModifySetDye, 0x0038);
		}

		// class USpawnDataEntryItemModifySetDyeFromReagent : public USpawnEntryBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryItemModifySetDyeFromReagent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryItemModifySetDyeFromReagent, 0x0030);
		}

		// class USpawnDataEntryItemModifyTransmogFromReagent : public USpawnEntryBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryItemModifyTransmogFromReagent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryItemModifyTransmogFromReagent, 0x0030);
		}

		// class UItemOnGround : public UActorComponent
		TEST_METHOD(Class__Frontiers__ItemOnGround)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemOnGround, UnknownData_3G05, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemOnGround, bPickUpOnOperate, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemOnGround, UnknownData_AGLI, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemOnGround, ItemDataRow, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemOnGround, bPlayFlippy, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemOnGround, bHasFlippyAnim, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemOnGround, UnknownData_6JDX, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemOnGround, DropDelay, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemOnGround, ExtraAffixes, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemOnGround, OnDoFlippy, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemOnGround, OnDoPickedUp, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemOnGround, OnServerDoPickedUp, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemOnGround, OnBeginMoving, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemOnGround, OnEndMoving, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemOnGround, bAttachQualityFX, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemOnGround, UnknownData_WV2M, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemOnGround, FlippyScale, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemOnGround, bAnimateToDropPosition, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemOnGround, UnknownData_J3P8, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemOnGround, DropAnimationCurve, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemOnGround, PickupLerpSpeedCurve, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemOnGround, SpawnOrigin, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemOnGround, FlippyTime, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemOnGround, UnknownData_9Q5G, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemOnGround, PickupEvent, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemOnGround, UnknownData_FHI5, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemOnGround, CraftingStartEffects, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemOnGround, CraftingClaimEffects, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemOnGround, QualityEffectsComponent, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemOnGround, UnknownData_KPFA, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemOnGround, 0x0480);
		}

		// class UCachedItemsOnGroundComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__CachedItemsOnGroundComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCachedItemsOnGroundComponent, UnknownData_TWDQ, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCachedItemsOnGroundComponent, ItemActors, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCachedItemsOnGroundComponent, UnknownData_ZV8D, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCachedItemsOnGroundComponent, 0x00E0);
		}

		// class UItemQualityFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Frontiers__ItemQualityFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemQualityFunctionLibrary, 0x0028);
		}

		// class USpawnDataEntryGotoItemSpawnRow : public USpawnDataEntryGotoSpawnRowBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryGotoItemSpawnRow)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryGotoItemSpawnRow, 0x0038);
		}

		// class USpawnDataEntryAddItemByName : public USpawnEntryBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryAddItemByName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnDataEntryAddItemByName, UnknownData_JMZ9, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryAddItemByName, 0x0038);
		}

		// class USpawnDataEntryAddItemByFilter : public USpawnDataEntryGameplayTags
		TEST_METHOD(Class__Frontiers__SpawnDataEntryAddItemByFilter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryAddItemByFilter, 0x0050);
		}

		// class USpawnDataEntryItemAddCurrency : public USpawnEntryBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryItemAddCurrency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnDataEntryItemAddCurrency, UnknownData_QDXN, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryItemAddCurrency, 0x0040);
		}

		// class USpawnDataEntryItemAddAffix : public USpawnEntryBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryItemAddAffix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnDataEntryItemAddAffix, UnknownData_KTZ2, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryItemAddAffix, 0x0038);
		}

		// class USpawnDataEntryItemRemoveAffix : public USpawnEntryBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryItemRemoveAffix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnDataEntryItemRemoveAffix, UnknownData_8P7Q, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryItemRemoveAffix, 0x0038);
		}

		// class AItemSpawner : public AInfo
		TEST_METHOD(Class__Frontiers__ItemSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemSpawner, LootContainerDefaultLevel, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemSpawner, UnknownData_5LZC, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemSpawner, LifeBoundAffix, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemSpawner, LootDropRadius, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemSpawner, LootDropRadiusCurve, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemSpawner, SpawnDelayCurve, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemSpawner, BossItemDropDelay, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemSpawner, UnknownData_RXCW, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemSpawner, ItemsPerFrameLimit, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemSpawner, UnknownData_ZFUP, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItemSpawner, QueuedRequestedItems, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AItemSpawner, 0x0280);
		}

		// class UKeyablePlayerMaterial : public UActorComponent
		TEST_METHOD(Class__Frontiers__KeyablePlayerMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyablePlayerMaterial, MaterialParameterMap, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKeyablePlayerMaterial, 0x0100);
		}

		// class UTLLevelStreamingDynamic : public ULevelStreamingDynamic
		TEST_METHOD(Class__Frontiers__TLLevelStreamingDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLLevelStreamingDynamic, UnknownData_G6E8, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLLevelStreamingDynamic, 0x0160);
		}

		// class ULevelManager : public UActorComponent
		TEST_METHOD(Class__Frontiers__LevelManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelManager, StreamingLevels, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelManager, UnknownData_TAIS, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelManager, 0x0120);
		}

		// class ALevelPropActor : public AActor
		TEST_METHOD(Class__Frontiers__LevelPropActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelPropActor, bShouldBlendWithGround, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelPropActor, UnknownData_VYIX, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelPropActor, BlendRange, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelPropActor, BlendBias, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelPropActor, BlendContrast, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelPropActor, ParentBlendMaterial, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelPropActor, CachedTextureParameters, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelPropActor, 0x0248);
		}

		// class ULightTintComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__LightTintComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightTintComponent, LightTintType, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightTintComponent, UnknownData_QRHL, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightTintComponent, LightColorOverride, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightTintComponent, UnknownData_5AMV, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightTintComponent, LightComponents, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightTintComponent, 0x00D8);
		}

		// class ALightPropActor : public AActor
		TEST_METHOD(Class__Frontiers__LightPropActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALightPropActor, LightTintType, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALightPropActor, UnknownData_QT86, 0x0221);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightPropActor, 0x0228);
		}

		// class ULevelSequenceWrapper : public UActorComponent
		TEST_METHOD(Class__Frontiers__LevelSequenceWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceWrapper, LevelSequence, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceWrapper, VideoSequence, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceWrapper, SequencePossessables, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceWrapper, StatusEffectClass, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceWrapper, CinematicGameplayTag, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceWrapper, OverrideTimeOfDay, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceWrapper, bOneTimePerPlayer, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceWrapper, bOneTimePerCharacter, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceWrapper, bOneTimeEver, 0x0152);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceWrapper, bForAllPlayers, 0x0153);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceWrapper, bTriggerOnTravel, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceWrapper, UnknownData_NG83, 0x0155);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceWrapper, ActorsThatPlayed, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceWrapper, 0x0168);
		}

		// class UPlayerLevelSequenceWrapper : public UPlayerComponent
		TEST_METHOD(Class__Frontiers__PlayerLevelSequenceWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerLevelSequenceWrapper, UnknownData_7ZHZ, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerLevelSequenceWrapper, ServerLevelSequence, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerLevelSequenceWrapper, ClientLevelSequence, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerLevelSequenceWrapper, ServerVideoSequence, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerLevelSequenceWrapper, ClientVideoSequence, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerLevelSequenceWrapper, StatusEffectClass, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerLevelSequenceWrapper, UnknownData_FVV1, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerLevelSequenceWrapper, PendingClientLevelSequence, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerLevelSequenceWrapper, PendingServerLevelSequence, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerLevelSequenceWrapper, UnknownData_VQ41, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerLevelSequenceWrapper, 0x0200);
		}

		// class UTLLevelSequencePlayer : public ULevelSequencePlayer
		TEST_METHOD(Class__Frontiers__TLLevelSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLLevelSequencePlayer, CharacterPlayingSequence, 0x0798);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLLevelSequencePlayer, 0x07A0);
		}

		// class ACameraAnimTriggerBox : public ATriggerBox
		TEST_METHOD(Class__Frontiers__CameraAnimTriggerBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraAnimTriggerBox, LevelSequenceWrapper, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraAnimTriggerBox, 0x0230);
		}

		// class ULifespanCallbacksInterface : public UInterface
		TEST_METHOD(Class__Frontiers__LifespanCallbacksInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULifespanCallbacksInterface, 0x0028);
		}

		// class ULifetimeEventsComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__LifetimeEventsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULifetimeEventsComponent, OnNearLifetimeEnd, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULifetimeEventsComponent, OnLifespanUpdated, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULifetimeEventsComponent, bUseNearLifetimeEnd, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULifetimeEventsComponent, UnknownData_38AI, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULifetimeEventsComponent, NearLifetimeEndTime, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULifetimeEventsComponent, ServerLifetimeInfo, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULifetimeEventsComponent, UnknownData_50NK, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULifetimeEventsComponent, 0x00F0);
		}

		// class ULocalPersistenceData : public UObject
		TEST_METHOD(Class__Frontiers__LocalPersistenceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPersistenceData, UnknownData_RTKD, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPersistenceData, 0x0050);
		}

		// class ULocalPersistenceAccountwideData : public ULocalPersistenceData
		TEST_METHOD(Class__Frontiers__LocalPersistenceAccountwideData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPersistenceAccountwideData, UnknownData_NA8Z, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPersistenceAccountwideData, 0x0060);
		}

		// class ULocalPersistenceFortInventoryResponse : public ULocalPersistenceData
		TEST_METHOD(Class__Frontiers__LocalPersistenceFortInventoryResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPersistenceFortInventoryResponse, UnknownData_MSE2, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPersistenceFortInventoryResponse, 0x0060);
		}

		// class ULocalPersistenceInventory : public ULocalPersistenceData
		TEST_METHOD(Class__Frontiers__LocalPersistenceInventory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPersistenceInventory, UnknownData_Z3G9, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPersistenceInventory, 0x0060);
		}

		// class ULocalPersistenceServerRequest : public ULocalPersistenceData
		TEST_METHOD(Class__Frontiers__LocalPersistenceServerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPersistenceServerRequest, UnknownData_4TRN, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPersistenceServerRequest, 0x0060);
		}

		// class ULocalPersistenceQuestFile : public ULocalPersistenceData
		TEST_METHOD(Class__Frontiers__LocalPersistenceQuestFile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPersistenceQuestFile, UnknownData_BOQT, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPersistenceQuestFile, 0x0060);
		}

		// class ULocalPersistenceEditorOnlyAchievementData : public ULocalPersistenceData
		TEST_METHOD(Class__Frontiers__LocalPersistenceEditorOnlyAchievementData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPersistenceEditorOnlyAchievementData, UnknownData_1TGQ, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPersistenceEditorOnlyAchievementData, 0x0060);
		}

		// class UTLSaveGame : public USaveGame
		TEST_METHOD(Class__Frontiers__TLSaveGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLSaveGame, Version, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLSaveGame, UnknownData_S255, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLSaveGame, 0x00E0);
		}

		// class UAccountLocalPersistence : public UTLSaveGame
		TEST_METHOD(Class__Frontiers__AccountLocalPersistence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountLocalPersistence, UnknownData_3SHT, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountLocalPersistence, Accountwide, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountLocalPersistence, AccountQuests, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountLocalPersistence, FortInventory, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountLocalPersistence, FortStash, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountLocalPersistence, SharedStashBase, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountLocalPersistence, EditorOnlyAchievements, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountLocalPersistence, SaveGameEnvironment, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountLocalPersistence, StaticContent, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountLocalPersistence, SaveGames, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountLocalPersistence, CharactersById, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountLocalPersistence, IdAllocator, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountLocalPersistence, UnknownData_XIFM, 0x0264);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAccountLocalPersistence, 0x0268);
		}

		// class ULocalPersistence : public UTLSaveGame
		TEST_METHOD(Class__Frontiers__LocalPersistence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPersistence, JsonString, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPersistence, UnknownData_R2U0, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPersistence, LoadMarker, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPersistence, LoadCount, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPersistence, PendingData, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPersistence, Sequence, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPersistence, UnknownData_HM0F, 0x010C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPersistence, 0x0110);
		}

		// class ULoreLineComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__LoreLineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoreLineComponent, UnknownData_OTWX, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoreLineComponent, bOverrideLoreLine, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoreLineComponent, UnknownData_EJKX, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoreLineComponent, LoreLine, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoreLineComponent, bOverrideThemeTags, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoreLineComponent, UnknownData_2SMF, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoreLineComponent, OverrideThemeTags, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoreLineComponent, ValidSpeakers, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoreLineComponent, CooldownSeconds, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoreLineComponent, UnknownData_Z5QC, 0x010C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoreLineComponent, 0x0128);
		}

		// class ULorePlayerComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__LorePlayerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULorePlayerComponent, UnknownData_6YT9, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULorePlayerComponent, 0x00E8);
		}

		// class AMainMenuEmberWeaponHolder : public AActor
		TEST_METHOD(Class__Frontiers__MainMenuEmberWeaponHolder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMainMenuEmberWeaponHolder, 0x0220);
		}

		// class AMainMenuActorCoordinator : public AActor
		TEST_METHOD(Class__Frontiers__MainMenuActorCoordinator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuActorCoordinator, FadeToBlackInterruptThreshold, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuActorCoordinator, UnknownData_WRHH, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuActorCoordinator, CharacterCreateActorLocations, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuActorCoordinator, RelicWeaponLeft, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuActorCoordinator, RelicWeaponRight, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuActorCoordinator, RelicWeaponSingle, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuActorCoordinator, CharacterCreateCamera, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuActorCoordinator, CharacterSelectCamera, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuActorCoordinator, CharacterLocationActor, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuActorCoordinator, MinionLocationActor, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuActorCoordinator, FlyingMinionLocationActor, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuActorCoordinator, FlyingMinionPerchActor, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuActorCoordinator, OffStageLocationActor, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuActorCoordinator, IntroLevelSequenceActor, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuActorCoordinator, FramesToPlayWhenSkippingSequence, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuActorCoordinator, UnknownData_S77Y, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuActorCoordinator, StateCameras, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuActorCoordinator, SequenceOverrideActors, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuActorCoordinator, HardcoreStatus, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuActorCoordinator, HardcoreDeadStatus, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuActorCoordinator, SequencePlayer, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuActorCoordinator, ActorMap, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuActorCoordinator, UnknownData_AVPE, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuActorCoordinator, CurrentlyPlayingSequence, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuActorCoordinator, Minion, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuActorCoordinator, EmberWeapons, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMainMenuActorCoordinator, 0x0528);
		}

		// class AMainMenuPawn : public APawn
		TEST_METHOD(Class__Frontiers__MainMenuPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuPawn, UnknownData_6E23, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMainMenuPawn, 0x0288);
		}

		// class ATLBasePlayerController : public APlayerController
		TEST_METHOD(Class__Frontiers__TLBasePlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLBasePlayerController, CheatRunner, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLBasePlayerController, UnknownData_0P6X, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLBasePlayerController, CheatRunnerClass, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLBasePlayerController, HUDWidget, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLBasePlayerController, BotBehaviorClass, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLBasePlayerController, UnknownData_X84P, 0x05B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATLBasePlayerController, 0x05C0);
		}

		// class AMainMenuPlayerController : public ATLBasePlayerController
		TEST_METHOD(Class__Frontiers__MainMenuPlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuPlayerController, LoadingScreenBackground, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuPlayerController, CurrentState, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuPlayerController, GamePadComponent, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuPlayerController, MainMenuWidget, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuPlayerController, MainMenuHUDClass, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuPlayerController, MainMenuStates, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuPlayerController, StartingState, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuPlayerController, HostLevel, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuPlayerController, UnknownData_PXSC, 0x0642);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuPlayerController, ConductorHandlers, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuPlayerController, bRequireActorCoordinator, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuPlayerController, bCinematicAvailable, 0x0659);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuPlayerController, UnknownData_UJSK, 0x065A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuPlayerController, StartingAreaForTutorial, 0x065A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuPlayerController, StartingAreaAfterTutorial, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuPlayerController, UnknownData_U57V, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuPlayerController, PendingMenuStateClass, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuPlayerController, UnknownData_G5K0, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuPlayerController, Preloader, 0x06E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMainMenuPlayerController, 0x06E8);
		}

		// class UMainMenuState : public UObject
		TEST_METHOD(Class__Frontiers__MainMenuState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuState, DisplayName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuState, bShowBreadcrumbs, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuState, bShowMenuButton, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuState, bShowLetterbox, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuState, bCarryOverPreviousStateWidget, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuState, bUpdateConductorHandles, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuState, UnknownData_9TS8, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuState, ConductorHandlers, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuState, bUpdateAmbience, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuState, UnknownData_1KX1, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuState, AmbienceEvent, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuState, bUpdateMusic, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuState, UnknownData_11NA, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuState, MusicEvent, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuState, bUpdateBankSet, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuState, UnknownData_7CQS, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuState, BanksToLoad, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuState, Widget, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuState, WidgetClass, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuState, IntroSequencesByPreviousState, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuState, PlayerController, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuState, ActorCoordinator, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuState, UnknownData_5C2R, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuState, NextStateEnum, 0x0152);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuState, UnknownData_LC3Y, 0x0153);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuState, 0x0158);
		}

		// class UMainMenuStateCharacterCreate : public UMainMenuState
		TEST_METHOD(Class__Frontiers__MainMenuStateCharacterCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStateCharacterCreate, bShowDeselectedPlayers, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStateCharacterCreate, UnknownData_MG98, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStateCharacterCreate, SkillIconsLoaded, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStateCharacterCreate, UnknownData_XR5T, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStateCharacterCreate, Preloader, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuStateCharacterCreate, 0x02F0);
		}

		// class UMainMenuStateCharacterCreatePickPet : public UMainMenuStateCharacterCreate
		TEST_METHOD(Class__Frontiers__MainMenuStateCharacterCreatePickPet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStateCharacterCreatePickPet, UnknownData_3LIZ, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuStateCharacterCreatePickPet, 0x0300);
		}

		// class UMainMenuStateCharacterCreateCustomizePet : public UMainMenuStateCharacterCreatePickPet
		TEST_METHOD(Class__Frontiers__MainMenuStateCharacterCreateCustomizePet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuStateCharacterCreateCustomizePet, 0x0300);
		}

		// class UMainMenuStateCharacterCustomizeClassSelection : public UMainMenuStateCharacterCreate
		TEST_METHOD(Class__Frontiers__MainMenuStateCharacterCustomizeClassSelection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuStateCharacterCustomizeClassSelection, 0x02F0);
		}

		// class UMainMenuStateCharacterCreateCustomizePlayer : public UMainMenuStateCharacterCustomizeClassSelection
		TEST_METHOD(Class__Frontiers__MainMenuStateCharacterCreateCustomizePlayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuStateCharacterCreateCustomizePlayer, 0x02F0);
		}

		// class UMainMenuStateCharacterCreateDeploy : public UMainMenuStateCharacterCreate
		TEST_METHOD(Class__Frontiers__MainMenuStateCharacterCreateDeploy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuStateCharacterCreateDeploy, 0x02F0);
		}

		// class UMainMenuStateCharacterCreateEmberWeapon : public UMainMenuStateCharacterCustomizeClassSelection
		TEST_METHOD(Class__Frontiers__MainMenuStateCharacterCreateEmberWeapon)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuStateCharacterCreateEmberWeapon, 0x02F0);
		}

		// class UMainMenuStateCharacterCreateLoading : public UMainMenuState
		TEST_METHOD(Class__Frontiers__MainMenuStateCharacterCreateLoading)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuStateCharacterCreateLoading, 0x0158);
		}

		// class UMainMenuStateCharacterCreatePickClass : public UMainMenuStateCharacterCreate
		TEST_METHOD(Class__Frontiers__MainMenuStateCharacterCreatePickClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStateCharacterCreatePickClass, DefaultPlayerClasses, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStateCharacterCreatePickClass, DefaultPetClasses, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStateCharacterCreatePickClass, UnknownData_BUFF, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuStateCharacterCreatePickClass, 0x0320);
		}

		// class UMainMenuStateCharacterCreateReadyToDeploy : public UMainMenuStateCharacterCreate
		TEST_METHOD(Class__Frontiers__MainMenuStateCharacterCreateReadyToDeploy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuStateCharacterCreateReadyToDeploy, 0x02F0);
		}

		// class UMainMenuStateCharacterCreateShowSkillTrees : public UMainMenuStateCharacterCustomizeClassSelection
		TEST_METHOD(Class__Frontiers__MainMenuStateCharacterCreateShowSkillTrees)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuStateCharacterCreateShowSkillTrees, 0x02F0);
		}

		// class UMainMenuStateCharacterSelect : public UMainMenuState
		TEST_METHOD(Class__Frontiers__MainMenuStateCharacterSelect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStateCharacterSelect, UnknownData_9Z3N, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStateCharacterSelect, Preloader, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuStateCharacterSelect, 0x01A0);
		}

		// class UMainMenuStateCinematic : public UMainMenuState
		TEST_METHOD(Class__Frontiers__MainMenuStateCinematic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStateCinematic, IntroVideo, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuStateCinematic, 0x0180);
		}

		// class UMainMenuStateFetchContent : public UMainMenuState
		TEST_METHOD(Class__Frontiers__MainMenuStateFetchContent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuStateFetchContent, 0x0158);
		}

		// class UMainMenuStateLogin : public UMainMenuState
		TEST_METHOD(Class__Frontiers__MainMenuStateLogin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStateLogin, UnknownData_KYEJ, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuStateLogin, 0x0178);
		}

		// class UMainMenuStatePlatformSignOn : public UMainMenuState
		TEST_METHOD(Class__Frontiers__MainMenuStatePlatformSignOn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStatePlatformSignOn, UnknownData_24ZA, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStatePlatformSignOn, MessageWelcome, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStatePlatformSignOn, IncorrectPlatformModalDefinition, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStatePlatformSignOn, OfflineMetricsModalDefinition, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStatePlatformSignOn, CorruptSaveModalDefinition, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStatePlatformSignOn, NoPlayUserNotFoundModalDef, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStatePlatformSignOn, NoPlayUserNotLoggedInModalDef, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStatePlatformSignOn, NoPlayAccountTypeModalDef, 0x0D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStatePlatformSignOn, NoPlayOnlinePlayRestrictedModalDef, 0x0FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStatePlatformSignOn, NoPlayAgeRestrictedModalDef, 0x1218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStatePlatformSignOn, NoPlayRequiredPatchModalDef, 0x1478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStatePlatformSignOn, NoPlayRequiredSystemUpdateModalDef, 0x16D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStatePlatformSignOn, NoPlayChatRestrictedModalDef, 0x1938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStatePlatformSignOn, NoPlayUGCRestrictedModalDef, 0x1B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStatePlatformSignOn, NoPlayNoNetworkModalDef, 0x1DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStatePlatformSignOn, NoPlayGenericModalDef, 0x2058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStatePlatformSignOn, UnknownData_ZYX9, 0x22B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuStatePlatformSignOn, 0x22D0);
		}

		// class UMainMenuStateTerms : public UMainMenuState
		TEST_METHOD(Class__Frontiers__MainMenuStateTerms)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStateTerms, TermsOfServiceWidgetClass, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStateTerms, PresentedTermsType, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStateTerms, UnknownData_3NMQ, 0x0161);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStateTerms, ConsoleOfflineTermsRejectedModal, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStateTerms, UnknownData_AJU2, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuStateTerms, 0x03D8);
		}

		// class UMainMenuStateTitleScreenStart : public UMainMenuState
		TEST_METHOD(Class__Frontiers__MainMenuStateTitleScreenStart)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStateTitleScreenStart, ErrorModalDefinition, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStateTitleScreenStart, ConnectionLostModalDefinition, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStateTitleScreenStart, LoggedOutInactiveModalDefinition, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStateTitleScreenStart, PlatformLoggedOutModalDefinition, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStateTitleScreenStart, FailedSaveModalDefinition, 0x0AD8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuStateTitleScreenStart, 0x0D38);
		}

		// class UMainMenuStateWelcome : public UMainMenuState
		TEST_METHOD(Class__Frontiers__MainMenuStateWelcome)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStateWelcome, WelcomeModalByPlatform, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuStateWelcome, UnknownData_Q370, 0x01A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuStateWelcome, 0x01B8);
		}

		// class UMapMarkerComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__MapMarkerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerComponent, MarkerData, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerComponent, UnknownData_KK40, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapMarkerComponent, 0x0100);
		}

		// class AMapProxy : public AActor
		TEST_METHOD(Class__Frontiers__MapProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, ZoomStepSize, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, MinZoomFactor, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, MaxZoomFactor, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, FOVAngle, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, OrthoWidth, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, MinimapOrthoWidth, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, BorderWidth, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, OrthoCameraDepthOffset, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, PerspCameraDepthOffset, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, OrthoCameraOffset, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, OrthoCameraRotation, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, PerspCameraOffset, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, PerspCameraRotation, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, UnknownData_P4HA, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, MiniMapRenderTarget, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, LargeMapRenderTarget, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, FogOfWarRenderTarget, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, FogStampCircle, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, StampColor, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, StampRadius, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, MiniMapMeshMaterial, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, AreaMapMarkerMaterial, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, AreaMapMarkerMesh, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, AreaMarkerScale, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, UnknownData_LTMG, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, MinimapCaptureComp, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, LargeMapCaptureComp, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, OverridePawn, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, LargeMapScaleFactor, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, UnknownData_DGIN, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, DisabledFogOfWarTexture, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, MapImageMaterials, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, MiniMapMeshComponents, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, MapMarkers, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, UnknownData_CQ0E, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, MiniMapMeshMaterialInstance, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapProxy, UnknownData_VKTN, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMapProxy, 0x0400);
		}

		// class UFogsOfWar : public UObject
		TEST_METHOD(Class__Frontiers__FogsOfWar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFogsOfWar, FOWRenderTarget, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFogsOfWar, FogStamp, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFogsOfWar, FogStampRadius, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFogsOfWar, UnknownData_AS8I, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFogsOfWar, 0x00C0);
		}

		// class UMapWorksEntryBase : public UObject
		TEST_METHOD(Class__Frontiers__MapWorksEntryBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWorksEntryBase, UnknownData_N8KB, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapWorksEntryBase, 0x0040);
		}

		// class UMapWorksDataEntryGotoRow : public UMapWorksEntryBase
		TEST_METHOD(Class__Frontiers__MapWorksDataEntryGotoRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWorksDataEntryGotoRow, UnknownData_DZ61, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapWorksDataEntryGotoRow, 0x0048);
		}

		// class UMapWorksDataEntryAdjustLevel : public UMapWorksEntryBase
		TEST_METHOD(Class__Frontiers__MapWorksDataEntryAdjustLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWorksDataEntryAdjustLevel, UnknownData_YE68, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapWorksDataEntryAdjustLevel, 0x0048);
		}

		// class UMapWorksDataEntrySetPropertyBase : public UMapWorksEntryBase
		TEST_METHOD(Class__Frontiers__MapWorksDataEntrySetPropertyBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWorksDataEntrySetPropertyBase, UnknownData_GTK7, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapWorksDataEntrySetPropertyBase, 0x0048);
		}

		// class UMapWorksDataEntrySetProperty : public UMapWorksDataEntrySetPropertyBase
		TEST_METHOD(Class__Frontiers__MapWorksDataEntrySetProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWorksDataEntrySetProperty, UnknownData_926J, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapWorksDataEntrySetProperty, 0x0050);
		}

		// class UMapWorksDataEntryAppendProperty : public UMapWorksDataEntrySetProperty
		TEST_METHOD(Class__Frontiers__MapWorksDataEntryAppendProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapWorksDataEntryAppendProperty, 0x0050);
		}

		// class UMapWorksDataEntryGameplayTagBase : public UMapWorksDataEntrySetPropertyBase
		TEST_METHOD(Class__Frontiers__MapWorksDataEntryGameplayTagBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWorksDataEntryGameplayTagBase, UnknownData_H5C8, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapWorksDataEntryGameplayTagBase, 0x0050);
		}

		// class UMapWorksDataEntrySetGameplayTag : public UMapWorksDataEntryGameplayTagBase
		TEST_METHOD(Class__Frontiers__MapWorksDataEntrySetGameplayTag)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapWorksDataEntrySetGameplayTag, 0x0050);
		}

		// class UMapWorksDataEntrySetGameplayTagContainer : public UMapWorksDataEntrySetPropertyBase
		TEST_METHOD(Class__Frontiers__MapWorksDataEntrySetGameplayTagContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWorksDataEntrySetGameplayTagContainer, UnknownData_CC0N, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapWorksDataEntrySetGameplayTagContainer, 0x0068);
		}

		// class UMapWorksDataEntryAddGameplayTag : public UMapWorksDataEntrySetGameplayTagContainer
		TEST_METHOD(Class__Frontiers__MapWorksDataEntryAddGameplayTag)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapWorksDataEntryAddGameplayTag, 0x0068);
		}

		// class UMapWorksDataEntryRemoveGameplayTag : public UMapWorksDataEntryGameplayTagBase
		TEST_METHOD(Class__Frontiers__MapWorksDataEntryRemoveGameplayTag)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapWorksDataEntryRemoveGameplayTag, 0x0050);
		}

		// class UMapWorksDataEntryRemoveStemGameplayTags : public UMapWorksDataEntrySetGameplayTagContainer
		TEST_METHOD(Class__Frontiers__MapWorksDataEntryRemoveStemGameplayTags)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapWorksDataEntryRemoveStemGameplayTags, 0x0068);
		}

		// class UMapWorksDataEntrySetProbabilisticGameplayTag : public UMapWorksDataEntrySetPropertyBase
		TEST_METHOD(Class__Frontiers__MapWorksDataEntrySetProbabilisticGameplayTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWorksDataEntrySetProbabilisticGameplayTag, UnknownData_KRZ7, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapWorksDataEntrySetProbabilisticGameplayTag, 0x0058);
		}

		// class UMapWorksDataEntryAddAreaChain : public UMapWorksEntryBase
		TEST_METHOD(Class__Frontiers__MapWorksDataEntryAddAreaChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWorksDataEntryAddAreaChain, UnknownData_T28B, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapWorksDataEntryAddAreaChain, 0x0048);
		}

		// class UMapWorksDataEntryAddAreaChainByFilter : public UMapWorksEntryBase
		TEST_METHOD(Class__Frontiers__MapWorksDataEntryAddAreaChainByFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWorksDataEntryAddAreaChainByFilter, UnknownData_AVNI, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapWorksDataEntryAddAreaChainByFilter, 0x0060);
		}

		// class UMapWorksDataEntryAddAffixByNameBase : public UMapWorksEntryBase
		TEST_METHOD(Class__Frontiers__MapWorksDataEntryAddAffixByNameBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWorksDataEntryAddAffixByNameBase, UnknownData_VZ5U, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapWorksDataEntryAddAffixByNameBase, 0x0048);
		}

		// class UMapWorksDataEntryAddAffixByTagsBase : public UMapWorksEntryBase
		TEST_METHOD(Class__Frontiers__MapWorksDataEntryAddAffixByTagsBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWorksDataEntryAddAffixByTagsBase, UnknownData_KM8A, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapWorksDataEntryAddAffixByTagsBase, 0x0060);
		}

		// class UMapWorksDataEntryAddMonsterAffixByName : public UMapWorksDataEntryAddAffixByNameBase
		TEST_METHOD(Class__Frontiers__MapWorksDataEntryAddMonsterAffixByName)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapWorksDataEntryAddMonsterAffixByName, 0x0048);
		}

		// class UMapWorksDataEntryAddMonsterAffixByTags : public UMapWorksDataEntryAddAffixByTagsBase
		TEST_METHOD(Class__Frontiers__MapWorksDataEntryAddMonsterAffixByTags)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapWorksDataEntryAddMonsterAffixByTags, 0x0060);
		}

		// class UMapWorksDataEntryAddPlayerAffixByName : public UMapWorksDataEntryAddAffixByNameBase
		TEST_METHOD(Class__Frontiers__MapWorksDataEntryAddPlayerAffixByName)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapWorksDataEntryAddPlayerAffixByName, 0x0048);
		}

		// class UMapWorksDataEntryAddPlayerAffixByTags : public UMapWorksDataEntryAddAffixByTagsBase
		TEST_METHOD(Class__Frontiers__MapWorksDataEntryAddPlayerAffixByTags)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapWorksDataEntryAddPlayerAffixByTags, 0x0060);
		}

		// class UMapWorksDataEntryDebugLogProperty : public UMapWorksEntryBase
		TEST_METHOD(Class__Frontiers__MapWorksDataEntryDebugLogProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWorksDataEntryDebugLogProperty, UnknownData_KMU2, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapWorksDataEntryDebugLogProperty, 0x0048);
		}

		// class UMapWorksManager : public UActorComponent
		TEST_METHOD(Class__Frontiers__MapWorksManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWorksManager, UnknownData_49WH, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWorksManager, AllMapWorksParams, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWorksManager, MaxLevel, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWorksManager, LevelsPerChallengeLevel, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWorksManager, MinChallengeLevel, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWorksManager, UnknownData_2ALS, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapWorksManager, 0x0150);
		}

		// class UMapWorksObjectComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__MapWorksObjectComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWorksObjectComponent, MapWorksSpawnEntries, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWorksObjectComponent, SpokeTag, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWorksObjectComponent, MapWorksObjectTags, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWorksObjectComponent, bRandomizeSpoke, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWorksObjectComponent, UnknownData_07KZ, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWorksObjectComponent, MapItemRowName, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWorksObjectComponent, UnknownData_QN4B, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapWorksObjectComponent, 0x00F8);
		}

		// class UMapWorksGadgetComponent : public UMapWorksObjectComponent
		TEST_METHOD(Class__Frontiers__MapWorksGadgetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWorksGadgetComponent, UnknownData_HU1K, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapWorksGadgetComponent, 0x0100);
		}

		// class UMeshAttachmentComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Frontiers__MeshAttachmentComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshAttachmentComponent, UnknownData_MMSW, 0x04D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshAttachmentComponent, 0x04E0);
		}

		// class ULODAutomationTargets : public UObject
		TEST_METHOD(Class__Frontiers__LODAutomationTargets)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODAutomationTargets, Settings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULODAutomationTargets, 0x0038);
		}

		// class UFXSkeletalMeshComponent : public USkeletalMeshComponent
		TEST_METHOD(Class__Frontiers__FXSkeletalMeshComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFXSkeletalMeshComponent, 0x0ED0);
		}

		// class UMeshShellComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__MeshShellComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshShellComponent, UnknownData_TUQG, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshShellComponent, ShellComponents, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshShellComponent, PosableShellComponents, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshShellComponent, 0x0110);
		}

		// class UMetricsLoggerComponent : public UPlayerComponent
		TEST_METHOD(Class__Frontiers__MetricsLoggerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetricsLoggerComponent, bDamageClearedAfterTime, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetricsLoggerComponent, UnknownData_GK0K, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetricsLoggerComponent, DamageRecordHistoryTime, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetricsLoggerComponent, NearbyMonstersWhenDiedRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetricsLoggerComponent, UnknownData_N0JH, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMetricsLoggerComponent, 0x00F0);
		}

		// class USpawnDataEntryAddMinionByName : public USpawnEntryBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryAddMinionByName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnDataEntryAddMinionByName, UnknownData_PD0X, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryAddMinionByName, 0x0040);
		}

		// class USpawnDataEntryAddMinionByFilter : public USpawnDataEntryGameplayTags
		TEST_METHOD(Class__Frontiers__SpawnDataEntryAddMinionByFilter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryAddMinionByFilter, 0x0050);
		}

		// class USpawnDataEntryGotoMinionSpawnRow : public USpawnDataEntryGotoSpawnRowBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryGotoMinionSpawnRow)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryGotoMinionSpawnRow, 0x0038);
		}

		// class USpawnDataEntryAddMinionSkillByName : public USpawnEntryBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryAddMinionSkillByName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnDataEntryAddMinionSkillByName, UnknownData_ZOY9, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryAddMinionSkillByName, 0x0048);
		}

		// class AMissile : public AActor
		TEST_METHOD(Class__Frontiers__Missile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, UnknownData_KWYV, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, ProjectileMovement, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, ParticleSystems, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, AudioComponents, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, ProjectileSpeed, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, ProjectileGravity, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, ProjectileLift, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, ProjectileArcHeight, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, bTrajectoryUsesRotation, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, bDoesAreaOfEffect, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, UnknownData_H0VO, 0x0272);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, DamageRadius, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, bHitActors, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, bAreaDamageOnExpire, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, bPierceActors, 0x027A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, bAreaDamageOnHit, 0x027B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, bPierceEnvironment, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, bAreaDamageOnHitEnvironment, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, bStartSeekingOnTargetFound, 0x027E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, bAdjustSpeedToLifeSpan, 0x027F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, InteractionFilter, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, ActorsToIgnore, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, WorldCollisionRadius, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, ActorCollisionRadius, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, WorldCollision, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, ActorCollision, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, UnknownData_LKPE, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, HitImpactEffects, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, AreaDamageImpactEffects, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, ExpireImpactEffects, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, bUseMissileOrientationForImpact, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, bPlayMeleeHitOnTarget, 0x0611);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, UnknownData_O26Y, 0x0612);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, Traits, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, SkillDelegate, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, UnknownData_5XFT, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, ImpactMode, 0x0629);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, UnknownData_GM4W, 0x062A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, bIgnoreSyncId, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, bStickInTarget, 0x0631);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, UnknownData_U9HE, 0x0632);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, AttachmentInfo, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile, UnknownData_KSC2, 0x0668);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMissile, 0x0680);
		}

		// class USkillAnimNotify_ConfigurableActivationCost : public USkillAnimNotify
		TEST_METHOD(Class__Frontiers__SkillAnimNotify_ConfigurableActivationCost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillAnimNotify_ConfigurableActivationCost, bPayActivationCost, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillAnimNotify_ConfigurableActivationCost, UnknownData_GPE4, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillAnimNotify_ConfigurableActivationCost, 0x0060);
		}

		// class UAnimNotify_Missile : public USkillAnimNotify_ConfigurableActivationCost
		TEST_METHOD(Class__Frontiers__AnimNotify_Missile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_Missile, FiringData, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_Missile, 0x00D0);
		}

		// class UModalWidgetComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__ModalWidgetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalWidgetComponent, ConfirmationModal, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalWidgetComponent, bOperateOnAccept, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalWidgetComponent, UnknownData_OCMG, 0x0311);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModalWidgetComponent, 0x0318);
		}

		// class AModularWeaponTemplate : public AActor
		TEST_METHOD(Class__Frontiers__ModularWeaponTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AModularWeaponTemplate, SourceMaterial, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AModularWeaponTemplate, TemplateParent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AModularWeaponTemplate, 0x0230);
		}

		// class UMonsterChampionComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__MonsterChampionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterChampionComponent, bShouldPlayChampionSpawnEffects, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterChampionComponent, bShouldPlayChampionDeathEffects, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterChampionComponent, UnknownData_5T1L, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterChampionComponent, PackMembers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterChampionComponent, PendingCount, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterChampionComponent, MonsterSpawnType, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterChampionComponent, UnknownData_NHEY, 0x00DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterChampionComponent, ChampionNameString, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterChampionComponent, ChampionPackNameString, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterChampionComponent, UnknownData_PIWS, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMonsterChampionComponent, 0x0118);
		}

		// class UMonsterManagerPlayerComponent : public UPlayerComponent
		TEST_METHOD(Class__Frontiers__MonsterManagerPlayerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterManagerPlayerComponent, UnknownData_JILY, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterManagerPlayerComponent, Drama, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterManagerPlayerComponent, State, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterManagerPlayerComponent, UnknownData_4WNO, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterManagerPlayerComponent, TimeStateStarted, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterManagerPlayerComponent, PeakDrama, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterManagerPlayerComponent, UnknownData_XL5V, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterManagerPlayerComponent, StateLengthsInSeconds, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterManagerPlayerComponent, UnknownData_E1AO, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMonsterManagerPlayerComponent, 0x00E8);
		}

		// class UMonsterManagerComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__MonsterManagerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterManagerComponent, UnknownData_AOFJ, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterManagerComponent, ChampionComponentClass, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterManagerComponent, SpawnerActiveChance, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterManagerComponent, DefaultMonsterLevel, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterManagerComponent, PlayerCountRange, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterManagerComponent, ChampionSpawnerSearchRadiusCm, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterManagerComponent, ChampionSpawnerCooldown, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterManagerComponent, UnknownData_LWZP, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterManagerComponent, MonsterSpawnTypeTuningGroups, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterManagerComponent, RelaxAfterDramaIsBelow, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterManagerComponent, MonsterSpawnerMaxDistance, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterManagerComponent, MonsterSpawnerMinDistance, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterManagerComponent, DespawnDistance, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterManagerComponent, MonsterOffscreenDistance, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterManagerComponent, MonsterDramaDistance, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterManagerComponent, DefaultMonsterDrama, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterManagerComponent, DefaultMonsterAudioDrama, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterManagerComponent, DeadMonsterDramaMultiplier, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterManagerComponent, ChampionMonsterDramaMultiplier, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterManagerComponent, SpawnerRefillDelayInSeconds, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterManagerComponent, MonstersPerFrameLimit, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterManagerComponent, UnknownData_AOSC, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMonsterManagerComponent, 0x01D8);
		}

		// class UMonsterSpawnComponentInterface : public UInterface
		TEST_METHOD(Class__Frontiers__MonsterSpawnComponentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMonsterSpawnComponentInterface, 0x0028);
		}

		// class UMonsterSpawnSkillTargetComponent : public UArrowComponent
		TEST_METHOD(Class__Frontiers__MonsterSpawnSkillTargetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterSpawnSkillTargetComponent, MaxUses, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterSpawnSkillTargetComponent, UnknownData_XBUU, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterSpawnSkillTargetComponent, Weight, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterSpawnSkillTargetComponent, UnknownData_Z29R, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMonsterSpawnSkillTargetComponent, 0x0470);
		}

		// class UMonsterSpawnSphere : public USphereComponent
		TEST_METHOD(Class__Frontiers__MonsterSpawnSphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterSpawnSphere, UnknownData_YQMC, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterSpawnSphere, Data, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterSpawnSphere, UnknownData_ZNVQ, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMonsterSpawnSphere, 0x0490);
		}

		// class UMonsterSpawnBox : public UBoxComponent
		TEST_METHOD(Class__Frontiers__MonsterSpawnBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterSpawnBox, UnknownData_JVTS, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterSpawnBox, Data, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMonsterSpawnBox, 0x0490);
		}

		// class UMonsterSpawnPosition : public UArrowComponent
		TEST_METHOD(Class__Frontiers__MonsterSpawnPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterSpawnPosition, UnknownData_PNYL, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterSpawnPosition, UnknownData_XCXN, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterSpawnPosition, Data, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMonsterSpawnPosition, 0x0480);
		}

		// class UGotoMonsterSpawnRow : public USpawnDataEntryGotoSpawnRowBase
		TEST_METHOD(Class__Frontiers__GotoMonsterSpawnRow)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGotoMonsterSpawnRow, 0x0038);
		}

		// class USetMonsterPackSize : public USpawnEntryBase
		TEST_METHOD(Class__Frontiers__SetMonsterPackSize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetMonsterPackSize, UnknownData_9ZAF, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetMonsterPackSize, 0x0038);
		}

		// class USetMonsterPackSizeDirect : public USpawnEntryBase
		TEST_METHOD(Class__Frontiers__SetMonsterPackSizeDirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetMonsterPackSizeDirect, UnknownData_2IA4, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetMonsterPackSizeDirect, 0x0038);
		}

		// class USetMonsterChampions : public USpawnEntryBase
		TEST_METHOD(Class__Frontiers__SetMonsterChampions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetMonsterChampions, UnknownData_0DI0, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetMonsterChampions, 0x0038);
		}

		// class UAddMonsterByFilter : public USpawnDataEntryGameplayTags
		TEST_METHOD(Class__Frontiers__AddMonsterByFilter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddMonsterByFilter, 0x0050);
		}

		// class UAddMonsterByName : public USpawnEntryBase
		TEST_METHOD(Class__Frontiers__AddMonsterByName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddMonsterByName, UnknownData_59BA, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddMonsterByName, 0x0040);
		}

		// class UAddChampionMonsterByName : public UAddMonsterByName
		TEST_METHOD(Class__Frontiers__AddChampionMonsterByName)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddChampionMonsterByName, 0x0040);
		}

		// class UIncrementMonsterPackSize : public USpawnEntryBase
		TEST_METHOD(Class__Frontiers__IncrementMonsterPackSize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIncrementMonsterPackSize, UnknownData_3BVB, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIncrementMonsterPackSize, 0x0038);
		}

		// class AMonsterSpawner : public AActor
		TEST_METHOD(Class__Frontiers__MonsterSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner, UnknownData_1KGA, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner, bSpawnEnabled, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner, bAlwaysRollAsActive, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner, UnknownData_4EW4, 0x022A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner, ActiveChance, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner, bOverrideMinDistance, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner, UnknownData_DUHB, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner, MinDistanceOverride, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner, MonsterSpawnEntries, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner, bUseFallbackSpawnSkills, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner, bVerifyNavMeshBeforeSpawning, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner, bIgnoreSpawnCollision, 0x024A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner, UnknownData_6LNI, 0x024B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner, RespawnAtLivingMonsterPercent, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner, OnMonsterSpawned, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner, GameplayTags, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner, bUnlimitedRespawns, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner, UnknownData_8CSC, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner, Respawns, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner, UnknownData_UXHG, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner, MinSpawnInterval, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner, MaxSpawnInterval, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner, MinBatchSize, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner, MaxBatchSize, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner, PacksPerSpawnRequest, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner, bAllowChampions, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner, UnknownData_T62L, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner, GameplayTagContainerAll, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner, StatusEffectsToApply, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMonsterSpawner, UnknownData_PIH6, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMonsterSpawner, 0x0310);
		}

		// class AMonsterSpawnerDeactivator : public ATriggerBox
		TEST_METHOD(Class__Frontiers__MonsterSpawnerDeactivator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMonsterSpawnerDeactivator, 0x0228);
		}

		// class AMonsterSpawnerActivator : public ATriggerBox
		TEST_METHOD(Class__Frontiers__MonsterSpawnerActivator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMonsterSpawnerActivator, 0x0228);
		}

		// class UMonsterSpawnerBoss : public UActorComponent
		TEST_METHOD(Class__Frontiers__MonsterSpawnerBoss)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterSpawnerBoss, WarpBackStatusEffect, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterSpawnerBoss, bUseBossRowHandle, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterSpawnerBoss, UnknownData_CAR7, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterSpawnerBoss, BossRowHandle, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterSpawnerBoss, BossIndexInAreaTable, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterSpawnerBoss, UnknownData_MLP4, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMonsterSpawnerBoss, 0x00D8);
		}

		// class UMonsterSpawnerTrigger : public USceneComponent
		TEST_METHOD(Class__Frontiers__MonsterSpawnerTrigger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterSpawnerTrigger, UnknownData_GE3C, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterSpawnerTrigger, DelayToReset, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterSpawnerTrigger, UnknownData_3E6K, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMonsterSpawnerTrigger, 0x0210);
		}

		// class UMonsterSpawnerTriggerByOperate : public UActorComponent
		TEST_METHOD(Class__Frontiers__MonsterSpawnerTriggerByOperate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterSpawnerTriggerByOperate, UnknownData_FIYL, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterSpawnerTriggerByOperate, MonsterSpawners, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMonsterSpawnerTriggerByOperate, 0x00C8);
		}

		// class UMulticastFunctionComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__MulticastFunctionComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastFunctionComponent, 0x00B0);
		}

		// class USpawnDataEntryGotoNameSpawnRow : public USpawnDataEntryGotoSpawnRowBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryGotoNameSpawnRow)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryGotoNameSpawnRow, 0x0038);
		}

		// class USpawnDataEntryGotoNameSpawnRowByPackSize : public USpawnDataEntryGotoNameSpawnRow
		TEST_METHOD(Class__Frontiers__SpawnDataEntryGotoNameSpawnRowByPackSize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnDataEntryGotoNameSpawnRowByPackSize, UnknownData_2HLC, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryGotoNameSpawnRowByPackSize, 0x0048);
		}

		// class USpawnDataEntrySetNameParameter : public USpawnEntryBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntrySetNameParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnDataEntrySetNameParameter, UnknownData_7XG5, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntrySetNameParameter, 0x0050);
		}

		// class USpawnDataEntryInitializeName : public USpawnEntryBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryInitializeName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnDataEntryInitializeName, UnknownData_78SM, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryInitializeName, 0x0040);
		}

		// class UNarratorComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__NarratorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNarratorComponent, QuipGroups, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNarratorComponent, QuipTriggerDelaySeconds, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNarratorComponent, UnknownData_3IBF, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNarratorComponent, 0x0150);
		}

		// class UActorPoolComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__ActorPoolComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorPoolComponent, ActorPoolsByClass, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorPoolComponent, UnknownData_FEG7, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorPoolComponent, 0x0128);
		}

		// class UOfflineStaticContentSave : public USaveGame
		TEST_METHOD(Class__Frontiers__OfflineStaticContentSave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfflineStaticContentSave, ContentVersion, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfflineStaticContentSave, UnknownData_P0XM, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfflineStaticContentSave, DownloadedContent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfflineStaticContentSave, UnknownData_MOIG, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOfflineStaticContentSave, 0x0090);
		}

		// class UOperableComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__OperableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperableComponent, UnknownData_SS5R, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperableComponent, bIsEnabled, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperableComponent, bIsAutoOperateEnabled, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperableComponent, UnknownData_G5YZ, 0x00BA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOperableComponent, 0x00C0);
		}

		// class UPartyComponent : public UPlayerComponent
		TEST_METHOD(Class__Frontiers__PartyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyComponent, UnknownData_5H7A, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyComponent, PartyInviteToastClass, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyComponent, NearbyPartyMemberStatusClass, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyComponent, PartyInstanceResetToastClass, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyComponent, Party, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyComponent, PartyIdHash, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyComponent, UnknownData_GG12, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyComponent, PendingInvites, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyComponent, UnknownData_JZPX, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyComponent, 0x01F0);
		}

		// class UPBRSwatch : public UObject
		TEST_METHOD(Class__Frontiers__PBRSwatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPBRSwatch, MaterialSwatch, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPBRSwatch, 0x0030);
		}

		// class APerPlayerActorNode : public AActor
		TEST_METHOD(Class__Frontiers__PerPlayerActorNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APerPlayerActorNode, UnknownData_3HXV, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APerPlayerActorNode, PerPlayerActors, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APerPlayerActorNode, ActorClassEntries, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APerPlayerActorNode, OwnedGameplayTags, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APerPlayerActorNode, 0x0268);
		}

		// class UPersistenceServerComm : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Frontiers__PersistenceServerComm)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPersistenceServerComm, 0x0028);
		}

		// class APersistentEffectsActor : public AActor
		TEST_METHOD(Class__Frontiers__PersistentEffectsActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APersistentEffectsActor, UnknownData_4EIV, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APersistentEffectsActor, 0x0230);
		}

		// class UPetSpawnOperableComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__PetSpawnOperableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetSpawnOperableComponent, UnknownData_DMVR, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetSpawnOperableComponent, PetSpawnEntry, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetSpawnOperableComponent, SpawnTags, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPetSpawnOperableComponent, 0x0110);
		}

		// class APhotobooth : public AItemActor
		TEST_METHOD(Class__Frontiers__Photobooth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhotobooth, PortraitRenderTarget, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhotobooth, PortraitRenderMaterial, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhotobooth, 0x03A0);
		}

		// class UPlatformComponent : public UPlayerComponent
		TEST_METHOD(Class__Frontiers__PlatformComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformComponent, 0x00B0);
		}

		// class UPlayerAffixComponent : public UPlayerComponent
		TEST_METHOD(Class__Frontiers__PlayerAffixComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAffixComponent, UnknownData_75TZ, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerAffixComponent, 0x00C8);
		}

		// class UPlayerBotBehaviorComponent : public UPlayerComponent
		TEST_METHOD(Class__Frontiers__PlayerBotBehaviorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerBotBehaviorComponent, BotController, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerBotBehaviorComponent, ServerBotController, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerBotBehaviorComponent, ClientBotController, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerBotBehaviorComponent, ServerBotBehavior, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerBotBehaviorComponent, ClientBotBehavior, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerBotBehaviorComponent, 0x00D8);
		}

		// class UNameDataComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__NameDataComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNameDataComponent, DisplayName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNameDataComponent, Description, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNameDataComponent, UnknownData_GYOU, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNameDataComponent, 0x00F8);
		}

		// class UPlayerCharacterDataComponent : public UNameDataComponent
		TEST_METHOD(Class__Frontiers__PlayerCharacterDataComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCharacterDataComponent, AccountName, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCharacterDataComponent, UnknownData_KDPG, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerCharacterDataComponent, 0x0128);
		}

		// class UPlayerCraftingComponent : public UPlayerComponent
		TEST_METHOD(Class__Frontiers__PlayerCraftingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCraftingComponent, CraftingResultsModalDefinition, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCraftingComponent, CraftingResultsToastDefinition, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCraftingComponent, CraftingQueues, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCraftingComponent, UnknownData_4961, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCraftingComponent, SeenUnlockableRecipeIndices, 0x05F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerCraftingComponent, 0x0600);
		}

		// class UPlayerDialogueComponent : public UPlayerComponent
		TEST_METHOD(Class__Frontiers__PlayerDialogueComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerDialogueComponent, BubbleDialogueClass, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerDialogueComponent, ModalDialogueWidgetClass, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerDialogueComponent, QuestOfferedDialogueWidgetClass, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerDialogueComponent, UnknownData_ZF5U, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerDialogueComponent, 0x0128);
		}

		// class UPlayerLevelComponent : public UPlayerComponent
		TEST_METHOD(Class__Frontiers__PlayerLevelComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerLevelComponent, SkillRegretLevels, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerLevelComponent, LevelUpSkill, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerLevelComponent, 0x00E8);
		}

		// class UPlayerLevelManagerComponent : public UPlayerComponent
		TEST_METHOD(Class__Frontiers__PlayerLevelManagerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerLevelManagerComponent, UnknownData_R856, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerLevelManagerComponent, InnerLoadRadius, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerLevelManagerComponent, LoadRadius, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerLevelManagerComponent, UnloadRadius, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerLevelManagerComponent, UnknownData_K0N9, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerLevelManagerComponent, AreaGuid, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerLevelManagerComponent, UnknownData_AWOD, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerLevelManagerComponent, 0x0180);
		}

		// class APlayerLight : public AActor
		TEST_METHOD(Class__Frontiers__PlayerLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerLight, TODPlayerLightIntensity, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerLight, StaticLightDirection, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerLight, GroundLightDistance, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerLight, TimeOfDayPercent, 0x0234);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerLight, 0x0238);
		}

		// class UPlayerPortalComponent : public UPlayerComponent
		TEST_METHOD(Class__Frontiers__PlayerPortalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerPortalComponent, OwnPortalAreaDataName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerPortalComponent, OwnPortalSpawnLocationName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerPortalComponent, OwnPortalZoneId, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerPortalComponent, OwnPortalZoneSessionId, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerPortalComponent, PortalReturnAreaDataName, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerPortalComponent, PortalReturnSpawnLocationName, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerPortalComponent, PortalReturnOwnerName, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerPortalComponent, WaypointAreaDataNames, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerPortalComponent, bHasMapWorksPortal, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerPortalComponent, UnknownData_2JV7, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerPortalComponent, SavedMapworksParams, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerPortalComponent, PortalClass, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerPortalComponent, MapWorksPortalClass, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerPortalComponent, EndlessDungeonPortalClass, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerPortalComponent, WaypointActorClass, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerPortalComponent, Destinations, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerPortalComponent, UnknownData_PX8L, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerPortalComponent, PortalSpawnDistance, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerPortalComponent, MaxWaypointDistance, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerPortalComponent, PortalToPartyMemberMinDistance, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerPortalComponent, UnknownData_U06D, 0x0214);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerPortalComponent, 0x0218);
		}

		// class UPlayerQuestComponent : public UQuestUpdater
		TEST_METHOD(Class__Frontiers__PlayerQuestComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerQuestComponent, UnknownData_UE1P, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerQuestComponent, MapMarkerClass, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerQuestComponent, RateLimitDelay, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerQuestComponent, UnknownData_RJLV, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerQuestComponent, QuestRewardsChestClass, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerQuestComponent, ForcedPlayerRespecNotifyQuest, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerQuestComponent, UnknownData_BHVW, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerQuestComponent, 0x02B8);
		}

		// class UPlayerSaveComponent : public UPlayerComponent
		TEST_METHOD(Class__Frontiers__PlayerSaveComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerSaveComponent, UnknownData_PNDW, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerSaveComponent, SaveTimeSeconds, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerSaveComponent, UnknownData_7LCT, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerSaveComponent, 0x00F8);
		}

		// class ATLCharacter : public ACharacter
		TEST_METHOD(Class__Frontiers__TLCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, UnknownData_0YOH, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, UnknownData_31BU, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, NeverShowOcclusionShader, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, UnknownData_J7G5, 0x0511);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, SpawnTime, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, BaseMovementSpeed, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, bIgnoreEnergyCosts, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, UnknownData_L20R, 0x051D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, bIsTargetable, 0x051E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, UnknownData_FE5I, 0x051F);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, BehaviorTree, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, SkillManager, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, DefaultPortrait, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, LightRigBlueprint, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, PhotoboothClass, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, LegacyCapsuleRadius, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, UnknownData_YC3D, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, bSaveCharacter, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, UnknownData_LERE, 0x05F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, SpawnedLightRig, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, SpawnedFrom, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, ActorMortalityComponent, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, BossMonsterComponent, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, MonsterChampionComponent, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, ActiveTraitRows, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, Team, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, UnknownData_N5EO, 0x0649);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, Traits, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, Inventory, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, CombatFX, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, GameplayTags, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, UnknownData_C5HI, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, DataRowName, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, UnknownData_N5VG, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, FootstepEvent, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, bAllowMeshOffsetFromRoot, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, UnknownData_LVDT, 0x06B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, TempCollisionIgnores, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, UnknownData_OES5, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, TLReplicatedMovement, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, UnknownData_EJTL, 0x06EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, CachedHitboxCapsule, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, UnknownData_0CIC, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, MovementReplicationPerSecond, 0x06FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, MovementReplicationToleranceSquared, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, UnknownData_TZZM, 0x0704);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, GroundZOffsetOverride, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, bIsSelected, 0x0724);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCharacter, UnknownData_EJ1S, 0x0725);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATLCharacter, 0x0730);
		}

		// class AWaitForLoadPawn : public ATLCharacter
		TEST_METHOD(Class__Frontiers__WaitForLoadPawn)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWaitForLoadPawn, 0x0730);
		}

		// class UPlayerUINotificationComponent : public UPlayerComponent
		TEST_METHOD(Class__Frontiers__PlayerUINotificationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerUINotificationComponent, UnknownData_QEDE, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerUINotificationComponent, 0x00E8);
		}

		// class UPlayerVisibility : public UActorComponent
		TEST_METHOD(Class__Frontiers__PlayerVisibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerVisibility, UnknownData_L2Y9, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerVisibility, CylinderRadius, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerVisibility, AngleToPlayerThreshold, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerVisibility, OffsetTowardsCamera, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerVisibility, OverlappedActors, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerVisibility, CameraComponent, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerVisibility, 0x00E8);
		}

		// class APortalProxy : public AActor
		TEST_METHOD(Class__Frontiers__PortalProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APortalProxy, UnknownData_MA6G, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APortalProxy, ChildPortalEntries, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APortalProxy, 0x0380);
		}

		// class APlayerPortalProxy : public APortalProxy
		TEST_METHOD(Class__Frontiers__PlayerPortalProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerPortalProxy, UnknownData_OMQ0, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerPortalProxy, 0x0388);
		}

		// class AMapWorksPortalProxy : public APortalProxy
		TEST_METHOD(Class__Frontiers__MapWorksPortalProxy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMapWorksPortalProxy, 0x0380);
		}

		// class AWarpGadget : public AGadget
		TEST_METHOD(Class__Frontiers__WarpGadget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWarpGadget, QuestForDeactiveWarp, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWarpGadget, WarpIndex, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWarpGadget, bHideWithInvalidDestination, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWarpGadget, UnknownData_TKMQ, 0x04AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWarpGadget, SpawnLocation, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWarpGadget, UnknownData_FQ4H, 0x04BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWarpGadget, 0x04C0);
		}

		// class APortal : public AWarpGadget
		TEST_METHOD(Class__Frontiers__Portal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APortal, PlayerDisplayName, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APortal, OwnerAccountIdHash, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APortal, WarpToIndex, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APortal, UnknownData_N676, 0x04E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APortal, DestinationAreaName, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APortal, PortalDestinationType, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APortal, UnknownData_SRRV, 0x04ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::APortal, MapWorks, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APortal, OwnerProxy, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::APortal, DestinationAccountId, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APortal, bDestinationPlayerIsInMapworks, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APortal, UnknownData_EDH3, 0x05B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APortal, DestinationPlayerMapworksBaseAreaName, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APortal, DestinationPlayerMapworksNameSeed, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APortal, DungeonSelection, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APortal, UnknownData_4FNU, 0x0608);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APortal, 0x0640);
		}

		// class APortraitLighting : public AActor
		TEST_METHOD(Class__Frontiers__PortraitLighting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APortraitLighting, KeyLightBoost, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APortraitLighting, FillLightBoost, 0x0224);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APortraitLighting, 0x0228);
		}

		// class UPostProcessFlagInterface : public UInterface
		TEST_METHOD(Class__Frontiers__PostProcessFlagInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPostProcessFlagInterface, 0x0028);
		}

		// class UPrecreatedInventoryEntryInterface : public UInterface
		TEST_METHOD(Class__Frontiers__PrecreatedInventoryEntryInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrecreatedInventoryEntryInterface, 0x0028);
		}

		// class UPreviewActorComponent : public USceneComponent
		TEST_METHOD(Class__Frontiers__PreviewActorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewActorComponent, UnknownData_C5GB, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewActorComponent, BaseTransparentMaterial, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewActorComponent, TransparentMaterialOverride, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewActorComponent, RotationCurve, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewActorComponent, UnknownData_F9CJ, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewActorComponent, PreviewActors, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewActorComponent, UnknownData_S8YV, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewActorComponent, 0x02C0);
		}

		// class UPreviewActorPositionComponent : public USceneComponent
		TEST_METHOD(Class__Frontiers__PreviewActorPositionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewActorPositionComponent, UnknownData_47G4, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewActorPositionComponent, 0x0200);
		}

		// class UPreviewAnchorWidget : public UUserWidget
		TEST_METHOD(Class__Frontiers__PreviewAnchorWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewAnchorWidget, 0x0260);
		}

		// class UPreviewSizeComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__PreviewSizeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewSizeComponent, Scale, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewSizeComponent, PositionOffset, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewSizeComponent, RotationOffset, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewSizeComponent, UnknownData_HAJS, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewSizeComponent, 0x00D0);
		}

		// class UProcComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__ProcComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProcComponent, ActiveProcs, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProcComponent, DefaultProcs, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProcComponent, 0x0110);
		}

		// class UQuestEvent : public UObject
		TEST_METHOD(Class__Frontiers__QuestEvent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestEvent, 0x0028);
		}

		// class UQuestManager : public UActorComponent
		TEST_METHOD(Class__Frontiers__QuestManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestManager, UnknownData_81DU, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestManager, QuestDefArray, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestManager, 0x0238);
		}

		// class UQuestIndicatorComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Frontiers__QuestIndicatorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestIndicatorComponent, UnknownData_CGJK, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestIndicatorComponent, bCheckHasRelevantTaskForActor, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestIndicatorComponent, UnknownData_BTZW, 0x04E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestIndicatorComponent, 0x04F0);
		}

		// class UQuestObjectComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__QuestObjectComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestObjectComponent, UnknownData_YZHU, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestObjectComponent, QuestObjectRow, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestObjectComponent, 0x00D8);
		}

		// class UTLRandomFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Frontiers__TLRandomFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLRandomFunctionLibrary, 0x0028);
		}

		// class URecipeManager : public UActorComponent
		TEST_METHOD(Class__Frontiers__RecipeManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URecipeManager, UnknownData_25FT, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecipeManager, Recipes, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecipeManager, 0x00D8);
		}

		// class USplineFollowerComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__SplineFollowerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineFollowerComponent, NumComponentsPerSegment, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineFollowerComponent, UnknownData_HFIE, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineFollowerComponent, FollowerObjects, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineFollowerComponent, 0x0108);
		}

		// class USplineColliderFollowerComponent : public USplineFollowerComponent
		TEST_METHOD(Class__Frontiers__SplineColliderFollowerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineColliderFollowerComponent, CollisionExtents, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineColliderFollowerComponent, UnknownData_92GD, 0x0114);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineColliderFollowerComponent, 0x0118);
		}

		// class USplineEmitterFollowerComponent : public USplineFollowerComponent
		TEST_METHOD(Class__Frontiers__SplineEmitterFollowerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineEmitterFollowerComponent, ParticleSystem, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineEmitterFollowerComponent, bIsBeam, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineEmitterFollowerComponent, UnknownData_NGUJ, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineEmitterFollowerComponent, 0x0118);
		}

		// class USplineDynamicMeshFollowerComponent : public USplineFollowerComponent
		TEST_METHOD(Class__Frontiers__SplineDynamicMeshFollowerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineDynamicMeshFollowerComponent, Mesh, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineDynamicMeshFollowerComponent, SplineDropMaterialBase, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineDynamicMeshFollowerComponent, TimeOffset, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineDynamicMeshFollowerComponent, UnknownData_0SY2, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineDynamicMeshFollowerComponent, Materials, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineDynamicMeshFollowerComponent, MeshScale, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineDynamicMeshFollowerComponent, Offset, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineDynamicMeshFollowerComponent, bReceivesDecals, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineDynamicMeshFollowerComponent, UnknownData_UPMX, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineDynamicMeshFollowerComponent, OriginalMaterial, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineDynamicMeshFollowerComponent, 0x0150);
		}

		// class USplineStaticMeshFollowerComponent : public USplineFollowerComponent
		TEST_METHOD(Class__Frontiers__SplineStaticMeshFollowerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineStaticMeshFollowerComponent, Mesh, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineStaticMeshFollowerComponent, DropMaterialBase, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineStaticMeshFollowerComponent, timeDelayNext, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineStaticMeshFollowerComponent, UnknownData_LDH2, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineStaticMeshFollowerComponent, Materials, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineStaticMeshFollowerComponent, MeshScale, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineStaticMeshFollowerComponent, DistanceBetweenMeshes, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineStaticMeshFollowerComponent, bReceivesDecals, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineStaticMeshFollowerComponent, UnknownData_WNP9, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineStaticMeshFollowerComponent, OriginalMaterial, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineStaticMeshFollowerComponent, SplineMeshData, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineStaticMeshFollowerComponent, 0x0168);
		}

		// class USplineActorFollowerComponent : public USplineFollowerComponent
		TEST_METHOD(Class__Frontiers__SplineActorFollowerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineActorFollowerComponent, ActorClass, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineActorFollowerComponent, 0x0110);
		}

		// class USplineFollowerAudioComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__SplineFollowerAudioComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineFollowerAudioComponent, SplineFollower, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineFollowerAudioComponent, EventToPlay, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineFollowerAudioComponent, UnknownData_LOGQ, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineFollowerAudioComponent, 0x00D8);
		}

		// class UReplicatedSplineComponent : public USplineComponent
		TEST_METHOD(Class__Frontiers__ReplicatedSplineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicatedSplineComponent, PointDuration, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicatedSplineComponent, MaxSegments, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicatedSplineComponent, MaxLength, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicatedSplineComponent, MaxSegmentLength, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicatedSplineComponent, TickInterval, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicatedSplineComponent, bDestroyWhenFinished, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicatedSplineComponent, UnknownData_BZVK, 0x0551);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicatedSplineComponent, DestroyDelay, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicatedSplineComponent, bProjectInterpolatedPointsToNav, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicatedSplineComponent, UnknownData_KE9Y, 0x0559);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicatedSplineComponent, FollowActor, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicatedSplineComponent, ReplicatedSplinePoints, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicatedSplineComponent, UnknownData_6OXE, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicatedSplineComponent, SplineFollowers, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplicatedSplineComponent, UnknownData_VVQR, 0x05C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicatedSplineComponent, 0x05D0);
		}

		// class USelectableInterface : public UInterface
		TEST_METHOD(Class__Frontiers__SelectableInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelectableInterface, 0x0028);
		}

		// class AServerMemoryProfiler : public AActor
		TEST_METHOD(Class__Frontiers__ServerMemoryProfiler)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AServerMemoryProfiler, 0x0220);
		}

		// class UServerPerformanceMonitorComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__ServerPerformanceMonitorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerPerformanceMonitorComponent, UnknownData_GI9O, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UServerPerformanceMonitorComponent, 0x0108);
		}

		// class UService_FindTarget : public UBTService
		TEST_METHOD(Class__Frontiers__Service_FindTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UService_FindTarget, BlackboardKeyTargetActor, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UService_FindTarget, BlackboardKeyTargetLocation, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UService_FindTarget, SkillSlot, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UService_FindTarget, bTargetNearest, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UService_FindTarget, UnknownData_R3LC, 0x0082);
			CHEAT_GEAR_CHECK_OFFSET(CG::UService_FindTarget, SwitchTargetFrequencySeconds, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UService_FindTarget, bOnlyTargetsInRange, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UService_FindTarget, UnknownData_8TL4, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UService_FindTarget, 0x0090);
		}

		// class UService_TargetInstigator : public UBTService
		TEST_METHOD(Class__Frontiers__Service_TargetInstigator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UService_TargetInstigator, BlackboardKeyTargetActor, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UService_TargetInstigator, 0x0078);
		}

		// class UService_GetUnstuck : public UBTService
		TEST_METHOD(Class__Frontiers__Service_GetUnstuck)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UService_GetUnstuck, StuckRadius, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UService_GetUnstuck, StuckTimeout, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UService_GetUnstuck, TeleportRangeMin, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UService_GetUnstuck, TeleportRangeMax, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UService_GetUnstuck, 0x0080);
		}

		// class UService_PetFindTarget : public UBTService
		TEST_METHOD(Class__Frontiers__Service_PetFindTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UService_PetFindTarget, BlackboardKeyTargetActor, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UService_PetFindTarget, BlackboardKeyTargetLocation, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UService_PetFindTarget, SkillSlot, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UService_PetFindTarget, UnknownData_U94J, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UService_PetFindTarget, AggroRadius, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UService_PetFindTarget, 0x0088);
		}

		// class AShrine : public AGadget
		TEST_METHOD(Class__Frontiers__Shrine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AShrine, bIsMovable, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShrine, UnknownData_EJ01, 0x04A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShrine, ActiveVFX, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShrine, AvailableSkills, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShrine, Skill, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShrine, UnknownData_12ZC, 0x04C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShrine, 0x04D0);
		}

		// class USkill : public UObject
		TEST_METHOD(Class__Frontiers__Skill)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, Name, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, Type, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, AnimationHandedness, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, UnknownData_7M4J, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, ValidWeaponTypes, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, AnimationSlotNameBase, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bUsesIndividualClassMontage, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, UnknownData_0YN0, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, Montage, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, ClassMontages, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, AnimInstanceTag, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, ComboAnimSlotProgression, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, ComboWindowTime, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, UnknownData_TC7E, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, TurningBlendSpace, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bValidateTarget, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bIgnoreTargetPosition, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bUseRangeDesired, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, UnknownData_BYDW, 0x0133);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, RangeDesired, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bUseAngularRange, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, UnknownData_LXXZ, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, AngularRangeDegrees, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, MinRange, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bUseMinRange, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bFindFallbackTarget, 0x0145);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bEnforceZTolerance, 0x0146);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, UnknownData_Q013, 0x0147);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, ZTolerance, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, GamepadTargetRange, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, GamepadWallPushoffRange, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bGamepadTargetIgnoreTerrain, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, UnknownData_GNL8, 0x0155);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, Duration, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, MinimumDuration, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, ClickSlopRange, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, EarlyClickThresholdSeconds, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, LateClickThresholdSeconds, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, UnknownData_9O7C, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, AssetsToLoad, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, EnergyCostText, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bForceEnergyRequirement, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bCheckPetEnergyCost, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, UnknownData_K71W, 0x019A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, EnergyPool, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bIsChargeSkill, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bDisplayEnergyAsCooldown, 0x01B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, UnknownData_6E0C, 0x01B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, ConsumableItem, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, RequiredEquippedGameplayTags, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, NumRequiredEmptySlots, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, UnknownData_IFWZ, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, InventoryContainerClass, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, AllowedAreaGroupTypes, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, DisallowedAreaGroupTypes, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, QuestObjectFilter, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, AnimationCancelMode, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bCanBeInterrupted, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bIsPriority, 0x022A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bForceClientToStart, 0x022B);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bIsChanneling, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bRotateToFaceTarget, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bRotateInstantly, 0x022E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bLockToInitialTarget, 0x022F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bMoveWhileCasting, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bAllowRepeat, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bPersistAnimSlot, 0x0232);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bWantsTick, 0x0233);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bSendMetrics, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bServerOnlySecondary, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bShowGamepadButtonPrompt, 0x0236);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, UnknownData_AXEC, 0x0237);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, DamageFactor, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, UnknownData_1Z29, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, DamageFactorBalanceRows, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bUseProcRateFactor, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, UnknownData_6TUG, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, ProcRateFactor, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bUseProcRateOverride, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, UnknownData_08EX, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, ProcRateOverride, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bUseProcParamFactor, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, UnknownData_0BMO, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, ProcParamFactor, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bUseProcParamOverride, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, UnknownData_5B3O, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, ProcParamOverride, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, WeaponSlot, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, UnknownData_DSFG, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, DamageTypeOverride, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, UnknownData_NBVB, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, SkillTags, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, MaxQueueTime, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, UnknownData_1W8M, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, ProcRowHandle, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, UnknownData_K4KU, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, TargetDamageEffects, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, Offset, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, ParticleAttachPoint, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, UnknownData_E2ZM, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, CastEffects, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, TargetType, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bRequireReachableLocation, 0x03B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, UnknownData_UUMA, 0x03BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, TargetFilter, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bRangeCheckFollowsActorChains, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, UnknownData_F09H, 0x04B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, Description, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, Cooldown, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, bUseSoftEnergyCost, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, UnknownData_3H38, 0x04D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, EnergyCost, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, EnergyRequirement, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, SecondaryCosts, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, Icon, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill, UnknownData_3Z9J, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill, 0x0540);
		}

		// class UAnimNotify_PayActivationCost : public USkillAnimNotify
		TEST_METHOD(Class__Frontiers__AnimNotify_PayActivationCost)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PayActivationCost, 0x0058);
		}

		// class UAnimNotify_SkillHit01 : public USkillAnimNotify_ConfigurableActivationCost
		TEST_METHOD(Class__Frontiers__AnimNotify_SkillHit01)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_SkillHit01, 0x0060);
		}

		// class UAnimNotify_SkillHit02 : public USkillAnimNotify_ConfigurableActivationCost
		TEST_METHOD(Class__Frontiers__AnimNotify_SkillHit02)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_SkillHit02, 0x0060);
		}

		// class UAnimNotify_OffRootAnimation : public UAnimNotify
		TEST_METHOD(Class__Frontiers__AnimNotify_OffRootAnimation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_OffRootAnimation, 0x0038);
		}

		// class UAnimNotify_SkillInterface : public UInterface
		TEST_METHOD(Class__Frontiers__AnimNotify_SkillInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_SkillInterface, 0x0028);
		}

		// class ASkillBeam : public AActor
		TEST_METHOD(Class__Frontiers__SkillBeam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillBeam, UnknownData_CU0E, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillBeam, Radius, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillBeam, UnknownData_42RH, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillBeam, StatusEffectClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillBeam, UnknownData_BF9G, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillBeam, BeamEffectDefinition, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillBeam, CastEffectDefinition, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillBeam, ImpactEffectDefinition, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillBeam, TerrainImpactEffectDefinition, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillBeam, FizzleEffectDefinition, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillBeam, ImpactSoundEvent, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillBeam, TerrainImpactSoundEvent, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillBeam, FizzleSoundEvent, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillBeam, SkillDelegate, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillBeam, ActiveBeamEffects, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillBeam, ActiveBeamImpactEffects, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillBeam, MeshComp, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillBeam, HitActors, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillBeam, InstanceParams, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillBeam, PersistentEffects, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillBeam, UnknownData_QW4E, 0x0778);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkillBeam, 0x07B0);
		}

		// class USkillDelegate : public UActorComponent
		TEST_METHOD(Class__Frontiers__SkillDelegate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDelegate, UnknownData_5PLJ, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDelegate, bInheritFilterFromSkill, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDelegate, UnknownData_5XO2, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDelegate, InteractionFilter, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDelegate, Skill, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDelegate, UnknownData_N9OE, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillDelegate, 0x01C0);
		}

		// class USkillDelegateInterface : public UInterface
		TEST_METHOD(Class__Frontiers__SkillDelegateInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillDelegateInterface, 0x0028);
		}

		// class USkillEffects : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Frontiers__SkillEffects)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillEffects, 0x0028);
		}

		// class USkillList : public UActorComponent
		TEST_METHOD(Class__Frontiers__SkillList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillList, SkillSet, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillList, UnknownData_URTH, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillList, SkillEntries, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillList, Priority, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillList, UnknownData_3F4R, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillList, GameplayTags, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillList, bIgnoreFilter, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillList, bOnlyAddIfSlotEmpty, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillList, UnknownData_KF1P, 0x00F2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillList, 0x00F8);
		}

		// class USkillManager : public UPlayerComponent
		TEST_METHOD(Class__Frontiers__SkillManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, UnknownData_OAR5, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, SkillSlotUnlockLevels, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, Dummy, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, UnknownData_JFMJ, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, Overrides, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, GenericSkillAnimation, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, Skills, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, UnknownData_H9HX, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, CachedPreviousTarget, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, bReplicateTargetAcquisition, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, UnknownData_FXX1, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, CachedNewTarget, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, bNoCooldown, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, UnknownData_T9ES, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, DisableAllSkillsCounter, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, UnknownData_7TEQ, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, ServerSkillActiveData, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, ServerInitialSkillActiveData, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, ServerSkillToRetry, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, UnknownData_344T, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, bCanVerboseLog, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, UnknownData_ER8W, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, MaximumSkillPoints, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, SkillActiveData, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, ActiveSkillSet, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, OverrideSkillSet, 0x0449);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, UnknownData_49XI, 0x044A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, ActiveSkillInstanceId, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, UnknownData_3ZHO, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, SkillSlotPressed, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, UnknownData_5SQM, 0x0455);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, ServerSkillTargetLocation, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, UnknownData_9I6Z, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, CooldownsBySkill, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, ClientCooldownsBySkill, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, GlobalCooldownEndTime, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, UnknownData_J358, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, DisabledSkillTags, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, UnknownData_XR25, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, DisabledSkillSlotCounters, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, AssetsLoadedPerSkill, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, UnknownData_5BCP, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, NextBasicWeaponSlot, 0x0561);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, UnknownData_L2FZ, 0x0562);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, LastSkillRespecTime, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, ActiveCastEffects, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillManager, UnknownData_AU3G, 0x05A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillManager, 0x05D8);
		}

		// class USkillMinions : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Frontiers__SkillMinions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillMinions, 0x0028);
		}

		// class USkillMovement : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Frontiers__SkillMovement)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillMovement, 0x0028);
		}

		// class USkillPulseComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__SkillPulseComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillPulseComponent, SkillSlot, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillPulseComponent, SkillSet, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillPulseComponent, UnknownData_KLUN, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillPulseComponent, PulseInterval, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillPulseComponent, UnknownData_3VE0, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillPulseComponent, 0x00C0);
		}

		// class UAnimNotify_SkillShape : public USkillAnimNotify_ConfigurableActivationCost
		TEST_METHOD(Class__Frontiers__AnimNotify_SkillShape)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_SkillShape, PlaceShapeData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_SkillShape, ShapeDuration, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_SkillShape, UnknownData_HNNN, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_SkillShape, 0x00B8);
		}

		// class UAnimNotifyState_SkillShape : public USkillAnimNotifyState
		TEST_METHOD(Class__Frontiers__AnimNotifyState_SkillShape)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_SkillShape, PlaceShapeData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_SkillShape, 0x00A0);
		}

		// class ASkillSlotDisableBox : public ATriggerBox
		TEST_METHOD(Class__Frontiers__SkillSlotDisableBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillSlotDisableBox, DisabledSkillSlots, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkillSlotDisableBox, 0x0238);
		}

		// class USkillTargeting : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Frontiers__SkillTargeting)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillTargeting, 0x0028);
		}

		// class USpawnDataEntryGameplayTagStems : public USpawnEntryBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryGameplayTagStems)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnDataEntryGameplayTagStems, UnknownData_2IH0, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryGameplayTagStems, 0x0070);
		}

		// class USpawnDataEntryLevelDelta : public USpawnEntryBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryLevelDelta)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnDataEntryLevelDelta, UnknownData_AUDL, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryLevelDelta, 0x0038);
		}

		// class USpawnDataEntryGameplayTagAll : public USpawnDataEntryGameplayTags
		TEST_METHOD(Class__Frontiers__SpawnDataEntryGameplayTagAll)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryGameplayTagAll, 0x0050);
		}

		// class USpawnDataEntryGameplayTagAny : public USpawnDataEntryGameplayTags
		TEST_METHOD(Class__Frontiers__SpawnDataEntryGameplayTagAny)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryGameplayTagAny, 0x0050);
		}

		// class USpawnDataEntryGameplayTagExclude : public USpawnDataEntryGameplayTags
		TEST_METHOD(Class__Frontiers__SpawnDataEntryGameplayTagExclude)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryGameplayTagExclude, 0x0050);
		}

		// class USpawnDataEntryRemoveGameplayTagAll : public USpawnDataEntryGameplayTags
		TEST_METHOD(Class__Frontiers__SpawnDataEntryRemoveGameplayTagAll)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryRemoveGameplayTagAll, 0x0050);
		}

		// class USpawnDataEntryRemoveStemGameplayTagAll : public USpawnDataEntryGameplayTagStems
		TEST_METHOD(Class__Frontiers__SpawnDataEntryRemoveStemGameplayTagAll)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryRemoveStemGameplayTagAll, 0x0070);
		}

		// class USpawnDataEntryRemoveGameplayTagAny : public USpawnDataEntryGameplayTags
		TEST_METHOD(Class__Frontiers__SpawnDataEntryRemoveGameplayTagAny)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryRemoveGameplayTagAny, 0x0050);
		}

		// class USpawnDataEntryRemoveStemGameplayTagAny : public USpawnDataEntryGameplayTagStems
		TEST_METHOD(Class__Frontiers__SpawnDataEntryRemoveStemGameplayTagAny)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryRemoveStemGameplayTagAny, 0x0070);
		}

		// class USpawnDataEntryRemoveGameplayTagExclude : public USpawnDataEntryGameplayTags
		TEST_METHOD(Class__Frontiers__SpawnDataEntryRemoveGameplayTagExclude)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryRemoveGameplayTagExclude, 0x0050);
		}

		// class USpawnDataEntryRemoveStemGameplayTagExclude : public USpawnDataEntryGameplayTagStems
		TEST_METHOD(Class__Frontiers__SpawnDataEntryRemoveStemGameplayTagExclude)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryRemoveStemGameplayTagExclude, 0x0070);
		}

		// class USpawnDataEntryAddAreaGameplayTags : public USpawnEntryBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryAddAreaGameplayTags)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnDataEntryAddAreaGameplayTags, UnknownData_G50E, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryAddAreaGameplayTags, 0x0038);
		}

		// class USpawnDataEntryAddAreaGameplayTagsToAny : public USpawnDataEntryAddAreaGameplayTags
		TEST_METHOD(Class__Frontiers__SpawnDataEntryAddAreaGameplayTagsToAny)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryAddAreaGameplayTagsToAny, 0x0038);
		}

		// class USpawnDataEntryAddAreaGameplayTagsToAll : public USpawnDataEntryAddAreaGameplayTags
		TEST_METHOD(Class__Frontiers__SpawnDataEntryAddAreaGameplayTagsToAll)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryAddAreaGameplayTagsToAll, 0x0038);
		}

		// class USpawnDataEntryAddMatchingAreaGameplayTags : public USpawnEntryBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryAddMatchingAreaGameplayTags)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnDataEntryAddMatchingAreaGameplayTags, UnknownData_0LLW, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryAddMatchingAreaGameplayTags, 0x0038);
		}

		// class USpawnDataEntryAddMatchingAreaGameplayTagsToAny : public USpawnDataEntryAddMatchingAreaGameplayTags
		TEST_METHOD(Class__Frontiers__SpawnDataEntryAddMatchingAreaGameplayTagsToAny)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryAddMatchingAreaGameplayTagsToAny, 0x0038);
		}

		// class USpawnDataEntryAddMatchingAreaGameplayTagsToAll : public USpawnDataEntryAddMatchingAreaGameplayTags
		TEST_METHOD(Class__Frontiers__SpawnDataEntryAddMatchingAreaGameplayTagsToAll)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryAddMatchingAreaGameplayTagsToAll, 0x0038);
		}

		// class USpawnDataEntryRemoveAreaGameplayTags : public USpawnEntryBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryRemoveAreaGameplayTags)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnDataEntryRemoveAreaGameplayTags, UnknownData_5RIQ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryRemoveAreaGameplayTags, 0x0038);
		}

		// class USpawnDataEntryRemoveAreaGameplayTagsFromAny : public USpawnDataEntryRemoveAreaGameplayTags
		TEST_METHOD(Class__Frontiers__SpawnDataEntryRemoveAreaGameplayTagsFromAny)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryRemoveAreaGameplayTagsFromAny, 0x0038);
		}

		// class USpawnDataEntryRemoveAreaGameplayTagsFromAll : public USpawnDataEntryRemoveAreaGameplayTags
		TEST_METHOD(Class__Frontiers__SpawnDataEntryRemoveAreaGameplayTagsFromAll)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryRemoveAreaGameplayTagsFromAll, 0x0038);
		}

		// class USpreadsheetLoader : public UObject
		TEST_METHOD(Class__Frontiers__SpreadsheetLoader)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, ActiveTraitTable, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, AffixTable, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, AffixSpawnTable, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, AreaTable, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, BossTable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, CatalogTable, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, ContractTable, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, CurrencyTable, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, DialogueTable, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, DifficultyTable, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, DungeonChallengeTable, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, DungeonSpawnTable, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, DyeTable, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, EmberWeaponTable, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, FortPropsTable, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, FortPropGroupsTable, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, FortPropSpawnTable, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, ItemSpawnTable, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, ItemModifyTable, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, ItemsTable, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, ItemQualityTable, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, ItemWardrobeTable, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, ItemWardrobeEntryTable, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, LevelRewardTable, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, LoadingScreenTable, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, MapWorksTable, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, MinionTable, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, MinionSpawnTable, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, MonsterAffixTable, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, MonsterSpawnTable, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, MonstersTable, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, NameSpawnTable, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, PlayerTable, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, PlayerAffixTable, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, ProcTable, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, QuestObjectTable, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, QuestScheduleTable, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, RecipeUnitTable, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, RotationGroupTable, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, SkillsTable, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, SkillsTabTable, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, SkillsBalanceTable, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, SpokeTable, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, StatusEffectTable, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, TraitDisplayTable, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, TraitsTable, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, TrapSpawnTable, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, FoliageSoundTable, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, CinematicTable, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, AffixLevelCurves, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, SkillCurves, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, MonsterLevelCurves, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, PlayerCountCurves, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, PlayerCurves, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, LevelComparisonCurves, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, ItemSpawnPickCurves, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, FortPropSpawnCurves, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, EmberWeaponCurves, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, ContractFameCurves, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, RatioCurves, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, DungeonChallengeCurves, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, TermsTargetsTable, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, UnknownData_1IMO, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, DataTables, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, TableMap, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpreadsheetLoader, UnknownData_RVKC, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpreadsheetLoader, 0x0380);
		}

		// class UStandaloneFunctionDeferrer : public UObject
		TEST_METHOD(Class__Frontiers__StandaloneFunctionDeferrer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStandaloneFunctionDeferrer, UnknownData_9XTH, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStandaloneFunctionDeferrer, 0x0038);
		}

		// class UStoreManager : public UObject
		TEST_METHOD(Class__Frontiers__StoreManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStoreManager, 0x0028);
		}

		// class UStorePlayerComponent : public UPlayerComponent
		TEST_METHOD(Class__Frontiers__StorePlayerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStorePlayerComponent, UnknownData_QH3F, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStorePlayerComponent, CelebrationModal, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStorePlayerComponent, Balances, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStorePlayerComponent, UnknownData_QFTQ, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStorePlayerComponent, PurchaseHistory, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStorePlayerComponent, SuccessModal, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStorePlayerComponent, CommerceMinimumContentVersion, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStorePlayerComponent, UnknownData_ZEP5, 0x05F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStorePlayerComponent, 0x05F8);
		}

		// class USwitchboardClient : public UObject
		TEST_METHOD(Class__Frontiers__SwitchboardClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USwitchboardClient, UnknownData_Y5JG, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USwitchboardClient, 0x0038);
		}

		// class USwitchboardEventInterface : public UInterface
		TEST_METHOD(Class__Frontiers__SwitchboardEventInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USwitchboardEventInterface, 0x0028);
		}

		// class UDecorator_CheckGlobalCooldown : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__Frontiers__Decorator_CheckGlobalCooldown)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecorator_CheckGlobalCooldown, 0x0090);
		}

		// class UTask_AddGlobalCooldown : public UBTTask_BlackboardBase
		TEST_METHOD(Class__Frontiers__Task_AddGlobalCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_AddGlobalCooldown, CooldownSecondsToAdd, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_AddGlobalCooldown, UnknownData_L8UT, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTask_AddGlobalCooldown, 0x00A0);
		}

		// class UTask_Blinded : public UBTTaskNode
		TEST_METHOD(Class__Frontiers__Task_Blinded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_Blinded, WanderRadius, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_Blinded, UnknownData_DSDX, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTask_Blinded, 0x0078);
		}

		// class UTask_PlayerBot_Base : public UBTTaskNode
		TEST_METHOD(Class__Frontiers__Task_PlayerBot_Base)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTask_PlayerBot_Base, 0x0070);
		}

		// class UTask_BotQuest : public UTask_PlayerBot_Base
		TEST_METHOD(Class__Frontiers__Task_BotQuest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_BotQuest, Interval, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_BotQuest, UnknownData_L1OR, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTask_BotQuest, 0x0078);
		}

		// class UTask_ChooseRandomLocation : public UBTTaskNode
		TEST_METHOD(Class__Frontiers__Task_ChooseRandomLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_ChooseRandomLocation, MaxDistance, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_ChooseRandomLocation, MinDistance, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_ChooseRandomLocation, BlackboardKeyTargetLocation, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTask_ChooseRandomLocation, 0x0080);
		}

		// class UTask_CircleTarget : public UBTTaskNode
		TEST_METHOD(Class__Frontiers__Task_CircleTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_CircleTarget, BlackboardKeyTargetObject, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_CircleTarget, BlackboardKeyTargetLocation, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_CircleTarget, MaxRadius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_CircleTarget, MinRadius, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_CircleTarget, MoveTolerance, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_CircleTarget, DegreesToCircle, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_CircleTarget, RandomDegreeDeviation, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_CircleTarget, CircleTime, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_CircleTarget, UnknownData_BRKX, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTask_CircleTarget, 0x00A0);
		}

		// class UDecorator_PlayerSessionStatus : public UBTDecorator
		TEST_METHOD(Class__Frontiers__Decorator_PlayerSessionStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_PlayerSessionStatus, DesiredState, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_PlayerSessionStatus, UnknownData_HYAS, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorator_PlayerSessionStatus, UnknownData_M6ST, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecorator_PlayerSessionStatus, 0x0070);
		}

		// class UTask_Login : public UTask_PlayerBot_Base
		TEST_METHOD(Class__Frontiers__Task_Login)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_Login, RetryInterval, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_Login, UnknownData_M0V1, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTask_Login, 0x0078);
		}

		// class UTask_Logout : public UTask_PlayerBot_Base
		TEST_METHOD(Class__Frontiers__Task_Logout)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTask_Logout, 0x0070);
		}

		// class UTask_SelectCharacter : public UTask_PlayerBot_Base
		TEST_METHOD(Class__Frontiers__Task_SelectCharacter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTask_SelectCharacter, 0x0070);
		}

		// class UTask_CreateCharacter : public UTask_PlayerBot_Base
		TEST_METHOD(Class__Frontiers__Task_CreateCharacter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTask_CreateCharacter, 0x0070);
		}

		// class UTask_MoveToLocation : public UBTTaskNode
		TEST_METHOD(Class__Frontiers__Task_MoveToLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_MoveToLocation, bRelativeToTarget, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_MoveToLocation, bAwayFromTarget, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_MoveToLocation, UnknownData_XF90, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_MoveToLocation, BlackboardTargetKey, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_MoveToLocation, BlackboardSpawnLocationKey, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_MoveToLocation, WanderRadius, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_MoveToLocation, MinWanderRadius, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_MoveToLocation, bPollTargetLocation, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_MoveToLocation, bAllowPanic, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_MoveToLocation, UnknownData_71IO, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_MoveToLocation, ConeSearchHalfAngle, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_MoveToLocation, DesiredTargetDistance, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_MoveToLocation, MinTimeBeforePanic, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_MoveToLocation, bFaceTargetAfterMove, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_MoveToLocation, UnknownData_T1UI, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_MoveToLocation, MinimumDistanceToStart, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_MoveToLocation, PanicThreshold, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_MoveToLocation, GoalThreshold, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_MoveToLocation, MaxAttempts, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_MoveToLocation, TaskTimeout, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_MoveToLocation, TaskTimeoutDeviation, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_MoveToLocation, ArrivalWaitTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_MoveToLocation, bUseTargetVelocity, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_MoveToLocation, UnknownData_DHMP, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_MoveToLocation, TargetVelocityUpdateInterval, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_MoveToLocation, LookAheadSeconds, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_MoveToLocation, bUseTargetOffset, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_MoveToLocation, bUseAreaSpawnLocation, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_MoveToLocation, bUseMonsterSpawnLocation, 0x00CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_MoveToLocation, UnknownData_GJPY, 0x00CB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_MoveToLocation, WanderLocationFilter, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTask_MoveToLocation, 0x00D8);
		}

		// class UTask_Flee : public UTask_MoveToLocation
		TEST_METHOD(Class__Frontiers__Task_Flee)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTask_Flee, 0x00D8);
		}

		// class UTask_Wander : public UTask_MoveToLocation
		TEST_METHOD(Class__Frontiers__Task_Wander)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTask_Wander, 0x00D8);
		}

		// class UTask_MoveTowardsTarget : public UTask_MoveToLocation
		TEST_METHOD(Class__Frontiers__Task_MoveTowardsTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTask_MoveTowardsTarget, 0x00D8);
		}

		// class UTask_MoveToAreaLocation : public UTask_MoveToLocation
		TEST_METHOD(Class__Frontiers__Task_MoveToAreaLocation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTask_MoveToAreaLocation, 0x00D8);
		}

		// class UTask_MoveToMonsterSpawnLocation : public UTask_MoveToLocation
		TEST_METHOD(Class__Frontiers__Task_MoveToMonsterSpawnLocation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTask_MoveToMonsterSpawnLocation, 0x00D8);
		}

		// class UTask_PlayerBot_Move : public UTask_PlayerBot_Base
		TEST_METHOD(Class__Frontiers__Task_PlayerBot_Move)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_PlayerBot_Move, bTimeLimitToMove, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_PlayerBot_Move, UnknownData_15N9, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_PlayerBot_Move, SecondsAllowedToMove, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_PlayerBot_Move, bRandomLocation, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_PlayerBot_Move, UnknownData_FH16, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_PlayerBot_Move, RandomLocationRadius, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTask_PlayerBot_Move, 0x0080);
		}

		// class UTask_PlayerBotWander : public UTask_PlayerBot_Move
		TEST_METHOD(Class__Frontiers__Task_PlayerBotWander)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTask_PlayerBotWander, 0x0080);
		}

		// class UTask_PlayerBotSkill : public UTask_PlayerBot_Base
		TEST_METHOD(Class__Frontiers__Task_PlayerBotSkill)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_PlayerBotSkill, BlackboardKeyTargetActor, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_PlayerBotSkill, BlackboardKeyTargetLocation, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_PlayerBotSkill, bRandomAssignableSkillSlot, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_PlayerBotSkill, SkillSlot, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_PlayerBotSkill, bMoveIntoRangeForSkill, 0x0082);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_PlayerBotSkill, UnknownData_KWIF, 0x0083);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_PlayerBotSkill, SecondsAllowedToMove, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTask_PlayerBotSkill, 0x0088);
		}

		// class UTask_PlayerBotTravel : public UTask_PlayerBot_Base
		TEST_METHOD(Class__Frontiers__Task_PlayerBotTravel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_PlayerBotTravel, TravelInterval, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_PlayerBotTravel, UnknownData_65HK, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTask_PlayerBotTravel, 0x0078);
		}

		// class UTask_StartSkill_Base : public UBTTaskNode
		TEST_METHOD(Class__Frontiers__Task_StartSkill_Base)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_StartSkill_Base, BlackboardKeyTargetActor, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_StartSkill_Base, BlackboardKeyTargetLocation, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_StartSkill_Base, SkillSlot, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_StartSkill_Base, UnknownData_J6EP, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTask_StartSkill_Base, 0x0088);
		}

		// class UTask_StartSkill : public UTask_StartSkill_Base
		TEST_METHOD(Class__Frontiers__Task_StartSkill)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_StartSkill, bMoveToRange, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_StartSkill, UnknownData_D2OF, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTask_StartSkill, 0x0090);
		}

		// class UTask_StartRandomSkill : public UTask_StartSkill
		TEST_METHOD(Class__Frontiers__Task_StartRandomSkill)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_StartRandomSkill, RandomSkillSlots, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_StartRandomSkill, AllyTargetObjectKey, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_StartRandomSkill, AllyTargetLocationKey, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTask_StartRandomSkill, 0x00F0);
		}

		// class UDecorator_MoveToTimeLimit : public UBTDecorator_TimeLimit
		TEST_METHOD(Class__Frontiers__Decorator_MoveToTimeLimit)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecorator_MoveToTimeLimit, 0x0070);
		}

		// class UTask_StartSkill_Simple : public UTask_StartSkill_Base
		TEST_METHOD(Class__Frontiers__Task_StartSkill_Simple)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTask_StartSkill_Simple, 0x0088);
		}

		// class UTask_StartSkillChanneled : public UTask_StartSkill
		TEST_METHOD(Class__Frontiers__Task_StartSkillChanneled)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_StartSkillChanneled, bMaintainRangeWhileCasting, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_StartSkillChanneled, bUseMaxTargetAdjustmentSpeed, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_StartSkillChanneled, UnknownData_9M9W, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_StartSkillChanneled, MaxTargetAdjustmentSpeed, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_StartSkillChanneled, InputUpdateInterval, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_StartSkillChanneled, bAllowTargetSwitching, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTask_StartSkillChanneled, UnknownData_8GTL, 0x009D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTask_StartSkillChanneled, 0x00A0);
		}

		// class UTeamInterface : public UInterface
		TEST_METHOD(Class__Frontiers__TeamInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTeamInterface, 0x0028);
		}

		// class UTermsManager : public UObject
		TEST_METHOD(Class__Frontiers__TermsManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTermsManager, StandardTermsModal, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTermsManager, UnknownData_TO8N, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTermsManager, LoadedTermsTable, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTermsManager, 0x0098);
		}

		// class UTextValidator : public UGameInstanceSubsystem
		TEST_METHOD(Class__Frontiers__TextValidator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextValidator, 0x0030);
		}

		// class UTimeOfDayComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__TimeOfDayComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayComponent, UnknownData_WQO6, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayComponent, TimeOfDayPeriod, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayComponent, bTriggerIfDead, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayComponent, UnknownData_KRL6, 0x00C2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeOfDayComponent, 0x00C8);
		}

		// class ATimeOfDayGadget : public AGadget
		TEST_METHOD(Class__Frontiers__TimeOfDayGadget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeOfDayGadget, UnknownData_6RE2, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeOfDayGadget, TimeOfDayPeriod, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeOfDayGadget, UnknownData_48GM, 0x04E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATimeOfDayGadget, 0x04F0);
		}

		// class UTimeOfDayHandler : public UConductorHandler
		TEST_METHOD(Class__Frontiers__TimeOfDayHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, UnknownData_ZGZ1, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, bUseLightRotation, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, LightRotationType, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, UnknownData_P4RB, 0x00C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, StaticLightDirection, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, WideCycleRotators, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, ShallowCycleRotators, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, MaxDirectionalIntensity, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, ShadowBias, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, DynamicShadowDistanceMovableLight, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, NumberDynamicShadowCascades, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, FarShadowCascadeCount, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, FarShadowDistance, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, DistanceFieldShadowDistance, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, ShadowTraceDistance, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, RayStartOffsetDepthScale, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, LightSourceAngle, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, UnknownData_Q7JZ, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, IndirectLightingIntensity, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, MaxSkyIntensity, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, SkyIndirectLightingIntensity, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, UnknownData_U1OQ, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, SkyLightMaterial, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, LightColorLookup, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, DirectionalLightTintAndIntensity, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, SkyTintAndIntensity, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, ShadowTintAndIntensity, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, VFXTint, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, LUTTexture, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, LUTContribution, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, UnknownData_A6M3, 0x096C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, RegionCubemap, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, bUseFogInscatteringCubemap, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, UnknownData_Z2Y1, 0x0979);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, FogInscatteringColorCubemap, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, AreaFogSettings, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, PlayerLightIntensity, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, UnknownData_WMCC, 0x099C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, LocalLightTintA, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, LocalLightTintB, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, LocalLightTintC, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, LocalLightTintD, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, NighttimeMonsterManagerSettings, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, DaytimeMonsterManagerSettings, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, bKeepMonstersOnTransition, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, bDespawnBossesOnTransition, 0x0A41);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, UnknownData_4PLS, 0x0A42);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, ActiveRotators, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayHandler, UnknownData_OGVB, 0x0A58);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeOfDayHandler, 0x0A60);
		}

		// class UToggleSceneComponent : public USceneComponent
		TEST_METHOD(Class__Frontiers__ToggleSceneComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UToggleSceneComponent, UnknownData_SROS, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToggleSceneComponent, 0x0200);
		}

		// class UToggleLight : public UToggleSceneComponent
		TEST_METHOD(Class__Frontiers__ToggleLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UToggleLight, bAnimateLightFlicker, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToggleLight, UnknownData_TV4Y, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToggleLight, IntensityMin, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToggleLight, IntensityMax, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToggleLight, FlickerMaxDelay, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToggleLight, LightJiggleIntensity, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToggleLight, UnknownData_NC56, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToggleLight, Light, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToggleLight, FadeInSpeed, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToggleLight, FadeOutSpeed, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToggleLight, UnknownData_S7EC, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToggleLight, 0x0250);
		}

		// class UTimeOfDayLight : public UToggleLight
		TEST_METHOD(Class__Frontiers__TimeOfDayLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayLight, UnknownData_1OZA, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayLight, TimeOfDayPeriod, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayLight, UnknownData_U24E, 0x0261);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeOfDayLight, 0x0270);
		}

		// class UToggleParticle : public UToggleSceneComponent
		TEST_METHOD(Class__Frontiers__ToggleParticle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UToggleParticle, ParticleSystem, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToggleParticle, UnknownData_P6B4, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToggleParticle, 0x0210);
		}

		// class UTimeOfDayParticle : public UToggleParticle
		TEST_METHOD(Class__Frontiers__TimeOfDayParticle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayParticle, UnknownData_LKZI, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayParticle, TimeOfDayPeriod, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayParticle, UnknownData_Y9YJ, 0x0219);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeOfDayParticle, 0x0220);
		}

		// class UToggleShape : public UToggleSceneComponent
		TEST_METHOD(Class__Frontiers__ToggleShape)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UToggleShape, Shape, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToggleShape, OnShapeBeginOverlap, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToggleShape, OnShapeEndOverlap, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToggleShape, UnknownData_Z9TZ, 0x020A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToggleShape, 0x0210);
		}

		// class UTimeOfDayShape : public UToggleShape
		TEST_METHOD(Class__Frontiers__TimeOfDayShape)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayShape, UnknownData_UP9Q, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayShape, TimeOfDayPeriod, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayShape, UnknownData_BSJZ, 0x0221);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeOfDayShape, 0x0230);
		}

		// class ATimeOfDaySpawner : public AActor
		TEST_METHOD(Class__Frontiers__TimeOfDaySpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeOfDaySpawner, ActorsToSpawn, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeOfDaySpawner, TimeRangeStart, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeOfDaySpawner, TimeRangeEnd, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATimeOfDaySpawner, UnknownData_0EEK, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATimeOfDaySpawner, 0x0240);
		}

		// class UTimeOfDayTriggerInterface : public UInterface
		TEST_METHOD(Class__Frontiers__TimeOfDayTriggerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeOfDayTriggerInterface, 0x0028);
		}

		// class UItemActorFollowComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__ItemActorFollowComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemActorFollowComponent, TargetSkeletalMesh, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemActorFollowComponent, TargetSocket, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemActorFollowComponent, InterpolationSpeedMin, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemActorFollowComponent, InterpolationSpeedMax, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemActorFollowComponent, VarianceSpeed, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemActorFollowComponent, SnapDistance, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemActorFollowComponent, 0x00D0);
		}

		// class ATLAIController : public AAIController
		TEST_METHOD(Class__Frontiers__TLAIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLAIController, MinionChaseRadius, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLAIController, SecondsBetweenTargetSwitches, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLAIController, DamageAggroDuration, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLAIController, TetherCheckTickInterval, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLAIController, NormalChaseRadius, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLAIController, ChampionChaseRadius, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLAIController, TetherStatusEffectClass, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLAIController, MinionTetherStatusEffectClass, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLAIController, PetTetherStatusEffectClass, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLAIController, ImmobileTetherStatusEffectClass, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLAIController, PendingBehaviorTree, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLAIController, UnknownData_SSYX, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATLAIController, 0x0398);
		}

		// class UTLAIHelpers : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Frontiers__TLAIHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLAIHelpers, 0x0028);
		}

		// class UTLInventorySlotData : public UDataAsset
		TEST_METHOD(Class__Frontiers__TLInventorySlotData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventorySlotData, WeaponNameToGroupString, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventorySlotData, WeaponNameToWeaponString, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventorySlotData, LocomotionNameToString, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLInventorySlotData, 0x0120);
		}

		// class UTLInventoryComboData : public UDataAsset
		TEST_METHOD(Class__Frontiers__TLInventoryComboData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryComboData, InventorySlotData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryComboData, ExtraLocomotionNames, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryComboData, MainHandEquipmentNames, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryComboData, OffHandEquipmentNames, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryComboData, TwoHandEquipmentNames, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLInventoryComboData, 0x0178);
		}

		// class UTLAnimInstance : public UAnimInstance
		TEST_METHOD(Class__Frontiers__TLAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, UnknownData_7E8B, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, MinPlayRateMultiplier, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, MaxPlayRateMultiplier, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, DefaultSlotName, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, DefaultAnimSlotPrefix, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, RandomStream, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, UnknownData_4AP5, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, MovementSpeed, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, TimeSinceAnimChanged, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, TurnSpeed, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, MaxAnimatedRunSpeed, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, RunToStopEaseTime, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, SkillTurningBlendAlpha, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, MaxAnimatedTurnSpeed, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, MinAnimatedTurnSpeed, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, TurnSmoothingAlpha, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, RotationTolerance, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, bRotateToTarget, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, UnknownData_AARU, 0x0311);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, RotateFromTargetSpeed, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, RotateToTargetBlendWeight, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, SlotNameCurrent, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, UnknownData_4N1G, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, IdleMoveBlendSpace, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, IdleMoveBlendSpaceRef, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, SkillTurningBlendSpace, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, BlendSpaceMap, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, UnknownData_L5FU, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, InventoryBasedAnimGroups, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, DefaultComboAnimationSlotNames, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, RandomBlendspaceStart, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, UnknownData_HQHF, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, IdleAnimations, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, TaggedAnimations, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, LoadedTaggedAnimations, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, IdleTimeoutMin, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, IdleTimeoutMax, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, IdleBlendInTime, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, IdleBlendOutTime, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, IdleBlendOutTriggerTime, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, UnknownData_ER40, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, IdleMontage, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, bEaseToStop, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, UnknownData_YJVP, 0x04C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, ComboData, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, AnimInstanceTag, 0x0604);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstance, UnknownData_7X19, 0x060C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLAnimInstance, 0x0610);
		}

		// class UTLAnimInstanceAttached : public UTLAnimInstance
		TEST_METHOD(Class__Frontiers__TLAnimInstanceAttached)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstanceAttached, SkillAnims, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstanceAttached, PrimaryAnimInstance, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLAnimInstanceAttached, UnknownData_5KVU, 0x0668);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLAnimInstanceAttached, 0x0670);
		}

		// class ATLBreakable : public ATLActor
		TEST_METHOD(Class__Frontiers__TLBreakable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLBreakable, UnknownData_UDPN, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLBreakable, ItemSpawnRow, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLBreakable, HitpointPercent, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLBreakable, UnknownData_V1TK, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLBreakable, DisplayName, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLBreakable, DestructionImpulse, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLBreakable, ChunkTimeout, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLBreakable, FadeTime, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLBreakable, UnknownData_5B36, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLBreakable, ShatterEvent, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLBreakable, FadeMaterial, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLBreakable, bShowNameInHUD, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLBreakable, UnknownData_S713, 0x03F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLBreakable, bIsAlive, 0x03FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLBreakable, UnknownData_U38N, 0x03FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLBreakable, bInstanceHasBeenDisabled, 0x03FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLBreakable, SpawnLocation, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLBreakable, UnknownData_4Q1W, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLBreakable, DynamicMaterials, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLBreakable, OpaqueMaterialInterfaces, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATLBreakable, 0x0430);
		}

		// class UTLCharacterMovementComponent : public UCharacterMovementComponent
		TEST_METHOD(Class__Frontiers__TLCharacterMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCharacterMovementComponent, bIsMovementEnabled, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCharacterMovementComponent, UnknownData_BHNA, 0x0B01);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCharacterMovementComponent, MaxDistanceOffNavmesh, 0x0B14);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCharacterMovementComponent, NavmeshWallIntersectionTolerance, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCharacterMovementComponent, UnknownData_CHQW, 0x0B1C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLCharacterMovementComponent, 0x0B30);
		}

		// class UTLCheatManager : public UCheatManager
		TEST_METHOD(Class__Frontiers__TLCheatManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCheatManager, UnknownData_VU8C, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCheatManager, CheatRunner, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLCheatManager, 0x0090);
		}

		// class UTLCheatPlayTest : public UActorComponent
		TEST_METHOD(Class__Frontiers__TLCheatPlayTest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCheatPlayTest, UnknownData_3NJY, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCheatPlayTest, AreaToTest, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCheatPlayTest, AreaToWarpTo, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCheatPlayTest, ItemLevelBias, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCheatPlayTest, UnknownData_X33L, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCheatPlayTest, ItemContainersToClear, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCheatPlayTest, ItemSpawnRow, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCheatPlayTest, QuestsToAdd, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCheatPlayTest, QuestsToComplete, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCheatPlayTest, Traits, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLCheatPlayTest, 0x0130);
		}

		// class ATLCheatRunner : public AActor
		TEST_METHOD(Class__Frontiers__TLCheatRunner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCheatRunner, ZoomTimeOfDayLength, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCheatRunner, PlayTestItemLevelBias, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCheatRunner, PlayTestItemSpawnRow, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLCheatRunner, UnknownData_QFIA, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATLCheatRunner, 0x0290);
		}

		// class UTLCombat : public UActorComponent
		TEST_METHOD(Class__Frontiers__TLCombat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombat, ExperiencePerKill, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombat, OverkillPercentage, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombat, OverkillDoTPercentage, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombat, OverkillChance, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombat, OverkillDoTChance, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombat, MaxCriticalChance, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombat, MonsterAllyLastDamageRadius, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombat, PlayerCountRange, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombat, MinDamagePercentForKillCredit, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombat, MinDamagePercentForSkillQuestCredit, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombat, UnknownData_ZVJW, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombat, PvPDamageMultiplier, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombat, UnknownData_Y2DR, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLCombat, 0x00E8);
		}

		// class UAnimNotify_Attack : public USkillAnimNotify_ConfigurableActivationCost
		TEST_METHOD(Class__Frontiers__AnimNotify_Attack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_Attack, bPlayMeleeHitSound, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_Attack, UnknownData_06P5, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_Attack, 0x0068);
		}

		// class UAnimNotify_AreaDamage : public USkillAnimNotify_ConfigurableActivationCost
		TEST_METHOD(Class__Frontiers__AnimNotify_AreaDamage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AreaDamage, Offset, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AreaDamage, Radius, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AreaDamage, bOverrideSkillTargetFilter, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AreaDamage, UnknownData_TG3N, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AreaDamage, TargetFilter, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AreaDamage, bPlayMeleeHitSound, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AreaDamage, bAtSkillTargetLocation, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AreaDamage, UnknownData_AYLJ, 0x016A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_AreaDamage, 0x0170);
		}

		// class UMeshBoundsOverrideEditorComponent : public UBoxComponent
		TEST_METHOD(Class__Frontiers__MeshBoundsOverrideEditorComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshBoundsOverrideEditorComponent, 0x0470);
		}

		// class UTLCombatActorComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__TLCombatActorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, bMonsterHitFlashEnable, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, UnknownData_W1JG, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, FlashIntensity, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, FlashTimeToFade, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, FlashColor, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, DefenderTraitMode, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, UnknownData_63U8, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, BlockNotifyWidgetComponent, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, BlockEventReference, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, InvulnerableNotifyWidgetComponent, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, InvulnerableEventReference, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, EvadeNotifyWidgetComponent, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, EvadeEventReference, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, CriticalNotifyWidgetComponent, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, CriticalDamageNotifyWidgetComponent, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, DamageNotifyWidgetComponent, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, CriticalCameraShake, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, CriticalEventReference, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, GetHitEffects, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, GetHitCriticalEffects, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, bPlayBloodEffectOnLethalHit, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, UnknownData_NFIA, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, DeathEffects, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, CriticalDeathEffects, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, CriticalDeathCensoredEffects, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, GetHitBloodEffectCooldown, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, UnknownData_7OUZ, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, GetHitElementalEffectCooldown, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, UnknownData_YY23, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, ElementalEffectInfo, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, ElementalCriticalEffectInfo, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, RecoverHealthEffect, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, RecoverHealthEffectCooldown, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, UnknownData_GNLP, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, LegacyFXScale, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, FXScaleV2, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, bUseMeshBoundsOverride, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, UnknownData_HG8H, 0x0315);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, MeshBoundsOverrideExtents, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, MeshBoundsOverrideOffset, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, PreviewColor, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, MeshBoundsOverrideScaleFactor, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, MeshBoundsOverrideMeasure, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, UnknownData_GG6D, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, MeshBoundsOverrideBox, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, DynamicMaterials, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCombatActorComponent, UnknownData_1TIL, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLCombatActorComponent, 0x0360);
		}

		// class UCombatCallbacksInterface : public UInterface
		TEST_METHOD(Class__Frontiers__CombatCallbacksInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCombatCallbacksInterface, 0x0028);
		}

		// class UTLConsole : public UConsole
		TEST_METHOD(Class__Frontiers__TLConsole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLConsole, 0x0130);
		}

		// class UTLDecalComponent : public UDecalComponent
		TEST_METHOD(Class__Frontiers__TLDecalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLDecalComponent, RandomOffsetMin, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLDecalComponent, RandomOffsetMax, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLDecalComponent, TLDecalRotation, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLDecalComponent, bRandomizeRotation, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLDecalComponent, bAutoOrient, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLDecalComponent, bApplyParentRotation, 0x0262);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLDecalComponent, UnknownData_SIU7, 0x0263);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLDecalComponent, RotationCurve, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLDecalComponent, TLDecalScale, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLDecalComponent, UnknownData_LQSF, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLDecalComponent, ScaleCurve, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLDecalComponent, TLDecalMaterial, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLDecalComponent, TextureEntries, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLDecalComponent, FloatCurveEntries, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLDecalComponent, ColorCurveEntries, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLDecalComponent, BloodOptions, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLDecalComponent, UnknownData_9V8F, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLDecalComponent, MaterialInstance, 0x03F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLDecalComponent, 0x0400);
		}

		// class ATLEffect : public AActor
		TEST_METHOD(Class__Frontiers__TLEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLEffect, UnknownData_WDZM, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLEffect, bLooping, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLEffect, UnknownData_6SDJ, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLEffect, TrackedParticleSystemComponents, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLEffect, UnknownData_Q39Z, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATLEffect, 0x0260);
		}

		// class UTLFile : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Frontiers__TLFile)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLFile, 0x0028);
		}

		// class UTLGameInstance : public UGameInstance
		TEST_METHOD(Class__Frontiers__TLGameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameInstance, StatusText, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameInstance, UnknownData_JFIO, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameInstance, Switchboard, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameInstance, UnknownData_GJHP, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameInstance, InProgressOfflineStaticContent, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameInstance, BuildStaticContent, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameInstance, CharacterSelectLevel, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameInstance, TitleScreenLevel, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameInstance, ClientSpreadsheetLoader, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameInstance, ServerSpreadsheetLoader, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameInstance, WidgetConstantsClass, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameInstance, IconConstantsClass, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameInstance, UITextConstantsClass, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameInstance, TermsManagerClass, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameInstance, SpreadsheetLoader, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameInstance, TermsManager, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameInstance, UnknownData_D5RZ, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameInstance, PersistentGameHUD, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameInstance, EditorOnlineAccountLocalPersistence, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameInstance, UnknownData_4GQV, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameInstance, Preloader, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameInstance, UnknownData_I3VC, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameInstance, DestinationLevelAsset, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameInstance, UnknownData_RUGJ, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameInstance, StoreManager, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameInstance, FogsOfWar, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameInstance, GeneratedIconCache, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameInstance, BotBehaviors, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameInstance, MapProxyBPClass, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameInstance, UnknownData_P84Y, 0x0520);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLGameInstance, 0x0530);
		}

		// class ATLGameMode : public AGameMode
		TEST_METHOD(Class__Frontiers__TLGameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLGameMode, ItemSpawnerClass, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLGameMode, SpreadsheetsRequiredToStartPlay, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLGameMode, UnknownData_J4B9, 0x0311);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLGameMode, StandaloneFunctionDeferrer, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATLGameMode, 0x03A8);
		}

		// class UTLGameSettings : public UDeveloperSettings
		TEST_METHOD(Class__Frontiers__TLGameSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameSettings, DefaultAnimPreviewFootstep, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameSettings, VoiceChatDucking, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameSettings, MasterBus, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameSettings, MusicBus, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameSettings, MasterBusDynamicRangeDecibels, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameSettings, MusicBusDynamicRangeDecibels, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameSettings, DebugContentBuildVersionOverride, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameSettings, ConsoleDPICurve, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLGameSettings, 0x0138);
		}

		// class ATLGameState : public AGameState
		TEST_METHOD(Class__Frontiers__TLGameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLGameState, DayLengthInSeconds, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLGameState, UnknownData_XM54, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLGameState, MaterialGlobals, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLGameState, UnknownData_MT8M, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLGameState, Difficulty, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLGameState, bPvPEnabled, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLGameState, UnknownData_6KIB, 0x02ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLGameState, TimeOfDayPercent, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLGameState, UnknownData_BNOK, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLGameState, bClientSideRootMotionEnabled, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLGameState, UnknownData_NNRC, 0x02FD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATLGameState, 0x0320);
		}

		// class UTLGameViewportClient : public UGameViewportClient
		TEST_METHOD(Class__Frontiers__TLGameViewportClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameViewportClient, LoadingScreen, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameViewportClient, VoiceChatOverlay, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameViewportClient, LoadingScreenClass, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameViewportClient, VoiceChatOverlayClass, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameViewportClient, GamepadModeDeadzone, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLGameViewportClient, UnknownData_00ZY, 0x0384);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLGameViewportClient, 0x0398);
		}

		// class UTLInventory : public UPlayerComponent
		TEST_METHOD(Class__Frontiers__TLInventory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventory, UnknownData_3RBS, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventory, bInitWithoutController, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventory, UnknownData_KVJY, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventory, ShadowAssetSourceOverride, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventory, UnknownData_4JGG, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventory, OnWardrobeItemsChange, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventory, OnWeaponsUpdated, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventory, UnknownData_LFIB, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventory, CurrentErrorMessage, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventory, CachedItemClasses, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventory, AccountItemsContainerClass, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventory, UnknownData_UUK6, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventory, InventoryFullSound, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventory, Wardrobe, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventory, UnknownData_N8I7, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventory, ServerActorsToAttach, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventory, UnknownData_XH6N, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventory, WardrobeItems, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventory, EquippedWeapons, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventory, UnknownData_EAHT, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventory, StartingItems, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventory, BaseWardrobeItems, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventory, bWardrobeUsesBaseMeshMaterial, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventory, UnknownData_M5A1, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventory, ContainerClasses, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventory, Containers, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventory, CachedStatusEffectsContainer, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventory, CachedWardrobeContainer, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventory, CachedPotionsContainer, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventory, UnknownData_D3IR, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLInventory, 0x03B0);
		}

		// class UTLInventoryContainer : public UActorComponent
		TEST_METHOD(Class__Frontiers__TLInventoryContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainer, GameplayTagsAny, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainer, GameplayTagsAll, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainer, GameplayTagsExclude, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainer, bAffectsTraits, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainer, UnknownData_ID5C, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainer, DisplayName, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainer, InventoryFullMessage, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainer, ParentInventory, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainer, UnknownData_Z6DD, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainer, Query, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainer, bIsLocked, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainer, UnknownData_L3CL, 0x01B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLInventoryContainer, 0x01C8);
		}

		// class UTLInventoryContainerItems : public UTLInventoryContainer
		TEST_METHOD(Class__Frontiers__TLInventoryContainerItems)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerItems, UnknownData_7YZY, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerItems, Items, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerItems, FallbackContainerClass, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerItems, ContainerId, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerItems, UnknownData_US2T, 0x01EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLInventoryContainerItems, 0x01F0);
		}

		// class UTLInventoryContainerUnequippedBase : public UTLInventoryContainerItems
		TEST_METHOD(Class__Frontiers__TLInventoryContainerUnequippedBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLInventoryContainerUnequippedBase, 0x01F0);
		}

		// class UTLInventoryContainerUnequippedItems : public UTLInventoryContainerUnequippedBase
		TEST_METHOD(Class__Frontiers__TLInventoryContainerUnequippedItems)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerUnequippedItems, MaxNumItems, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerUnequippedItems, UnknownData_01OF, 0x01F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLInventoryContainerUnequippedItems, 0x01F8);
		}

		// class UTLInventoryContainerAccountItems : public UTLInventoryContainerUnequippedItems
		TEST_METHOD(Class__Frontiers__TLInventoryContainerAccountItems)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerAccountItems, StashIndex, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerAccountItems, StashType, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerAccountItems, bHasLoaded, 0x01FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerAccountItems, UnknownData_PA4B, 0x01FE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLInventoryContainerAccountItems, 0x0200);
		}

		// class UTLInventoryContainerBuybackItems : public UTLInventoryContainerItems
		TEST_METHOD(Class__Frontiers__TLInventoryContainerBuybackItems)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerBuybackItems, MaxNumItems, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerBuybackItems, UnknownData_H8IZ, 0x01F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLInventoryContainerBuybackItems, 0x01F8);
		}

		// class UTLInventoryContainerEquippedLegendaryAffixes : public UTLInventoryContainerItems
		TEST_METHOD(Class__Frontiers__TLInventoryContainerEquippedLegendaryAffixes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerEquippedLegendaryAffixes, UnknownData_RLER, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerEquippedLegendaryAffixes, SlotUnlockLevels, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLInventoryContainerEquippedLegendaryAffixes, 0x0208);
		}

		// class UTLInventoryContainerFort : public UTLInventoryContainer
		TEST_METHOD(Class__Frontiers__TLInventoryContainerFort)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerFort, UnknownData_Z0IW, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerFort, Props, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerFort, UnknownData_JQ9G, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerFort, MaxAllowedFortComplexity, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerFort, UnknownData_ZHHV, 0x01FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLInventoryContainerFort, 0x0200);
		}

		// class UTLInventoryContainerFortStash : public UTLInventoryContainerFort
		TEST_METHOD(Class__Frontiers__TLInventoryContainerFortStash)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerFortStash, ClientStashEntries, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLInventoryContainerFortStash, 0x0210);
		}

		// class UTLInventoryContainerInbox : public UTLInventoryContainer
		TEST_METHOD(Class__Frontiers__TLInventoryContainerInbox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerInbox, UnknownData_ORYX, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerInbox, Entries, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerInbox, LastSyncedEntryTime, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerInbox, UnknownData_RU3V, 0x01E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLInventoryContainerInbox, 0x0210);
		}

		// class UTLInventoryContainerInboxOffline : public UTLInventoryContainerInbox
		TEST_METHOD(Class__Frontiers__TLInventoryContainerInboxOffline)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLInventoryContainerInboxOffline, 0x0210);
		}

		// class UTLInventoryContainerQuestItems : public UTLInventoryContainerItems
		TEST_METHOD(Class__Frontiers__TLInventoryContainerQuestItems)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLInventoryContainerQuestItems, 0x01F0);
		}

		// class UTLInventoryContainerMinions : public UTLInventoryContainer
		TEST_METHOD(Class__Frontiers__TLInventoryContainerMinions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerMinions, InventoryFullBehavior, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerMinions, MinionActorDeadBehavior, 0x01C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerMinions, UnknownData_IUPF, 0x01CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerMinions, BonusMaxMinionsTag, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerMinions, UnknownData_5NN3, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerMinions, MaxNumberOfMinions, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerMinions, UnknownData_H3SJ, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerMinions, Minions, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerMinions, UnknownData_ZP7J, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLInventoryContainerMinions, 0x01F8);
		}

		// class UTLInventoryContainerPet : public UTLInventoryContainerMinions
		TEST_METHOD(Class__Frontiers__TLInventoryContainerPet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerPet, UnknownData_E9AI, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerPet, bPetWasSentVoluntarily, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerPet, UnknownData_3JX0, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerPet, PetGoingToTownDuration, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerPet, PetGoingToTownStatusEffectClass, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerPet, UnknownData_JVI6, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerPet, ServerPetReturnTimestamp, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerPet, UnknownData_RS6B, 0x0254);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLInventoryContainerPet, 0x0288);
		}

		// class UTLInventoryContainerPetsStored : public UTLInventoryContainer
		TEST_METHOD(Class__Frontiers__TLInventoryContainerPetsStored)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerPetsStored, UnknownData_BOOZ, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerPetsStored, MaxNumberOfPets, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerPetsStored, UnknownData_A4LL, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerPetsStored, OverflowPet, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerPetsStored, pets, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerPetsStored, PetBaseClass, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLInventoryContainerPetsStored, 0x0298);
		}

		// class UTLInventoryContainerStatusEffects : public UTLInventoryContainer
		TEST_METHOD(Class__Frontiers__TLInventoryContainerStatusEffects)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerStatusEffects, StatusEffects, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerStatusEffects, OnRemoveTimeRemainingToExpire, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerStatusEffects, UnknownData_3NOU, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerStatusEffects, StatusEffectDatas, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLInventoryContainerStatusEffects, 0x0338);
		}

		// class UTLInventoryContainerPetItems : public UTLInventoryContainerUnequippedBase
		TEST_METHOD(Class__Frontiers__TLInventoryContainerPetItems)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerPetItems, MaxNumItems, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerPetItems, UnknownData_8P8B, 0x01F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLInventoryContainerPetItems, 0x01F8);
		}

		// class UTLInventoryContainerConsumableItems : public UTLInventoryContainerUnequippedBase
		TEST_METHOD(Class__Frontiers__TLInventoryContainerConsumableItems)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerConsumableItems, MaxNumItems, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerConsumableItems, UnknownData_XTRV, 0x01F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLInventoryContainerConsumableItems, 0x01F8);
		}

		// class UTLInventoryContainerPotions : public UTLInventoryContainerConsumableItems
		TEST_METHOD(Class__Frontiers__TLInventoryContainerPotions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerPotions, UnknownData_XR99, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLInventoryContainerPotions, 0x0218);
		}

		// class UTLInventoryContainerLifeBoundRemoved : public UTLInventoryContainerUnequippedBase
		TEST_METHOD(Class__Frontiers__TLInventoryContainerLifeBoundRemoved)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLInventoryContainerLifeBoundRemoved, 0x01F0);
		}

		// class UTLInventoryContainerWardrobe : public UTLInventoryContainerItems
		TEST_METHOD(Class__Frontiers__TLInventoryContainerWardrobe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerWardrobe, LevelRequirementDelta, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerWardrobe, UnknownData_6QIK, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerWardrobe, EmberWeaponSwapSFX, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerWardrobe, NormalWeaponSwapSFX, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerWardrobe, UnknownData_YYOQ, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerWardrobe, SlotData, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerWardrobe, RemoveFromItemDrops, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerWardrobe, AvailableFromItemDrops, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerWardrobe, bAttachToController, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerWardrobe, UnknownData_XHJ7, 0x02F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerWardrobe, WeaponSuiteCurrent, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLInventoryContainerWardrobe, UnknownData_BLOT, 0x02F5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLInventoryContainerWardrobe, 0x0310);
		}

		// class UTLItemSet : public UObject
		TEST_METHOD(Class__Frontiers__TLItemSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLItemSet, Customization, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLItemSet, ActorsToAttach, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLItemSet, ItemRowHandles, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLItemSet, ExtraActors, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLItemSet, 0x0078);
		}

		// class UTLLocalPlayer : public ULocalPlayer
		TEST_METHOD(Class__Frontiers__TLLocalPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLLocalPlayer, UnknownData_OO2K, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLLocalPlayer, UserSettings, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLLocalPlayer, LocalPersistence, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLLocalPlayer, UnknownData_8BHM, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLLocalPlayer, ChatSession, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLLocalPlayer, UnknownData_CZYS, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLLocalPlayer, privileges, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLLocalPlayer, UnknownData_GXAO, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLLocalPlayer, RemoteSession, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLLocalPlayer, UnknownData_KH79, 0x05A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLLocalPlayer, 0x05B8);
		}

		// class UTLOnline : public UGameInstanceSubsystem
		TEST_METHOD(Class__Frontiers__TLOnline)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLOnline, 0x0030);
		}

		// class UTLParticleDecalBridgeComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__TLParticleDecalBridgeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLParticleDecalBridgeComponent, DecalMaterialMaster, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLParticleDecalBridgeComponent, TextureParameterArray, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLParticleDecalBridgeComponent, EmitterName, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLParticleDecalBridgeComponent, EffectTemplate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLParticleDecalBridgeComponent, SpawnedEmitter, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLParticleDecalBridgeComponent, ParticleIDToDecalMap, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLParticleDecalBridgeComponent, 0x0130);
		}

		// class UTLParticleSystemComponent : public UParticleSystemComponent
		TEST_METHOD(Class__Frontiers__TLParticleSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLParticleSystemComponent, bDeactivateWhenOwnerDestroyed, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLParticleSystemComponent, bDeactivateOnOwnerDeath, 0x06A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLParticleSystemComponent, bUseAbsoluteRotation, 0x06A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLParticleSystemComponent, UnknownData_CTE3, 0x06A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLParticleSystemComponent, GameplayTags, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLParticleSystemComponent, BloodOptions, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLParticleSystemComponent, UnknownData_8BX7, 0x06C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLParticleSystemComponent, 0x06D0);
		}

		// class UTLPathFollowing : public UPathFollowingComponent
		TEST_METHOD(Class__Frontiers__TLPathFollowing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLPathFollowing, NavFilter, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLPathFollowing, ReachTargetRadius, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLPathFollowing, UnknownData_INXV, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLPathFollowing, 0x0260);
		}

		// class ATLPlayerCameraManager : public APlayerCameraManager
		TEST_METHOD(Class__Frontiers__TLPlayerCameraManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerCameraManager, WarpTransitionFadeColor, 0x27B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerCameraManager, WarpTransitionFadeFromAlpha, 0x27C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerCameraManager, WarpTransitionFadeToAlpha, 0x27C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerCameraManager, WarpTransitionFadeDuration, 0x27C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerCameraManager, UnknownData_CY6W, 0x27CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATLPlayerCameraManager, 0x27D0);
		}

		// class ATLPlayerController : public ATLBasePlayerController
		TEST_METHOD(Class__Frontiers__TLPlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, UnknownData_G4X3, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, GamepadTargetEffectClass, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, GamepadTargetEffect, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, CharacterName, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, CharacterID, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, SessionId, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, AccountNickname, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, ZoneId, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, ZoneRegion, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, ServerBuild, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, UnknownData_NOR4, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, GamepadSkillSlotGroupMapping, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, UnknownData_K8L7, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, MulticastComponent, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, GamePadComponent, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, CachedItemsOnGround, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, AchievementManager, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, TraitReplicate, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, UnknownData_OJEY, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, LastPressedSkill, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, UnknownData_CCPS, 0x0CD9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, GamePadMoveStepPercent, 0x0D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, GamepadEnemySelectRange, 0x0D4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, GamepadEnemySelectRadius, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, GamepadCamZoomFactor, 0x0D54);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, TargetPriority, 0x0D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, CollisionBuffer, 0x0DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, LookAheadDistance, 0x0DAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, CurrentSkillRequest, 0x0DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, PendingSkillRequest, 0x0DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, ClickedLocation, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, UnknownData_0N9K, 0x0E0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, ClickedActor, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, GroundClickParticleSystem, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, FallbackSelectedActor, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, UnknownData_6KSB, 0x0E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, HoveredActor, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, LastHoveredActor, 0x0E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, UnknownData_F9PZ, 0x0E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, GamepadInteractButtonWidgetClass, 0x0E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, GameHUDClass, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, GameplayErrorDuration, 0x0E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, UnknownData_OX0O, 0x0E6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, GamepadInteractButtonWidget, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, UnknownData_03HY, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, ModalMapCanvasWidget, 0x0E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, ModalMapWidget, 0x0E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, AccountId, 0x0E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, AccountIdHash, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, bIsAdmin, 0x0EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, UnknownData_XOIH, 0x0EA9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, RotationFrequencyDampingThreshold, 0x0EB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerController, UnknownData_7ZCM, 0x0EB8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATLPlayerController, 0x0F48);
		}

		// class ATLPlayerState : public APlayerState
		TEST_METHOD(Class__Frontiers__TLPlayerState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerState, UnknownData_TVS1, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerState, PlayerRowHandle, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerState, AccountNickname, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerState, AccountId, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerState, HostPlatform, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerState, UnknownData_SZ7J, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerState, PlatformAccountId, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerState, CurrentAreaRowHandle, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerState, CurrentAreaRelativeLocation, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerState, Difficulty, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerState, bHardcore, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLPlayerState, UnknownData_41LZ, 0x03B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATLPlayerState, 0x03D0);
		}

		// class UTLPostProcessManager : public UActorComponent
		TEST_METHOD(Class__Frontiers__TLPostProcessManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLPostProcessManager, VignetteMaterial, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLPostProcessManager, VignetteMaterialInstance, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLPostProcessManager, CustomVignetteFadeTime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLPostProcessManager, UnknownData_BSXS, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLPostProcessManager, OutlineHighMaterial, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLPostProcessManager, OutlineLowMaterial, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLPostProcessManager, CustomVignettes, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLPostProcessManager, UnknownData_BKDP, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLPostProcessManager, bIsOcclusionShaderEnabled, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLPostProcessManager, UnknownData_7C6J, 0x00F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLPostProcessManager, PPMaterialGlobals, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLPostProcessManager, ColorGradingLUT, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLPostProcessManager, UnknownData_O8TN, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLPostProcessManager, DOFOriginalSettings, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLPostProcessManager, UnknownData_5E11, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLPostProcessManager, DOFTransitionTo, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLPostProcessManager, DOFTransitionFrom, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLPostProcessManager, UnknownData_MB7B, 0x0134);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLPostProcessManager, 0x0170);
		}

		// class UTLPresenceSubsystem : public UGameInstanceSubsystem
		TEST_METHOD(Class__Frontiers__TLPresenceSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLPresenceSubsystem, 0x0030);
		}

		// class UTLProjectileMovementComponent : public UProjectileMovementComponent
		TEST_METHOD(Class__Frontiers__TLProjectileMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLProjectileMovementComponent, MovementType, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLProjectileMovementComponent, UnknownData_22SB, 0x01D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLProjectileMovementComponent, SideAccelerationAmplitude, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLProjectileMovementComponent, SideAccelerationFrequency, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLProjectileMovementComponent, SideAccelerationTimeOffset, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLProjectileMovementComponent, bSideAccelerationRandomTimeOffset, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLProjectileMovementComponent, bCrawlAlongGround, 0x01E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLProjectileMovementComponent, bChaoticPath, 0x01E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLProjectileMovementComponent, UnknownData_4T1M, 0x01E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLProjectileMovementComponent, ChaoticPathTimerMax, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLProjectileMovementComponent, ChaoticPathMaxArc, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLProjectileMovementComponent, bAbsZ, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLProjectileMovementComponent, UnknownData_ZPBW, 0x01ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLProjectileMovementComponent, GroundOffset, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLProjectileMovementComponent, MagnitudeVariationMax, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLProjectileMovementComponent, FrequencyVariationMax, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLProjectileMovementComponent, XAxisAmplitude, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLProjectileMovementComponent, XAxisFrequency, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLProjectileMovementComponent, ZAxisAmplitude, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLProjectileMovementComponent, ZAxisFrequency, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLProjectileMovementComponent, XAxisTimeOffset, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLProjectileMovementComponent, XAxisRampDuration, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLProjectileMovementComponent, ZAxisRampDuration, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLProjectileMovementComponent, MissileAmplitudeTransitionType, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLProjectileMovementComponent, UnknownData_MJNQ, 0x0219);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLProjectileMovementComponent, 0x0390);
		}

		// class ATLRecastNavMesh : public ARecastNavMesh
		TEST_METHOD(Class__Frontiers__TLRecastNavMesh)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATLRecastNavMesh, 0x04D8);
		}

		// class UTLRemoteSession : public UObject
		TEST_METHOD(Class__Frontiers__TLRemoteSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLRemoteSession, UnknownData_ZJMU, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLRemoteSession, OwnerLocalPlayer, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLRemoteSession, 0x0068);
		}

		// class UMaterialManagerComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__MaterialManagerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialManagerComponent, UnknownData_GUN0, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialManagerComponent, ActiveRequestID, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialManagerComponent, UnknownData_9TMA, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialManagerComponent, MaterialOverrideRequests, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialManagerComponent, CachedMaterials, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialManagerComponent, 0x0168);
		}

		// class UTLMaterialUtils : public UObject
		TEST_METHOD(Class__Frontiers__TLMaterialUtils)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLMaterialUtils, 0x0028);
		}

		// class UTLReplicationGraph : public UReplicationGraph
		TEST_METHOD(Class__Frontiers__TLReplicationGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLReplicationGraph, UnknownData_QA3S, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLReplicationGraph, UnknownData_UVXU, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLReplicationGraph, GridNode, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLReplicationGraph, AlwaysRelevantNode, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLReplicationGraph, AlwaysRelevantForConnectionList, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLReplicationGraph, ActorsWithoutNetConnection, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLReplicationGraph, PendingActors, 0x0560);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLReplicationGraph, 0x0570);
		}

		// class UTLServerPublisher : public UActorComponent
		TEST_METHOD(Class__Frontiers__TLServerPublisher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLServerPublisher, UnknownData_U5XE, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLServerPublisher, 0x0110);
		}

		// class UTLSpringArmComponent : public USpringArmComponent
		TEST_METHOD(Class__Frontiers__TLSpringArmComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLSpringArmComponent, UnknownData_U4P4, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLSpringArmComponent, NearFieldDOFSettings, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLSpringArmComponent, DOFTransitionInDuration, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLSpringArmComponent, DOFTransitionCancelDuration, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLSpringArmComponent, SecondActorBias, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLSpringArmComponent, SecondActorZoomOut, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLSpringArmComponent, DefaultZoomRate, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLSpringArmComponent, MinZoomLength, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLSpringArmComponent, ZoomAngleAdjust, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLSpringArmComponent, CameraTypeMap, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLSpringArmComponent, CameraRequestTypes, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLSpringArmComponent, CurrentCustomRequest, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLSpringArmComponent, BaseCameraYaw, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLSpringArmComponent, UnknownData_GGYQ, 0x0344);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLSpringArmComponent, 0x0390);
		}

		// class UTLTransmogDye : public UPlayerComponent
		TEST_METHOD(Class__Frontiers__TLTransmogDye)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTransmogDye, TransmogPreviewVFX, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTransmogDye, TransmogVFX, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTransmogDye, DyePreviewVFX, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTransmogDye, DyeVFX, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTransmogDye, UnknownData_CFOD, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLTransmogDye, 0x0400);
		}

		// class UTrapComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__TrapComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrapComponent, TrapOverride, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrapComponent, OverrideMonsterSpawner, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrapComponent, OverrideMonsterSpawnRow, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrapComponent, OverrideHazard, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrapComponent, bOverrideHazardDuration, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrapComponent, UnknownData_EFBI, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrapComponent, OverrideHazardDuration, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrapComponent, bOverrideTrapDelay, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrapComponent, UnknownData_O1CK, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrapComponent, OverrideTrapDelay, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrapComponent, CooldownSeconds, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrapComponent, UnknownData_H01D, 0x0134);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTrapComponent, 0x0138);
		}

		// class UCanTriggerTrapInterface : public UInterface
		TEST_METHOD(Class__Frontiers__CanTriggerTrapInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanTriggerTrapInterface, 0x0028);
		}

		// class UAnimNotify_TriggerTrap : public UAnimNotify
		TEST_METHOD(Class__Frontiers__AnimNotify_TriggerTrap)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_TriggerTrap, 0x0038);
		}

		// class UTLTravelComponent : public UPlayerComponent
		TEST_METHOD(Class__Frontiers__TLTravelComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTravelComponent, ServerTravelDebugMessage, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTravelComponent, UnknownData_2RBR, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTravelComponent, bUnlockAllWarps, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTravelComponent, ServerTravelState, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTravelComponent, ClientTravelState, 0x00BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTravelComponent, UnknownData_4SNA, 0x00BF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTravelComponent, SpawnLocation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTravelComponent, bClientHasLoadedLevels, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTravelComponent, bClientHasFinishedWarp, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTravelComponent, bClientHasLoadedActors, 0x00CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTravelComponent, bLevelsAreLoaded, 0x00CF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTravelComponent, AreaGuid, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTravelComponent, DesiredSpawnLocationName, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTravelComponent, LimboStatusEffect, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTravelComponent, MapworksTravelConfirmationWidget, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTravelComponent, DungeonLeaveConfirmationWidget, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTravelComponent, SeenAreaNames, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTravelComponent, UnknownData_66X4, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTravelComponent, WarpedStatusEffect, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTravelComponent, RequiredActorLoadPercent, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTravelComponent, RequiredActorLoadRadius, 0x06B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTravelComponent, MaxActorLoadWaitTimeSeconds, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTravelComponent, WarpedStatusEffectDuration, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTravelComponent, PetTeleportToMaxRadiusAfterTravelFirstAttempt, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTravelComponent, PetTeleportToMaxRadiusAfterTravelSecondAttempt, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTravelComponent, PetTeleportToMinDistanceAfterTravel, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTravelComponent, PetTeleportMaxAttemptsAfterTravel, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTravelComponent, PetPositioningDelaySeconds, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTravelComponent, PetPositioningMaxDelayedAttempts, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTravelComponent, UnknownData_FJME, 0x06D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLTravelComponent, 0x06F8);
		}

		// class UFrontiersFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Frontiers__FrontiersFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrontiersFunctionLibrary, 0x0028);
		}

		// class UWidgetInComponentInterface : public UInterface
		TEST_METHOD(Class__Frontiers__WidgetInComponentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetInComponentInterface, 0x0028);
		}

		// class ATLWorldSettings : public AWorldSettings
		TEST_METHOD(Class__Frontiers__TLWorldSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLWorldSettings, ConductorClass, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLWorldSettings, EditorConductorHandler, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLWorldSettings, EditorPreviewArea, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLWorldSettings, bRunWithoutServer, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLWorldSettings, bFetchSpreadsheetContentInEditor, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLWorldSettings, UnknownData_IBPP, 0x03C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLWorldSettings, ActiveConductor, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLWorldSettings, ActorPool, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATLWorldSettings, 0x03D8);
		}

		// class UToggleMeshMaterial : public UToggleSceneComponent
		TEST_METHOD(Class__Frontiers__ToggleMeshMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UToggleMeshMaterial, MaterialParameterName, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToggleMeshMaterial, MaterialParameterOffValue, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToggleMeshMaterial, MaterialParameterOnValue, 0x020C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToggleMeshMaterial, 0x0210);
		}

		// class UToggleSceneComponentParentInterface : public UInterface
		TEST_METHOD(Class__Frontiers__ToggleSceneComponentParentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToggleSceneComponentParentInterface, 0x0028);
		}

		// class UTrackFollowingComponent : public UTLCharacterMovementComponent
		TEST_METHOD(Class__Frontiers__TrackFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrackFollowingComponent, MaxSpeed, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrackFollowingComponent, bPatrol, 0x0B34);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrackFollowingComponent, UnknownData_4P02, 0x0B35);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrackFollowingComponent, TrackAcceleration, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrackFollowingComponent, UnknownData_2EWQ, 0x0B3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrackFollowingComponent, CurrentNode, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrackFollowingComponent, TrackFollowingData, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrackFollowingComponent, ControlPointId, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrackFollowingComponent, ControlPointParameter, 0x0B5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrackFollowingComponent, CurrentSpeed, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrackFollowingComponent, UnknownData_OUYV, 0x0B64);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrackFollowingComponent, NextInChain, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrackFollowingComponent, PreviousInChain, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrackFollowingComponent, bMoveWhileBusy, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrackFollowingComponent, UnknownData_D6RP, 0x0B79);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrackFollowingComponent, LengthOnTrack, 0x0B7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrackFollowingComponent, UnknownData_US0V, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrackFollowingComponent, ClientSpeedAdjustmentPercent, 0x0B84);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrackFollowingComponent, UnknownData_1AMR, 0x0B88);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTrackFollowingComponent, 0x0B90);
		}

		// class ATrackNode : public AHazard
		TEST_METHOD(Class__Frontiers__TrackNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrackNode, HazardVisualSplineFollowerClass, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrackNode, HazardVisualSplineFollower, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrackNode, Spline, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrackNode, bTrackHazardActive, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrackNode, UnknownData_EHF8, 0x0459);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrackNode, EndBufferActor, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrackNode, RequiredStatusToExtend, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrackNode, MinDistanceToExtend, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrackNode, MaxDistanceToExtend, 0x0474);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATrackNode, 0x0478);
		}

		// class ATrackBuffer : public AActor
		TEST_METHOD(Class__Frontiers__TrackBuffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrackBuffer, UnknownData_NX50, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrackBuffer, TrackNode, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrackBuffer, GameplayTags, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATrackBuffer, 0x0250);
		}

		// class ATurretActor : public ATLCharacter
		TEST_METHOD(Class__Frontiers__TurretActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATurretActor, 0x0730);
		}

		// class UTrainLeadComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__TrainLeadComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrainLeadComponent, UnknownData_BWXG, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTrainLeadComponent, 0x00D0);
		}

		// class UTrainCarDataComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__TrainCarDataComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrainCarDataComponent, UnknownData_SDB0, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrainCarDataComponent, MinionRowHandle, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrainCarDataComponent, TrainCarSkillSlot, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrainCarDataComponent, UnknownData_57WL, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrainCarDataComponent, CarOrder, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrainCarDataComponent, UnknownData_IB0I, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrainCarDataComponent, GameplayTags, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTrainCarDataComponent, 0x00F8);
		}

		// class UTraits : public UActorComponent
		TEST_METHOD(Class__Frontiers__Traits)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraits, UnknownData_27T0, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraits, InitialTraits, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraits, ActiveTraits, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraits, UnknownData_K3X3, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraits, TraitReplicate, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraits, UnknownData_DIXU, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTraits, 0x04E0);
		}

		// class UNonAuthoritativeClientTraits : public UTraits
		TEST_METHOD(Class__Frontiers__NonAuthoritativeClientTraits)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNonAuthoritativeClientTraits, 0x04E0);
		}

		// class UTraitsInterface : public UInterface
		TEST_METHOD(Class__Frontiers__TraitsInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTraitsInterface, 0x0028);
		}

		// class UTraitReplicateInterface : public UInterface
		TEST_METHOD(Class__Frontiers__TraitReplicateInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTraitReplicateInterface, 0x0028);
		}

		// class USpawnDataEntryAddTrapMonsterSpawner : public USpawnEntryBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryAddTrapMonsterSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnDataEntryAddTrapMonsterSpawner, UnknownData_9YC0, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryAddTrapMonsterSpawner, 0x0068);
		}

		// class USpawnDataEntryAddTrapHazard : public USpawnEntryBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryAddTrapHazard)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnDataEntryAddTrapHazard, UnknownData_Y8UR, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryAddTrapHazard, 0x0060);
		}

		// class USpawnDataEntryGotoTrapSpawnRow : public USpawnDataEntryGotoSpawnRowBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryGotoTrapSpawnRow)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryGotoTrapSpawnRow, 0x0038);
		}

		// class USpawnDataEntryTrapSetDelay : public USpawnEntryBase
		TEST_METHOD(Class__Frontiers__SpawnDataEntryTrapSetDelay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnDataEntryTrapSetDelay, UnknownData_JK6R, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnDataEntryTrapSetDelay, 0x0038);
		}

		// class UUsableItemInterface : public UInterface
		TEST_METHOD(Class__Frontiers__UsableItemInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUsableItemInterface, 0x0028);
		}

		// class AUserGeneratedContentBlocker : public AActor
		TEST_METHOD(Class__Frontiers__UserGeneratedContentBlocker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AUserGeneratedContentBlocker, ErrorMessages, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUserGeneratedContentBlocker, BlockedStatus, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUserGeneratedContentBlocker, UnknownData_QA04, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUserGeneratedContentBlocker, ErrorMessageDuration, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AUserGeneratedContentBlocker, 0x0278);
		}

		// class UUserPrivileges : public UObject
		TEST_METHOD(Class__Frontiers__UserPrivileges)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserPrivileges, UnknownData_OAJD, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserPrivileges, 0x00A8);
		}

		// class UUserSettings : public UTLSaveGame
		TEST_METHOD(Class__Frontiers__UserSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, TermsOfServiceVersion, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, PrivacyPolicyVersion, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, bCinematicSeen, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, bHelpDisabled, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, bSteamDataSuiteTokenSent, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, UnknownData_R6FP, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, Culture, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, LinkedArcUserId, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, shadowArcUserId, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, email, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, UserAccountId, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, bEmailValidated, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, UnknownData_EEPH, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, Sequence, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, NextLoginTime, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, LoginAttemptRepeatCount, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, UnknownData_83DK, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, LinkAccountStarted, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, bMasterMute, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, bMusicMute, 0x0161);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, UnknownData_PQ0H, 0x0162);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, MasterVolumePercent, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, MusicVolumePercent, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, AudioInputVolumePercent, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, AudioInputDeviceId, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, VoiceChatRole, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, UnknownData_45XK, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, CustomInputActionMappings, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, RemovedInputActionMappings, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, UIScalePercent, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, SafeZonePercent, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, ColorSeverityPercent, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, ColorMode, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, bDisableCameraShake, 0x01B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, bBloodEnabled, 0x01B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, bDamageNumbersEnabled, 0x01B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, bOverheadAccountNames, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, bMouseMovementDisabled, 0x01B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, bSkillRetargetingEnabled, 0x01BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, bRevertToMovementDisabled, 0x01BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, bAlwaysShowItemNameplates, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, bTextChatUIEnabled, 0x01BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, bPrivacyPolicySeen, 0x01BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, UnknownData_RI9R, 0x01BF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, LastAskedSinglePlayer, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, bAcceptedSinglePlayerMetrics, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, UnknownData_BCJK, 0x01C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserSettings, MyLocalPlayer, 0x01D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserSettings, 0x01D8);
		}

		// class UVendorComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__VendorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorComponent, UnknownData_D3PD, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorComponent, CatalogList, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorComponent, HelloAudioEvent, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorComponent, HelloAudioTableEntry, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorComponent, GoodbyeAudioEvent, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorComponent, GoodbyeAudioTableEntry, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorComponent, ShopTabName, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVendorComponent, 0x0130);
		}

		// class UVirtualAsset : public UObject
		TEST_METHOD(Class__Frontiers__VirtualAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualAsset, UnknownData_8UDC, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualAsset, 0x0038);
		}

		// class UWaitForPlayerComponentInterface : public UInterface
		TEST_METHOD(Class__Frontiers__WaitForPlayerComponentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWaitForPlayerComponentInterface, 0x0028);
		}

		// class UWardrobeComponent : public UActorComponent
		TEST_METHOD(Class__Frontiers__WardrobeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobeComponent, Part, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobeComponent, PreviewDyeMatrix, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobeComponent, DefaultSkinTone, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobeComponent, DefaultHair, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobeComponent, DefaultEye, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobeComponent, UnknownData_SXWU, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobeComponent, Wardrobe, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWardrobeComponent, 0x01A0);
		}

		// class UWardrobeChildSkeletalMeshComponent : public USkeletalMeshComponent
		TEST_METHOD(Class__Frontiers__WardrobeChildSkeletalMeshComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWardrobeChildSkeletalMeshComponent, 0x0ED0);
		}

		// class UWardrobe : public UObject
		TEST_METHOD(Class__Frontiers__Wardrobe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobe, UnknownData_SMTP, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobe, Parts, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobe, CharacterCustomization, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobe, CopiedParticleSystems, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobe, MergedMeshParticleSystems, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobe, PartSkeletalMeshComponents, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobe, ActorsToAttach, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobe, UnknownData_HWB9, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobe, ReplicatedWardrobeItems, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobe, ReplicatedAttachmentItems, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobe, UnknownData_JSAS, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobe, CurrentWardrobeItems, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobe, CurrentAttachmentItems, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobe, WardrobeOverride, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobe, WardrobeOverrideParticles, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobe, UnknownData_M9WI, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobe, ParentMeshComponent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobe, UnknownData_7YOB, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobe, VisibilityOverride, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobe, AttachOffsetOverride, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobe, ParentBaseMaterial, 0x03F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWardrobe, 0x0400);
		}

		// class UWardrobeItemPropertyInterface : public UInterface
		TEST_METHOD(Class__Frontiers__WardrobeItemPropertyInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWardrobeItemPropertyInterface, 0x0028);
		}

		// class UWardrobePropComponent : public UOperableComponent
		TEST_METHOD(Class__Frontiers__WardrobePropComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropComponent, UnknownData_5FDF, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropComponent, RequiredOperatorTags, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropComponent, bHardcoreOnly, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropComponent, Gender, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropComponent, UnknownData_OAL4, 0x0102);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropComponent, FemaleWardrobeItemGameplayTag, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropComponent, MaleWardrobeItemGameplayTag, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropComponent, MaleWardrobeItemPropertyName, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropComponent, FemaleWardrobeItemPropertyName, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropComponent, UnknownData_NXYG, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropComponent, GenderChangeEffect, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWardrobePropComponent, 0x0200);
		}

		// class AWarpBack : public AWarpGadget
		TEST_METHOD(Class__Frontiers__WarpBack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWarpBack, 0x04C0);
		}

		// class AWarpBackLocation : public AActor
		TEST_METHOD(Class__Frontiers__WarpBackLocation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWarpBackLocation, 0x0220);
		}

		// class USpawnLocationDestination : public UActorComponent
		TEST_METHOD(Class__Frontiers__SpawnLocationDestination)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnLocationDestination, DestinationWarpToIndex, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnLocationDestination, UnknownData_JC1E, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnLocationDestination, 0x00B8);
		}

		// class AWarpLocal : public AGadget
		TEST_METHOD(Class__Frontiers__WarpLocal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWarpLocal, LocalDestination, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWarpLocal, bNoCameraLag, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWarpLocal, bPlayWarpCameraFade, 0x04A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWarpLocal, UnknownData_ZTKO, 0x04AA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWarpLocal, 0x04B0);
		}

		// class AWaypointGadget : public AGadget
		TEST_METHOD(Class__Frontiers__WaypointGadget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaypointGadget, bAlwaysEnabled, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaypointGadget, UnknownData_AJAV, 0x04A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaypointGadget, ClickVolume, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaypointGadget, Destination, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaypointGadget, MapMarker, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWaypointGadget, 0x04C0);
		}

		// class UXboxMultiplayerActivity : public UPlayerComponent
		TEST_METHOD(Class__Frontiers__XboxMultiplayerActivity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UXboxMultiplayerActivity, UnknownData_2609, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UXboxMultiplayerActivity, 0x0110);
		}

		// class UZoneInstanceManager : public UActorComponent
		TEST_METHOD(Class__Frontiers__ZoneInstanceManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UZoneInstanceManager, UnknownData_85F4, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZoneInstanceManager, ZoneId, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZoneInstanceManager, CurrentPlayers, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZoneInstanceManager, CurrentPortalProxies, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZoneInstanceManager, PartyIdForZone, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZoneInstanceManager, 0x0158);
		}

		// class UTestAreaWithMapWorksEntries : public UArea
		TEST_METHOD(Class__FrontiersTests__TestAreaWithMapWorksEntries)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestAreaWithMapWorksEntries, 0x00B8);
		}

		// class UTestArea_NoMinions : public UArea
		TEST_METHOD(Class__FrontiersTests__TestArea_NoMinions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestArea_NoMinions, 0x00B8);
		}

		// class UTestArea_MinionA_SkillA : public UArea
		TEST_METHOD(Class__FrontiersTests__TestArea_MinionA_SkillA)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestArea_MinionA_SkillA, 0x00B8);
		}

		// class UTestArea_MinionB_SkillB : public UArea
		TEST_METHOD(Class__FrontiersTests__TestArea_MinionB_SkillB)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestArea_MinionB_SkillB, 0x00B8);
		}

		// class UTestArea_IceMinionA_FireMinionB : public UArea
		TEST_METHOD(Class__FrontiersTests__TestArea_IceMinionA_FireMinionB)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestArea_IceMinionA_FireMinionB, 0x00B8);
		}

		// class UTestSkill : public USkill
		TEST_METHOD(Class__FrontiersTests__TestSkill)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestSkill, UnknownData_GNH1, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestSkill, 0x0600);
		}

		// class UTestProcSkill1 : public UTestSkill
		TEST_METHOD(Class__FrontiersTests__TestProcSkill1)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestProcSkill1, 0x0600);
		}

		// class UTestProcSkill2 : public UTestSkill
		TEST_METHOD(Class__FrontiersTests__TestProcSkill2)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestProcSkill2, 0x0600);
		}

		// class UTestProcSkill3 : public UTestSkill
		TEST_METHOD(Class__FrontiersTests__TestProcSkill3)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestProcSkill3, 0x0600);
		}

		// class UTestActiveTrait : public UActiveTrait
		TEST_METHOD(Class__FrontiersTests__TestActiveTrait)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestActiveTrait, UnknownData_7AQP, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestActiveTrait, 0x01C8);
		}

		// class ATestActorProxyNode : public AActorProxyNode
		TEST_METHOD(Class__FrontiersTests__TestActorProxyNode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestActorProxyNode, 0x02A0);
		}

		// class ATestActorProxy : public AActorProxy
		TEST_METHOD(Class__FrontiersTests__TestActorProxy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestActorProxy, 0x0248);
		}

		// class UTestHandledObject : public UObject
		TEST_METHOD(Class__FrontiersTests__TestHandledObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestHandledObject, UnknownData_B92S, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestHandledObject, 0x0030);
		}

		// class UTestConductorHandler : public UConductorHandler
		TEST_METHOD(Class__FrontiersTests__TestConductorHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestConductorHandler, UnknownData_XB92, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestConductorHandler, 0x00C8);
		}

		// class ATestHazard : public AHazard
		TEST_METHOD(Class__FrontiersTests__TestHazard)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATestHazard, UnknownData_BJRB, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestHazard, 0x0448);
		}

		// class UTestListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersTests__TestListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestListWidget, 0x0250);
		}

		// class UTestListSelectableWidget : public UUserWidget
		TEST_METHOD(Class__FrontiersTests__TestListSelectableWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestListSelectableWidget, UnknownData_H6IH, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestListSelectableWidget, 0x0278);
		}

		// class UTestOperableComponent : public UOperableComponent
		TEST_METHOD(Class__FrontiersTests__TestOperableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestOperableComponent, UnknownData_JBRE, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestOperableComponent, 0x00C8);
		}

		// class ATestPerPlayerActorNode : public APerPlayerActorNode
		TEST_METHOD(Class__FrontiersTests__TestPerPlayerActorNode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestPerPlayerActorNode, 0x0268);
		}

		// class ATestQuestActivatedActor : public AActor
		TEST_METHOD(Class__FrontiersTests__TestQuestActivatedActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATestQuestActivatedActor, QuestObject, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestQuestActivatedActor, 0x0228);
		}

		// class ATestProjectile : public AMissile
		TEST_METHOD(Class__FrontiersTests__TestProjectile)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestProjectile, 0x0680);
		}

		// class UTestSkill_2 : public UTestSkill
		TEST_METHOD(Class__FrontiersTests__TestSkill_2)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestSkill_2, 0x0600);
		}

		// class UTestSkill_3 : public UTestSkill
		TEST_METHOD(Class__FrontiersTests__TestSkill_3)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestSkill_3, 0x0600);
		}

		// class UTestSkill_4 : public UTestSkill
		TEST_METHOD(Class__FrontiersTests__TestSkill_4)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestSkill_4, 0x0600);
		}

		// class UTestSkill_5 : public UTestSkill
		TEST_METHOD(Class__FrontiersTests__TestSkill_5)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestSkill_5, 0x0600);
		}

		// class UTestSkill_6 : public UTestSkill
		TEST_METHOD(Class__FrontiersTests__TestSkill_6)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestSkill_6, 0x0600);
		}

		// class UTestSkill_7 : public UTestSkill
		TEST_METHOD(Class__FrontiersTests__TestSkill_7)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestSkill_7, 0x0600);
		}

		// class UTestSkill_TargetLocationAboveActor : public UTestSkill
		TEST_METHOD(Class__FrontiersTests__TestSkill_TargetLocationAboveActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestSkill_TargetLocationAboveActor, 0x0600);
		}

		// class UTestSkill_AnimationAlwaysCancel : public UTestSkill
		TEST_METHOD(Class__FrontiersTests__TestSkill_AnimationAlwaysCancel)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestSkill_AnimationAlwaysCancel, 0x0600);
		}

		// class UTestSkill_AnimationNeverCancel : public UTestSkill
		TEST_METHOD(Class__FrontiersTests__TestSkill_AnimationNeverCancel)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestSkill_AnimationNeverCancel, 0x0600);
		}

		// class UTestSkill_AnimationDeferToMontage : public UTestSkill
		TEST_METHOD(Class__FrontiersTests__TestSkill_AnimationDeferToMontage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestSkill_AnimationDeferToMontage, 0x0600);
		}

		// class ATestSkillShape : public ASkillShape
		TEST_METHOD(Class__FrontiersTests__TestSkillShape)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATestSkillShape, Collision, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestSkillShape, 0x0290);
		}

		// class UTestStatusEffect2 : public UStatusEffect
		TEST_METHOD(Class__FrontiersTests__TestStatusEffect2)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestStatusEffect2, 0x0280);
		}

		// class UTestStatusEffect3 : public UStatusEffect
		TEST_METHOD(Class__FrontiersTests__TestStatusEffect3)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestStatusEffect3, 0x0280);
		}

		// class UTestStatusEffect : public UStatusEffect
		TEST_METHOD(Class__FrontiersTests__TestStatusEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestStatusEffect, UnknownData_FPZL, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestStatusEffect, 0x0288);
		}

		// class UTestDamageStatusEffect : public UTestStatusEffect
		TEST_METHOD(Class__FrontiersTests__TestDamageStatusEffect)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestDamageStatusEffect, 0x0288);
		}

		// class UTestDisallowedTagsStatusEffect : public UTestStatusEffect
		TEST_METHOD(Class__FrontiersTests__TestDisallowedTagsStatusEffect)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestDisallowedTagsStatusEffect, 0x0288);
		}

		// class UTestFlagStatusEffect : public UTestStatusEffect
		TEST_METHOD(Class__FrontiersTests__TestFlagStatusEffect)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestFlagStatusEffect, 0x0288);
		}

		// class UTestTLUserWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersTests__TestTLUserWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestTLUserWidget, CurrentCharacter, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestTLUserWidget, 0x0648);
		}

		// class UTestTrigger : public UObject
		TEST_METHOD(Class__FrontiersTests__TestTrigger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestTrigger, UnknownData_PWL3, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestTrigger, 0x0048);
		}

		// class UTestTLInventoryContainerInbox : public UTLInventoryContainerInbox
		TEST_METHOD(Class__FrontiersTests__TestTLInventoryContainerInbox)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestTLInventoryContainerInbox, 0x0210);
		}

		// class ATestPickupItem : public AActor
		TEST_METHOD(Class__FrontiersTests__TestPickupItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATestPickupItem, UnknownData_GZQ4, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestPickupItem, 0x0228);
		}

		// class UTestInventoryContainerItems : public UTLInventoryContainerItems
		TEST_METHOD(Class__FrontiersTests__TestInventoryContainerItems)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestInventoryContainerItems, UnknownData_RX1O, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestInventoryContainerItems, 0x01F8);
		}

		// class UTestInventoryContainerUnequippedItems : public UTLInventoryContainerUnequippedItems
		TEST_METHOD(Class__FrontiersTests__TestInventoryContainerUnequippedItems)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestInventoryContainerUnequippedItems, 0x01F8);
		}

		// class UTestInventoryContainerStatusEffects : public UTLInventoryContainerStatusEffects
		TEST_METHOD(Class__FrontiersTests__TestInventoryContainerStatusEffects)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestInventoryContainerStatusEffects, 0x0338);
		}

		// class UTestInventoryContainerWardrobe : public UTLInventoryContainerWardrobe
		TEST_METHOD(Class__FrontiersTests__TestInventoryContainerWardrobe)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestInventoryContainerWardrobe, 0x0310);
		}

		// class UTestInventoryContainerPetItems : public UTLInventoryContainerPetItems
		TEST_METHOD(Class__FrontiersTests__TestInventoryContainerPetItems)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestInventoryContainerPetItems, 0x01F8);
		}

		// class UTestInventoryContainerMinions : public UTLInventoryContainerMinions
		TEST_METHOD(Class__FrontiersTests__TestInventoryContainerMinions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestInventoryContainerMinions, 0x01F8);
		}

		// class UMockTravelComponent : public UTLTravelComponent
		TEST_METHOD(Class__FrontiersTests__MockTravelComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockTravelComponent, UnknownData_7NUL, 0x06F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMockTravelComponent, 0x0700);
		}

		// class UBaseSingleSlotWidget : public UContentWidget
		TEST_METHOD(Class__FrontiersUI__BaseSingleSlotWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseSingleSlotWidget, UnknownData_CAM6, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseSingleSlotWidget, 0x0130);
		}

		// class UListWidget : public UBaseSingleSlotWidget
		TEST_METHOD(Class__FrontiersUI__ListWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UListWidget, WidgetClass, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListWidget, PanelName, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListWidget, WrapSelection, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListWidget, ListDirection, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListWidget, UnknownData_XBWI, 0x0142);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListWidget, NumGridColumns, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListWidget, NumMinimumGridRows, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListWidget, NavigationScheme, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListWidget, WidgetHorizontalAlignment, 0x014D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListWidget, WidgetVerticalAlignment, 0x014E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListWidget, UnknownData_JHY0, 0x014F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListWidget, WidgetSize, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListWidget, bReverseFillHorizontal, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListWidget, bReverseFillVertical, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListWidget, bInvalidateOnRefresh, 0x015A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListWidget, bLazyLoad, 0x015B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListWidget, LazyLoadPadding, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListWidget, MaxWidgetsCreatedPerFrame, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListWidget, GetNextListBinding, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListWidget, UnknownData_I4VQ, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListWidget, DefaultWidgetSelectionIndex, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListWidget, UnknownData_V10D, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListWidget, SelectedWidget, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListWidget, ScrollBox, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListWidget, LoadingSpinner, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListWidget, PanelWidget, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListWidget, UnknownData_SDOI, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListWidget, WidgetFocusEvent, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListWidget, 0x0250);
		}

		// class UTLUserWidget : public UUserWidget
		TEST_METHOD(Class__FrontiersUI__TLUserWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLUserWidget, bIsModal, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLUserWidget, bCannotBeUnfocused, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLUserWidget, bConsumeAllMouseInput, 0x0262);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLUserWidget, bHideHUDWhileVisible, 0x0263);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLUserWidget, bAcceptInputKeyRepeat, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLUserWidget, bMouseKeyboardActionsRequireHover, 0x0265);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLUserWidget, bCanBeClosed, 0x0266);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLUserWidget, bHideInsteadOfClose, 0x0267);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLUserWidget, NavigationScheme, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLUserWidget, UnknownData_LZG9, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLUserWidget, ServerRPCThrottleMilliseconds, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLUserWidget, DragMouseButton, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLUserWidget, BackAction, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLUserWidget, PrimaryAction, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLUserWidget, FocusReturn, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLUserWidget, SelectWidgetAnimation, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLUserWidget, BlueprintOnClosedEvent, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLUserWidget, UnknownData_42YB, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLUserWidget, AudioMap, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLUserWidget, ShownSnapshot, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLUserWidget, UnknownData_JBOK, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLUserWidget, ShownStatusEffectClass, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLUserWidget, ShownStatusEffect, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLUserWidget, UnknownData_FKR3, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLUserWidget, ActiveHideAnimation, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLUserWidget, TooltipAnchor, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLUserWidget, bShowFocusWhenHovered, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLUserWidget, UnknownData_JSQ1, 0x0561);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLUserWidget, PrimaryTick, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLUserWidget, UnknownData_QC44, 0x0630);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLUserWidget, 0x0640);
		}

		// class UAccountCreatePanel : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__AccountCreatePanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountCreatePanel, UnknownData_00MB, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountCreatePanel, FailedToGetLoginTokenModal, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountCreatePanel, FailedToGetLinkCodeModal, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountCreatePanel, FailedToCreateShadowAccountModal, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountCreatePanel, UnknownData_27CZ, 0x0D70);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAccountCreatePanel, 0x0D80);
		}

		// class UAccountLinkPanel : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__AccountLinkPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountLinkPanel, LinkCodeFormatString, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountLinkPanel, UnknownData_5J0D, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountLinkPanel, FollowLinkAction, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAccountLinkPanel, 0x0778);
		}

		// class UAccountOptionsModalWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__AccountOptionsModalWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptionsModalWidget, UnlinkFirstWarningModal, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptionsModalWidget, UnlinkSecondWarningModal, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptionsModalWidget, UnlinkCompleteModal, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptionsModalWidget, UnlinkFailedModal, 0x0D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountOptionsModalWidget, UnknownData_XA7I, 0x0FC0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAccountOptionsModalWidget, 0x1208);
		}

		// class UAccountResetModalWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__AccountResetModalWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountResetModalWidget, bIsMultiplayerReset, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountResetModalWidget, UnknownData_5M7Z, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountResetModalWidget, ConfirmModalDefinition, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountResetModalWidget, ConfirmCompleteModalDefinition, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountResetModalWidget, ResetFailedModalDefinition, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccountResetModalWidget, UnknownData_798Y, 0x0D68);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAccountResetModalWidget, 0x0D70);
		}

		// class UActiveTraitBarWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__ActiveTraitBarWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTraitBarWidget, UnknownData_EQ17, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTraitBarWidget, ActiveTraitRow, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTraitBarWidget, bUsePlayerEnergy, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTraitBarWidget, bIsDiscrete, 0x0681);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTraitBarWidget, ProgressBarFillType, 0x0682);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTraitBarWidget, UnknownData_GULN, 0x0683);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTraitBarWidget, ResourceFilledAnimation, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTraitBarWidget, ResourceNoLongerFilledAnimation, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTraitBarWidget, ResourceFullLoopAnimation, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTraitBarWidget, ResourceIncreasingAnimation, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTraitBarWidget, AnimatedWidget, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTraitBarWidget, ProgressBarStyle, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTraitBarWidget, TooltipWidgetClass, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTraitBarWidget, ActiveTraitTooltipWidget, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTraitBarWidget, ProgressBar, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTraitBarWidget, UnknownData_RRA0, 0x0868);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActiveTraitBarWidget, 0x0878);
		}

		// class UTooltipWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__TooltipWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTooltipWidget, UnknownData_Z3CD, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTooltipWidget, 0x0680);
		}

		// class UActiveTraitTooltipWidget : public UTooltipWidget
		TEST_METHOD(Class__FrontiersUI__ActiveTraitTooltipWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActiveTraitTooltipWidget, 0x0680);
		}

		// class UActiveTraitWidgetInterface : public UInterface
		TEST_METHOD(Class__FrontiersUI__ActiveTraitWidgetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActiveTraitWidgetInterface, 0x0028);
		}

		// class UActorDebugInfoWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__ActorDebugInfoWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorDebugInfoWidget, Target, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorDebugInfoWidget, 0x0648);
		}

		// class UAffixListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__AffixListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAffixListWidget, 0x0250);
		}

		// class ULockedAffixListWidget : public UAffixListWidget
		TEST_METHOD(Class__FrontiersUI__LockedAffixListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULockedAffixListWidget, 0x0250);
		}

		// class UAffixWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__AffixWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAffixWidget, AffixText, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAffixWidget, SetNameText, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAffixWidget, bSetUnlocked, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAffixWidget, UnknownData_BF33, 0x0671);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAffixWidget, 0x0678);
		}

		// class ULockedAffixWidget : public UAffixWidget
		TEST_METHOD(Class__FrontiersUI__LockedAffixWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULockedAffixWidget, UnlockLevelText, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULockedAffixWidget, LockVisibility, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULockedAffixWidget, UnlockedVisibility, 0x0691);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULockedAffixWidget, UnknownData_44JT, 0x0692);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULockedAffixWidget, 0x0698);
		}

		// class UAllyInfoWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__AllyInfoWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAllyInfoWidget, UnknownData_K4BF, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAllyInfoWidget, PortraitBaseMaterial, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAllyInfoWidget, PortraitDesaturatedBaseMaterial, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAllyInfoWidget, BorderBrushes, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAllyInfoWidget, LowHealthPercent, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAllyInfoWidget, LowHealthVisibility, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAllyInfoWidget, UnknownData_7LC1, 0x06D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAllyInfoWidget, HealthProgressBar, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAllyInfoWidget, LevelText, 0x0710);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAllyInfoWidget, 0x0718);
		}

		// class UTLImage : public UImage
		TEST_METHOD(Class__FrontiersUI__TLImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLImage, Material, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLImage, NormalMap, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLImage, MaterialTextureParameterName, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLImage, UnknownData_1Y6L, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLImage, 0x0238);
		}

		// class UAsyncImage : public UTLImage
		TEST_METHOD(Class__FrontiersUI__AsyncImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncImage, TextureAsset, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncImage, PendingIconAsset, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncImage, 0x0298);
		}

		// class UBaseListedObjectWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__BaseListedObjectWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseListedObjectWidget, UnknownData_GFSK, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseListedObjectWidget, 0x0648);
		}

		// class UBaseSkillBarWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__BaseSkillBarWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseSkillBarWidget, ClassSkillBars, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseSkillBarWidget, UnknownData_8MVG, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseSkillBarWidget, PotionWidgets, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseSkillBarWidget, PotionItemClass, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseSkillBarWidget, DefaultPotionWidget, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseSkillBarWidget, ResourceBar, 0x06C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseSkillBarWidget, 0x06D0);
		}

		// class UTargetInfoWidgetContainer : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__TargetInfoWidgetContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidgetContainer, bForceShow, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidgetContainer, UnknownData_9GTC, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidgetContainer, WidgetClasses, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidgetContainer, UnknownData_J3X2, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidgetContainer, Widgets, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidgetContainer, UnknownData_FE3K, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidgetContainer, CurrentTargetWidget, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidgetContainer, PanelWidget, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidgetContainer, OverallVisibilityContainer, 0x0710);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTargetInfoWidgetContainer, 0x0718);
		}

		// class UBossInfoWidget : public UTargetInfoWidgetContainer
		TEST_METHOD(Class__FrontiersUI__BossInfoWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBossInfoWidget, 0x0718);
		}

		// class UButtonListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__ButtonListWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonListWidget, ButtonStyle, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonListWidget, TextStyle, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonListWidget, 0x0260);
		}

		// class UBuybackItemListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__BuybackItemListWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuybackItemListWidget, ComparisonWidgetClass, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuybackItemListWidget, ComparisonWidget, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuybackItemListWidget, 0x0260);
		}

		// class UVendorInventoryEntryWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__VendorInventoryEntryWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorInventoryEntryWidget, BuyAction, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorInventoryEntryWidget, BulkBuyAction, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorInventoryEntryWidget, UnknownData_GHXM, 0x0830);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVendorInventoryEntryWidget, 0x0908);
		}

		// class UBuybackItemWidget : public UVendorInventoryEntryWidget
		TEST_METHOD(Class__FrontiersUI__BuybackItemWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuybackItemWidget, UnknownData_TFQF, 0x0908);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuybackItemWidget, 0x0910);
		}

		// class UCarouselWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__CarouselWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCarouselWidget, SelectedIndex, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCarouselWidget, UnknownData_OJ8B, 0x0644);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCarouselWidget, 0x0648);
		}

		// class UCatalogEntryWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__CatalogEntryWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCatalogEntryWidget, Name, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCatalogEntryWidget, ShortDescription, 0x0658);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCatalogEntryWidget, 0x0670);
		}

		// class UTargetInfoWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__TargetInfoWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget, UnknownData_6176, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget, ParentContainer, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget, HPBarFragments, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget, HPBarFragmentClass, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget, UnknownData_WS4S, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget, MinTimeBetweenBarFragments, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget, UnknownData_IDTD, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget, WidgetElementsByType, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget, NameTextBlock, 0x06C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTargetInfoWidget, 0x06C8);
		}

		// class UChampionTargetInfoWidget : public UTargetInfoWidget
		TEST_METHOD(Class__FrontiersUI__ChampionTargetInfoWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChampionTargetInfoWidget, ChampionDisplayData, 0x06C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChampionTargetInfoWidget, 0x0718);
		}

		// class UTabbedMenuWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__TabbedMenuWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedMenuWidget, TabbedMenus, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedMenuWidget, bCanReopenMenus, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedMenuWidget, UnknownData_4WE8, 0x0651);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedMenuWidget, NavigateLeftKey, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedMenuWidget, NavigateRightKey, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedMenuWidget, PersistentMenuOption, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedMenuWidget, bHideTabNames, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedMenuWidget, bRouteInputToSubMenu, 0x06F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedMenuWidget, UnknownData_SG13, 0x06FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedMenuWidget, PersistentWidgets, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedMenuWidget, UnknownData_6Q1Z, 0x0710);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTabbedMenuWidget, 0x0728);
		}

		// class UCharacterMenuHeader : public UTabbedMenuWidget
		TEST_METHOD(Class__FrontiersUI__CharacterMenuHeader)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterMenuHeader, 0x0728);
		}

		// class UChatMessageListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__ChatMessageListWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatMessageListWidget, MaximumMessages, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatMessageListWidget, UnknownData_IRFS, 0x0254);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChatMessageListWidget, 0x0258);
		}

		// class UChatMessageWidget : public UUserWidget
		TEST_METHOD(Class__FrontiersUI__ChatMessageWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatMessageWidget, UnknownData_61FX, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChatMessageWidget, 0x02C0);
		}

		// class UChatWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__ChatWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget, FadeDelay, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget, UnknownData_YLHK, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget, ChannelDefinitions, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget, CycleChannelKey, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget, HelpText, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget, UnknownData_W8OP, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget, bFadedOut, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget, UnknownData_1BV2, 0x06D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget, CurrentChannelColor, 0x06DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget, UnknownData_L454, 0x06EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidget, CurrentChannelHeader, 0x06F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChatWidget, 0x0708);
		}

		// class UCinematicWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__CinematicWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicWidget, UnknownData_3NH6, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicWidget, ConfirmationHideTimeSeconds, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicWidget, UnknownData_E7NS, 0x065C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCinematicWidget, 0x0668);
		}

		// class ULevelSequenceCinematicWidget : public UCinematicWidget
		TEST_METHOD(Class__FrontiersUI__LevelSequenceCinematicWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceCinematicWidget, 0x0668);
		}

		// class UHUDElementNoTick : public UUserWidget
		TEST_METHOD(Class__FrontiersUI__HUDElementNoTick)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHUDElementNoTick, 0x0260);
		}

		// class UBaseClassResourceWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__BaseClassResourceWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseClassResourceWidget, UnknownData_UBK8, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseClassResourceWidget, EnergyActiveTrait, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseClassResourceWidget, TooltipWidgetClass, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseClassResourceWidget, ActiveTraitTooltipWidget, 0x0688);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseClassResourceWidget, 0x0690);
		}

		// class UDuskMageResourceBar : public UBaseClassResourceWidget
		TEST_METHOD(Class__FrontiersUI__DuskMageResourceBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDuskMageResourceBar, DarkBarFillingImage, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDuskMageResourceBar, DarkBarFilledImage, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDuskMageResourceBar, LightBarFillingImage, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDuskMageResourceBar, LightBarFilledImage, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDuskMageResourceBar, DarkChargeStatusEffect, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDuskMageResourceBar, LightChargeStatusEffect, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDuskMageResourceBar, DarkChargeBar, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDuskMageResourceBar, LightChargeBar, 0x06C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDuskMageResourceBar, 0x06D0);
		}

		// class UBasePipResourceBar : public UBaseClassResourceWidget
		TEST_METHOD(Class__FrontiersUI__BasePipResourceBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePipResourceBar, Pips, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasePipResourceBar, 0x06A0);
		}

		// class URailmasterResourceBar : public UBasePipResourceBar
		TEST_METHOD(Class__FrontiersUI__RailmasterResourceBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URailmasterResourceBar, GlowWidget, 0x06A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URailmasterResourceBar, 0x06A8);
		}

		// class UResourcePip : public UUserWidget
		TEST_METHOD(Class__FrontiersUI__ResourcePip)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UResourcePip, ProgressBar, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResourcePip, UnknownData_GGUU, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UResourcePip, 0x0270);
		}

		// class UForgedResourceBar : public UBaseClassResourceWidget
		TEST_METHOD(Class__FrontiersUI__ForgedResourceBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedResourceBar, UnknownData_8XB6, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForgedResourceBar, 0x06A8);
		}

		// class USharpshooterResourceBar : public UBasePipResourceBar
		TEST_METHOD(Class__FrontiersUI__SharpshooterResourceBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar, UnknownData_K467, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar, TrinketStatusGameplayTag, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar, TrinketAppearanceData, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterResourceBar, UnknownData_N06I, 0x0718);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USharpshooterResourceBar, 0x0720);
		}

		// class UCursedCaptainResourceBar : public UBasePipResourceBar
		TEST_METHOD(Class__FrontiersUI__CursedCaptainResourceBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar, DefaultMaxDoubloons, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar, bHasExtendedCapacity, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursedCaptainResourceBar, UnknownData_ZJ13, 0x06A5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCursedCaptainResourceBar, 0x06A8);
		}

		// class UCloseButtonWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__CloseButtonWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloseButtonWidget, bAutomaticallyCloseParent, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloseButtonWidget, UnknownData_YF15, 0x0641);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCloseButtonWidget, 0x0648);
		}

		// class UComparableWidgetInterface : public UInterface
		TEST_METHOD(Class__FrontiersUI__ComparableWidgetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComparableWidgetInterface, 0x0028);
		}

		// class UContractClaimWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__ContractClaimWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractClaimWidget, UnknownData_EU90, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractClaimWidget, LevelNameTextFormat, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractClaimWidget, LevelNameText, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractClaimWidget, ClaimProgressText, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractClaimWidget, UnknownData_7Y0V, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContractClaimWidget, 0x06C0);
		}

		// class UXPBarWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__XPBarWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UXPBarWidget, AnimationCurve, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UXPBarWidget, MinimumLevel, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UXPBarWidget, UnknownData_YPIU, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UXPBarWidget, LevelText, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UXPBarWidget, LevelProgressTextBlock, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UXPBarWidget, XPBar, 0x0708);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UXPBarWidget, 0x0710);
		}

		// class UContractFameLevelBar : public UXPBarWidget
		TEST_METHOD(Class__FrontiersUI__ContractFameLevelBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractFameLevelBar, bOnlyShowWhenAnimating, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractFameLevelBar, bAlwaysShowActiveContract, 0x0711);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractFameLevelBar, UnknownData_QB3Y, 0x0712);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractFameLevelBar, HideTime, 0x0714);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractFameLevelBar, UnknownData_28T8, 0x0718);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContractFameLevelBar, 0x0740);
		}

		// class UContractLevelListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__ContractLevelListWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractLevelListWidget, AllRewardsList, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractLevelListWidget, UnknownData_RKTO, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContractLevelListWidget, 0x03C0);
		}

		// class UContractLevelWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__ContractLevelWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractLevelWidget, UnknownData_BF2L, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContractLevelWidget, 0x0658);
		}

		// class UContractRewardListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__ContractRewardListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContractRewardListWidget, 0x0250);
		}

		// class UContractRewardWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__ContractRewardWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractRewardWidget, UnknownData_JQJA, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractRewardWidget, LimitedTimeIconVisibility, 0x065E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractRewardWidget, UnknownData_PYPO, 0x065F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContractRewardWidget, 0x0680);
		}

		// class UContractRewardClaimedModalContent : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__ContractRewardClaimedModalContent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContractRewardClaimedModalContent, 0x0640);
		}

		// class UContractSelectionMenuWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__ContractSelectionMenuWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractSelectionMenuWidget, ContractWidget, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContractSelectionMenuWidget, 0x0648);
		}

		// class UContractListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__ContractListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContractListWidget, 0x0250);
		}

		// class UContractEntryWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__ContractEntryWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractEntryWidget, UnknownData_XK8W, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractEntryWidget, MakeContractActiveAction, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractEntryWidget, ContractWidget, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractEntryWidget, UnknownData_EKJ7, 0x0758);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContractEntryWidget, 0x0770);
		}

		// class UContractWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__ContractWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget, UnknownData_RL1Y, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget, ClaimNextAction, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget, SwitchContractAction, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget, MakeContractActiveAction, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget, ContractDisplayName, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget, ContractWelcomeText, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget, DepthOfFieldSettings, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget, UnknownData_PDB0, 0x096C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget, UnclaimedRewardsTextFormat, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget, UnclaimedRewardsPreviewActor, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget, PurchaseSuccessModalDefinition, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget, ClaimNextModalDefinition, 0x0C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget, PageSizeSlateUnits, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget, UnknownData_V2O4, 0x0E74);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget, ContractStartTextFormat, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget, ContractEndTextFormat, 0x0E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget, UnknownData_AVZ2, 0x0EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget, FameLevelAnimateFrom, 0x0EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget, FameLevelAnimateTo, 0x0EC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget, UnknownData_5OMH, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget, NumFameAnimationIntervals, 0x0ECC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContractWidget, UnknownData_GIF1, 0x0ED0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContractWidget, 0x0EE0);
		}

		// class UControllerButtonConstants : public UObject
		TEST_METHOD(Class__FrontiersUI__ControllerButtonConstants)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerButtonConstants, BaseKeys, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerButtonConstants, XboxKeys, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerButtonConstants, PlaystationKeys, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerButtonConstants, SwitchKeys, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerButtonConstants, SpecialKeys, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerButtonConstants, KeySortOrder, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerButtonConstants, DefaultButtonBG, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerButtonConstants, DefaultGamepadButtonBG, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerButtonConstants, DefaultTextColor, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerButtonConstants, PlatformUIKeyMappings, 0x0708);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControllerButtonConstants, 0x0718);
		}

		// class UCraftingCategoryListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__CraftingCategoryListWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingCategoryListWidget, ListByCategory, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingCategoryListWidget, 0x0258);
		}

		// class UCraftingCategoryWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__CraftingCategoryWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingCategoryWidget, 0x0640);
		}

		// class UCraftingEntryContainerWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__CraftingEntryContainerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingEntryContainerWidget, UnknownData_OE6F, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingEntryContainerWidget, 0x0660);
		}

		// class UCraftingEntryContainerListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__CraftingEntryContainerListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingEntryContainerListWidget, 0x0250);
		}

		// class UCraftingPanel : public UTabbedMenuWidget
		TEST_METHOD(Class__FrontiersUI__CraftingPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanel, UnknownData_PTOX, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanel, PrimaryName, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanel, PrimaryDescription, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanel, UnknownData_KVNC, 0x0788);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingPanel, 0x0798);
		}

		// class UCraftingProductListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__CraftingProductListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingProductListWidget, 0x0250);
		}

		// class UCraftingProductWidget : public UUserWidget
		TEST_METHOD(Class__FrontiersUI__CraftingProductWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingProductWidget, 0x0260);
		}

		// class UMailboxProductWidget : public UCraftingProductWidget
		TEST_METHOD(Class__FrontiersUI__MailboxProductWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMailboxProductWidget, 0x0260);
		}

		// class UCraftingRecipeWidgetBase : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__CraftingRecipeWidgetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeWidgetBase, UnknownData_UG0Z, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingRecipeWidgetBase, 0x0658);
		}

		// class UCraftingQueueEntryWidget : public UCraftingRecipeWidgetBase
		TEST_METHOD(Class__FrontiersUI__CraftingQueueEntryWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingQueueEntryWidget, QueueName, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingQueueEntryWidget, EntryNameText, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingQueueEntryWidget, JobId, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingQueueEntryWidget, StartTime, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingQueueEntryWidget, FinishTime, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingQueueEntryWidget, CraftingRecipeName, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingQueueEntryWidget, 0x06A0);
		}

		// class UCraftingQueueEntryListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__CraftingQueueEntryListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingQueueEntryListWidget, 0x0250);
		}

		// class UCraftingQueueWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__CraftingQueueWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingQueueWidget, UnknownData_8C0J, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingQueueWidget, GetNextListBinding, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingQueueWidget, NoQueueEntriesNotificationVisibility, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingQueueWidget, UnknownData_F9D9, 0x06A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingQueueWidget, Prop, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingQueueWidget, UnknownData_DS0Y, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingQueueWidget, CraftingCategoriesList, 0x06B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingQueueWidget, 0x06C0);
		}

		// class UCraftingWidgetBase : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__CraftingWidgetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingWidgetBase, bHideGold, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingWidgetBase, bGamepadAlwaysShowGold, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingWidgetBase, UnknownData_7H2O, 0x0642);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingWidgetBase, CostListVisible, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingWidgetBase, UnknownData_X9O1, 0x0661);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingWidgetBase, CurrencyCostWidget, 0x0668);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingWidgetBase, 0x0670);
		}

		// class UCraftingRecipeDetailWidget : public UCraftingWidgetBase
		TEST_METHOD(Class__FrontiersUI__CraftingRecipeDetailWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeDetailWidget, ShowTooltipAction, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeDetailWidget, HideTooltipAction, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeDetailWidget, CraftingRequest, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeDetailWidget, CraftingRecipe, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeDetailWidget, CustomCraftingVerb, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeDetailWidget, EmberWeaponSkillsList, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeDetailWidget, bWantsGamepadFocus, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeDetailWidget, UnknownData_SH1X, 0x09B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingRecipeDetailWidget, 0x09C0);
		}

		// class UCraftingRecipeListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__CraftingRecipeListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingRecipeListWidget, 0x0250);
		}

		// class UCraftingRecipeUnitWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__CraftingRecipeUnitWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeUnitWidget, Unit, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingRecipeUnitWidget, 0x0830);
		}

		// class UCraftingRecipeWidget : public UCraftingRecipeWidgetBase
		TEST_METHOD(Class__FrontiersUI__CraftingRecipeWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeWidget, CraftingRecipe, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeWidget, RecipeDescription, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingRecipeWidget, CraftingRequest, 0x0730);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingRecipeWidget, 0x07A8);
		}

		// class UCraftingResultsWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__CraftingResultsWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingResultsWidget, UnknownData_B772, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingResultsWidget, CloseButtonVisibility, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingResultsWidget, UnknownData_GFI9, 0x0651);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingResultsWidget, 0x0668);
		}

		// class UCraftingCostListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__CraftingCostListWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingCostListWidget, bShowAsCost, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingCostListWidget, UnknownData_5YUO, 0x0251);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingCostListWidget, 0x0258);
		}

		// class UCraftingConfirmationWidget : public UCraftingWidgetBase
		TEST_METHOD(Class__FrontiersUI__CraftingConfirmationWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingConfirmationWidget, UnknownData_A6B7, 0x0670);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingConfirmationWidget, 0x0720);
		}

		// class UCreditsWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__CreditsWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsWidget, UnknownData_20ZD, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsWidget, ScrollSpeed, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsWidget, ScrollBox, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreditsWidget, 0x0650);
		}

		// class UCurrencyListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__CurrencyListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurrencyListWidget, 0x0250);
		}

		// class UCurrencyWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__CurrencyWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget, UnknownData_29OV, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget, bShowOwnedQuantity, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget, UnknownData_29G0, 0x0649);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget, DefaultCurrencyToDisplay, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget, CurrencyNameVisibility, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget, UnknownData_KDPX, 0x0661);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget, ResourceName, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget, ResourceNameAndValue, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget, Icon, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget, QualityColor, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget, CurrencyTooltipWidget, 0x06F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurrencyWidget, 0x06F8);
		}

		// class UCurrencyPickUpWidget : public UCurrencyWidget
		TEST_METHOD(Class__FrontiersUI__CurrencyPickUpWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyPickUpWidget, Duration, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyPickUpWidget, UnknownData_SE7G, 0x06FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurrencyPickUpWidget, 0x0700);
		}

		// class UCurrencyCostWidget : public UCraftingRecipeUnitWidget
		TEST_METHOD(Class__FrontiersUI__CurrencyCostWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyCostWidget, UnknownData_V7R2, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyCostWidget, ResourceName, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyCostWidget, RequiredQuantity, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyCostWidget, ResourceTraitTextBlock, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyCostWidget, ResourceRequiredTextBlock, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyCostWidget, CurrencyTooltipWidget, 0x0880);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurrencyCostWidget, 0x0888);
		}

		// class UCustomizationItemCarouselWidget : public UCarouselWidget
		TEST_METHOD(Class__FrontiersUI__CustomizationItemCarouselWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomizationItemCarouselWidget, UnknownData_83S9, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCustomizationItemCarouselWidget, 0x0670);
		}

		// class UInventoryGridWithTabsWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__InventoryGridWithTabsWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabsWidget, GrabbedInventoryItem, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabsWidget, GetNextListBinding, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabsWidget, bResetSelectionWhenOpened, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabsWidget, UnknownData_F44C, 0x0659);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabsWidget, SortAction, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabsWidget, UnknownData_3NGC, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabsWidget, bIsInteractive, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabsWidget, UnknownData_SMAH, 0x07C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabsWidget, CategoryTabbedMenu, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabsWidget, CategoryData, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabsWidget, ItemPrimaryAction, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabsWidget, UnknownData_8RY1, 0x0821);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabsWidget, ItemsContainerClass, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabsWidget, DisabledCategories, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabsWidget, PetShoppingListModalDefinition, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabsWidget, SellAllPetItemsAction, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabsWidget, CancelAction, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabsWidget, SendToTownAction, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabsWidget, PetShoppingListAction, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabsWidget, SendPetText, 0x0E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryGridWithTabsWidget, SendPetData, 0x0E98);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryGridWithTabsWidget, 0x0EE8);
		}

		// class UDeathWidget : public UInventoryGridWithTabsWidget
		TEST_METHOD(Class__FrontiersUI__DeathWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget, DeathOptions, 0x0EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget, CharacterSelectAction, 0x0F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget, AllyReviveGiveUpAction, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget, ReviveInTownConfirmation, 0x1128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget, DungeonProgressLostMessageText, 0x1388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget, DungeonFailedMessageText, 0x13A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget, DungeonFailedQuips, 0x13B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathWidget, UnknownData_I756, 0x13C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeathWidget, 0x13E8);
		}

		// class UDeathOptionListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__DeathOptionListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeathOptionListWidget, 0x0250);
		}

		// class UDeathOptionWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__DeathOptionWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathOptionWidget, UnknownData_85L5, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathOptionWidget, CanAffordColorAndOpacity, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathOptionWidget, CanNotAffordColorAndOpacity, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathOptionWidget, UnknownData_J7E9, 0x06B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeathOptionWidget, 0x06B8);
		}

		// class UDepthOfFieldWidgetInterface : public UInterface
		TEST_METHOD(Class__FrontiersUI__DepthOfFieldWidgetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDepthOfFieldWidgetInterface, 0x0028);
		}

		// class UDifficultyPanel : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__DifficultyPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyPanel, AvailableAtLevelText, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyPanel, AcceptText, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyPanel, bNoLastDifficulty, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyPanel, UnknownData_QPF2, 0x0671);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDifficultyPanel, 0x0678);
		}

		// class UDifficultyWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__DifficultyWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyWidget, UnknownData_JUVQ, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyWidget, DifficultyIndex, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyWidget, bNoLastDifficulty, 0x065C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyWidget, UnknownData_JN4E, 0x065D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyWidget, AcceptAction, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyWidget, UnknownData_75XJ, 0x0758);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDifficultyWidget, 0x0768);
		}

		// class UDifficultyListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__DifficultyListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDifficultyListWidget, 0x0250);
		}

		// class UDungeonWidgetBase : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__DungeonWidgetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonWidgetBase, CachedDungeonMenuPanel, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonWidgetBase, UIResponses, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonWidgetBase, 0x0698);
		}

		// class UDungeonStatePanelBase : public UDungeonWidgetBase
		TEST_METHOD(Class__FrontiersUI__DungeonStatePanelBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonStatePanelBase, MCWidgetRenderTransform, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonStatePanelBase, MCWidgetPivot, 0x06B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonStatePanelBase, MCWidgetVisibility, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonStatePanelBase, UnknownData_7K4Q, 0x06BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonStatePanelBase, ClusterWidgetRenderTransform, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonStatePanelBase, ClusterWidgetPivot, 0x06DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonStatePanelBase, ClusterWidgetVisibility, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonStatePanelBase, UnknownData_F11S, 0x06E5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonStatePanelBase, 0x06E8);
		}

		// class UDungeonChallengeConfirmPanel : public UDungeonStatePanelBase
		TEST_METHOD(Class__FrontiersUI__DungeonChallengeConfirmPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeConfirmPanel, ProgressWarningTextFormat, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeConfirmPanel, ProgressUnaffectedTextFormat, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeConfirmPanel, SelectorDungeonTitleTextFormat, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeConfirmPanel, UnknownData_E3XK, 0x0730);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonChallengeConfirmPanel, 0x0738);
		}

		// class UDungeonChallengeRuleWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__DungeonChallengeRuleWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeRuleWidget, UnknownData_S835, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonChallengeRuleWidget, 0x0670);
		}

		// class UDungeonChallengeRuleListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__DungeonChallengeRuleListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonChallengeRuleListWidget, 0x0250);
		}

		// class UDungeonChallengeRulesCard : public UDungeonWidgetBase
		TEST_METHOD(Class__FrontiersUI__DungeonChallengeRulesCard)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeRulesCard, UnknownData_JHVD, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeRulesCard, StartFocusAudioEvent, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeRulesCard, EndFocusAudioEvent, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeRulesCard, QualityCardBackIndex, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeRulesCard, QualityCardFrontIndex, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeRulesCard, RevealAction, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeRulesCard, CardStateToSwitcherIndex, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeRulesCard, UnknownData_GH8O, 0x08D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonChallengeRulesCard, 0x0950);
		}

		// class UDungeonChallengeRulesCardSet : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__DungeonChallengeRulesCardSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeRulesCardSet, UnknownData_6HS4, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeRulesCardSet, PerCardRevealDelaySeconds, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeRulesCardSet, UnknownData_D09C, 0x0654);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonChallengeRulesCardSet, 0x0658);
		}

		// class UDungeonChallengeRulesCardListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__DungeonChallengeRulesCardListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonChallengeRulesCardListWidget, 0x0250);
		}

		// class UDungeonClusterWidget : public UDungeonWidgetBase
		TEST_METHOD(Class__FrontiersUI__DungeonClusterWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonClusterWidget, UnknownData_IB88, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonClusterWidget, RulesTitleTextFormat, 0x0700);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonClusterWidget, 0x0718);
		}

		// class UDungeonChallengeLevelSelectorWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__DungeonChallengeLevelSelectorWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeLevelSelectorWidget, GoToPreviousClusterAction, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeLevelSelectorWidget, GoToNextClusterAction, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeLevelSelectorWidget, UnknownData_DY3Z, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeLevelSelectorWidget, CachedSelectPanel, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeLevelSelectorWidget, FastForwardPlayRate, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeLevelSelectorWidget, UnknownData_XXYP, 0x0844);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonChallengeLevelSelectorWidget, 0x0868);
		}

		// class UDungeonChallengeLevelListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__DungeonChallengeLevelListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonChallengeLevelListWidget, 0x0250);
		}

		// class UDungeonChallengeLevelCard : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__DungeonChallengeLevelCard)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeLevelCard, UnknownData_6K7K, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeLevelCard, SwitcherIndices, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeLevelCard, SelectLevelAudioEvent, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeLevelCard, DeselectLevelAudioEvent, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeLevelCard, StartFocusAudioEvent, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeLevelCard, EndFocusAudioEvent, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeLevelCard, LockedVisibility, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeLevelCard, UnlockedVisibility, 0x0711);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeLevelCard, UnlockedUnclearedVisibility, 0x0712);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeLevelCard, UnknownData_T850, 0x0713);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonChallengeLevelCard, 0x0720);
		}

		// class UDungeonChallengeSelectPanel : public UDungeonStatePanelBase
		TEST_METHOD(Class__FrontiersUI__DungeonChallengeSelectPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeSelectPanel, StartCardDealingDelay, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeSelectPanel, UnknownData_KTDZ, 0x06EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeSelectPanel, CachedLevelSelector, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeSelectPanel, CachedRulesCardSet, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonChallengeSelectPanel, UnknownData_MPT8, 0x0700);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonChallengeSelectPanel, 0x0720);
		}

		// class UDungeonClusterRevealPanel : public UDungeonStatePanelBase
		TEST_METHOD(Class__FrontiersUI__DungeonClusterRevealPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonClusterRevealPanel, RevealAffixesAction, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonClusterRevealPanel, UnlockedClusterChallengeLevelsTextFormat, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonClusterRevealPanel, UnknownData_I6ON, 0x07F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonClusterRevealPanel, 0x0800);
		}

		// class UDungeonMCWidget : public UDungeonWidgetBase
		TEST_METHOD(Class__FrontiersUI__DungeonMCWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMCWidget, UnknownData_A42V, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMCWidget, UIActionDialogues, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMCWidget, UIStateDialogues, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMCWidget, IdleAnimations, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMCWidget, MinimumDialogueSeconds, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMCWidget, UnknownData_O5PS, 0x07A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonMCWidget, 0x0820);
		}

		// class UDungeonMenuPanel : public UCraftingPanel
		TEST_METHOD(Class__FrontiersUI__DungeonMenuPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMenuPanel, UnknownData_4I1Y, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMenuPanel, CachedStateWidgets, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMenuPanel, UnknownData_8IWX, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMenuPanel, SpringArmOverride, 0x092C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMenuPanel, UnknownData_E4Q1, 0x093C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonMenuPanel, StateTransitionSounds, 0x0940);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonMenuPanel, 0x0990);
		}

		// class UDungeonResultsPanel : public UDungeonStatePanelBase
		TEST_METHOD(Class__FrontiersUI__DungeonResultsPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonResultsPanel, SuccessTitleTextStyle, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonResultsPanel, SuccessTitleTextMessage, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonResultsPanel, SuccessNewCheckpointTextMessage, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonResultsPanel, SuccessNewHighestLevelTextMessage, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonResultsPanel, FailedTitleTextStyle, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonResultsPanel, FailedTitleTextMessage, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonResultsPanel, FailedResetToCheckpointTextMessage, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonResultsPanel, SuccessCheckpointMessageTextStyle, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonResultsPanel, SuccessNewLevelTextStyle, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonResultsPanel, FailedCheckpointMessageTextStyle, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonResultsPanel, RequestRewardsAction, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonResultsPanel, UnlockedClusterRulesVisibility, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonResultsPanel, UnknownData_IKUL, 0x0881);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonResultsPanel, UnlockedClusterChallengeLevelsTextFormat, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonResultsPanel, ClearedChallengeAudioEvent, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonResultsPanel, FailedChallengeAudioEvent, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonResultsPanel, UnknownData_IQKY, 0x08D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonResultsPanel, 0x08D8);
		}

		// class UCanvasPanelInterpInterface : public UInterface
		TEST_METHOD(Class__FrontiersUI__CanvasPanelInterpInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasPanelInterpInterface, 0x0028);
		}

		// class UDyeAndTransmogWidget : public UTabbedMenuWidget
		TEST_METHOD(Class__FrontiersUI__DyeAndTransmogWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDyeAndTransmogWidget, UnknownData_FKMP, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDyeAndTransmogWidget, TransmogAction, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDyeAndTransmogWidget, DyeAction, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDyeAndTransmogWidget, CurrentOperation, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDyeAndTransmogWidget, UnknownData_DUG3, 0x0949);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDyeAndTransmogWidget, ItemSelectedAudioEvent, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDyeAndTransmogWidget, CameraType, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDyeAndTransmogWidget, UnknownData_87YB, 0x0969);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDyeAndTransmogWidget, DyeAndTransmogErrorTexts, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDyeAndTransmogWidget, UnknownData_VJSV, 0x09C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDyeAndTransmogWidget, 0x09F8);
		}

		// class UTransmogDyeItemListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__TransmogDyeItemListWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransmogDyeItemListWidget, ListType, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransmogDyeItemListWidget, UnknownData_3NS1, 0x0251);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransmogDyeItemListWidget, 0x0278);
		}

		// class UDyeItemListWidget : public UTransmogDyeItemListWidget
		TEST_METHOD(Class__FrontiersUI__DyeItemListWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDyeItemListWidget, UnknownData_IFQT, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDyeItemListWidget, 0x0288);
		}

		// class UInventoryItemBaseWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__InventoryItemBaseWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, UnknownData_OYJI, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, ItemNameVisibility, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, StackSizeVisibility, 0x0669);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, UnknownData_7GM2, 0x066A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, ItemQualityColor, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, bShowScaledLevel, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, UnknownData_6WAU, 0x0699);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, GamepadTooltipDelay, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, bFocusOnHover, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, UnknownData_6MUN, 0x06A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, ItemName, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, UnknownData_C2ZG, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, ItemLevelText, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, ItemLevelTextFormat, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, ItemLevelTextWithMaxFormat, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, WeaponDPSFormat, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, DamageOverTimeFormat, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, ChallengeLevelBonusFormat, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, bIsEquipped, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, UnknownData_FPF9, 0x0761);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, GoldValue, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, ElementVisibility, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, SpokeVisibility, 0x0781);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, LevelVisibility, 0x0782);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, ItemIconVisibility, 0x0783);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, GoldVisibility, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, UnknownData_18S4, 0x0785);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, StackSize, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, bIsTwoHanded, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, bMultiSlot, 0x07A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, UnknownData_8SQ9, 0x07A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, InventoryEntryId, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, InventoryOwner, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, UnknownData_32BO, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemBaseWidget, ComparisonWidget, 0x0898);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryItemBaseWidget, 0x08A0);
		}

		// class UTransmogDyeItemWidget : public UInventoryItemBaseWidget
		TEST_METHOD(Class__FrontiersUI__TransmogDyeItemWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransmogDyeItemWidget, UnknownData_K761, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransmogDyeItemWidget, SelectAction, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransmogDyeItemWidget, UnknownData_U6E8, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransmogDyeItemWidget, TooltipWidgetClass, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransmogDyeItemWidget, TransmogDyeTooltipWidget, 0x09E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransmogDyeItemWidget, 0x09E8);
		}

		// class UDyeItemWidget : public UTransmogDyeItemWidget
		TEST_METHOD(Class__FrontiersUI__DyeItemWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDyeItemWidget, 0x09E8);
		}

		// class UTransmogDyeTooltipWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__TransmogDyeTooltipWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransmogDyeTooltipWidget, 0x0640);
		}

		// class UDyeTooltipWidget : public UTransmogDyeTooltipWidget
		TEST_METHOD(Class__FrontiersUI__DyeTooltipWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDyeTooltipWidget, DyeRowHandle, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDyeTooltipWidget, 0x0650);
		}

		// class UDyeListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__DyeListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDyeListWidget, 0x0250);
		}

		// class UDyeWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__DyeWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDyeWidget, UnknownData_J8ZQ, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDyeWidget, 0x0660);
		}

		// class UEmberWeaponChargeBarWidget : public UBaseClassResourceWidget
		TEST_METHOD(Class__FrontiersUI__EmberWeaponChargeBarWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponChargeBarWidget, PowerWidgetTrait, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponChargeBarWidget, EntireWidgetTrait, 0x06A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEmberWeaponChargeBarWidget, 0x06B0);
		}

		// class UEmberWeaponChargeWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__EmberWeaponChargeWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponChargeWidget, EmberWeaponChargeActiveTrait, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponChargeWidget, EmberWeaponDrainActiveTrait, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponChargeWidget, EmberWeaponReadySound, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponChargeWidget, TooltipWidgetClass, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponChargeWidget, UnknownData_3EZP, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponChargeWidget, ChargeActiveTrait, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponChargeWidget, DrainActiveTrait, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponChargeWidget, UnknownData_QKN9, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponChargeWidget, WardrobeContainer, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponChargeWidget, EmberWeaponTooltipWidget, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponChargeWidget, HotkeyWidget, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponChargeWidget, UnknownData_TKR8, 0x06B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEmberWeaponChargeWidget, 0x06C0);
		}

		// class UEmberWeaponMessageWidget : public UInventoryItemBaseWidget
		TEST_METHOD(Class__FrontiersUI__EmberWeaponMessageWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponMessageWidget, SkillUnlockTextFormat, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponMessageWidget, AffixUnlockText, 0x08B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEmberWeaponMessageWidget, 0x08D0);
		}

		// class UEmberWeaponSkillsWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__EmberWeaponSkillsWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponSkillsWidget, UnknownData_YS4O, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponSkillsWidget, bPreviewMode, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponSkillsWidget, UnknownData_GA1D, 0x064D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponSkillsWidget, DefaultEmberSkillTab, 0x0650);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEmberWeaponSkillsWidget, 0x0660);
		}

		// class UEnchantingAffixListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__EnchantingAffixListWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingAffixListWidget, UnknownData_3BSS, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnchantingAffixListWidget, 0x0258);
		}

		// class UEnchantingAffixWidget : public UAffixWidget
		TEST_METHOD(Class__FrontiersUI__EnchantingAffixWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingAffixWidget, bIsEmptySlot, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingAffixWidget, UnknownData_PC59, 0x0679);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingAffixWidget, EnchantingSlotText, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnchantingAffixWidget, 0x0698);
		}

		// class UEnchantingDetailsWidget : public UCraftingRecipeDetailWidget
		TEST_METHOD(Class__FrontiersUI__EnchantingDetailsWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingDetailsWidget, MetaRecipe, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingDetailsWidget, EnchantingMenu, 0x0A80);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnchantingDetailsWidget, 0x0A88);
		}

		// class UInventoryItemDetailsWidget : public UInventoryItemBaseWidget
		TEST_METHOD(Class__FrontiersUI__InventoryItemDetailsWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, WardrobeSlotName, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, ItemQualityName, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, ItemDyeName, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, SkillDescription, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, FlavorText, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, FlavorTextVisibility, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, UnknownData_C02J, 0x0919);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, RequiredLevelText, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, RequiredLevelTextFormat, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, RequiredClassText, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, EmberWeaponChargeTime, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, EmberWeaponDrainTime, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, AttackSpeedPercent, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, DyeNameVisibility, 0x099C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, SkillDividerVisibility, 0x099D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, PrimaryAffixesVisibility, 0x099E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, SecondaryAffixesVisibility, 0x099F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, EnchantingAffixesVisibility, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, LegendaryAffixesVisibility, 0x09A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, AffixesVisibility, 0x09A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, SkillDescriptionVisibility, 0x09A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, AttackSpeedVisibility, 0x09A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, EmberWeaponDetailsVisibility, 0x09A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, EmberWeaponStatusVisibilty, 0x09A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, ItemFooterVisibility, 0x09A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, LifeboundVisibility, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, CannotSellVisibility, 0x09A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, CannotUseInAreaVisibility, 0x09AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, RequiredLevelVisibility, 0x09AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, RequiredClassVisibility, 0x09AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, InvalidSlotVisibility, 0x09AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, SellBoxVisibility, 0x09AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, DividerVisibility, 0x09AF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, TopStatsVisibility, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, RarityVisibility, 0x09B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, TransmogOrDyedVisibility, 0x09B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, BreakDownAreaVisibility, 0x09B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, OwnerSacrificeVisibility, 0x09B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, VisitorSacrificeVisibility, 0x09B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, OwnerCannotSacrificeVisibility, 0x09B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, VisitorCannotSacrificeVisibility, 0x09B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, SacrificeBonusText, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, CannotSacrificeText, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, UnknownData_ZEYL, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, HoveredItemWidget, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemDetailsWidget, WeaponSkillFormat, 0x09F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryItemDetailsWidget, 0x0A10);
		}

		// class UEnchantingGearWidget : public UInventoryItemDetailsWidget
		TEST_METHOD(Class__FrontiersUI__EnchantingGearWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingGearWidget, EnchantingMenu, 0x0A10);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnchantingGearWidget, 0x0A18);
		}

		// class UEnchantingMenuWidget : public UTabbedMenuWidget
		TEST_METHOD(Class__FrontiersUI__EnchantingMenuWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingMenuWidget, UnknownData_VYZW, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingMenuWidget, EnchantAction, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingMenuWidget, DisenchantAction, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingMenuWidget, CloseAction, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingMenuWidget, State, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingMenuWidget, UnknownData_QAUF, 0x0A41);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingMenuWidget, DisenchantHeaderText, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingMenuWidget, DisenchantBodyText, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingMenuWidget, DisenchantVerbText, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingMenuWidget, ItemSelectedAudioEvent, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingMenuWidget, DisenchantAudioEvent, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingMenuWidget, UnknownData_SIYJ, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingMenuWidget, CraftingList, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingMenuWidget, UnknownData_JDX9, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingMenuWidget, SelectedGearWidget, 0x0AE0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnchantingMenuWidget, 0x0AE8);
		}

		// class UEnchantingRecipeWidget : public UCraftingRecipeWidget
		TEST_METHOD(Class__FrontiersUI__EnchantingRecipeWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingRecipeWidget, TooltipWidgetClass, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingRecipeWidget, EnchantTooltipWidget, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingRecipeWidget, ContainerWidget, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnchantingRecipeWidget, EnchantingMenu, 0x07C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnchantingRecipeWidget, 0x07C8);
		}

		// class UFameRewardWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__FameRewardWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFameRewardWidget, 0x0640);
		}

		// class UFeedbackModal : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__FrontiersUI__FeedbackModal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFeedbackModal, 0x0028);
		}

		// class UFeedbackWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__FeedbackWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackWidget, FeedbackTypeText, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackWidget, FeedbackSendText, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackWidget, MaxCharCount, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackWidget, CurrentCharCount, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackWidget, SendAction, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackWidget, UnknownData_3SGT, 0x07E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFeedbackWidget, 0x0800);
		}

		// class UFeedbackOptionWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__FeedbackOptionWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackOptionWidget, OptionText, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackOptionWidget, OptionType, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackOptionWidget, UnknownData_PQWX, 0x0659);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFeedbackOptionWidget, 0x0660);
		}

		// class UFloatingHitpointBarWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__FloatingHitpointBarWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingHitpointBarWidget, UnknownData_S93L, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingHitpointBarWidget, DelayBeforeFade, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingHitpointBarWidget, UnknownData_NUO2, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingHitpointBarWidget, HealthBarTextures, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingHitpointBarWidget, ProgressBar, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingHitpointBarWidget, UnknownData_86O7, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingHitpointBarWidget, HUD, 0x0700);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatingHitpointBarWidget, 0x0708);
		}

		// class UFloatingTextWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__FloatingTextWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingTextWidget, bAutoDestroy, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingTextWidget, UnknownData_7TZG, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingTextWidget, MaxDuration, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingTextWidget, WidgetAnimation, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatingTextWidget, 0x0650);
		}

		// class UFortEditWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__FortEditWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget, PickupPropAction, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget, PlacePropAction, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget, BuildPropAction, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget, CancelPlaceAction, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget, StorePropAction, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget, RotatePropLeftAction, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget, RotatePropRightAction, 0x0C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget, MovePropUpAction, 0x0D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget, MovePropDownAction, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget, RotatePropAction, 0x0EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget, MovePropVerticallyAction, 0x0FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget, ToggleMouseWheelAction, 0x10E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget, SnapToGroundAction, 0x11E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget, DuplicatePropAction, 0x12D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget, MoveCameraAction, 0x13D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget, StoreAllAction, 0x14C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget, StoreAllModal, 0x15C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget, UnknownData_7F5F, 0x1820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget, HoveredPropTextBlock, 0x18A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget, PropToPlaceWidget, 0x18A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget, FortInventoryWidget, 0x18B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget, MouseDragSensitivity, 0x18B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget, UnknownData_BB0D, 0x18BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget, PlaceableAreaWidget, 0x18C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortEditWidget, UnknownData_HMWS, 0x18C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFortEditWidget, 0x18D0);
		}

		// class UFortInventoryWidget : public UTabbedMenuWidget
		TEST_METHOD(Class__FrontiersUI__FortInventoryWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortInventoryWidget, UnknownData_PM5Y, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortInventoryWidget, DepthOfFieldSettings, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortInventoryWidget, DefaultCurrencies, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortInventoryWidget, GroupIcons, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortInventoryWidget, FortStashCategoryName, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortInventoryWidget, FortPropListWidget, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortInventoryWidget, FortEditWidget, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortInventoryWidget, UnknownData_Z40N, 0x07F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFortInventoryWidget, 0x07F8);
		}

		// class UFortCustomizationButton : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__FortCustomizationButton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortCustomizationButton, FortReportModalDefinition, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortCustomizationButton, FortReportSuccessMessage, 0x08A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFortCustomizationButton, 0x08B8);
		}

		// class UFortPropCraftingWidget : public UCraftingWidgetBase
		TEST_METHOD(Class__FrontiersUI__FortPropCraftingWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropCraftingWidget, CraftAction, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropCraftingWidget, UnknownData_6EN2, 0x0768);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFortPropCraftingWidget, 0x0780);
		}

		// class UFortPropLimitWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__FortPropLimitWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFortPropLimitWidget, 0x0640);
		}

		// class UFortPropListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__FortPropListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFortPropListWidget, 0x0250);
		}

		// class UFortPropLevelIconSwitcherWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__FortPropLevelIconSwitcherWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFortPropLevelIconSwitcherWidget, 0x0640);
		}

		// class UFortPropExperienceWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__FortPropExperienceWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropExperienceWidget, ProgressBar, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropExperienceWidget, LevelIcons, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFortPropExperienceWidget, 0x0658);
		}

		// class UFortPropSacrificeCurrencyWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__FortPropSacrificeCurrencyWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropSacrificeCurrencyWidget, SacrificeMenu, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFortPropSacrificeCurrencyWidget, 0x0648);
		}

		// class UBaseFortPropSacrificeWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__BaseFortPropSacrificeWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseFortPropSacrificeWidget, UnknownData_ZXZ9, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseFortPropSacrificeWidget, SacrificeSimpleAction, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseFortPropSacrificeWidget, Prop, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseFortPropSacrificeWidget, UnknownData_74K9, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseFortPropSacrificeWidget, OwnerRecipeBaseName, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseFortPropSacrificeWidget, VisitorRecipeBaseName, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseFortPropSacrificeWidget, UnknownData_JWOH, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseFortPropSacrificeWidget, TitleText, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseFortPropSacrificeWidget, PropExperienceWidget, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseFortPropSacrificeWidget, InventoryGrid, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseFortPropSacrificeWidget, DescriptionTextBlock, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseFortPropSacrificeWidget, OwnerMaxLevelTextBlock, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseFortPropSacrificeWidget, SacrificeCurrencyWidget, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseFortPropSacrificeWidget, OwnerDescriptionFormat, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseFortPropSacrificeWidget, VisitorDescription, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseFortPropSacrificeWidget, PreventVisitorSacrificeStatusEffectTags, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseFortPropSacrificeWidget, OwnerBonusTraitInitializer, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseFortPropSacrificeWidget, ExperienceWidgetClass, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseFortPropSacrificeWidget, SacrificeCurrencyWidgetClass, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseFortPropSacrificeWidget, UnknownData_YI0G, 0x0890);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseFortPropSacrificeWidget, 0x08B0);
		}

		// class UFortPropUIInterface : public UInterface
		TEST_METHOD(Class__FrontiersUI__FortPropUIInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFortPropUIInterface, 0x0028);
		}

		// class UFortPropIconWidget : public UCraftingRecipeWidgetBase
		TEST_METHOD(Class__FrontiersUI__FortPropIconWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropIconWidget, UnknownData_AITV, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropIconWidget, FortPropData, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropIconWidget, TooltipWidgetClass, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropIconWidget, FortPropTooltipWidget, 0x08B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFortPropIconWidget, 0x08C0);
		}

		// class UFortPropWidget : public UFortPropIconWidget
		TEST_METHOD(Class__FrontiersUI__FortPropWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget, CraftAction, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget, CostsVisibility, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget, UnknownData_A0IC, 0x09B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget, MaxCountText, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget, MaxCountVisibility, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget, UnknownData_2MK2, 0x09D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget, ComplexityValueText, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget, ComplexityVisibility, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget, UnknownData_2DPO, 0x09F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget, FortEditComponent, 0x09FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget, UnknownData_M1FN, 0x0A04);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFortPropWidget, 0x0A08);
		}

		// class UFortPropTooltipWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__FortPropTooltipWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropTooltipWidget, DisplayName, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropTooltipWidget, QualityName, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropTooltipWidget, QualityVisibility, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropTooltipWidget, UnknownData_CWJ2, 0x0671);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropTooltipWidget, QualityColor, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropTooltipWidget, TypeName, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropTooltipWidget, FortPropDescription, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropTooltipWidget, DescriptionVisibility, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropTooltipWidget, UnknownData_8YAQ, 0x06D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFortPropTooltipWidget, 0x06D8);
		}

		// class UOtherPlayerWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__OtherPlayerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOtherPlayerWidget, ViewProfileAction, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOtherPlayerWidget, ViewProfileButtonVisibility, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOtherPlayerWidget, UnknownData_EUXN, 0x0739);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOtherPlayerWidget, InviteAction, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOtherPlayerWidget, InviteButtonVisibility, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOtherPlayerWidget, UnknownData_JU1R, 0x0839);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOtherPlayerWidget, WhisperAction, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOtherPlayerWidget, WhisperButtonVisibility, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOtherPlayerWidget, UnknownData_ED9H, 0x0939);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOtherPlayerWidget, HostPlatformText, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOtherPlayerWidget, ForeignHostPlatformVisibility, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOtherPlayerWidget, UnknownData_WHH6, 0x0959);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOtherPlayerWidget, Context, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOtherPlayerWidget, DifficultyModalDef, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOtherPlayerWidget, NoInviteBlockedModalDef, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOtherPlayerWidget, UnknownData_MVPU, 0x0EA8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOtherPlayerWidget, 0x0EB8);
		}

		// class UFriendEntryWidget : public UOtherPlayerWidget
		TEST_METHOD(Class__FrontiersUI__FriendEntryWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendEntryWidget, InviteStatusText, 0x0EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendEntryWidget, FriendStatusText, 0x0ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendEntryWidget, FriendStatusSwitcherIndices, 0x0F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendEntryWidget, UnknownData_3M38, 0x0F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendEntryWidget, InviteToGameAction, 0x0F78);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFriendEntryWidget, 0x1070);
		}

		// class UFriendEntryListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__FriendEntryListWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendEntryListWidget, FriendStatusUIOrdering, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendEntryListWidget, UnknownData_MR0O, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFriendEntryListWidget, 0x02B0);
		}

		// class UFriendsWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__FriendsWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendsWidget, UnknownData_80XM, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendsWidget, RefreshAction, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendsWidget, FriendsVisibility, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendsWidget, NoFriendsVisibility, 0x0741);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendsWidget, UnknownData_Z28H, 0x0742);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendsWidget, NextRefreshTimeStamp, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendsWidget, NextForcedRefreshTimeStamp, 0x0750);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFriendsWidget, 0x0758);
		}

		// class UGameMessageWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__GameMessageWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameMessageWidget, 0x0640);
		}

		// class UGameMessageListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__GameMessageListWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMessageListWidget, MaxWidgetsInList, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMessageListWidget, DefaultSortValue, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMessageListWidget, PlayerStateSortValue, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMessageListWidget, LoreLineSortValue, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameMessageListWidget, 0x0260);
		}

		// class UGamepadButtonActionList : public UListWidget
		TEST_METHOD(Class__FrontiersUI__GamepadButtonActionList)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGamepadButtonActionList, 0x0250);
		}

		// class UGamepadButtonActionWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__GamepadButtonActionWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamepadButtonActionWidget, UnknownData_2715, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGamepadButtonActionWidget, 0x0668);
		}

		// class UFloatingGamepadButtonActionWidget : public UGamepadButtonActionWidget
		TEST_METHOD(Class__FrontiersUI__FloatingGamepadButtonActionWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingGamepadButtonActionWidget, TextStyle, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingGamepadButtonActionWidget, bGamepadOnly, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingGamepadButtonActionWidget, bHidePromptWhenActionUnavailable, 0x0671);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingGamepadButtonActionWidget, UnknownData_PMQM, 0x0672);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatingGamepadButtonActionWidget, 0x06A8);
		}

		// class UGamepadButtonLegend : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__GamepadButtonLegend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamepadButtonLegend, ActionList, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGamepadButtonLegend, 0x0648);
		}

		// class AGamepadInteractButtonWidget : public AActor
		TEST_METHOD(Class__FrontiersUI__GamepadInteractButtonWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGamepadInteractButtonWidget, UnknownData_IPX1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGamepadInteractButtonWidget, WidgetComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGamepadInteractButtonWidget, 0x0230);
		}

		// class UGamepadInteractButtonUIWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__GamepadInteractButtonUIWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGamepadInteractButtonUIWidget, 0x0640);
		}

		// class UModalContentInterface : public UInterface
		TEST_METHOD(Class__FrontiersUI__ModalContentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModalContentInterface, 0x0028);
		}

		// class UGenericModalWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__GenericModalWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidget, SpecialAction, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidget, RejectButtonType, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidget, bBlurBackground, 0x0739);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidget, UnknownData_0YB2, 0x073A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidget, Content, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidget, AcceptEvent, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidget, UnknownData_3NSN, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidget, RejectEvent, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidget, UnknownData_QWS3, 0x0778);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericModalWidget, 0x0798);
		}

		// class UGenericModalWidgetTextInput : public UGenericModalWidget
		TEST_METHOD(Class__FrontiersUI__GenericModalWidgetTextInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericModalWidgetTextInput, 0x0798);
		}

		// class UGenericResourceWidget : public UCraftingRecipeUnitWidget
		TEST_METHOD(Class__FrontiersUI__GenericResourceWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericResourceWidget, bShowItemCountFromInventory, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericResourceWidget, UnknownData_I9HP, 0x0831);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericResourceWidget, 0x0850);
		}

		// class UGenericResourceWidgetInterface : public UInterface
		TEST_METHOD(Class__FrontiersUI__GenericResourceWidgetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericResourceWidgetInterface, 0x0028);
		}

		// class UGoldLimitWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__GoldLimitWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGoldLimitWidget, NearGoldLimitPercent, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGoldLimitWidget, DefaultColor, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGoldLimitWidget, NearGoldLimitColor, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGoldLimitWidget, AtGoldLimitColor, 0x0664);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGoldLimitWidget, UnknownData_DHI4, 0x0674);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGoldLimitWidget, 0x0680);
		}

		// class UHelpTabbedMenu : public UTabbedMenuWidget
		TEST_METHOD(Class__FrontiersUI__HelpTabbedMenu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHelpTabbedMenu, DontShowThisAgainAction, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHelpTabbedMenu, PlatformIdFormatText, 0x0820);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHelpTabbedMenu, 0x0838);
		}

		// class UClassMechanicsTabbedMenu : public UCarouselWidget
		TEST_METHOD(Class__FrontiersUI__ClassMechanicsTabbedMenu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicsTabbedMenu, ClassesToShow, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClassMechanicsTabbedMenu, 0x0658);
		}

		// class UHotkeyWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__HotkeyWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHotkeyWidget, InputActionName, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHotkeyWidget, GamepadActionName, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHotkeyWidget, Hotkey, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHotkeyWidget, GamepadHotkey, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHotkeyWidget, SpecialKey, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHotkeyWidget, UnknownData_CVGO, 0x0681);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHotkeyWidget, BGButton, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHotkeyWidget, TextBlock, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHotkeyWidget, 0x0698);
		}

		// class UGamepadSkillGroupToggle : public UHotkeyWidget
		TEST_METHOD(Class__FrontiersUI__GamepadSkillGroupToggle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGamepadSkillGroupToggle, 0x0698);
		}

		// class UIconConstants : public UObject
		TEST_METHOD(Class__FrontiersUI__IconConstants)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIconConstants, DesaturationMaterial, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIconConstants, DefaultTraitIcon, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIconConstants, ElementIcons, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIconConstants, ElementIconsRound, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIconConstants, ElementProcIcons, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIconConstants, ElementCardIcons, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIconConstants, TargetTypeIcons, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIconConstants, ClassIcons, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIconConstants, DefaultClassPortraits, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIconConstants, LorePortraits, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIconConstants, ClassResourceIcons, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIconConstants, SpokeIcons, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIconConstants, QuestRewardIcons, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIconConstants, MapMarkerIcons, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIconConstants, EnchantingCategoryIcons, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIconConstants, DifficultyBadgeIcons, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIconConstants, InWorldQuestIcons, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIconConstants, DialogueIcon, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIconConstants, CraftingReadyToClaimIcon, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIconConstants, CraftingInProgressIcon, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIconConstants, AutoGeneratedIconMaterial, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIconConstants, MonsterPopulationImages, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIconConstants, BossImages, 0x0558);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIconConstants, 0x05A8);
		}

		// class UInboxEntryListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__InboxEntryListWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInboxEntryListWidget, NumSlotsPerPage, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInboxEntryListWidget, UnknownData_KKDJ, 0x0254);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInboxEntryListWidget, 0x0258);
		}

		// class UInboxAttachmentWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__InboxAttachmentWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInboxAttachmentWidget, 0x0640);
		}

		// class UInboxAttachmentListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__InboxAttachmentListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInboxAttachmentListWidget, 0x0250);
		}

		// class UInboxEntryWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__InboxEntryWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInboxEntryWidget, FromText, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInboxEntryWidget, BodyText, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInboxEntryWidget, DateText, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInboxEntryWidget, ItemIconVisibility, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInboxEntryWidget, UnknownData_EHRB, 0x0689);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInboxEntryWidget, 0x06A0);
		}

		// class UInboxWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__InboxWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInboxWidget, UnknownData_50O8, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInboxWidget, ContainerClass, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInboxWidget, InboxListWidget, 0x0650);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInboxWidget, 0x0658);
		}

		// class UInGameMenuWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__InGameMenuWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenuWidget, ExitToTitleConfirmationModal, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenuWidget, ExitToDesktopConfirmationModal, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenuWidget, ExitToTitleWithFeedbackModal, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenuWidget, ExitToDesktopWithFeedbackModal, 0x0D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenuWidget, UnlinkFirstWarningModal, 0x0FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenuWidget, UnlinkSecondWarningModal, 0x1220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenuWidget, UnlinkCompleteModal, 0x1480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenuWidget, UnlinkFailedModal, 0x16E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenuWidget, FortReportModalDefinition, 0x1940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenuWidget, FortReportSuccessMessage, 0x1BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenuWidget, PoliciesWidgetClass, 0x1BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenuWidget, StoreAvailabilityMessages, 0x1BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenuWidget, DebugTextKeyCombo, 0x1C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenuWidget, DebugTextKeyComboSeconds, 0x1C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenuWidget, UnknownData_P7XP, 0x1C24);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInGameMenuWidget, 0x1C28);
		}

		// class UInstanceResetModalWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__InstanceResetModalWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetModalWidget, ResetActionText, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstanceResetModalWidget, UnknownData_EBIB, 0x0658);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInstanceResetModalWidget, 0x0670);
		}

		// class UInstanceResetPartyList : public UListWidget
		TEST_METHOD(Class__FrontiersUI__InstanceResetPartyList)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInstanceResetPartyList, 0x0250);
		}

		// class UInstanceResetPartyMember : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__InstanceResetPartyMember)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInstanceResetPartyMember, 0x0640);
		}

		// class UInventoryComparisonWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__InventoryComparisonWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComparisonWidget, UnsuppressTooltipMouseMovementThreshold, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComparisonWidget, UnknownData_G2YF, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComparisonWidget, CompareTypeIndices, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryComparisonWidget, UnknownData_RWB9, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryComparisonWidget, 0x06A8);
		}

		// class UInventoryItemCostWidget : public UCraftingRecipeUnitWidget
		TEST_METHOD(Class__FrontiersUI__InventoryItemCostWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemCostWidget, UnknownData_SIZB, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemCostWidget, OwnedQuantity, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemCostWidget, RequiredQuantity, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemCostWidget, UnknownData_SFTN, 0x0868);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryItemCostWidget, 0x0888);
		}

		// class UInventoryItemEquippedListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__InventoryItemEquippedListWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemEquippedListWidget, ComparisonWidgetClass, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemEquippedListWidget, SlotTagsAny, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemEquippedListWidget, bSlotSelectMode, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemEquippedListWidget, UnknownData_2KOG, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemEquippedListWidget, ComparisonWidget, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryItemEquippedListWidget, 0x0288);
		}

		// class UInventoryItemEquippedWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__InventoryItemEquippedWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemEquippedWidget, bHasEquippedItem, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemEquippedWidget, UnknownData_3B93, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemEquippedWidget, SlotName, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemEquippedWidget, UnknownData_HSRJ, 0x0660);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryItemEquippedWidget, 0x0668);
		}

		// class UInventoryItemListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__InventoryItemListWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemListWidget, HeaderName, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemListWidget, ComparisonWidgetClass, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemListWidget, bShowEmptySlots, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemListWidget, UnknownData_BCDL, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemListWidget, NumSlotsPerPage, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemListWidget, ComparisonWidget, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryItemListWidget, 0x0270);
		}

		// class UInventoryItemPickUpWidget : public UInventoryItemBaseWidget
		TEST_METHOD(Class__FrontiersUI__InventoryItemPickUpWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryItemPickUpWidget, 0x08A0);
		}

		// class UInventoryItemWidget : public UInventoryItemBaseWidget
		TEST_METHOD(Class__FrontiersUI__InventoryItemWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemWidget, UnknownData_SLUJ, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemWidget, SendToPetAction, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemWidget, SendToPlayerAction, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemWidget, DestroyAction, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemWidget, BreakDownAction, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemWidget, BeginMoveAction, 0x0C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemWidget, FinishMoveAction, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemWidget, CancelMoveAction, 0x0E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemWidget, ActivateAction, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemWidget, MoveByClickAction, 0x1078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemWidget, UnequipAction, 0x1170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemWidget, SacrificeAction, 0x1268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemWidget, SelectAction, 0x1360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemWidget, SellAction, 0x1458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemWidget, UseOtherItemOnThisAction, 0x1550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemWidget, MultiSlotEquipAction, 0x1648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemWidget, MultiSlotSelectAction, 0x1740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemWidget, UnknownData_YOTT, 0x1838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemWidget, bIsLifeBound, 0x1840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemWidget, UnknownData_3VWG, 0x1841);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemWidget, bParentHandlesButtonAction, 0x1862);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemWidget, UnknownData_IV78, 0x1863);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemWidget, SuppressTooltipsDuration, 0x1864);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemWidget, GrabbedItemOffset, 0x1868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemWidget, BreakDownAudioEvent, 0x1878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemWidget, DestroyAudioEvent, 0x1890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemWidget, LegendarySaleConfirmation, 0x18A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemWidget, UnknownData_R5I6, 0x1B08);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryItemWidget, 0x1B30);
		}

		// class UInventoryStashLoadRetryWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__InventoryStashLoadRetryWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryStashLoadRetryWidget, UnknownData_OSMP, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryStashLoadRetryWidget, 0x0648);
		}

		// class UInventoryStashWidget : public UInventoryGridWithTabsWidget
		TEST_METHOD(Class__FrontiersUI__InventoryStashWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryStashWidget, StashActor, 0x0EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryStashWidget, InventoryGridWidget, 0x0EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryStashWidget, UnknownData_XI25, 0x0EF8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryStashWidget, 0x0F58);
		}

		// class UInventoryWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__InventoryWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryWidget, UnknownData_O3EQ, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryWidget, CloseAction, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryWidget, InventoryGridWidget, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryWidget, EquippedWeaponsWidget, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryWidget, EquippedGearWidget, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryWidget, PetItemsWidget, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryWidget, PlayerInfoWidget, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryWidget, ToggleStatsAction, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryWidget, ShowStatsText, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryWidget, HideStatsText, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryWidget, HUDWidgetsToKeepOpen, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryWidget, UnknownData_FNTG, 0x08A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryWidget, 0x08B8);
		}

		// class UItemCountListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__ItemCountListWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCountListWidget, ItemsToDisplay, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemCountListWidget, UnknownData_VKZO, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemCountListWidget, 0x0268);
		}

		// class UItemNameplateWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__ItemNameplateWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemNameplateWidget, UnknownData_04NH, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemNameplateWidget, 0x0650);
		}

		// class UItemSpawnWidget : public UCraftingRecipeWidgetBase
		TEST_METHOD(Class__FrontiersUI__ItemSpawnWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemSpawnWidget, UnknownData_O2VV, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemSpawnWidget, ItemSpawnRowText, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemSpawnWidget, LevelWarningFormat, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemSpawnWidget, QuestWarningText, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemSpawnWidget, UnknownData_VS1G, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemSpawnWidget, MyTooltipWidget, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemSpawnWidget, TooltipWidgetClass, 0x06C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemSpawnWidget, 0x06C8);
		}

		// class UItemSpawnWidgetTooltip : public UTooltipWidget
		TEST_METHOD(Class__FrontiersUI__ItemSpawnWidgetTooltip)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemSpawnWidgetTooltip, 0x0680);
		}

		// class UKeyBindingsWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__KeyBindingsWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingsWidget, ResetToDefaultAction, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingsWidget, BindableActionData, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingsWidget, DummyInputComponent, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingsWidget, DummyPlayerInput, 0x0750);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKeyBindingsWidget, 0x0758);
		}

		// class UKeyBindingListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__KeyBindingListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKeyBindingListWidget, 0x0250);
		}

		// class UKeyBindingEntryWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__KeyBindingEntryWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingEntryWidget, ChangeBinding1Action, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingEntryWidget, ChangeBinding2Action, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingEntryWidget, ModifyWidget, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingEntryWidget, BindingName, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingEntryWidget, KeyText, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingEntryWidget, KeyText2, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingEntryWidget, UnknownData_3G7A, 0x0880);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKeyBindingEntryWidget, 0x08D0);
		}

		// class UKeyBindingModifyWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__KeyBindingModifyWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingModifyWidget, UnknownData_9EWP, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingModifyWidget, KeyText, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingModifyWidget, UnbindMessageText, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyBindingModifyWidget, UnknownData_WYFA, 0x06D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKeyBindingModifyWidget, 0x06E0);
		}

		// class ULegendaryAffixCollectionEquippedWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__LegendaryAffixCollectionEquippedWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionEquippedWidget, NumAffixesUnlocked, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionEquippedWidget, UnknownData_RFB4, 0x0644);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegendaryAffixCollectionEquippedWidget, 0x0648);
		}

		// class ULegendaryAffixCollectionEquipModal : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__LegendaryAffixCollectionEquipModal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionEquipModal, EquipSelectedAction, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegendaryAffixCollectionEquipModal, 0x0738);
		}

		// class ULegendaryAffixCollectionItemCategoryListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__LegendaryAffixCollectionItemCategoryListWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItemCategoryListWidget, Categories, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItemCategoryListWidget, NumAffixesInList, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItemCategoryListWidget, NumUnlockedAffixesInList, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItemCategoryListWidget, UnknownData_G4FU, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegendaryAffixCollectionItemCategoryListWidget, 0x02E0);
		}

		// class ULegendaryAffixCollectionItemCategoryWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__LegendaryAffixCollectionItemCategoryWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItemCategoryWidget, UnknownData_EEA5, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItemCategoryWidget, ItemCategoryName, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItemCategoryWidget, bShowHeader, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItemCategoryWidget, UnknownData_XGK6, 0x0671);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegendaryAffixCollectionItemCategoryWidget, 0x0678);
		}

		// class ULegendaryAffixCollectionItemListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__LegendaryAffixCollectionItemListWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItemListWidget, NumAffixesInList, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItemListWidget, NumUnlockedAffixesInList, 0x0254);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegendaryAffixCollectionItemListWidget, 0x0258);
		}

		// class ULegendaryAffixCollectionItemWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__LegendaryAffixCollectionItemWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItemWidget, UnknownData_B8W8, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItemWidget, EquipAction, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItemWidget, SelectAction, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItemWidget, UnknownData_QSGQ, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItemWidget, DisplayName, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItemWidget, bCanBeEquippedByPlayer, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItemWidget, UnknownData_XJ1C, 0x0871);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItemWidget, ClassRequirementText, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItemWidget, EquippedState, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItemWidget, bIsNew, 0x0891);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionItemWidget, UnknownData_ZM0J, 0x0892);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegendaryAffixCollectionItemWidget, 0x0898);
		}

		// class ULegendaryAffixCollectionWidget : public UTabbedMenuWidget
		TEST_METHOD(Class__FrontiersUI__LegendaryAffixCollectionWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionWidget, UnknownData_00S4, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionWidget, CategoryTabName, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionWidget, UnknownData_FT99, 0x0748);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegendaryAffixCollectionWidget, 0x0750);
		}

		// class ULegendaryAffixSlotListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__LegendaryAffixSlotListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegendaryAffixSlotListWidget, 0x0250);
		}

		// class ULegendaryAffixSlotWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__LegendaryAffixSlotWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixSlotWidget, UnknownData_BN55, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixSlotWidget, SelectSlotAction, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixSlotWidget, UnknownData_D02P, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixSlotWidget, bIsUnlocked, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixSlotWidget, bIsFilled, 0x0755);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixSlotWidget, bIsPreview, 0x0756);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixSlotWidget, bDuplicatesWardrobe, 0x0757);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixSlotWidget, UnlockLevel, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixSlotWidget, UnknownData_NI8T, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixSlotWidget, ItemData, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixSlotWidget, UnknownData_SDOT, 0x0A10);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegendaryAffixSlotWidget, 0x0A18);
		}

		// class USelectableWidgetInterface : public UInterface
		TEST_METHOD(Class__FrontiersUI__SelectableWidgetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelectableWidgetInterface, 0x0028);
		}

		// class UListWidgetWrapperInterface : public UInterface
		TEST_METHOD(Class__FrontiersUI__ListWidgetWrapperInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListWidgetWrapperInterface, 0x0028);
		}

		// class UTextListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__TextListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextListWidget, 0x0250);
		}

		// class ULoadingScreen : public UUserWidget
		TEST_METHOD(Class__FrontiersUI__LoadingScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingScreen, UnknownData_T6T7, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingScreen, MuteSoundsEventReference, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingScreen, BackgroundWidget, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingScreen, ForegroundWidget, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingScreen, UnknownData_CD42, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoadingScreen, 0x03B8);
		}

		// class ULorePlayerWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__LorePlayerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULorePlayerWidget, FallbackPortraitGameplayTag, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULorePlayerWidget, 0x0648);
		}

		// class UMainMenuBreadcrumbWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__MainMenuBreadcrumbWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuBreadcrumbWidget, 0x0640);
		}

		// class UMainMenuBreadcrumbButtonWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__MainMenuBreadcrumbButtonWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuBreadcrumbButtonWidget, UnknownData_N1E6, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuBreadcrumbButtonWidget, 0x0648);
		}

		// class UGenderButtonWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__GenderButtonWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenderButtonWidget, UnknownData_YP1S, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenderButtonWidget, Gender, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenderButtonWidget, UnknownData_8X6C, 0x0659);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenderButtonWidget, 0x0660);
		}

		// class UMainMenuWidgetBase : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__MainMenuWidgetBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuWidgetBase, 0x0640);
		}

		// class UMainMenuCharacterCreateCustomizeWidget : public UMainMenuWidgetBase
		TEST_METHOD(Class__FrontiersUI__MainMenuCharacterCreateCustomizeWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterCreateCustomizeWidget, MainMenuState, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterCreateCustomizeWidget, RandomizeNameAction, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterCreateCustomizeWidget, EditNameAction, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterCreateCustomizeWidget, SelectMaleAction, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterCreateCustomizeWidget, SelectFemaleAction, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterCreateCustomizeWidget, SwapGenderAction, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterCreateCustomizeWidget, ContinueAction, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterCreateCustomizeWidget, HardcoreAction, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterCreateCustomizeWidget, FocusSkillsAction, 0x0D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterCreateCustomizeWidget, FocusCustomizationAction, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterCreateCustomizeWidget, HardcoreWarningModalDefinition, 0x0F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterCreateCustomizeWidget, ClassInfoTabOption, 0x1160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterCreateCustomizeWidget, DimmedSectionOpacity, 0x11D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterCreateCustomizeWidget, UnknownData_QMYQ, 0x11D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterCreateCustomizeWidget, EditableTextBox, 0x11D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterCreateCustomizeWidget, ClassDescriptionTabbedMenu, 0x11E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterCreateCustomizeWidget, ClassSkillsList, 0x11E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterCreateCustomizeWidget, UnknownData_OH0X, 0x11F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterCreateCustomizeWidget, GamepadSections, 0x11F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuCharacterCreateCustomizeWidget, 0x1208);
		}

		// class UEmberWeaponOptionWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__EmberWeaponOptionWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmberWeaponOptionWidget, UnknownData_L9KI, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEmberWeaponOptionWidget, 0x0668);
		}

		// class UEmberWeaponOptionListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__EmberWeaponOptionListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEmberWeaponOptionListWidget, 0x0250);
		}

		// class UMainMenuCharacterCreateEmberWeaponWidget : public UMainMenuWidgetBase
		TEST_METHOD(Class__FrontiersUI__MainMenuCharacterCreateEmberWeaponWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterCreateEmberWeaponWidget, State, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterCreateEmberWeaponWidget, MainMenuState, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterCreateEmberWeaponWidget, UnknownData_9C68, 0x0649);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterCreateEmberWeaponWidget, EmberWeaponListWidget, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterCreateEmberWeaponWidget, CombinedSkillTreeEmberWeaponIndex, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterCreateEmberWeaponWidget, UnknownData_SDRM, 0x065C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuCharacterCreateEmberWeaponWidget, 0x0660);
		}

		// class UMainMenuCharacterCreatePickerWidget : public UMainMenuWidgetBase
		TEST_METHOD(Class__FrontiersUI__MainMenuCharacterCreatePickerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterCreatePickerWidget, UnknownData_W618, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuCharacterCreatePickerWidget, 0x0658);
		}

		// class UMainMenuCharacterCreatePickClassWidget : public UMainMenuCharacterCreatePickerWidget
		TEST_METHOD(Class__FrontiersUI__MainMenuCharacterCreatePickClassWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterCreatePickClassWidget, State, 0x0658);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuCharacterCreatePickClassWidget, 0x0660);
		}

		// class UMainMenuCharacterCreatePickPetWidget : public UMainMenuCharacterCreatePickerWidget
		TEST_METHOD(Class__FrontiersUI__MainMenuCharacterCreatePickPetWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterCreatePickPetWidget, State, 0x0658);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuCharacterCreatePickPetWidget, 0x0660);
		}

		// class UMainMenuCharacterCreateReadyToDeployWidget : public UMainMenuWidgetBase
		TEST_METHOD(Class__FrontiersUI__MainMenuCharacterCreateReadyToDeployWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterCreateReadyToDeployWidget, State, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterCreateReadyToDeployWidget, DifficultyButtonLabel, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterCreateReadyToDeployWidget, ChangeDifficultyAction, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterCreateReadyToDeployWidget, UnknownData_RQU5, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterCreateReadyToDeployWidget, DeployCharacterButtonWaitingText, 0x0768);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuCharacterCreateReadyToDeployWidget, 0x0780);
		}

		// class UMainMenuCharacterSelectWidget : public UMainMenuWidgetBase
		TEST_METHOD(Class__FrontiersUI__MainMenuCharacterSelectWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterSelectWidget, UnknownData_TWQ0, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterSelectWidget, CharacterSelectState, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterSelectWidget, SelectedCharacterName, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterSelectWidget, SelectedCharacterPetName, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterSelectWidget, SelectedCharacterEmberWeaponName, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterSelectWidget, DeleteCharacterConfirmationTitle, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterSelectWidget, DeleteCharacterConfirmationBody, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterSelectWidget, OptionsMenuClass, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterSelectWidget, CreateCharacterAction, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterSelectWidget, ChangeDifficultyAction, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterSelectWidget, LinkArcAccountAction, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterSelectWidget, VerifyEmailAction, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterSelectWidget, UnknownData_OONG, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterSelectWidget, DifficultyChangeWidgetClass, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterSelectWidget, UnknownData_BRUZ, 0x0D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterSelectWidget, EnterGameButtonWaitingText, 0x0D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterSelectWidget, InvalidCharacterVersionText, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterSelectWidget, LinkAccountReadyText, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterSelectWidget, LinkAccountInProgressText, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterSelectWidget, UnknownData_FSS5, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterSelectWidget, AccountReadyModal, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterSelectWidget, CouldntCreateShadowAccountModal, 0x1000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterSelectWidget, RejectedTermsModal, 0x1260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterSelectWidget, NoShadowAccountModal, 0x14C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterSelectWidget, UnknownData_08UU, 0x1720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterSelectWidget, PoliciesWidgetClass, 0x1728);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuCharacterSelectWidget, 0x1730);
		}

		// class UMainMenuCharacterSlotListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__MainMenuCharacterSlotListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuCharacterSlotListWidget, 0x0250);
		}

		// class UMainMenuCharacterSlotWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__MainMenuCharacterSlotWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterSlotWidget, UnknownData_3AKU, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterSlotWidget, MainMenuPlayerData, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterSlotWidget, DeleteCharacterAction, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterSlotWidget, SelectCharacterAction, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterSlotWidget, LevelTextFormat, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterSlotWidget, PlayActionTextOnline, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuCharacterSlotWidget, PlayActionTextOffline, 0x09F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuCharacterSlotWidget, 0x0A10);
		}

		// class UTLBaseHUD : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__TLBaseHUD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLBaseHUD, UIMaterialGlobals, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLBaseHUD, FullscreenVideoWidget, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLBaseHUD, CinematicWidget, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLBaseHUD, UnknownData_WGTD, 0x0658);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLBaseHUD, 0x0750);
		}

		// class UMainMenuHUD : public UTLBaseHUD
		TEST_METHOD(Class__FrontiersUI__MainMenuHUD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuHUD, ShowMenuAction, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuHUD, QuitGameAction, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuHUD, QuitConfirmationModal, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuHUD, BuildInfo, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuHUD, LetterboxBars, 0x0BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuHUD, LetterboxContainer, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuHUD, UnknownData_LC29, 0x0BD0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuHUD, 0x0C10);
		}

		// class UMainMenuLoginWidget : public UMainMenuWidgetBase
		TEST_METHOD(Class__FrontiersUI__MainMenuLoginWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuLoginWidget, LoginButtonWaitingText, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuLoginWidget, MainMenuState, 0x0658);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuLoginWidget, 0x0660);
		}

		// class UMainMenuPlatformSignOnWidget : public UMainMenuWidgetBase
		TEST_METHOD(Class__FrontiersUI__MainMenuPlatformSignOnWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuPlatformSignOnWidget, StartAction, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuPlatformSignOnWidget, PlayOfflineAction, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuPlatformSignOnWidget, IdentifyProfileAction, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuPlatformSignOnWidget, PlatformSignOnState, 0x0928);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuPlatformSignOnWidget, 0x0930);
		}

		// class UMapMarkerInterface : public UInterface
		TEST_METHOD(Class__FrontiersUI__MapMarkerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapMarkerInterface, 0x0028);
		}

		// class UMapMarkerListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__MapMarkerListWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerListWidget, LocalPlayerMapMarker, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapMarkerListWidget, 0x0258);
		}

		// class UMapMarkerWidget : public UTLImage
		TEST_METHOD(Class__FrontiersUI__MapMarkerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerWidget, UnknownData_7ZEH, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerWidget, MarkerData, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerWidget, SelectionRadius, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerWidget, GamepadTooltipOffset, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerWidget, LabelOffset, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerWidget, UnknownData_1MOS, 0x02F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapMarkerWidget, 0x0300);
		}

		// class ULocalPlayerMapMarkerWidget : public UUserWidget
		TEST_METHOD(Class__FrontiersUI__LocalPlayerMapMarkerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayerMapMarkerWidget, UnknownData_M6FY, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayerMapMarkerWidget, MarkerData, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayerMapMarkerWidget, ElementToTransform, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayerMapMarkerWidget, RotationOffset, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayerMapMarkerWidget, UnknownData_PPTG, 0x030C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPlayerMapMarkerWidget, 0x0310);
		}

		// class UTLRichTextBlock : public URichTextBlock
		TEST_METHOD(Class__FrontiersUI__TLRichTextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLRichTextBlock, StyleClass, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLRichTextBlock, bIgnoreStyleColor, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLRichTextBlock, UnknownData_3FJU, 0x0681);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLRichTextBlock, BindableTextDelegate, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLRichTextBlock, UnknownData_PR4R, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLRichTextBlock, BindableText, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLRichTextBlock, Font, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLRichTextBlock, Color, 0x0708);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLRichTextBlock, 0x0718);
		}

		// class UMapMarkerLabel : public UTLRichTextBlock
		TEST_METHOD(Class__FrontiersUI__MapMarkerLabel)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapMarkerLabel, 0x0718);
		}

		// class UMapPanel : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__MapPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapPanel, GadgetBeingUsed, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapPanel, FocusIndex, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapPanel, UnknownData_ZFIS, 0x0649);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapPanel, LeftFocusAction, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapPanel, RightFocusAction, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapPanel, ToggleMapAction, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapPanel, UnknownData_79A7, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapPanel, MapPanelName, 0x0950);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapPanel, 0x09A0);
		}

		// class UMapSpokeWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__MapSpokeWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapSpokeWidget, 0x0640);
		}

		// class UMapSpokeWrapper : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__MapSpokeWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSpokeWrapper, CurrentMapSpokeWidget, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSpokeWrapper, GoblinStopPercent, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSpokeWrapper, GoblinScrollRate, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSpokeWrapper, InfestedStartPercent, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSpokeWrapper, InfestedStopPercent, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSpokeWrapper, InfestedScrollRate, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSpokeWrapper, EchonokStartPercent, 0x065C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSpokeWrapper, EchonokScrollRate, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSpokeWrapper, UnknownData_0JI0, 0x0664);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSpokeWrapper, MapSpokeOffset, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSpokeWrapper, ListOfSpokes, 0x06B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapSpokeWrapper, 0x06C8);
		}

		// class UMapSidebar : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__MapSidebar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSidebar, AreaMapLabel, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSidebar, SpokeMapLabel, 0x0658);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapSidebar, 0x0670);
		}

		// class UMapIconWidgetBase : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__MapIconWidgetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapIconWidgetBase, UnknownData_QZG2, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapIconWidgetBase, FocusedVisibility, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapIconWidgetBase, UnknownData_PT1K, 0x0659);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapIconWidgetBase, 0x0660);
		}

		// class UMapCompassWidget : public UMapIconWidgetBase
		TEST_METHOD(Class__FrontiersUI__MapCompassWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapCompassWidget, 0x0660);
		}

		// class UAreaInSpokeWidget : public UMapIconWidgetBase
		TEST_METHOD(Class__FrontiersUI__AreaInSpokeWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAreaInSpokeWidget, SelectAction, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAreaInSpokeWidget, YouAreHereVisibility, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAreaInSpokeWidget, Destination, 0x0759);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAreaInSpokeWidget, UnknownData_R73G, 0x075A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAreaInSpokeWidget, AreaRow, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAreaInSpokeWidget, BindIndex, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAreaInSpokeWidget, UnknownData_XW1Q, 0x0774);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAreaInSpokeWidget, 0x0780);
		}

		// class USpokeInWorldWidget : public UMapIconWidgetBase
		TEST_METHOD(Class__FrontiersUI__SpokeInWorldWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpokeInWorldWidget, SpokeRow, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpokeInWorldWidget, YouAreHereVisibility, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpokeInWorldWidget, UnknownData_OVQ1, 0x0671);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpokeInWorldWidget, 0x0678);
		}

		// class UMapWorldWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__MapWorldWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapWorldWidget, 0x0640);
		}

		// class UMapWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__MapWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWidget, MapMarkerWidth, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWidget, MinDistanceBetweenMarkersForLabels, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWidget, bUseLargeMapRenderTexture, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWidget, bShowPersistentMarkerLabels, 0x0649);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWidget, bCenterOnOwnPlayer, 0x064A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWidget, UnknownData_3TZV, 0x064B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWidget, MarkerConstraint, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWidget, EdgeColor, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWidget, EdgeScale_Important, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWidget, UnknownData_BRCH, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWidget, DynamicMaterial, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWidget, VirtualCursorPanel, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWidget, MarkerListWidget, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWidget, UnknownData_3IRG, 0x06A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapWidget, 0x0780);
		}

		// class UMessageContainerWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__MessageContainerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageContainerWidget, DefaultShowDuration, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageContainerWidget, UnknownData_N4CP, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageContainerWidget, ActiveWidgetType, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageContainerWidget, UnknownData_DH5H, 0x0649);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMessageContainerWidget, 0x0658);
		}

		// class UMessageWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__MessageWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageWidget, MessageColor, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageWidget, ErrorColor, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageWidget, Message, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageWidget, TextColor, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageWidget, UnknownData_YMPU, 0x06D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMessageWidget, 0x06D8);
		}

		// class UMiniHelpWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__MiniHelpWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMiniHelpWidget, 0x0640);
		}

		// class UTimeOfDayWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__TimeOfDayWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayWidget, UnknownData_KTX6, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayWidget, PercentAnimation, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeOfDayWidget, 0x0650);
		}

		// class UMiniMapWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__MiniMapWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget, DifficultyBadgeMap, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget, ChallengeLevelTextFormat, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget, MonsterDamageScalingTextFormat, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget, MonsterHealthScalingTextFormat, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget, MonsterMoveSpeedScalingTextFormat, 0x06D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMiniMapWidget, 0x06F0);
		}

		// class UNameplate : public UUserWidget
		TEST_METHOD(Class__FrontiersUI__Nameplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNameplate, LevelTextStyle, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNameplate, DungeonLevelTextStyle, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNameplate, 0x0270);
		}

		// class UNavigationHeader : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__NavigationHeader)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationHeader, 0x0640);
		}

		// class USocialHUDNotificationWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__SocialHUDNotificationWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialHUDNotificationWidget, NotificationCountText, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USocialHUDNotificationWidget, 0x0658);
		}

		// class UNotificationsWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__NotificationsWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotificationsWidget, NotificationWidgets, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotificationsWidget, UnknownData_HHEG, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNotificationsWidget, 0x0698);
		}

		// class UNumberPickerWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__NumberPickerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNumberPickerWidget, Delta, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNumberPickerWidget, AccelerationPerSecond, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNumberPickerWidget, MaxVelocity, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNumberPickerWidget, MaxChars, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNumberPickerWidget, bIntegersOnly, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNumberPickerWidget, UnknownData_TTXG, 0x0651);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNumberPickerWidget, Min, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNumberPickerWidget, Max, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNumberPickerWidget, UnknownData_DJJM, 0x065C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNumberPickerWidget, 0x0670);
		}

		// class UListedObjectWidgetInterface : public UInterface
		TEST_METHOD(Class__FrontiersUI__ListedObjectWidgetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListedObjectWidgetInterface, 0x0028);
		}

		// class UObjectListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__ObjectListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectListWidget, 0x0250);
		}

		// class UOnlineStoreEntryListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__OnlineStoreEntryListWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineStoreEntryListWidget, ComparisonWidgetClass, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineStoreEntryListWidget, ComparisonWidget, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineStoreEntryListWidget, 0x0260);
		}

		// class UOnlineStoreEntryWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__OnlineStoreEntryWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineStoreEntryWidget, UnknownData_WZJK, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineStoreEntryWidget, CatalogData, 0x0658);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineStoreEntryWidget, 0x0728);
		}

		// class UOptionsMenuWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__OptionsMenuWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenuWidget, UnknownData_UVGK, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenuWidget, SafeZoneOptionWidget, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenuWidget, EditKeyBindingsAction, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenuWidget, EditVideoSettingsAction, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionsMenuWidget, OptionWidgets, 0x0840);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOptionsMenuWidget, 0x0850);
		}

		// class UOptionWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__OptionWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionWidget, UnknownData_SKSF, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionWidget, SliderAction, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOptionWidget, OptionText, 0x0740);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOptionWidget, 0x0758);
		}

		// class UOptionListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__OptionListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOptionListWidget, 0x0250);
		}

		// class UOtherPlayerMenuWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__OtherPlayerMenuWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOtherPlayerMenuWidget, UnknownData_056U, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOtherPlayerMenuWidget, NoNearbyPlayersVisibility, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOtherPlayerMenuWidget, FortOwnerVisibility, 0x0651);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOtherPlayerMenuWidget, UnknownData_TZDP, 0x0652);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOtherPlayerMenuWidget, 0x0658);
		}

		// class UOtherPlayerListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__OtherPlayerListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOtherPlayerListWidget, 0x0250);
		}

		// class UOverlayMapWidget : public UMapWidget
		TEST_METHOD(Class__FrontiersUI__OverlayMapWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlayMapWidget, 0x0780);
		}

		// class UOverlayMapWrapper : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__OverlayMapWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlayMapWrapper, MapWidget, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlayMapWrapper, 0x0648);
		}

		// class UToastWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__ToastWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UToastWidget, UnknownData_CC7U, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToastWidget, 0x0648);
		}

		// class UPartyInstanceResetToastWidget : public UToastWidget
		TEST_METHOD(Class__FrontiersUI__PartyInstanceResetToastWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyInstanceResetToastWidget, UnknownData_KNO6, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyInstanceResetToastWidget, RequestToastText, 0x0718);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyInstanceResetToastWidget, 0x0730);
		}

		// class UPartyInviteToastWidget : public UToastWidget
		TEST_METHOD(Class__FrontiersUI__PartyInviteToastWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyInviteToastWidget, DifficultyModalDef, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyInviteToastWidget, NoInviteBlockedModalDef, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyInviteToastWidget, PartyAcceptConfirmation, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyInviteToastWidget, InviteToastText, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyInviteToastWidget, bCanInvite, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyInviteToastWidget, UnknownData_Z5JZ, 0x0D81);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyInviteToastWidget, 0x0E38);
		}

		// class UPartyMemberWidget : public UOtherPlayerWidget
		TEST_METHOD(Class__FrontiersUI__PartyMemberWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberWidget, WidgetState, 0x0EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberWidget, UnknownData_KPDA, 0x0EB9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberWidget, KickAction, 0x0EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberWidget, LeaveAction, 0x0FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberWidget, AcceptInviteAction, 0x10B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberWidget, DeclineInviteAction, 0x11A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberWidget, ShowSocialContextMenuAction, 0x12A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberWidget, MuteAction, 0x1398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberWidget, PartyMember, 0x1490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberWidget, PartyInvite, 0x1570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberWidget, KickButtonVisibility, 0x1620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberWidget, LeaveButtonVisibility, 0x1621);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberWidget, InviteByTextVisibility, 0x1622);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberWidget, bCanInvite, 0x1623);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberWidget, UnknownData_VOVS, 0x1624);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberWidget, AreaNameTextBlock, 0x1628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberWidget, CharacterLevelTextBlock, 0x1630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberWidget, AcceptText, 0x1638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberWidget, JoinText, 0x1650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberWidget, PartyIndex, 0x1668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberWidget, UnknownData_C94L, 0x166C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberWidget, PartyAcceptConfirmation, 0x1670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMemberWidget, UnknownData_GDUV, 0x18D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyMemberWidget, 0x18D8);
		}

		// class UPartyListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__PartyListWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyListWidget, bCanInvite, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyListWidget, bShowSelf, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyListWidget, bShowPendingInvitations, 0x0252);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyListWidget, UnknownData_H7B8, 0x0253);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyListWidget, 0x0258);
		}

		// class UPartyWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__PartyWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyWidget, UnknownData_OSVA, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyWidget, Party, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyWidget, 0x0678);
		}

		// class UPetDetailsWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__PetDetailsWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget, UnknownData_UM8H, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget, ReleasePetAction, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget, SwapPetAction, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget, RandomizePetNameAction, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget, EditPetNameAction, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget, SendPetHomeAction, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget, ToggleSkillDetailsAction, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget, bSwapActionNeedsConfirm, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget, UnknownData_GJVW, 0x0C19);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget, ReleasePetConfirmModal, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget, SwapPetConfirmModal, 0x0E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget, DOFSettings, 0x10E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget, UnknownData_B25K, 0x10EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget, Description, 0x11C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget, PetTypeDisplayName, 0x11D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget, PetNameText, 0x11F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget, ItemTypeText, 0x1208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget, RarityText, 0x1220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget, RarityColor, 0x1238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget, PetNameInvalidVisibility, 0x1248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget, PetNameValidatingVisibility, 0x1249);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget, PetNameValidVisibility, 0x124A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget, DescriptionVisibility, 0x124B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget, NewUnlockedSkillVisibility, 0x124C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget, bShowPreviewPetActors, 0x124D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailsWidget, UnknownData_258F, 0x124E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPetDetailsWidget, 0x1250);
		}

		// class UPetAcquiredWidget : public UPetDetailsWidget
		TEST_METHOD(Class__FrontiersUI__PetAcquiredWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPetAcquiredWidget, 0x1250);
		}

		// class UPetDisplayMenuWidget : public UTabbedMenuWidget
		TEST_METHOD(Class__FrontiersUI__PetDisplayMenuWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDisplayMenuWidget, UnknownData_HWNH, 0x0728);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPetDisplayMenuWidget, 0x0758);
		}

		// class UPetStoredInventoryWidgetBase : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__PetStoredInventoryWidgetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventoryWidgetBase, UnknownData_33Z2, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventoryWidgetBase, bCanReleaseInactivePets, 0x0651);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventoryWidgetBase, UnknownData_3LK2, 0x0652);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventoryWidgetBase, SortAction, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventoryWidgetBase, UnknownData_3DQI, 0x0750);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPetStoredInventoryWidgetBase, 0x0758);
		}

		// class UPetDisplayInventoryWidget : public UPetStoredInventoryWidgetBase
		TEST_METHOD(Class__FrontiersUI__PetDisplayInventoryWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDisplayInventoryWidget, UnknownData_POL3, 0x0758);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPetDisplayInventoryWidget, 0x0760);
		}

		// class UPetIconWidget : public UCraftingRecipeWidgetBase
		TEST_METHOD(Class__FrontiersUI__PetIconWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetIconWidget, UnknownData_8543, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetIconWidget, SkillIconVisibility, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetIconWidget, UnknownData_GR28, 0x0679);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetIconWidget, PetMinionRowText, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetIconWidget, ComparisonWidget, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetIconWidget, UnknownData_RDQY, 0x06A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPetIconWidget, 0x0748);
		}

		// class UPetInfoWidget : public UAllyInfoWidget
		TEST_METHOD(Class__FrontiersUI__PetInfoWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetInfoWidget, InventoryContainerClass, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetInfoWidget, PetClass, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetInfoWidget, bLocalPlayerIsOwner, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetInfoWidget, UnknownData_2E6J, 0x0729);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetInfoWidget, PetInventoryProgressWidgets, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetInfoWidget, CountdownTextBlock, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetInfoWidget, UnknownData_FFTX, 0x0748);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPetInfoWidget, 0x0770);
		}

		// class UPetRenameWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__PetRenameWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetRenameWidget, UnknownData_13X9, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPetRenameWidget, 0x0680);
		}

		// class UPetShoppingListModal : public UGenericModalWidget
		TEST_METHOD(Class__FrontiersUI__PetShoppingListModal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetShoppingListModal, NothingToDoActionText, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetShoppingListModal, BuyPotionActionText, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetShoppingListModal, SellItemsActionText, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetShoppingListModal, SellAndBuyActionText, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetShoppingListModal, UnknownData_13NH, 0x07F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPetShoppingListModal, 0x0820);
		}

		// class UPetShoppingEntryListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__PetShoppingEntryListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPetShoppingEntryListWidget, 0x0250);
		}

		// class UPetShoppingEntryCounterWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__PetShoppingEntryCounterWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetShoppingEntryCounterWidget, IncrementCountAction, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetShoppingEntryCounterWidget, DecrementCountAction, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetShoppingEntryCounterWidget, UnknownData_REO7, 0x0830);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPetShoppingEntryCounterWidget, 0x0870);
		}

		// class UPetStoredInventoryWidget : public UPetStoredInventoryWidgetBase
		TEST_METHOD(Class__FrontiersUI__PetStoredInventoryWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventoryWidget, InventoryFullVisibility, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventoryWidget, UnknownData_PBZL, 0x0759);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventoryWidget, ReleasePetConfirmModal, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventoryWidget, UnknownData_JGU0, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventoryWidget, StorageSizeText, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventoryWidget, UnknownData_C505, 0x09E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPetStoredInventoryWidget, 0x09F0);
		}

		// class UPetStoredListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__PetStoredListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPetStoredListWidget, 0x0250);
		}

		// class UPetStoredMenuWidget : public UTabbedMenuWidget
		TEST_METHOD(Class__FrontiersUI__PetStoredMenuWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredMenuWidget, UnknownData_QT1K, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredMenuWidget, InventoryFullVisibility, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredMenuWidget, UnknownData_78UR, 0x0731);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredMenuWidget, DepthOfFieldSettings, 0x0734);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPetStoredMenuWidget, 0x0740);
		}

		// class UPetStoredWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__PetStoredWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredWidget, UnknownData_4K6G, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredWidget, FocusPetAction, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredWidget, ReleasePetAction, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredWidget, RenameWidget, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredWidget, UnknownData_VBUS, 0x0850);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPetStoredWidget, 0x0908);
		}

		// class UPlaceNameMessageWidget : public UMessageWidget
		TEST_METHOD(Class__FrontiersUI__PlaceNameMessageWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceNameMessageWidget, PlaceScreenDuration, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceNameMessageWidget, UnknownData_L6XX, 0x06DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaceNameMessageWidget, 0x06E8);
		}

		// class UPlatformText : public UDataAsset
		TEST_METHOD(Class__FrontiersUI__PlatformText)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformText, PlatformFullName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformText, PlatformShortName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformText, FriendsTitle, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformText, 0x0078);
		}

		// class UPlayerInfoWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__PlayerInfoWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfoWidget, EmberWeaponFormatText, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfoWidget, EnergyNameText, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfoWidget, DamageOverTimeFormat, 0x0670);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerInfoWidget, 0x0688);
		}

		// class UPlayerNotificationWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__PlayerNotificationWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNotificationWidget, NotificationText, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNotificationWidget, ShowDuration, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNotificationWidget, SortValue, 0x065C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerNotificationWidget, 0x0660);
		}

		// class USkillWidgetBase : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__SkillWidgetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidgetBase, DescriptionAnchor, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidgetBase, DescriptionWidgetClass, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidgetBase, bShowRequirementsOnDescription, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidgetBase, UnknownData_083D, 0x0651);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidgetBase, DescriptionWidget, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidgetBase, UnknownData_QINV, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidgetBase, DescriptionDelay, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidgetBase, UnknownData_I666, 0x066C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillWidgetBase, 0x0670);
		}

		// class USkillWidget : public USkillWidgetBase
		TEST_METHOD(Class__FrontiersUI__SkillWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget, SkillSlot, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget, SkillSet, 0x0671);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget, UnknownData_DR1Q, 0x0672);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget, InputActionName, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget, GamepadActionName, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget, bShowCanCastStates, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget, bInvertCooldownPercent, 0x0685);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget, bHideInInvalidAreas, 0x0686);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget, bOnlyShowForGamepad, 0x0687);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget, bDontShowForGamepad, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget, UnknownData_E8CS, 0x0689);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget, DisabledGamepadSkillSlotGroupColor, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget, UnknownData_U6DF, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget, SkillHotkey, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget, CannotUseSkillOverlay, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget, DisabledByHotkeyOverlay, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget, SkillActiveDisplay, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillWidget, UnknownData_FS0I, 0x06C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillWidget, 0x06E8);
		}

		// class UPotionWidget : public USkillWidget
		TEST_METHOD(Class__FrontiersUI__PotionWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidget, UnknownData_WCPG, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidget, UsePotionAnimation, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidget, UseLastPotionAnimation, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidget, NumPotionsText, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidget, UnknownData_HCFR, 0x0710);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPotionWidget, 0x0718);
		}

		// class UQuestWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__QuestWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestWidget, StoryQuestStyle, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestWidget, MainQuestStyle, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestWidget, SideQuestStyle, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestWidget, ContractQuestStyle, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestWidget, CompletedQuestStyle, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestWidget, TurnInQuestStyle, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestWidget, DefaultStyle, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestWidget, bIsComplete, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestWidget, bTurnInTaskActive, 0x0679);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestWidget, bNotifyCompletion, 0x067A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestWidget, bKeepCompletedTasks, 0x067B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestWidget, UnknownData_0Y4Z, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestWidget, QuestDescriptionClass, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestWidget, DescriptionWidget, 0x06C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestWidget, 0x06D0);
		}

		// class UQuestDetailsWidget : public UQuestWidget
		TEST_METHOD(Class__FrontiersUI__QuestDetailsWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestDetailsWidget, 0x06D0);
		}

		// class UQuestDialogueWidget : public UCarouselWidget
		TEST_METHOD(Class__FrontiersUI__QuestDialogueWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialogueWidget, UnknownData_U8I8, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialogueWidget, bIsRewardDialog, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialogueWidget, UnknownData_NADD, 0x0661);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialogueWidget, bIsInventoryFull, 0x0662);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialogueWidget, UnknownData_KEOM, 0x0663);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialogueWidget, FameQuestAbandonConfirmation, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialogueWidget, DialogueBody, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialogueWidget, DialogueHeader, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialogueWidget, DialogueButtonText, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialogueWidget, ChooseButtonText, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialogueWidget, RewardButtonText, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialogueWidget, InventoryFullText, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialogueWidget, RewardWidgetClass, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestDialogueWidget, ChoiceWidgetClass, 0x0960);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestDialogueWidget, 0x0968);
		}

		// class UQuestListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__QuestListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestListWidget, 0x0250);
		}

		// class UQuestLogWidgetBase : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__QuestLogWidgetBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestLogWidgetBase, 0x0640);
		}

		// class UQuestLogWidget : public UQuestLogWidgetBase
		TEST_METHOD(Class__FrontiersUI__QuestLogWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestLogWidget, 0x0640);
		}

		// class UQuestRewardListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__QuestRewardListWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestRewardListWidget, MaxEntries, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestRewardListWidget, UnknownData_LKZQ, 0x0254);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestRewardListWidget, 0x0258);
		}

		// class UQuestRewardWidget : public UGenericModalWidget
		TEST_METHOD(Class__FrontiersUI__QuestRewardWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestRewardWidget, UnknownData_EN8V, 0x0798);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestRewardWidget, 0x07A0);
		}

		// class UQuestTaskListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__QuestTaskListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestTaskListWidget, 0x0250);
		}

		// class UQuestTaskWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__QuestTaskWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestTaskWidget, bShouldShowProgress, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestTaskWidget, UnknownData_YF2E, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestTaskWidget, bIsComplete, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestTaskWidget, UnknownData_PW7R, 0x0661);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestTaskWidget, CompletedColor, 0x0664);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestTaskWidget, RegularColor, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestTaskWidget, ShowProgressDuration, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestTaskWidget, TaskTextBlock, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestTaskWidget, UnknownData_YDND, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestTaskWidget, 0x06A0);
		}

		// class UQuestTrackerWidget : public UQuestLogWidgetBase
		TEST_METHOD(Class__FrontiersUI__QuestTrackerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestTrackerWidget, bHideWhenEmpty, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestTrackerWidget, UnknownData_9MVB, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestTrackerWidget, QuestCompleteTime, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestTrackerWidget, QuestFailedTime, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestTrackerWidget, MinutesUntilFameExpirationToShowTimeout, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestTrackerWidget, UnknownData_Z6HO, 0x0650);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestTrackerWidget, 0x0748);
		}

		// class URadialListItemInterface : public UInterface
		TEST_METHOD(Class__FrontiersUI__RadialListItemInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialListItemInterface, 0x0028);
		}

		// class URadialListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__RadialListWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialListWidget, EllipseSize, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialListWidget, FixedSlotCount, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialListWidget, bFixedLayout, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialListWidget, UnknownData_9CRX, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialListWidget, StartingAngleDegrees, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialListWidget, SelectionWedgeStartingAngleDegrees, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialListWidget, AnalogStickDeadzone, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialListWidget, UnknownData_LD29, 0x026C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialListWidget, 0x0280);
		}

		// class URecipesWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__RecipesWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URecipesWidget, UnknownData_O8HP, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecipesWidget, QueueWidget, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecipesWidget, SelectedRecipeWidget, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecipesWidget, DetailsWidget, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecipesWidget, ListBackgroundBehavor, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecipesWidget, DetailsBackgroundBehavor, 0x0661);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecipesWidget, UnknownData_GRF0, 0x0662);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecipesWidget, DepthOfFieldSettings, 0x0674);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecipesWidget, 0x0680);
		}

		// class USkillAssignWidget : public USkillWidgetBase
		TEST_METHOD(Class__FrontiersUI__SkillAssignWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillAssignWidget, UnknownData_63S5, 0x0670);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillAssignWidget, 0x0690);
		}

		// class USkillAssignListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__SkillAssignListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillAssignListWidget, 0x0250);
		}

		// class USkillDescriptionWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__SkillDescriptionWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescriptionWidget, UnknownData_HRSN, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescriptionWidget, ActiveSkillText, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescriptionWidget, PassiveSkillText, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescriptionWidget, EnergyCostFormat, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescriptionWidget, CooldownFormat, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescriptionWidget, Skill, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescriptionWidget, UnknownData_LVA9, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescriptionWidget, SkillPointCost, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescriptionWidget, bIsInRegretMode, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescriptionWidget, UnknownData_YX0H, 0x06BD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillDescriptionWidget, 0x06E0);
		}

		// class USkillDescriptionListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__SkillDescriptionListWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescriptionListWidget, bShowRequirements, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDescriptionListWidget, UnknownData_48DZ, 0x0251);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillDescriptionListWidget, 0x0258);
		}

		// class USkillTierBonusWidget : public UUserWidget
		TEST_METHOD(Class__FrontiersUI__SkillTierBonusWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierBonusWidget, TitleColor, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierBonusWidget, TitleColorLocked, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierBonusWidget, DescriptionColor, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTierBonusWidget, DescriptionColorLocked, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillTierBonusWidget, 0x02A0);
		}

		// class USkillLevelBonusWidget : public UUserWidget
		TEST_METHOD(Class__FrontiersUI__SkillLevelBonusWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillLevelBonusWidget, 0x0260);
		}

		// class USkillLevelBonusListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__SkillLevelBonusListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillLevelBonusListWidget, 0x0250);
		}

		// class USkillLevelBonusWrapper : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__SkillLevelBonusWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillLevelBonusWrapper, bSkillIsUnlocked, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillLevelBonusWrapper, UnknownData_NMGS, 0x0641);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillLevelBonusWrapper, 0x0648);
		}

		// class USkillLevelBonusListListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__SkillLevelBonusListListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillLevelBonusListListWidget, 0x0250);
		}

		// class USkillDisplayWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__SkillDisplayWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillDisplayWidget, SkillNameText, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillDisplayWidget, 0x0658);
		}

		// class USkillDisplayListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__SkillDisplayListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillDisplayListWidget, 0x0250);
		}

		// class USkillActiveWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__SkillActiveWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillActiveWidget, CooldownProgress, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillActiveWidget, CooldownTextBlock, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillActiveWidget, OffCooldownWidget, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillActiveWidget, OnCooldownWidget, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillActiveWidget, UnknownData_UEL0, 0x0660);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillActiveWidget, 0x0678);
		}

		// class USkillHelpers : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__FrontiersUI__SkillHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillHelpers, 0x0028);
		}

		// class USkillInTabListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__SkillInTabListWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillInTabListWidget, UnknownData_N2RN, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillInTabListWidget, NumGridRows, 0x0254);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillInTabListWidget, 0x0258);
		}

		// class USkillInTabWidget : public USkillWidgetBase
		TEST_METHOD(Class__FrontiersUI__SkillInTabWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillInTabWidget, UnknownData_XS33, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillInTabWidget, BuySkillLevelAction, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillInTabWidget, UnlockSkillAction, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillInTabWidget, RegretSkillAction, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillInTabWidget, LockedColor, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillInTabWidget, UnlockModalConfirmation, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillInTabWidget, UpgradeModalConfirmation, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillInTabWidget, bRequireUpgradeConfirmation, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillInTabWidget, UnknownData_S434, 0x0E51);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillInTabWidget, SkillCDO, 0x0E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillInTabWidget, SkillNameText, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillInTabWidget, EmberWeaponActiveVisibility, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillInTabWidget, PetSkillLockedVisibility, 0x0E79);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillInTabWidget, UnknownData_NEBT, 0x0E7A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillInTabWidget, 0x0E88);
		}

		// class USkillListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__SkillListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillListWidget, 0x0250);
		}

		// class USkillListAssignmentWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__SkillListAssignmentWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillListAssignmentWidget, SkillSet, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillListAssignmentWidget, UnknownData_2DIC, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillListAssignmentWidget, SkillListTitleText, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillListAssignmentWidget, GetNextListBinding, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillListAssignmentWidget, SkillSlots, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillListAssignmentWidget, SkillSlotsGamepad, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillListAssignmentWidget, 0x0690);
		}

		// class USkillPurchaseConfirmationModalContent : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__SkillPurchaseConfirmationModalContent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillPurchaseConfirmationModalContent, 0x0640);
		}

		// class USkillSlotPickerWidget : public USkillWidget
		TEST_METHOD(Class__FrontiersUI__SkillSlotPickerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSlotPickerWidget, UnknownData_WNS5, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSlotPickerWidget, VisibilityColor, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSlotPickerWidget, DraggableWidgetClass, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSlotPickerWidget, SlotDescriptionWidgetClass, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSlotPickerWidget, SlotDescriptionWidget, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSlotPickerWidget, SlotLockedText, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSlotPickerWidget, SlotUnlockLevel, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSlotPickerWidget, UnknownData_3N5G, 0x0744);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillSlotPickerWidget, 0x0748);
		}

		// class USkillsMenuWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__SkillsMenuWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenuWidget, PlayerInfoWidget, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenuWidget, CloseAction, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenuWidget, RespecAction, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenuWidget, ShowInfoAction, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenuWidget, HideInfoAction, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenuWidget, RespecModalClass, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenuWidget, RespecSkillsModalTitle, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenuWidget, RespecSkillsModalBody, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenuWidget, SkillInTabList, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenuWidget, SkillTabType, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenuWidget, UnknownData_GOJ1, 0x0A69);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenuWidget, DefaultRelicSkillTab, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenuWidget, FirstClassTabIndex, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenuWidget, SecondClassTabIndex, 0x0A84);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenuWidget, EmberWeaponTabIndex, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenuWidget, AvailablePointsColor, 0x0A8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenuWidget, DefaultMaxEmberWeaponPoints, 0x0A9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenuWidget, SkillTabsWithMoreInfo, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenuWidget, DescriptionWidgets, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenuWidget, UnknownData_ST96, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenuWidget, bIsInfoVisible, 0x0B1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenuWidget, UnknownData_88XA, 0x0B1D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenuWidget, SkillTabMenu, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenuWidget, EmberWeaponDepthOfFieldSettings, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsMenuWidget, UnknownData_JWXM, 0x0B34);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillsMenuWidget, 0x0B38);
		}

		// class USkillsRespecModal : public UGenericModalWidget
		TEST_METHOD(Class__FrontiersUI__SkillsRespecModal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillsRespecModal, SkipResetAction, 0x0798);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillsRespecModal, 0x0890);
		}

		// class USkillsTabbedMenuWidget : public UTabbedMenuWidget
		TEST_METHOD(Class__FrontiersUI__SkillsTabbedMenuWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillsTabbedMenuWidget, 0x0728);
		}

		// class USkillTabTierWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__SkillTabTierWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTabTierWidget, UnknownData_5G9E, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillTabTierWidget, LevelRequiredForTier, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillTabTierWidget, 0x0658);
		}

		// class USkillHotkey : public UHotkeyWidget
		TEST_METHOD(Class__FrontiersUI__SkillHotkey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillHotkey, SkillSlot, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillHotkey, UnknownData_9XTQ, 0x0699);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillHotkey, 0x06A0);
		}

		// class USocialContextMenuWidget : public UOtherPlayerWidget
		TEST_METHOD(Class__FrontiersUI__SocialContextMenuWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialContextMenuWidget, SelectedChatMessage, 0x0EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialContextMenuWidget, InviteToPartyButton, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialContextMenuWidget, ViewProfileButton, 0x0F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialContextMenuWidget, WhisperButton, 0x0F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialContextMenuWidget, ReportAbuseButton, 0x0F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialContextMenuWidget, ReportAbuseMessage, 0x0FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialContextMenuWidget, ChatReportWidgetDefinition, 0x0FE0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USocialContextMenuWidget, 0x1240);
		}

		// class USocialContextWidgetInterface : public UInterface
		TEST_METHOD(Class__FrontiersUI__SocialContextWidgetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USocialContextWidgetInterface, 0x0028);
		}

		// class USocialMenuWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__SocialMenuWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USocialMenuWidget, 0x0640);
		}

		// class USpokeLevelWidget : public UXPBarWidget
		TEST_METHOD(Class__FrontiersUI__SpokeLevelWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpokeLevelWidget, SpokeOverride, 0x0710);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpokeLevelWidget, 0x0720);
		}

		// class USpringArmWidgetInterface : public UInterface
		TEST_METHOD(Class__FrontiersUI__SpringArmWidgetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpringArmWidgetInterface, 0x0028);
		}

		// class UStatRowListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__StatRowListWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatRowListWidget, TraitMode, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatRowListWidget, UnknownData_LZZ2, 0x0251);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatRowListWidget, 0x0258);
		}

		// class UStatDamageRowListWidget : public UStatRowListWidget
		TEST_METHOD(Class__FrontiersUI__StatDamageRowListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatDamageRowListWidget, 0x0258);
		}

		// class UStatCategoryListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__StatCategoryListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatCategoryListWidget, 0x0250);
		}

		// class UStatCategoryWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__StatCategoryWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatCategoryWidget, CategoryText, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatCategoryWidget, 0x0658);
		}

		// class UStatRowWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__StatRowWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatRowWidget, TraitKey, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatRowWidget, LabelText, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatRowWidget, UnknownData_SENT, 0x0660);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatRowWidget, 0x0670);
		}

		// class UStatDamageRowWidget : public UStatRowWidget
		TEST_METHOD(Class__FrontiersUI__StatDamageRowWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatDamageRowWidget, DamageValueText, 0x0670);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatDamageRowWidget, 0x0688);
		}

		// class UStatSheetPanel : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__StatSheetPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatSheetPanel, CannonStatVisibility, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatSheetPanel, SkillTraitsVisibility, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatSheetPanel, MiscTraitsVisibility, 0x0642);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatSheetPanel, AttackMiscTraitsVisibility, 0x0643);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatSheetPanel, DefenseMiscTraitsVisibility, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatSheetPanel, CannonMiscTraitsVisibility, 0x0645);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatSheetPanel, PetAnyAttackVisibility, 0x0646);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatSheetPanel, PetAttackTraitsVisibility, 0x0647);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatSheetPanel, PetAttackTypeTraitsVisibility, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatSheetPanel, PetAnyDefenseVisibility, 0x0649);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatSheetPanel, PetDefenseTraitsVisibility, 0x064A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatSheetPanel, PetDefenseTypeTraitsVisibility, 0x064B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatSheetPanel, PetMiscTraitsVisibility, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatSheetPanel, PetSkillTraitsVisibility, 0x064D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatSheetPanel, UnknownData_521J, 0x064E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatSheetPanel, TotalDamagePerSwing, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatSheetPanel, TotalDamageOverTimePerSwing, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatSheetPanel, UnknownData_WF5K, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatSheetPanel, 0x0688);
		}

		// class UStatusEffectBar : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__StatusEffectBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffectBar, bIsPlayerCharacter, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffectBar, UnknownData_7LK9, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffectBar, StatusEffectFilterAny, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffectBar, IndentAmount, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffectBar, UnknownData_CZZA, 0x0674);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffectBar, 0x0678);
		}

		// class UStatusEffectListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__StatusEffectListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffectListWidget, 0x0250);
		}

		// class UStatusEffectToolipWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__StatusEffectToolipWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffectToolipWidget, StatusEffect, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffectToolipWidget, TargetActor, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffectToolipWidget, 0x0650);
		}

		// class UStatusEffectWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__StatusEffectWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffectWidget, StackCountTextBlock, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffectWidget, CountdownTextBlock, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffectWidget, StatusEffectCDO, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffectWidget, TargetActor, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffectWidget, EarliestStartTime, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffectWidget, LatestExpireTime, 0x0664);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffectWidget, CountdownVisibility, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffectWidget, UnknownData_OFG6, 0x0669);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffectWidget, TooltipWidgetClass, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffectWidget, UnknownData_06TM, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffectWidget, 0x0680);
		}

		// class UStoreCelebrationWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__StoreCelebrationWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStoreCelebrationWidget, 0x0640);
		}

		// class UPurchaseConfirmationWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__PurchaseConfirmationWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPurchaseConfirmationWidget, 0x0640);
		}

		// class UStoreDetailsWidget : public UCraftingRecipeDetailWidget
		TEST_METHOD(Class__FrontiersUI__StoreDetailsWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreDetailsWidget, CatalogData, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreDetailsWidget, UnknownData_8KWA, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreDetailsWidget, bShow3DPreview, 0x0A9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreDetailsWidget, UnknownData_2FQJ, 0x0A9D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStoreDetailsWidget, 0x0AA0);
		}

		// class UStoreGridListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__StoreGridListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStoreGridListWidget, 0x0250);
		}

		// class UStoreGridWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__StoreGridWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreGridWidget, EntryListWidget, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreGridWidget, UnknownData_E4XJ, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStoreGridWidget, 0x0658);
		}

		// class UStoreListWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__StoreListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStoreListWidget, 0x0640);
		}

		// class UStoreWidget : public UTabbedMenuWidget
		TEST_METHOD(Class__FrontiersUI__StoreWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreWidget, UnknownData_O002, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreWidget, Categories, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreWidget, UnknownData_OMEZ, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreWidget, DepthOfFieldSettings, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreWidget, UnknownData_V4SZ, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreWidget, VendorActor, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreWidget, UnknownData_WTMU, 0x0770);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStoreWidget, 0x0778);
		}

		// class UOnlineStoreWidget : public UStoreWidget
		TEST_METHOD(Class__FrontiersUI__OnlineStoreWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineStoreWidget, UnknownData_66L2, 0x0778);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineStoreWidget, 0x0780);
		}

		// class UVendorStoreWidget : public UStoreWidget
		TEST_METHOD(Class__FrontiersUI__VendorStoreWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVendorStoreWidget, StoreTabName, 0x0778);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVendorStoreWidget, 0x0790);
		}

		// class UTabbedMenuButton : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__TabbedMenuButton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedMenuButton, UnknownData_CQ7R, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedMenuButton, MenuOption, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedMenuButton, CurrentAlert, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedMenuButton, UnknownData_XQZM, 0x06C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedMenuButton, CanvasPanel, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedMenuButton, TabbedMenu, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedMenuButton, CurrentWidgets, 0x0700);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTabbedMenuButton, 0x0710);
		}

		// class UTabbedMenuButtonList : public UListWidget
		TEST_METHOD(Class__FrontiersUI__TabbedMenuButtonList)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTabbedMenuButtonList, 0x0250);
		}

		// class UHPBarFragment : public UUserWidget
		TEST_METHOD(Class__FrontiersUI__HPBarFragment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHPBarFragment, UnknownData_3T7H, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHPBarFragment, 0x0270);
		}

		// class UTextInputWidget : public UUserWidget
		TEST_METHOD(Class__FrontiersUI__TextInputWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextInputWidget, UnknownData_T3VP, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextInputWidget, 0x0270);
		}

		// class UTLBorder : public UBorder
		TEST_METHOD(Class__FrontiersUI__TLBorder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLBorder, Material, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLBorder, StyleClass, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLBorder, bIgnorePaddingFromStyle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLBorder, UnknownData_A1XK, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLBorder, ImageAsset, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLBorder, 0x0298);
		}

		// class UTLBorderHighlightable : public UTLBorder
		TEST_METHOD(Class__FrontiersUI__TLBorderHighlightable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLBorderHighlightable, FocusedStyleClass, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLBorderHighlightable, SelectedStyleClass, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLBorderHighlightable, FocusedAndSelectedStyleClass, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLBorderHighlightable, bGamepadOnly, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLBorderHighlightable, bShowAsFocusedWhenHovered, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLBorderHighlightable, UnknownData_U74K, 0x02B2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLBorderHighlightable, 0x02D0);
		}

		// class UTLBorderStyle : public UObject
		TEST_METHOD(Class__FrontiersUI__TLBorderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLBorderStyle, Material, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLBorderStyle, bApplyBrushFromStyle, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLBorderStyle, UnknownData_5S08, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLBorderStyle, BackgroundBrush, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLBorderStyle, BrushColor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLBorderStyle, bApplyPaddingFromStyle, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLBorderStyle, UnknownData_PWBF, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLBorderStyle, Padding, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLBorderStyle, bApplyOuterPaddingFromStyle, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLBorderStyle, UnknownData_FG6C, 0x00E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLBorderStyle, OuterPadding, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLBorderStyle, 0x00F8);
		}

		// class UTLButton : public UButton
		TEST_METHOD(Class__FrontiersUI__TLButton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLButton, StyleClass, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLButton, Material, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLButton, bApplyMaterialWhenDisabled, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLButton, UnknownData_NU6E, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLButton, MaterialTextureParameterName, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLButton, AudioMap, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLButton, UnknownData_VOJT, 0x04A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLButton, 0x04F0);
		}

		// class UTLStyle : public UObject
		TEST_METHOD(Class__FrontiersUI__TLStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLStyle, AudioEvents, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLStyle, 0x0078);
		}

		// class UTLButtonStyle : public UTLStyle
		TEST_METHOD(Class__FrontiersUI__TLButtonStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLButtonStyle, ButtonStyle, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLButtonStyle, Color, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLButtonStyle, BackgroundColor, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLButtonStyle, 0x0310);
		}

		// class UTLCheckBoxStyle : public UTLStyle
		TEST_METHOD(Class__FrontiersUI__TLCheckBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCheckBoxStyle, CheckBoxStyle, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLCheckBoxStyle, 0x05F8);
		}

		// class UTLCheckBox : public UCheckBox
		TEST_METHOD(Class__FrontiersUI__TLCheckBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCheckBox, StyleClass, 0x0770);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLCheckBox, 0x0778);
		}

		// class UTLComboBoxStyle : public UTLStyle
		TEST_METHOD(Class__FrontiersUI__TLComboBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLComboBoxStyle, ComboBoxStyle, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLComboBoxStyle, ItemStyle, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLComboBoxStyle, 0x0C30);
		}

		// class UTLComboBoxItemWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__TLComboBoxItemWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLComboBoxItemWidget, DisplayText, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLComboBoxItemWidget, 0x0658);
		}

		// class UTLComboBox : public UComboBoxString
		TEST_METHOD(Class__FrontiersUI__TLComboBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLComboBox, StyleClass, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLComboBox, ComboBoxItemClass, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLComboBox, UnknownData_61AH, 0x0E10);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLComboBox, 0x0E88);
		}

		// class UTLCustomCursor : public UUserWidget
		TEST_METHOD(Class__FrontiersUI__TLCustomCursor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLCustomCursor, Image, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLCustomCursor, 0x0268);
		}

		// class UTLDebugPanel : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__TLDebugPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLDebugPanel, UnknownData_WVFD, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLDebugPanel, 0x0678);
		}

		// class UTLDPIScalingRule : public UDPICustomScalingRule
		TEST_METHOD(Class__FrontiersUI__TLDPIScalingRule)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLDPIScalingRule, 0x0028);
		}

		// class UTLEditableTextBoxStyle : public UObject
		TEST_METHOD(Class__FrontiersUI__TLEditableTextBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLEditableTextBoxStyle, EditableTextStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLEditableTextBoxStyle, 0x0820);
		}

		// class UTLEditableTextBox : public UEditableTextBox
		TEST_METHOD(Class__FrontiersUI__TLEditableTextBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLEditableTextBox, StyleClass, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLEditableTextBox, MaxCharacters, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLEditableTextBox, UnknownData_ZLT0, 0x0A44);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLEditableTextBox, 0x0A48);
		}

		// class UTLHUD : public UTLBaseHUD
		TEST_METHOD(Class__FrontiersUI__TLHUD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLHUD, UnknownData_6MWA, 0x0750);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLHUD, 0x0770);
		}

		// class UTLProgressBar : public UProgressBar
		TEST_METHOD(Class__FrontiersUI__TLProgressBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLProgressBar, bIsRadial, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLProgressBar, bRadialClockwise, 0x0319);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLProgressBar, bVolatileOnlyOnce, 0x031A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLProgressBar, UnknownData_4NO5, 0x031B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLProgressBar, 0x0328);
		}

		// class UTLRichTextBlockDecorator : public URichTextBlockDecorator
		TEST_METHOD(Class__FrontiersUI__TLRichTextBlockDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLRichTextBlockDecorator, bReveal, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLRichTextBlockDecorator, UnknownData_NR34, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLRichTextBlockDecorator, RevealedIndex, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLRichTextBlockDecorator, 0x0030);
		}

		// class UTLScrollBox : public UScrollBox
		TEST_METHOD(Class__FrontiersUI__TLScrollBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLScrollBox, StyleClass, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLScrollBox, GamepadScrollSpeed, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLScrollBox, MouseWheelScrollSpeedMultiplier, 0x088C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLScrollBox, CursorDragBrush, 0x0890);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLScrollBox, 0x0918);
		}

		// class UTLScrollBoxStyle : public UObject
		TEST_METHOD(Class__FrontiersUI__TLScrollBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLScrollBoxStyle, WidgetStyle, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLScrollBoxStyle, WidgetBarStyle, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLScrollBoxStyle, ScrollbarThickness, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLScrollBoxStyle, CursorDragBrush, 0x0728);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLScrollBoxStyle, 0x07B0);
		}

		// class UTLSliderStyle : public UObject
		TEST_METHOD(Class__FrontiersUI__TLSliderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLSliderStyle, SliderStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLSliderStyle, 0x0368);
		}

		// class UTLSlider : public USlider
		TEST_METHOD(Class__FrontiersUI__TLSlider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLSlider, StyleClass, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLSlider, SliderIncrement, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLSlider, UnknownData_VBOS, 0x0504);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLSlider, 0x0508);
		}

		// class UTLTextBlock : public UTextBlock
		TEST_METHOD(Class__FrontiersUI__TLTextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTextBlock, StyleClass, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTextBlock, bIgnoreStyleColor, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTextBlock, UnknownData_R7YN, 0x02B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLTextBlock, 0x02B8);
		}

		// class UTLTextStyle : public UObject
		TEST_METHOD(Class__FrontiersUI__TLTextStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTextStyle, Color, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTextStyle, Font, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTextStyle, ShadowColorAndOpacity, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLTextStyle, ShadowOffset, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLTextStyle, 0x00A8);
		}

		// class UTLVideo : public UImage
		TEST_METHOD(Class__FrontiersUI__TLVideo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLVideo, Material, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLVideo, DefaultMediaSource, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLVideo, bLoop, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLVideo, bPlayOnStart, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLVideo, bPlayAudio, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLVideo, bMuteOtherAudioWhilePlaying, 0x0223);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLVideo, UnknownData_UQF7, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLVideo, MediaPlayer, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLVideo, MediaTexture, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLVideo, MediaAudioActor, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTLVideo, MaterialInstance, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLVideo, 0x0268);
		}

		// class UFullscreenVideoWidget : public UCinematicWidget
		TEST_METHOD(Class__FrontiersUI__FullscreenVideoWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFullscreenVideoWidget, 0x0668);
		}

		// class AVideoAudioActor : public AActor
		TEST_METHOD(Class__FrontiersUI__VideoAudioActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVideoAudioActor, MediaSoundComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVideoAudioActor, 0x0228);
		}

		// class UTLWidgetSwitcher : public UWidgetSwitcher
		TEST_METHOD(Class__FrontiersUI__TLWidgetSwitcher)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTLWidgetSwitcher, 0x0138);
		}

		// class UDescriptionTooltipWidget : public UTooltipWidget
		TEST_METHOD(Class__FrontiersUI__DescriptionTooltipWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDescriptionTooltipWidget, 0x0680);
		}

		// class UTraitNotificationWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__TraitNotificationWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraitNotificationWidget, ShowDuration, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraitNotificationWidget, SortValue, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraitNotificationWidget, UnknownData_ZA7B, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTraitNotificationWidget, 0x0658);
		}

		// class UTraitsTableHelpers : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__FrontiersUI__TraitsTableHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTraitsTableHelpers, 0x0028);
		}

		// class UTraitTextBlock : public UTLTextBlock
		TEST_METHOD(Class__FrontiersUI__TraitTextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraitTextBlock, TextFormat, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraitTextBlock, bShouldRound, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraitTextBlock, bTreatAsPercentage, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraitTextBlock, bShowAsNegative, 0x02D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraitTextBlock, bUseTraitDisplayData, 0x02D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraitTextBlock, RoundingMode, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraitTextBlock, bUseTraitModes, 0x02D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraitTextBlock, TraitMode, 0x02D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraitTextBlock, UnknownData_053S, 0x02D7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraitTextBlock, Trait, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraitTextBlock, UnknownData_HTAU, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTraitTextBlock, 0x0350);
		}

		// class UActiveTraitTextBlock : public UTraitTextBlock
		TEST_METHOD(Class__FrontiersUI__ActiveTraitTextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveTraitTextBlock, ActiveTrait, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActiveTraitTextBlock, 0x0360);
		}

		// class UDamageTraitTextBlock : public UTraitTextBlock
		TEST_METHOD(Class__FrontiersUI__DamageTraitTextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageTraitTextBlock, UnknownData_GOPV, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageTraitTextBlock, 0x0360);
		}

		// class UDefenseTextBlock : public UTraitTextBlock
		TEST_METHOD(Class__FrontiersUI__DefenseTextBlock)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefenseTextBlock, 0x0350);
		}

		// class UDefensePercentTextBlock : public UTraitTextBlock
		TEST_METHOD(Class__FrontiersUI__DefensePercentTextBlock)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefensePercentTextBlock, 0x0350);
		}

		// class USkillLevelTextBlock : public UTraitTextBlock
		TEST_METHOD(Class__FrontiersUI__SkillLevelTextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillLevelTextBlock, UnknownData_VKEP, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillLevelTextBlock, 0x0360);
		}

		// class UTraitTickerTextBlock : public UTraitTextBlock
		TEST_METHOD(Class__FrontiersUI__TraitTickerTextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraitTickerTextBlock, ScaleFactor, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraitTickerTextBlock, JumpThreshold, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraitTickerTextBlock, bHideWhenNotTicking, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraitTickerTextBlock, UnknownData_N6TB, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraitTickerTextBlock, FadeFactor, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTraitTickerTextBlock, UnknownData_QVZJ, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTraitTickerTextBlock, 0x0368);
		}

		// class UTransmogDyeStylesWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__TransmogDyeStylesWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransmogDyeStylesWidget, UnknownData_FY9D, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransmogDyeStylesWidget, DyeAndTransmogWidget, 0x0660);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransmogDyeStylesWidget, 0x0668);
		}

		// class UTransmogStylesWidget : public UTransmogDyeStylesWidget
		TEST_METHOD(Class__FrontiersUI__TransmogStylesWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransmogStylesWidget, 0x0668);
		}

		// class UDyeStylesWidget : public UTransmogDyeStylesWidget
		TEST_METHOD(Class__FrontiersUI__DyeStylesWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDyeStylesWidget, 0x0668);
		}

		// class UTransmogItemListWidget : public UTransmogDyeItemListWidget
		TEST_METHOD(Class__FrontiersUI__TransmogItemListWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransmogItemListWidget, UnknownData_AS49, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransmogItemListWidget, 0x0288);
		}

		// class UTransmogItemWidget : public UTransmogDyeItemWidget
		TEST_METHOD(Class__FrontiersUI__TransmogItemWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransmogItemWidget, 0x09E8);
		}

		// class UTransmogTooltipWidget : public UTransmogDyeTooltipWidget
		TEST_METHOD(Class__FrontiersUI__TransmogTooltipWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransmogTooltipWidget, ItemRow, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransmogTooltipWidget, 0x0650);
		}

		// class UTravelToPartyMemberWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__TravelToPartyMemberWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelToPartyMemberWidget, UnknownData_T14L, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelToPartyMemberWidget, TravelMapWidget, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelToPartyMemberWidget, PartyMemberIsTooCloseText, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelToPartyMemberWidget, PortalToPartyMemberAction, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelToPartyMemberWidget, PortalToPartyMemberFortAction, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelToPartyMemberWidget, UnknownData_PINN, 0x0858);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTravelToPartyMemberWidget, 0x08F8);
		}

		// class UTravelToKnownDestinationWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__TravelToKnownDestinationWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelToKnownDestinationWidget, UnknownData_G666, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelToKnownDestinationWidget, DestinationType, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelToKnownDestinationWidget, UnknownData_DHX1, 0x0649);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelToKnownDestinationWidget, TravelMapWidget, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelToKnownDestinationWidget, UnknownData_K8NX, 0x0658);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTravelToKnownDestinationWidget, 0x06A8);
		}

		// class UTravelMapWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__TravelMapWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelMapWidget, KnownTravelIcons, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelMapWidget, TownIcons, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelMapWidget, UnknownData_SF5T, 0x06E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTravelMapWidget, 0x06E8);
		}

		// class UUIBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__FrontiersUI__UIBlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUIBlueprintFunctionLibrary, 0x0028);
		}

		// class UUILightComponent : public UActorComponent
		TEST_METHOD(Class__FrontiersUI__UILightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUILightComponent, UnknownData_Y3F7, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUILightComponent, 0x00C0);
		}

		// class UUITextConstants : public UObject
		TEST_METHOD(Class__FrontiersUI__UITextConstants)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, PlatformSpecificText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, ElementText, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, TargetTypeText, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, MinionTypeText, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, ClassText, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, ElementProcText, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, StatusEffectText, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, WeaponTypeText, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, SkillTypeText, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, SkillTagText, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, SetTagText, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, AttackSpeedOrder, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, TraitTextFormats, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, RandomPetNames, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, PlayerDeathKnownAttacker, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, PlayerDeathUnknownAttacker, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, PartyMemberTraveled, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, StandardUIActions, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, QuestTaskFormats, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, FullscreenModeText, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, QualityOffText, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, QualityLowText, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, VoiceChatRole, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, ColorModeText, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, ErrorText, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, LoginErrorTitle, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, LoginErrorGeneric, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, LoginErrorsByResponseCode, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, QueryText, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, GameplayErrorMessages, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, FortPropTypeText, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, CraftingCategoryText, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, MapModeText, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, CraftingTraitExceededMaxText, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, CraftingCurrencyExceededMaxText, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, DefaultCraftingExceededMaxText, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, CraftingResultMessages, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, PresenceMenuText, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, AffixNumberColorFormat, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, InvalidTextColor, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, NameValidationRegex, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, QuestChestDisplayName, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, KillBossFormat, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, WarpGadgetRestriction, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, MapworksPortalDescription, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, EndlessDungeonPortalDescription, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, PhaseBeastPortalDescription, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, AssignmentsExpireTimeFormat, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, AssignmentsExpireTimeFormatNoDays, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, AssignmentsExpireTimeFormatNoHours, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, AssignmentsExpireTimeFormatNoMinutes, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, AssignmentsExpire, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, AssignmentsHaveExpired, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, DefaultFallbackFortName, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, PetSlotUnlockedText, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, PetAquiredText, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, PortalDestroyedText, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, ChallengeLevelItemPrefixes, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUITextConstants, InventorySortText, 0x0BE8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUITextConstants, 0x0C38);
		}

		// class UResolutionConfirmationWidget : public UUserWidget
		TEST_METHOD(Class__FrontiersUI__ResolutionConfirmationWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UResolutionConfirmationWidget, UnknownData_Q6O0, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResolutionConfirmationWidget, AppSettings, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResolutionConfirmationWidget, AcceptModal, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResolutionConfirmationWidget, ProgressBar, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResolutionConfirmationWidget, VideoSettingsWidget, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResolutionConfirmationWidget, UnknownData_2G8J, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UResolutionConfirmationWidget, 0x0290);
		}

		// class UVideoSettingsWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__VideoSettingsWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettingsWidget, ResolutionChangeContent, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettingsWidget, DetectDefaultsButton, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettingsWidget, SaveAndCloseAction, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettingsWidget, ResetToDefaultAction, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettingsWidget, DetectDefaultsAction, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettingsWidget, OptionWidgets, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettingsWidget, UnknownData_5FLG, 0x0948);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVideoSettingsWidget, 0x0998);
		}

		// class UVirtualCursorInterface : public UInterface
		TEST_METHOD(Class__FrontiersUI__VirtualCursorInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualCursorInterface, 0x0028);
		}

		// class UVirtualCursorPanel : public UCanvasPanel
		TEST_METHOD(Class__FrontiersUI__VirtualCursorPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualCursorPanel, VirtualCursorClass, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualCursorPanel, CursorSpeed, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualCursorPanel, CursorSize, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualCursorPanel, CursorLimitSize, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualCursorPanel, UnknownData_6SVP, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualCursorPanel, VirtualCursor, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualCursorPanel, HoveredItem, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualCursorPanel, 0x0168);
		}

		// class UVirtualCursor : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__VirtualCursor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualCursor, HoveredItem, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualCursor, 0x0650);
		}

		// class UVitalsStatWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__VitalsStatWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVitalsStatWidget, Trait, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVitalsStatWidget, bUseIconSprite, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVitalsStatWidget, UnknownData_AM3Q, 0x06A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVitalsStatWidget, IconSprite, 0x06B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVitalsStatWidget, 0x06B8);
		}

		// class UVoiceChatWidget : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__VoiceChatWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceChatWidget, UnknownData_RTM0, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoiceChatWidget, 0x0690);
		}

		// class UVoiceChatListWidget : public UListWidget
		TEST_METHOD(Class__FrontiersUI__VoiceChatListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoiceChatListWidget, 0x0250);
		}

		// class UVoiceChatOverlay : public UTLUserWidget
		TEST_METHOD(Class__FrontiersUI__VoiceChatOverlay)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoiceChatOverlay, 0x0640);
		}

		// class UWardrobePropWidget : public UInventoryWidget
		TEST_METHOD(Class__FrontiersUI__WardrobePropWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropWidget, UnknownData_4O9O, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropWidget, SwapAllAction, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropWidget, SwapArmorAction, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropWidget, SwapWeaponsAction, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropWidget, ToggleGenderAction, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropWidget, WardrobeProp, 0x0CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropWidget, GenderUIVisibility, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropWidget, MaleSelectionVisibility, 0x0CD1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropWidget, FemaleSelectionVisibility, 0x0CD2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWardrobePropWidget, UnknownData_HXXI, 0x0CD3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWardrobePropWidget, 0x0CD8);
		}

		// class UWidgetConstants : public UObject
		TEST_METHOD(Class__FrontiersUI__WidgetConstants)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetConstants, ModalTwoButtons, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetConstants, TextInput, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetConstants, TextInputMultiLine, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetConstants, TextTooltip, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetConstants, InlineHotkeyWidgetSmall, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetConstants, InlineHotkeyWidgetBig, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetConstants, InlineHotkeyGamepadActionMappings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetConstants, InlineImages, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetConstants, DescriptionTooltip, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetConstants, Nameplate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetConstants, SocialContextMenu, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetConstants, BossName, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetConstants, LevelUpBanner, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetConstants, LevelUpDuration, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetConstants, UnknownData_FI3Z, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetConstants, HelpOnHUD, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetConstants, HelpOnHUD_Demo, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetConstants, OptionsMenu, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetConstants, NewPetReceivedWidget, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetConstants, FloatingItemTextWidget, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetConstants, MapMarkerLabelClass, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetConstants, LocalPlayerMapMarkerClass, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetConstants, InventoryComparisonWidget, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetConstants, Widgets, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetConstants, FeedbackWidgetDefinition, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetConstants, CinematicSnapshotEvent, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetConstants, ErrorModalEvent, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetConstants, ScrollBoxAnimationCurve, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetConstants, RadialProgressBarMaterial, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetConstants, ExitToJoinSession, 0x04F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetConstants, 0x0758);
		}

		// class UObject
		TEST_METHOD(Class__CoreUObject__Object)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, VfTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, InternalIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Class, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Name, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Outer, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObject, 0x0028);
		}

		// class UField : public UObject
		TEST_METHOD(Class__CoreUObject__Field)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UField, Next, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UField, 0x0030);
		}

		// class UProperty : public UField
		TEST_METHOD(Class__CoreUObject__Property)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProperty, UnknownData_GWF7, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProperty, 0x0070);
		}

		// class UNumericProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__NumericProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNumericProperty, 0x0070);
		}

		// class UUInt16Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt16Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt16Property, 0x0070);
		}

		// class UUInt32Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt32Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt32Property, 0x0070);
		}

		// class UUInt64Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt64Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt64Property, 0x0070);
		}

		// class UObjectPropertyBase : public UProperty
		TEST_METHOD(Class__CoreUObject__ObjectPropertyBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectPropertyBase, UnknownData_V1RO, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectPropertyBase, 0x0078);
		}

		// class UWeakObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__WeakObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeakObjectProperty, 0x0078);
		}

		// class UTextProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__TextProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextProperty, 0x0070);
		}

		// class UPropertyWrapper : public UObject
		TEST_METHOD(Class__CoreUObject__PropertyWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyWrapper, UnknownData_MSPO, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyWrapper, 0x0030);
		}

		// class UMulticastDelegatePropertyWrapper : public UPropertyWrapper
		TEST_METHOD(Class__CoreUObject__MulticastDelegatePropertyWrapper)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastDelegatePropertyWrapper, 0x0030);
		}

		// class UMulticastInlineDelegatePropertyWrapper : public UMulticastDelegatePropertyWrapper
		TEST_METHOD(Class__CoreUObject__MulticastInlineDelegatePropertyWrapper)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastInlineDelegatePropertyWrapper, 0x0030);
		}

		// class UInterface : public UObject
		TEST_METHOD(Class__CoreUObject__Interface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface, 0x0028);
		}

		// class UGCObjectReferencer : public UObject
		TEST_METHOD(Class__CoreUObject__GCObjectReferencer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGCObjectReferencer, UnknownData_WLR7, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGCObjectReferencer, 0x0070);
		}

		// class UTextBuffer : public UObject
		TEST_METHOD(Class__CoreUObject__TextBuffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBuffer, UnknownData_CZYY, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBuffer, 0x0050);
		}

		// class UStruct : public UField, public FStructBaseChain
		TEST_METHOD(Class__CoreUObject__Struct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, SuperField, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, Children, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, ChildProperties, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PropertySize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, MinAlignment, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, Script, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PropertyLink, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, RefLink, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, DestructorLink, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PostConstructLink, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, ScriptAndPropertyObjectReferences, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, UnresolvedScriptProperties, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, UnversionedSchema, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStruct, 0x00B0);
		}

		// class UScriptStruct : public UStruct
		TEST_METHOD(Class__CoreUObject__ScriptStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptStruct, UnknownData_TGCH, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptStruct, 0x00C0);
		}

		// class UPackage : public UObject
		TEST_METHOD(Class__CoreUObject__Package)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackage, UnknownData_PV37, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackage, 0x00A0);
		}

		// class UFunction : public UStruct
		TEST_METHOD(Class__CoreUObject__Function)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, FunctionFlags, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, NumParms, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, ParmsSize, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_BMCWHT1EEO, 0x00B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, ReturnValueOffset, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RPCId, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RPCResponseId, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_EU99PX61HZ, 0x00BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, FirstPropertyToInit, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, EventGraphFunction, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, EventGraphCallOffset, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_CI6M7IGXU3, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, Func, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFunction, 0x00E0);
		}

		// class UDelegateFunction : public UFunction
		TEST_METHOD(Class__CoreUObject__DelegateFunction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDelegateFunction, 0x00E0);
		}

		// class USparseDelegateFunction : public UDelegateFunction
		TEST_METHOD(Class__CoreUObject__SparseDelegateFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USparseDelegateFunction, UnknownData_EVJE, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USparseDelegateFunction, 0x00F0);
		}

		// class UClass : public UStruct
		TEST_METHOD(Class__CoreUObject__Class)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClass, UnknownData_GBUC, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClass, 0x0230);
		}

		// class UDynamicClass : public UClass
		TEST_METHOD(Class__CoreUObject__DynamicClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicClass, UnknownData_KX8T, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicClass, 0x02B0);
		}

		// class UPackageMap : public UObject
		TEST_METHOD(Class__CoreUObject__PackageMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackageMap, UnknownData_IN1H, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackageMap, 0x00E0);
		}

		// class UEnum : public UField
		TEST_METHOD(Class__CoreUObject__Enum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnum, UnknownData_R2TQ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnum, 0x0060);
		}

		// class ULinkerPlaceholderClass : public UClass
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderClass, UnknownData_SNSE, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderClass, 0x03E8);
		}

		// class ULinkerPlaceholderExportObject : public UObject
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderExportObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderExportObject, UnknownData_487O, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderExportObject, 0x00F0);
		}

		// class ULinkerPlaceholderFunction : public UFunction
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderFunction, UnknownData_RFE6, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderFunction, 0x0298);
		}

		// class UMetaData : public UObject
		TEST_METHOD(Class__CoreUObject__MetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetaData, UnknownData_OH0B, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMetaData, 0x00C8);
		}

		// class UObjectRedirector : public UObject
		TEST_METHOD(Class__CoreUObject__ObjectRedirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectRedirector, UnknownData_0FHK, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectRedirector, 0x0030);
		}

		// class UEnumProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__EnumProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnumProperty, UnknownData_L9MZ, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnumProperty, 0x0080);
		}

		// class UArrayProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__ArrayProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrayProperty, UnknownData_T6XZ, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrayProperty, 0x0078);
		}

		// class UBoolProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__BoolProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoolProperty, UnknownData_VHZ0, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoolProperty, 0x0078);
		}

		// class UByteProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__ByteProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UByteProperty, UnknownData_CEJL, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UByteProperty, 0x0078);
		}

		// class UObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__ObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectProperty, 0x0078);
		}

		// class UClassProperty : public UObjectProperty
		TEST_METHOD(Class__CoreUObject__ClassProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassProperty, UnknownData_ZUCC, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClassProperty, 0x0080);
		}

		// class UDelegateProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__DelegateProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDelegateProperty, UnknownData_I5NM, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDelegateProperty, 0x0078);
		}

		// class UDoubleProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__DoubleProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDoubleProperty, 0x0070);
		}

		// class UFloatProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__FloatProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatProperty, 0x0070);
		}

		// class UIntProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__IntProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntProperty, 0x0070);
		}

		// class UInt8Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int8Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt8Property, 0x0070);
		}

		// class UInt16Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int16Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt16Property, 0x0070);
		}

		// class UInt64Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int64Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt64Property, 0x0070);
		}

		// class UInterfaceProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__InterfaceProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterfaceProperty, UnknownData_DFCQ, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterfaceProperty, 0x0078);
		}

		// class ULazyObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__LazyObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULazyObjectProperty, 0x0078);
		}

		// class UMapProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__MapProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProperty, UnknownData_RMU4, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapProperty, 0x0098);
		}

		// class UMulticastDelegateProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__MulticastDelegateProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMulticastDelegateProperty, UnknownData_KOZR, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastDelegateProperty, 0x0078);
		}

		// class UMulticastInlineDelegateProperty : public UMulticastDelegateProperty
		TEST_METHOD(Class__CoreUObject__MulticastInlineDelegateProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastInlineDelegateProperty, 0x0078);
		}

		// class UMulticastSparseDelegateProperty : public UMulticastDelegateProperty
		TEST_METHOD(Class__CoreUObject__MulticastSparseDelegateProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastSparseDelegateProperty, 0x0078);
		}

		// class UNameProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__NameProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNameProperty, 0x0070);
		}

		// class USetProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__SetProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetProperty, UnknownData_T0WN, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetProperty, 0x0090);
		}

		// class USoftObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__SoftObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoftObjectProperty, 0x0078);
		}

		// class USoftClassProperty : public USoftObjectProperty
		TEST_METHOD(Class__CoreUObject__SoftClassProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoftClassProperty, UnknownData_A988, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoftClassProperty, 0x0080);
		}

		// class UStrProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__StrProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStrProperty, 0x0070);
		}

		// class UStructProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__StructProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructProperty, UnknownData_CTZ7, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStructProperty, 0x0078);
		}

		// class UMoviePlayerSettings : public UObject
		TEST_METHOD(Class__MoviePlayer__MoviePlayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, bWaitForMoviesToComplete, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, bMoviesAreSkippable, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, UnknownData_32RL, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, StartupMovies, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMoviePlayerSettings, 0x0040);
		}

		// class UGooglePADFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GooglePAD__GooglePADFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGooglePADFunctionLibrary, 0x0028);
		}

		// class UFixedFrameRateCustomTimeStep : public UEngineCustomTimeStep
		TEST_METHOD(Class__TimeManagement__FixedFrameRateCustomTimeStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedFrameRateCustomTimeStep, FixedFrameRate, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFixedFrameRateCustomTimeStep, 0x0030);
		}

		// class UGenlockedCustomTimeStep : public UFixedFrameRateCustomTimeStep
		TEST_METHOD(Class__TimeManagement__GenlockedCustomTimeStep)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenlockedCustomTimeStep, 0x0030);
		}

		// class UGenlockedTimecodeProvider : public UTimecodeProvider
		TEST_METHOD(Class__TimeManagement__GenlockedTimecodeProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenlockedTimecodeProvider, bUseGenlockToCount, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenlockedTimecodeProvider, UnknownData_HGDP, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenlockedTimecodeProvider, 0x0058);
		}

		// class UTimeManagementBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__TimeManagement__TimeManagementBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeManagementBlueprintLibrary, 0x0028);
		}

		// class UTimeSynchronizationSource : public UObject
		TEST_METHOD(Class__TimeManagement__TimeSynchronizationSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, bUseForSynchronization, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, UnknownData_661X, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, FrameOffset, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeSynchronizationSource, 0x0030);
		}

		// class UAnimationDataSourceRegistry : public UObject
		TEST_METHOD(Class__AnimationCore__AnimationDataSourceRegistry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationDataSourceRegistry, DataSources, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationDataSourceRegistry, 0x0078);
		}

		// class UAnimNotify_PlayMontageNotify : public UAnimNotify
		TEST_METHOD(Class__AnimGraphRuntime__AnimNotify_PlayMontageNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayMontageNotify, NotifyName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayMontageNotify, 0x0040);
		}

		// class UAnimNotify_PlayMontageNotifyWindow : public UAnimNotifyState
		TEST_METHOD(Class__AnimGraphRuntime__AnimNotify_PlayMontageNotifyWindow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayMontageNotifyWindow, NotifyName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayMontageNotifyWindow, 0x0038);
		}

		// class UAnimSequencerInstance : public UAnimInstance
		TEST_METHOD(Class__AnimGraphRuntime__AnimSequencerInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequencerInstance, UnknownData_BYCE, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequencerInstance, 0x02C0);
		}

		// class UKismetAnimationLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AnimGraphRuntime__KismetAnimationLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetAnimationLibrary, 0x0028);
		}

		// class UPlayMontageCallbackProxy : public UObject
		TEST_METHOD(Class__AnimGraphRuntime__PlayMontageCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnCompleted, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnBlendOut, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnInterrupted, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnNotifyBegin, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnNotifyEnd, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, UnknownData_EDKJ, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayMontageCallbackProxy, 0x00A8);
		}

		// class USequencerAnimationSupport : public UInterface
		TEST_METHOD(Class__AnimGraphRuntime__SequencerAnimationSupport)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequencerAnimationSupport, 0x0028);
		}

		// class USynthComponent : public USceneComponent
		TEST_METHOD(Class__AudioMixer__SynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_SU9G, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AttenuationSettings, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AttenuationOverrides, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, ConcurrencySettings, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, ConcurrencySet, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundClass, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SourceEffectChain, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundSubmix, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundSubmixSends, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, BusSends, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, PreEffectBusSends, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_PR4Y, 0x0649);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, EnvelopeFollowerAttackTime, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, EnvelopeFollowerReleaseTime, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_JXPN, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, OnAudioEnvelopeValue, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_9M4R, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, Synth, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AudioComponent, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_2B4A, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponent, 0x06C0);
		}

		// class UAudioGenerator : public UObject
		TEST_METHOD(Class__AudioMixer__AudioGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioGenerator, UnknownData_335U, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioGenerator, 0x00A8);
		}

		// class UAudioMixerBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AudioMixer__AudioMixerBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioMixerBlueprintLibrary, 0x0028);
		}

		// class UQuartzClockHandle : public UObject
		TEST_METHOD(Class__AudioMixer__QuartzClockHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuartzClockHandle, UnknownData_1RCS, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuartzClockHandle, 0x0190);
		}

		// class USubmixEffectDynamicsProcessorPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectDynamicsProcessorPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDynamicsProcessorPreset, UnknownData_B5RW, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDynamicsProcessorPreset, Settings, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectDynamicsProcessorPreset, 0x0130);
		}

		// class USubmixEffectSubmixEQPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectSubmixEQPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectSubmixEQPreset, UnknownData_6N4V, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectSubmixEQPreset, Settings, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectSubmixEQPreset, 0x00B0);
		}

		// class USubmixEffectReverbPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectReverbPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbPreset, UnknownData_G8U8, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbPreset, Settings, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectReverbPreset, 0x0110);
		}

		// class UQuartzSubsystem : public UWorldSubsystem
		TEST_METHOD(Class__AudioMixer__QuartzSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuartzSubsystem, UnknownData_O56F, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuartzSubsystem, 0x0080);
		}

		// class USynthSound : public USoundWaveProcedural
		TEST_METHOD(Class__AudioMixer__SynthSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSound, OwningSynthComponent, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSound, UnknownData_6TS6, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthSound, 0x03E0);
		}

		// class ADestructibleActor : public AActor
		TEST_METHOD(Class__ApexDestruction__DestructibleActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleActor, DestructibleComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleActor, OnActorFracture, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADestructibleActor, 0x0238);
		}

		// class UDestructibleComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__ApexDestruction__DestructibleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_O7QD, 0x0691);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, FractureEffects, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, bEnableHardSleeping, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_RFPT, 0x06A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, LargeChunkThreshold, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_82FB, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, OnComponentFracture, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_QYYB, 0x06D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleComponent, 0x0770);
		}

		// class UDestructibleFractureSettings : public UObject
		TEST_METHOD(Class__ApexDestruction__DestructibleFractureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, CellSiteCount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, FractureMaterialDesc, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, RandomSeed, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, UnknownData_193F, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, VoronoiSites, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, OriginalSubmeshCount, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, UnknownData_5Y08, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, Materials, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, ChunkParameters, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, UnknownData_9XZ7, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleFractureSettings, 0x00B8);
		}

		// class UDestructibleMesh : public USkeletalMesh
		TEST_METHOD(Class__ApexDestruction__DestructibleMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleMesh, DefaultDestructibleParameters, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleMesh, FractureEffects, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleMesh, UnknownData_DPO3, 0x0430);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleMesh, 0x0438);
		}

		// class UMagicLeapAudioFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapAudio__MagicLeapAudioFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapAudioFunctionLibrary, 0x0028);
		}

		// class UChaosClothingSimulationFactory : public UClothingSimulationFactory
		TEST_METHOD(Class__ChaosCloth__ChaosClothingSimulationFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothingSimulationFactory, 0x0028);
		}

		// class UChaosClothingSimulationInteractor : public UClothingSimulationInteractor
		TEST_METHOD(Class__ChaosCloth__ChaosClothingSimulationInteractor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothingSimulationInteractor, UnknownData_8Y8M, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothingSimulationInteractor, 0x0058);
		}

		// class UChaosClothConfig : public UClothConfigCommon
		TEST_METHOD(Class__ChaosCloth__ChaosClothConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, MassMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_U9EO, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UniformMass, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, TotalMass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, Density, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, MinPerParticleMass, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, EdgeStiffness, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, BendingStiffness, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseBendingElements, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_N2MN, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, AreaStiffness, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, VolumeStiffness, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, StrainLimitingStiffness, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, LimitScale, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, TetherMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseGeodesicDistance, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_9KI1, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, ShapeTargetStiffness, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, CollisionThickness, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, FrictionCoefficient, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseSelfCollisions, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_8A3V, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, SelfCollisionThickness, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseLegacyBackstop, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_LUNS, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, DampingCoefficient, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUsePointBasedWindModel, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_UB2S, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, DragCoefficient, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, LiftCoefficient, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseGravityOverride, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_X296, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, GravityScale, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, Gravity, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, AnimDriveSpringStiffness, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, LinearVelocityScale, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, AngularVelocityScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseTetrahedralConstraints, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseThinShellVolumeConstraints, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseContinuousCollisionDetection, 0x00AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_LCJY, 0x00AF);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothConfig, 0x00B0);
		}

		// class UChaosClothSharedSimConfig : public UClothSharedConfigCommon
		TEST_METHOD(Class__ChaosCloth__ChaosClothSharedSimConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, IterationCount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, SubdivisionCount, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, SelfCollisionThickness, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, CollisionThickness, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseDampingOverride, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, UnknownData_5WX5, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, Damping, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseGravityOverride, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, UnknownData_LCRX, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, GravityScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, Gravity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseLocalSpaceSimulation, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseXPBDConstraints, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, UnknownData_FTVM, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothSharedSimConfig, 0x0058);
		}

		// class UNiagaraMergeable : public UObject
		TEST_METHOD(Class__NiagaraCore__NiagaraMergeable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraMergeable, 0x0028);
		}

		// class UNiagaraDataInterfaceBase : public UNiagaraMergeable
		TEST_METHOD(Class__NiagaraCore__NiagaraDataInterfaceBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceBase, 0x0028);
		}

		// class UStatusEffect_Champion_Minion_C : public UStatusEffect_Champion_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Champion_Minion__StatusEffect_Champion_Minion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Champion_Minion_C, 0x02A0);
		}

		// class UMonsterChampionBase_C : public UMonsterChampionComponent
		TEST_METHOD(BlueprintGeneratedClass__MonsterChampionBase__MonsterChampionBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonsterChampionBase_C, AffixActors, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMonsterChampionBase_C, 0x0128);
		}

		// class AGenericBossLevelSequenceActor_C : public ALevelSequenceActor
		TEST_METHOD(BlueprintGeneratedClass__GenericBossLevelSequenceActor__GenericBossLevelSequenceActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGenericBossLevelSequenceActor_C, UberGraphFrame, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGenericBossLevelSequenceActor_C, 0x02A8);
		}

		// class UNoMaterial_BorderStyle_C : public UTLBorderStyle
		TEST_METHOD(BlueprintGeneratedClass__NoMaterial_BorderStyle__NoMaterial_BorderStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNoMaterial_BorderStyle_C, 0x00F8);
		}

		// class UItemSpawnTooltip_C : public UItemSpawnWidgetTooltip
		TEST_METHOD(WidgetBlueprintGeneratedClass__ItemSpawnTooltip__ItemSpawnTooltip_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemSpawnTooltip_C, UberGraphFrame, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemSpawnTooltip_C, LevelRequiredBorder, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemSpawnTooltip_C, TextBlock, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemSpawnTooltip_C, Warning, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemSpawnTooltip_C, 0x06A0);
		}

		// class ULightBody5TextStyle_C : public ULightBody1TextStyle_C
		TEST_METHOD(BlueprintGeneratedClass__LightBody5TextStyle__LightBody5TextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightBody5TextStyle_C, 0x00A8);
		}

		// class UInventoryItemButton_C : public UInventoryItemWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InventoryItemButton__InventoryItemButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, UberGraphFrame, 0x1B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, Select, 0x1B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, PressHoldPlump, 0x1B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, Focus, 0x1B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, UseItem, 0x1B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, TryToEquip, 0x1B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, Equip, 0x1B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, BGFrame, 0x1B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, BorderFrameHighlightable, 0x1B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, ComparisonMenuAnchor, 0x1B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, Dimmer, 0x1B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, EnchantList, 0x1B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, HoldProgress, 0x1B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, HorizontalBox_2, 0x1B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, InnerInfo, 0x1BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, ItemContents, 0x1BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, ItemImage, 0x1BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, LifeboundBorder, 0x1BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, ModalSelectionHighlight, 0x1BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, ModifiedOverlay, 0x1BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, NewFlag, 0x1BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, NoShieldIcon, 0x1BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, SelectionIndicator, 0x1BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, TLImage_1, 0x1BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, TLImage_3, 0x1BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, TLImage_4, 0x1BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, TLImage_437, 0x1C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, TLTextBlock_2, 0x1C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, TLTextBlock_4, 0x1C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, UnboundBorder, 0x1C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryItemButton_C, EquipEvent, 0x1C20);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryItemButton_C, 0x1C38);
		}

		// class ULightHeader4bTextStyle_C : public ULightHeader1TextStyle_C
		TEST_METHOD(BlueprintGeneratedClass__LightHeader4bTextStyle__LightHeader4bTextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightHeader4bTextStyle_C, 0x00A8);
		}

		// class UStyle_ScrollBox_C : public UTLScrollBoxStyle
		TEST_METHOD(BlueprintGeneratedClass__Style_ScrollBox__Style_ScrollBox_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStyle_ScrollBox_C, 0x07B0);
		}

		// class UGamepadHighlight_Round_Style_C : public UTLBorderStyle
		TEST_METHOD(BlueprintGeneratedClass__GamepadHighlight_Round_Style__GamepadHighlight_Round_Style_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGamepadHighlight_Round_Style_C, 0x00F8);
		}

		// class ULightBody6TextStyle_C : public ULightBody1TextStyle_C
		TEST_METHOD(BlueprintGeneratedClass__LightBody6TextStyle__LightBody6TextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightBody6TextStyle_C, 0x00A8);
		}

		// class UTextOnlyButtonStyleSelected_C : public UTLTextStyle
		TEST_METHOD(BlueprintGeneratedClass__TextOnlyButtonStyleSelected__TextOnlyButtonStyleSelected_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextOnlyButtonStyleSelected_C, 0x00A8);
		}

		// class UCurrencyCostLarge_C : public UCurrencyCostWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__CurrencyCostLarge__CurrencyCostLarge_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyCostLarge_C, Currency, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyCostLarge_C, CurrencyImage, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyCostLarge_C, Text, 0x08C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurrencyCostLarge_C, 0x08C8);
		}

		// class UErrorBody1TextStyle_C : public ULightBody1TextStyle_C
		TEST_METHOD(BlueprintGeneratedClass__ErrorBody1TextStyle__ErrorBody1TextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UErrorBody1TextStyle_C, 0x00A8);
		}

		// class UInvisibleButtonStyle_C : public UDefaultButtonStyle_C
		TEST_METHOD(BlueprintGeneratedClass__InvisibleButtonStyle__InvisibleButtonStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInvisibleButtonStyle_C, 0x0310);
		}

		// class UTravelToPartyMemberWidget_bp_C : public UTravelToPartyMemberWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TravelToPartyMemberWidget_bp__TravelToPartyMemberWidget_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelToPartyMemberWidget_bp_C, UberGraphFrame, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelToPartyMemberWidget_bp_C, CurrentArea, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelToPartyMemberWidget_bp_C, PartyMemberHUDInfoWidget, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelToPartyMemberWidget_bp_C, PartyMemberName, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelToPartyMemberWidget_bp_C, PortalToFortButton, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelToPartyMemberWidget_bp_C, PortalToPartyMemberButton, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelToPartyMemberWidget_bp_C, TLImage_120, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelToPartyMemberWidget_bp_C, TLImage_122, 0x0930);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTravelToPartyMemberWidget_bp_C, 0x0938);
		}

		// class UTravelToKnownDestinationWidget_C : public UTravelToKnownDestinationWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TravelToKnownDestinationWidget__TravelToKnownDestinationWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelToKnownDestinationWidget_C, UberGraphFrame, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelToKnownDestinationWidget_C, Button, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelToKnownDestinationWidget_C, Icon, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelToKnownDestinationWidget_C, Label, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTravelToKnownDestinationWidget_C, TLImage_2, 0x06C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTravelToKnownDestinationWidget_C, 0x06D0);
		}

		// class ULargeEditableTextStyle_C : public UDefaultEditableTextStyle_C
		TEST_METHOD(BlueprintGeneratedClass__LargeEditableTextStyle__LargeEditableTextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULargeEditableTextStyle_C, 0x0820);
		}

		// class UPetStoredInventory_C : public UPetStoredInventoryWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PetStoredInventory__PetStoredInventory_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, UberGraphFrame, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, RarityTitleFadein, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, Intro, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, ActivePetBox, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, ActivePetHeader, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, ActivePetList, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, ActiveScrollBox, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, BasicHeader, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, HasPetsSwitcher, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, InactiveScrollBox, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, NoActivePetText, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, NoInactivePetText, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, NoPetsText, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, PetDetailsWidget, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, PetFull_PlaceHolder, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, PetListWidgets, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, PreviewAnchorWidget, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, RadioToggleItem, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, RadioToggleItem_C_1, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, RadioToggleItem_C_2, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, RadioToggleItem_C_3, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, SmallHeader, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, SortTitle, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, StorageSize, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, StoredPetBox, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, StoredPetHeader, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, StoredPets, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, Switcher, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, TLButton_2, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, TLButton_13, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, TLImage_2, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, TLImage_170, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, TLImage_186, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredInventory_C, TLTextBlock_18, 0x0AF8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPetStoredInventory_C, 0x0B00);
		}

		// class UResolutionConfirmationContent_C : public UResolutionConfirmationWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ResolutionConfirmationContent__ResolutionConfirmationContent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UResolutionConfirmationContent_C, ProgressBar_1, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UResolutionConfirmationContent_C, 0x0298);
		}

		// class UStatDefenseRow_C : public UStatRowWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__StatDefenseRow__StatDefenseRow_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatDefenseRow_C, AffixRange, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatDefenseRow_C, DefensePercentTextBlock_1, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatDefenseRow_C, DefenseText, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatDefenseRow_C, Icon, 0x0688);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatDefenseRow_C, 0x0690);
		}

		// class UFortPropWidget_C : public UFortPropWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__FortPropWidget__FortPropWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget_C, UberGraphFrame, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget_C, CraftAnim, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget_C, CostList, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget_C, CraftButton, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget_C, DecorationButton, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget_C, DecorationNameText, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget_C, FortPropIconWidget, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget_C, HorizontalBox_4, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget_C, LimitBox, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget_C, LockedState, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget_C, Place, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget_C, PlaceButton, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget_C, PropCost, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget_C, TLImage_105, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget_C, TLImage_108, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget_C, TLTextBlock_1, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget_C, TLTextBlock_2, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget_C, TLTextBlock_5, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropWidget_C, TLTextBlock_6, 0x0A98);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFortPropWidget_C, 0x0AA0);
		}

		// class UCurrencyWidget_Large2_C : public UCurrencyWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CurrencyWidget_Large2__CurrencyWidget_Large2_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget_Large2_C, Amount, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget_Large2_C, CurrencyIcon, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget_Large2_C, FixedTextBlock, 0x0708);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurrencyWidget_Large2_C, 0x0710);
		}

		// class UClassMechanicHelpScreen_FG_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ClassMechanicHelpScreen_FG__ClassMechanicHelpScreen_FG_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicHelpScreen_FG_C, show, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicHelpScreen_FG_C, TLImage_1, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicHelpScreen_FG_C, TLImage_9, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicHelpScreen_FG_C, TLImage_259, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassMechanicHelpScreen_FG_C, TLImage_904, 0x0660);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClassMechanicHelpScreen_FG_C, 0x0668);
		}

		// class UHelpTabbedMenuButton_C : public UTabbedMenuButton
		TEST_METHOD(WidgetBlueprintGeneratedClass__HelpTabbedMenuButton__HelpTabbedMenuButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHelpTabbedMenuButton_C, UberGraphFrame, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHelpTabbedMenuButton_C, Button, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHelpTabbedMenuButton_C, ButtonSelected, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHelpTabbedMenuButton_C, TLTextBlock_1, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHelpTabbedMenuButton_C, TLTextBlock_59, 0x0730);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHelpTabbedMenuButton_C, 0x0738);
		}

		// class UMapSidebar_C : public UMapSidebar
		TEST_METHOD(WidgetBlueprintGeneratedClass__MapSidebar__MapSidebar_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSidebar_C, UberGraphFrame, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSidebar_C, NeedleSpin, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSidebar_C, Flag, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSidebar_C, AreaList, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSidebar_C, ButtonList, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSidebar_C, CompassWidget, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSidebar_C, LastPortal, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSidebar_C, PlayerFort, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSidebar_C, ResetInstance, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSidebar_C, ResetInstanceButton, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSidebar_C, ResetInstancesList, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSidebar_C, TLImage_111, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSidebar_C, TLImage_116, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSidebar_C, TLImage_156, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSidebar_C, TLImage_158, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSidebar_C, TLImage_159, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSidebar_C, TLImage_160, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSidebar_C, TLImage_161, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSidebar_C, TLImage_162, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSidebar_C, TLImage_163, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSidebar_C, TLImage_164, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSidebar_C, TLImage_165, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSidebar_C, TLImage_166, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSidebar_C, TLImage_167, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSidebar_C, HighlightedBrush, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapSidebar_C, CompassBrush, 0x07B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapSidebar_C, 0x0840);
		}

		// class UStatusEffect_HardcoreDead_CharacterSelect_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_HardcoreDead_CharacterSelect__StatusEffect_HardcoreDead_CharacterSelect_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_HardcoreDead_CharacterSelect_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_HardcoreDead_CharacterSelect_C, 0x0288);
		}

		// class UFrameAbilityBar_Style_C : public UTLBorderStyle
		TEST_METHOD(BlueprintGeneratedClass__FrameAbilityBar_Style__FrameAbilityBar_Style_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrameAbilityBar_Style_C, 0x00F8);
		}

		// class USkillSlotPicker_C : public USkillSlotPickerWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SkillSlotPicker__SkillSlotPicker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSlotPicker_C, AssignedSkill, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSlotPicker_C, Lock, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSlotPicker_C, LockNumber, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSlotPicker_C, MenuAnchor_1, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSlotPicker_C, SkillHotkeyWidget, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSlotPicker_C, SkillIcon, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSlotPicker_C, TLButton_1, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSlotPicker_C, TLImage_71, 0x0780);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillSlotPicker_C, 0x0788);
		}

		// class UDeathOptionWidget_bp_C : public UDeathOptionWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DeathOptionWidget_bp__DeathOptionWidget_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathOptionWidget_bp_C, UberGraphFrame, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathOptionWidget_bp_C, Button, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathOptionWidget_bp_C, GoldCostLabel, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathOptionWidget_bp_C, GoldDisplayContainer, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathOptionWidget_bp_C, GoldIcon, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathOptionWidget_bp_C, Icon, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathOptionWidget_bp_C, Label, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathOptionWidget_bp_C, TLImage_2, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathOptionWidget_bp_C, TLImage_5, 0x06F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeathOptionWidget_bp_C, 0x0700);
		}

		// class UPetStored_C : public UPetStoredWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PetStored__PetStored_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStored_C, UberGraphFrame, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStored_C, Refresh, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStored_C, CloseButton, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStored_C, DeleteButton, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStored_C, Flash, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStored_C, PetIconWidget, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStored_C, PetName, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStored_C, PetRarity, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStored_C, PetSkills, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStored_C, PetType, 0x0950);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPetStored_C, 0x0958);
		}

		// class UFlippedInventoryComparisonWidget_C : public UInventoryComparisonWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__FlippedInventoryComparisonWidget__FlippedInventoryComparisonWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlippedInventoryComparisonWidget_C, ComparisonSwitcher, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlippedInventoryComparisonWidget_C, EquippedItemTooltip, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlippedInventoryComparisonWidget_C, EquippedPetDetailTooltip, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlippedInventoryComparisonWidget_C, SelectedItemTooltip, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlippedInventoryComparisonWidget_C, SelectedPetDetailTooltip, 0x06C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFlippedInventoryComparisonWidget_C, 0x06D0);
		}

		// class UFrameBasicA_Style_C : public UTLBorderStyle
		TEST_METHOD(BlueprintGeneratedClass__FrameBasicA_Style__FrameBasicA_Style_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrameBasicA_Style_C, 0x00F8);
		}

		// class ULightBody3TextStyle_C : public ULightBody2TextStyle_C
		TEST_METHOD(BlueprintGeneratedClass__LightBody3TextStyle__LightBody3TextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightBody3TextStyle_C, 0x00A8);
		}

		// class USocialContextMenu_C : public USocialContextMenuWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SocialContextMenu__SocialContextMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialContextMenu_C, UberGraphFrame, 0x1240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialContextMenu_C, show, 0x1248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialContextMenu_C, AccountNameText, 0x1250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialContextMenu_C, ButtonList, 0x1258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialContextMenu_C, CharacterNameText, 0x1260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialContextMenu_C, DifficultyBadge, 0x1268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialContextMenu_C, Divider, 0x1270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialContextMenu_C, LevelText, 0x1278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialContextMenu_C, TLTextBlock_1, 0x1280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USocialContextMenu_C, 0x1288);
		}

		// class UMapPlayerMarker_C : public ULocalPlayerMapMarkerWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MapPlayerMarker__MapPlayerMarker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapPlayerMarker_C, UberGraphFrame, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapPlayerMarker_C, pulse, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapPlayerMarker_C, RotatingPlayer, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapPlayerMarker_C, TLImage_2, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapPlayerMarker_C, TLImage_53, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapPlayerMarker_C, 0x0338);
		}

		// class ULevelSequenceCinematic_C : public ULevelSequenceCinematicWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__LevelSequenceCinematic__LevelSequenceCinematic_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceCinematic_C, CinematicConfirmation, 0x0668);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceCinematic_C, 0x0670);
		}

		// class UInGameMenu_MainMenu_C : public UInGameMenuWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InGameMenu_MainMenu__InGameMenu_MainMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_MainMenu_C, UberGraphFrame, 0x1C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_MainMenu_C, show, 0x1C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_MainMenu_C, AccountButton, 0x1C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_MainMenu_C, ButtonList, 0x1C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_MainMenu_C, ChangeProfileButton, 0x1C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_MainMenu_C, CinematicButton, 0x1C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_MainMenu_C, CreditsButton, 0x1C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_MainMenu_C, DebugInfo, 0x1C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_MainMenu_C, ExitGameButton, 0x1C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_MainMenu_C, FeedbackButton_2, 0x1C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_MainMenu_C, glow, 0x1C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_MainMenu_C, LegalButton, 0x1C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_MainMenu_C, MenuFrame, 0x1C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_MainMenu_C, OptionsButton, 0x1C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_MainMenu_C, Style_CloseButtonSmall_C_1, 0x1C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_MainMenu_C, TLButton_1, 0x1CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_MainMenu_C, TLImage_1, 0x1CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_MainMenu_C, TLImage_2, 0x1CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_MainMenu_C, IntroCinematic, 0x1CB8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInGameMenu_MainMenu_C, 0x1CE0);
		}

		// class UHotkeyWidget_C : public UHotkeyWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__HotkeyWidget__HotkeyWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHotkeyWidget_C, ButtonBGWidget, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHotkeyWidget_C, TextWidget, 0x06A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHotkeyWidget_C, 0x06A8);
		}

		// class UDifficultyPanel_C : public UDifficultyPanel
		TEST_METHOD(WidgetBlueprintGeneratedClass__DifficultyPanel__DifficultyPanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyPanel_C, UberGraphFrame, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyPanel_C, show, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyPanel_C, Accept, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyPanel_C, ButtonLegendContainer, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyPanel_C, ButtonWrapper, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyPanel_C, Cancel, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyPanel_C, CloseMenuButton, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyPanel_C, CloseWrapper, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyPanel_C, DifficultyListWidget_1, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyPanel_C, DifficultyWidget2, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyPanel_C, DifficultyWidget2_C_2, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyPanel_C, DifficultyWidget2_C_3, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyPanel_C, DifficultyWidget2_C_4, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyPanel_C, DifficultyWidget2_C_5, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyPanel_C, FiligreeLeft, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyPanel_C, GamepadButtonLegend, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyPanel_C, glow, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyPanel_C, Overlay_2, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyPanel_C, SkillCategoryHeader, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyPanel_C, TLImage_2, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyPanel_C, TLImage_3, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyPanel_C, TLImage_4, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyPanel_C, TLImage_5, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyPanel_C, TLTextBlock_2, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyPanel_C, ShowButtonLegend, 0x0738);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDifficultyPanel_C, 0x0739);
		}

		// class UFeedbackDialogBox_C : public UFeedbackWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__FeedbackDialogBox__FeedbackDialogBox_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackDialogBox_C, UberGraphFrame, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackDialogBox_C, show, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackDialogBox_C, AcceptButton, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackDialogBox_C, AcceptButtonText, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackDialogBox_C, BaseModalWidget, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackDialogBox_C, Blur, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackDialogBox_C, CharacterCount, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackDialogBox_C, CharacterLimit_2, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackDialogBox_C, CheckBox, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackDialogBox_C, CheckboxFrame, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackDialogBox_C, CheckboxOption, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackDialogBox_C, ComboBox, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackDialogBox_C, ComboOption, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackDialogBox_C, DropdownFrame, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackDialogBox_C, GamepadButtonLegend, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackDialogBox_C, HorizontalBox_2, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackDialogBox_C, ListWidget_1, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackDialogBox_C, noscreenshots, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackDialogBox_C, RejectButton, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackDialogBox_C, RejectButtonText, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackDialogBox_C, Screenshot, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackDialogBox_C, TextOption, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackDialogBox_C, TLEditableTextBox_751, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackDialogBox_C, TLImage, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackDialogBox_C, TLImage_4, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackDialogBox_C, TLImage_144, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackDialogBox_C, TLRichTextBlock, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackDialogBox_C, TLRichTextBlock_627, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackDialogBox_C, DefaultBodyText, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackDialogBox_C, DefaultTitleText, 0x08F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFeedbackDialogBox_C, 0x0910);
		}

		// class UIconConstants_C : public UIconConstants
		TEST_METHOD(BlueprintGeneratedClass__IconConstants__IconConstants_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIconConstants_C, 0x05A8);
		}

		// class UDefaultPlayerBotBehavior_C : public UPlayerBotBehaviorComponent
		TEST_METHOD(BlueprintGeneratedClass__DefaultPlayerBotBehavior__DefaultPlayerBotBehavior_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultPlayerBotBehavior_C, 0x00D8);
		}

		// class ABaseStaticFortProp_wBox_C : public ABaseStaticFortProp_C
		TEST_METHOD(BlueprintGeneratedClass__BaseStaticFortProp_wBox__BaseStaticFortProp_wBox_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseStaticFortProp_wBox_C, Box_Click_Collision, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseStaticFortProp_wBox_C, 0x03C0);
		}

		// class USocialHUDNotifyBlueprint_C : public USocialHUDNotificationWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SocialHUDNotifyBlueprint__SocialHUDNotifyBlueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialHUDNotifyBlueprint_C, UberGraphFrame, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialHUDNotifyBlueprint_C, InteractiveButton, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialHUDNotifyBlueprint_C, TLImage_1, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialHUDNotifyBlueprint_C, TLTextBlock_1, 0x0670);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USocialHUDNotifyBlueprint_C, 0x0678);
		}

		// class Aio_prop_gate_02_rubble_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_gate_02_rubble_01_bp__io_prop_gate_02_rubble_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_gate_02_rubble_01_bp_C, 0x0268);
		}

		// class UFazeerAnimations_C : public UDungeonMCWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__FazeerAnimations__FazeerAnimations_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazeerAnimations_C, UberGraphFrame, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazeerAnimations_C, SwirlShow, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazeerAnimations_C, BlinkAnimation, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazeerAnimations_C, HoverBop, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazeerAnimations_C, Blink, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazeerAnimations_C, ClosedMouth, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazeerAnimations_C, DialogueAnchor, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazeerAnimations_C, FazeerDialogue, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazeerAnimations_C, TLImage_40, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazeerAnimations_C, TLImage_100, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazeerAnimations_C, TLImage_102, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazeerAnimations_C, TLImage_103, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazeerAnimations_C, TLImage_104, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazeerAnimations_C, TLImage_105, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazeerAnimations_C, TLImage_106, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazeerAnimations_C, TLImage_107, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazeerAnimations_C, TLImage_108, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazeerAnimations_C, TLImage_109, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazeerAnimations_C, TLImage_110, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFazeerAnimations_C, Wink, 0x08B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFazeerAnimations_C, 0x08C0);
		}

		// class ATLGameStateBlueprint_C : public ATLGameState
		TEST_METHOD(BlueprintGeneratedClass__TLGameStateBlueprint__TLGameStateBlueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLGameStateBlueprint_C, DeathOptions, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLGameStateBlueprint_C, TLCombat, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLGameStateBlueprint_C, LevelManager, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATLGameStateBlueprint_C, DefaultSceneRoot, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATLGameStateBlueprint_C, 0x0340);
		}

		// class UDungeonPanelResults_C : public UDungeonResultsPanel
		TEST_METHOD(WidgetBlueprintGeneratedClass__DungeonPanelResults__DungeonPanelResults_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelResults_C, UberGraphFrame, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelResults_C, Hide, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelResults_C, show, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelResults_C, ClusterAffixesAnchor, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelResults_C, DungeonChallengeLevelListWidget_46, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelResults_C, FailedLevelNumber, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelResults_C, FazeerAnchor, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelResults_C, NextStateButton, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelResults_C, ResetToLevelNumber, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelResults_C, ResultCheckpointMessage, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelResults_C, ResultTitleText, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelResults_C, SuccessNewLevelMessage, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelResults_C, TLImage_1, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelResults_C, TLImage_140, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelResults_C, TLImage_142, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelResults_C, TLImage_680, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelResults_C, TLImage_682, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelResults_C, TLImage_684, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelResults_C, TLRichTextBlock_1, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelResults_C, TLRichTextBlock_4, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPanelResults_C, TLTextBlock_163, 0x0978);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonPanelResults_C, 0x0980);
		}

		// class UDungeonClusterRules_C : public UDungeonClusterWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DungeonClusterRules__DungeonClusterRules_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonClusterRules_C, show, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonClusterRules_C, ClusterTitle, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonClusterRules_C, EmptyText, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonClusterRules_C, RulesContainer, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonClusterRules_C, RulesSwitcher, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonClusterRules_C, TLImage_105, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonClusterRules_C, TLImage_107, 0x0748);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonClusterRules_C, 0x0750);
		}

		// class Apetretriever_charactercreate_03_C : public Apetretriever_charactercreate_base_C
		TEST_METHOD(BlueprintGeneratedClass__petretriever_charactercreate_03__petretriever_charactercreate_03_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Apetretriever_charactercreate_03_C, 0x02F0);
		}

		// class UDungeonLevelCard_C : public UDungeonChallengeLevelCard
		TEST_METHOD(WidgetBlueprintGeneratedClass__DungeonLevelCard__DungeonLevelCard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, UberGraphFrame, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, NewActive, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, Unlock, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, Select, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, StartFocus, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, BossImageFootprint, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, CardAsButton, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, CardBossImage, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, ClearedBossImage, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, ClearedBossImageFootprint, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, ClearedLevelText, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, ClearedLevelTextBlock, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, FootprintStateSwitcher, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, glow2, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, LevelTextBlock, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, LockedBorder, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, LockedBossImageFootprint, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, LockedCardBossImage, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, LockedLevelCardText, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, LockedLevelTextBlock, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, NormalBorder, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, Rays, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, ScaleBox_7, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, SelectedLevelTextBlock, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, squareglow, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, StateSwitcherCard, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, TLImage_1, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, TLImage_2, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, TLImage_3, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, TLImage_64, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, TLImage_72, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, TLImage_181, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, TLImage_209, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, TLImage_214, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonLevelCard_C, UnlockBorder, 0x0830);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonLevelCard_C, 0x0838);
		}

		// class UIntro_AudioAmbiance_C : public UAudioAmbianceHandler
		TEST_METHOD(BlueprintGeneratedClass__Intro_AudioAmbiance__Intro_AudioAmbiance_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntro_AudioAmbiance_C, 0x0170);
		}

		// class Aio_prop_fish_01_animated_bp_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__io_prop_fish_01_animated_bp__io_prop_fish_01_animated_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_fish_01_animated_bp_C, Box, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_fish_01_animated_bp_C, SkeletalMesh, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_fish_01_animated_bp_C, DefaultSceneRoot, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_fish_01_animated_bp_C, 0x0238);
		}

		// class UModalDialog_C : public UQuestDialogueWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ModalDialog__ModalDialog_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalDialog_C, UberGraphFrame, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalDialog_C, Outro, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalDialog_C, Intro, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalDialog_C, AcceptButton, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalDialog_C, AcceptQuestButtons, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalDialog_C, AcceptText, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalDialog_C, BodyRichText, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalDialog_C, ButtonSwitcher, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalDialog_C, CancelButton, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalDialog_C, ChoiceWidget, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalDialog_C, Divider, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalDialog_C, GamepadButtonLegend, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalDialog_C, Interactive, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalDialog_C, LeftButton, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalDialog_C, Overlay_6, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalDialog_C, Prefix, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalDialog_C, QuestTypeIcon, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalDialog_C, RewardButton, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalDialog_C, RewardList, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalDialog_C, RewardsDisplay, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalDialog_C, RightButton, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalDialog_C, TitleRichText, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalDialog_C, TLImage_3, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalDialog_C, TLImage_119, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalDialog_C, TLRichTextBlock_48, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalDialog_C, TLTextBlock_1, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalDialog_C, TLTextBlock_2, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalDialog_C, VerticalBox, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalDialog_C, CameraRequest, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalDialog_C, ShowingCall, 0x0A4C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModalDialog_C, 0x0A4D);
		}

		// class Aio_prop_crategrp_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_crategrp_02_bp__io_prop_crategrp_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_crategrp_02_bp_C, 0x0268);
		}

		// class UStatusEffectBar_Debuffs_C : public UStatusEffectBar
		TEST_METHOD(WidgetBlueprintGeneratedClass__StatusEffectBar_Debuffs__StatusEffectBar_Debuffs_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffectBar_Debuffs_C, StatusEffectList, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffectBar_Debuffs_C, 0x0680);
		}

		// class USkill_Basic_Base_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_Basic_Base__Skill_Basic_Base_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Basic_Base_C, 0x0540);
		}

		// class UCraftingResultsModal_C : public UCraftingResultsWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CraftingResultsModal__CraftingResultsModal_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingResultsModal_C, UberGraphFrame, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingResultsModal_C, BookendLeft, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingResultsModal_C, bookendRight, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingResultsModal_C, ClaimButton, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingResultsModal_C, CloseButtonArea, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingResultsModal_C, CraftingProductListWidget_2, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingResultsModal_C, Divider, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingResultsModal_C, MouseKeyboard, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingResultsModal_C, TLTextBlock_1, 0x06A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingResultsModal_C, 0x06B0);
		}

		// class AMapWorksPortal_C : public APortal
		TEST_METHOD(BlueprintGeneratedClass__MapWorksPortal__MapWorksPortal_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapWorksPortal_C, UberGraphFrame, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapWorksPortal_C, ParticleSystemHighlighted, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapWorksPortal_C, NamePlate_Location, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapWorksPortal_C, Nameplate, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapWorksPortal_C, MapMarker, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapWorksPortal_C, ParticleSystem, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapWorksPortal_C, FMODAudio, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapWorksPortal_C, Capsule, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapWorksPortal_C, Timeline_0_Opacity_D1EE30D2467A36F55FC1FFBBA4473512, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapWorksPortal_C, Timeline_0__Direction_D1EE30D2467A36F55FC1FFBBA4473512, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapWorksPortal_C, UnknownData_6CZ4, 0x0685);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapWorksPortal_C, Timeline_1, 0x0688);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMapWorksPortal_C, 0x0690);
		}

		// class UStatusEffectsInventoryContainer_C : public UTLInventoryContainerStatusEffects
		TEST_METHOD(BlueprintGeneratedClass__StatusEffectsInventoryContainer__StatusEffectsInventoryContainer_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffectsInventoryContainer_C, 0x0338);
		}

		// class Upotion_inv_C : public UTLInventoryContainerPotions
		TEST_METHOD(BlueprintGeneratedClass__potion_inv__potion_inv_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Upotion_inv_C, 0x0218);
		}

		// class Uwardrobe_inv_base_C : public UTLInventoryContainerWardrobe
		TEST_METHOD(BlueprintGeneratedClass__wardrobe_inv_base__wardrobe_inv_base_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Uwardrobe_inv_base_C, 0x0310);
		}

		// class ATownPortal_C : public APortal
		TEST_METHOD(BlueprintGeneratedClass__TownPortal__TownPortal_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATownPortal_C, UberGraphFrame, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATownPortal_C, NamePlate_Location, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATownPortal_C, Nameplate, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATownPortal_C, MapMarker, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATownPortal_C, ParticleSystem, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATownPortal_C, FMODAudio, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATownPortal_C, Capsule, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATownPortal_C, Timeline_0_Opacity_12FA1AEA4913204B2C3FF3A3286F2334, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATownPortal_C, Timeline_0__Direction_12FA1AEA4913204B2C3FF3A3286F2334, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATownPortal_C, UnknownData_BNRI, 0x067D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATownPortal_C, Timeline_1, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATownPortal_C, 0x0688);
		}

		// class UInGameMenu_C : public UInGameMenuWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InGameMenu__InGameMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_C, UberGraphFrame, 0x1C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_C, Hide, 0x1C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_C, show, 0x1C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_C, ButtonList, 0x1C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_C, CloseMenuButton, 0x1C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_C, CreditsButton, 0x1C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_C, DebugInfo, 0x1C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_C, ExitGameButton, 0x1C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_C, ExitToDesktopButton, 0x1C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_C, FeedbackButton, 0x1C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_C, glow, 0x1C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_C, Help, 0x1C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_C, LegalButton, 0x1C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_C, MailboxButton, 0x1C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_C, MainMenubutton, 0x1C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_C, MainMenuButtonHighlight, 0x1CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_C, MenuFrame, 0x1CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_C, OptionsButton, 0x1CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_C, ReportFortButton, 0x1CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_C, ReportFortContainer, 0x1CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_C, TLImage_1, 0x1CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenu_C, TLImage_2, 0x1CD0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInGameMenu_C, 0x1CD8);
		}

		// class UStatusEffectWidget_C : public UStatusEffectWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__StatusEffectWidget__StatusEffectWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffectWidget_C, CountdownText, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffectWidget_C, Icon, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffectWidget_C, ScaleBox_1, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffectWidget_C, StackCountText, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffectWidget_C, 0x06A0);
		}

		// class Urm_anim_bp_C : public UTLAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__rm_anim_bp__rm_anim_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Urm_anim_bp_C, UberGraphFrame, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::Urm_anim_bp_C, AnimGraphNode_Root, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::Urm_anim_bp_C, AnimGraphNode_BlendSpacePlayer, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::Urm_anim_bp_C, TLAnimGraphNode_Slot, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::Urm_anim_bp_C, AnimGraphNode_ModifyBone, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::Urm_anim_bp_C, AnimGraphNode_LocalToComponentSpace, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::Urm_anim_bp_C, AnimGraphNode_ComponentToLocalSpace, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Urm_anim_bp_C, HeadSize, 0x08C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Urm_anim_bp_C, 0x08D4);
		}

		// class UDungeonSpeechBubble_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DungeonSpeechBubble__DungeonSpeechBubble_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonSpeechBubble_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonSpeechBubble_C, PLumpin, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonSpeechBubble_C, TLImage_71, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonSpeechBubble_C, TLImage_81, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonSpeechBubble_C, TLImage_82, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonSpeechBubble_C, TLImage_83, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonSpeechBubble_C, TLImage_84, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonSpeechBubble_C, TLImage_85, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonSpeechBubble_C, TLImage_86, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonSpeechBubble_C, TLImage_87, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonSpeechBubble_C, TLImage_88, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonSpeechBubble_C, TLImage_89, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonSpeechBubble_C, 0x02C0);
		}

		// class Avfx_tleffect_targetting_circle_01_C : public ATLEffect
		TEST_METHOD(BlueprintGeneratedClass__vfx_tleffect_targetting_circle_01__vfx_tleffect_targetting_circle_01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Avfx_tleffect_targetting_circle_01_C, targetomg_arrows, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::Avfx_tleffect_targetting_circle_01_C, targetomg_icon, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::Avfx_tleffect_targetting_circle_01_C, DefaultSceneRoot, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Avfx_tleffect_targetting_circle_01_C, 0x0278);
		}

		// class Anpcsprite_bp_C : public Anpcbasegadget_bp_C
		TEST_METHOD(BlueprintGeneratedClass__npcsprite_bp__npcsprite_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Anpcsprite_bp_C, 0x04B8);
		}

		// class ABaseSkeletalObject_C : public ATLActor
		TEST_METHOD(BlueprintGeneratedClass__BaseSkeletalObject__BaseSkeletalObject_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseSkeletalObject_C, UnknownData_ZN2A, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseSkeletalObject_C, StaticMesh, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseSkeletalObject_C, SkeletalMesh, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseSkeletalObject_C, DefaultSceneRoot, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseSkeletalObject_C, 0x03A8);
		}

		// class Afort_prop_rug_03_bp_C : public ABaseStaticFortProp_wBox_C
		TEST_METHOD(BlueprintGeneratedClass__fort_prop_rug_03_bp__fort_prop_rug_03_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Afort_prop_rug_03_bp_C, 0x03C0);
		}

		// class Afort_prop_mapworks_a_bp_C : public ABaseStaticFortProp_C
		TEST_METHOD(BlueprintGeneratedClass__fort_prop_mapworks_a_bp__fort_prop_mapworks_a_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Afort_prop_mapworks_a_bp_C, Box1, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Afort_prop_mapworks_a_bp_C, Box, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Afort_prop_mapworks_a_bp_C, SkeletalMesh, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Afort_prop_mapworks_a_bp_C, 0x03D0);
		}

		// class Aio_prop_cliff_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_cliff_02_bp__io_prop_cliff_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_cliff_02_bp_C, 0x0268);
		}

		// class Anpcimperialguard_01_bp_C : public ABaseMonster_C
		TEST_METHOD(BlueprintGeneratedClass__npcimperialguard_01_bp__npcimperialguard_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Anpcimperialguard_01_bp_C, 0x07F4);
		}

		// class UCombatCriticalNotify_C : public UFloatingTextWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CombatCriticalNotify__CombatCriticalNotify_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombatCriticalNotify_C, UberGraphFrame, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombatCriticalNotify_C, RiseAndFade, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombatCriticalNotify_C, bLock, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombatCriticalNotify_C, glow, 0x0668);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCombatCriticalNotify_C, 0x0670);
		}

		// class UItem_inv_C : public UTLInventoryContainerUnequippedItems
		TEST_METHOD(BlueprintGeneratedClass__Item_inv__Item_inv_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItem_inv_C, 0x01F8);
		}

		// class UQuest_inv_C : public UTLInventoryContainerQuestItems
		TEST_METHOD(BlueprintGeneratedClass__Quest_inv__Quest_inv_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuest_inv_C, 0x01F0);
		}

		// class USkill_GetHit_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_GetHit__Skill_GetHit_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_GetHit_C, 0x0540);
		}

		// class UCombatCriticalDamageNotifyComponent_C : public UCombatNotifyWidgetComponent
		TEST_METHOD(BlueprintGeneratedClass__CombatCriticalDamageNotifyComponent__CombatCriticalDamageNotifyComponent_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCombatCriticalDamageNotifyComponent_C, 0x0670);
		}

		// class ABaseStaticFortProp_C : public ATLActor
		TEST_METHOD(BlueprintGeneratedClass__BaseStaticFortProp__BaseStaticFortProp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseStaticFortProp_C, UnknownData_87FP, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseStaticFortProp_C, IconCapture, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseStaticFortProp_C, PreviewSize, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseStaticFortProp_C, DefaultFortPropComponent, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseStaticFortProp_C, StaticMesh, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseStaticFortProp_C, DefaultSceneRoot, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseStaticFortProp_C, 0x03B8);
		}

		// class ULorePlayer_C : public ULorePlayerWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__LorePlayer__LorePlayer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULorePlayer_C, UberGraphFrame, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULorePlayer_C, show, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULorePlayer_C, Portrait, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULorePlayer_C, PortraitContainer, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULorePlayer_C, Style_CloseButtonSmall, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULorePlayer_C, TitleText, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULorePlayer_C, TLImage_62, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULorePlayer_C, 0x0680);
		}

		// class Agob_prop_root_b_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_prop_root_b_bp__gob_prop_root_b_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_prop_root_b_bp_C, 0x0268);
		}

		// class USkill_Ranged_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_Ranged__Skill_Ranged_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Ranged_C, 0x0540);
		}

		// class USkill_Spawn_JumpDown2m_C : public USkill_Spawn_C
		TEST_METHOD(BlueprintGeneratedClass__Skill_Spawn_JumpDown2m__Skill_Spawn_JumpDown2m_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Spawn_JumpDown2m_C, 0x0540);
		}

		// class ATLPlayerCameraManager_C : public ATLPlayerCameraManager
		TEST_METHOD(BlueprintGeneratedClass__TLPlayerCameraManager__TLPlayerCameraManager_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATLPlayerCameraManager_C, 0x27D0);
		}

		// class UGenericModalWidgetToast_C : public UGenericModalWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__GenericModalWidgetToast__GenericModalWidgetToast_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidgetToast_C, UberGraphFrame, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidgetToast_C, show, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidgetToast_C, ContentPanel, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidgetToast_C, OuterFrame, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidgetToast_C, DefaultBodyText, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericModalWidgetToast_C, DefaultTitleText, 0x07D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericModalWidgetToast_C, 0x07E8);
		}

		// class Agob_prop_root_d_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_prop_root_d_bp__gob_prop_root_d_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_prop_root_d_bp_C, 0x0268);
		}

		// class Amossrat_b_C : public ABaseMonster_C
		TEST_METHOD(BlueprintGeneratedClass__mossrat_b__mossrat_b_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Amossrat_b_C, 0x07F4);
		}

		// class UQuestTracker_C : public UQuestTrackerWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__QuestTracker__QuestTracker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestTracker_C, UberGraphFrame, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestTracker_C, HideTracker, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestTracker_C, ShowTracker, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestTracker_C, AdventureQuests, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestTracker_C, HotkeyWidget, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestTracker_C, InvalidationBox_1, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestTracker_C, NothingPinned, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestTracker_C, ShowMoreText, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestTracker_C, TLScrollBox_2, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestTracker_C, TrackedOverMax, 0x0790);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestTracker_C, 0x0798);
		}

		// class Ufor_StartingItems_C : public UPlayerStartingItems_C
		TEST_METHOD(BlueprintGeneratedClass__for_StartingItems__for_StartingItems_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ufor_StartingItems_C, 0x0078);
		}

		// class UCurrencyPickUpWidget_C : public UCurrencyPickUpWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CurrencyPickUpWidget__CurrencyPickUpWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyPickUpWidget_C, HidePickUpAnimation, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyPickUpWidget_C, NormalPickUpAnimation, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyPickUpWidget_C, BGFrame, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyPickUpWidget_C, CurrencyWidget, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyPickUpWidget_C, ItemNameTextBlock, 0x0720);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurrencyPickUpWidget_C, 0x0728);
		}

		// class ABaseHelm_C : public ABaseArmor_C
		TEST_METHOD(BlueprintGeneratedClass__BaseHelm__BaseHelm_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseHelm_C, 0x0428);
		}

		// class ABaseBoots_C : public ABaseArmor_C
		TEST_METHOD(BlueprintGeneratedClass__BaseBoots__BaseBoots_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseBoots_C, 0x0428);
		}

		// class Acc_BaseBoots_C : public ABaseBoots_C
		TEST_METHOD(BlueprintGeneratedClass__cc_BaseBoots__cc_BaseBoots_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Acc_BaseBoots_C, 0x0428);
		}

		// class ABasePants_C : public ABaseArmor_C
		TEST_METHOD(BlueprintGeneratedClass__BasePants__BasePants_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABasePants_C, 0x0428);
		}

		// class ABaseHead_C : public ABaseArmor_C
		TEST_METHOD(BlueprintGeneratedClass__BaseHead__BaseHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseHead_C, 0x0428);
		}

		// class APlayerPortrait_Sharpshooter_bp_C : public APlayerPortrait_Base_bp_C
		TEST_METHOD(BlueprintGeneratedClass__PlayerPortrait_Sharpshooter_bp__PlayerPortrait_Sharpshooter_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerPortrait_Sharpshooter_bp_C, UberGraphFrame, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerPortrait_Sharpshooter_bp_C, 0x0418);
		}

		// class UCraftingDetailsWidgetBase_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CraftingDetailsWidgetBase__CraftingDetailsWidgetBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, ActionButtonList, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, Cost, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, CostList, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, CraftButton, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, DetailsContainer, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, DetailsPanel, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, DetailsSwitcher, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, Divider, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, Divider_C_1, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, DurationBox, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, DurationText, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, FiligreeLeft, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, HeaderText, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, HorizontalBox_7, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, InventoryItemTooltip, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, ItemRarityText, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, ItemTypeText, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, LongDescription, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, LongDescriptionContainer, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, MainPanel, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, PurchaseActionDescription, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, PurchaseAvailabilitySwitcher, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, PurchaseButtonText, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, PurchaseSection, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, QuantityLocked, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, RequiresBox, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, RequiresHeader, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, TLImage_1, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, TLImage_2, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, TLImage_3, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, VerticalBox, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, RecipeCostsVisibility, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, GamepadLegendVisibility, 0x0739);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, UnknownData_WVO8, 0x073A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, CraftButtonText, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, DurationVisibility, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, ActionAreaVisibility, 0x0759);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingDetailsWidgetBase_C, DetailsVisibility, 0x075A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingDetailsWidgetBase_C, 0x075B);
		}

		// class Acc_m_t0a_head_bp_C : public Acc_BaseHead_C
		TEST_METHOD(BlueprintGeneratedClass__cc_m_t0a_head_bp__cc_m_t0a_head_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Acc_m_t0a_head_bp_C, 0x0428);
		}

		// class UDye_Newbie2Digitus_C : public UDye
		TEST_METHOD(BlueprintGeneratedClass__Dye_Newbie2Digitus__Dye_Newbie2Digitus_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDye_Newbie2Digitus_C, 0x03F8);
		}

		// class AHammerIconRenderRig_bp_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__HammerIconRenderRig_bp__HammerIconRenderRig_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHammerIconRenderRig_bp_C, FillLight, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHammerIconRenderRig_bp_C, RimLight, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHammerIconRenderRig_bp_C, KeyLight, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHammerIconRenderRig_bp_C, LightRigOrientation, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHammerIconRenderRig_bp_C, Scene, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHammerIconRenderRig_bp_C, SceneCaptureComponent2D, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHammerIconRenderRig_bp_C, Underlight, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHammerIconRenderRig_bp_C, RimL, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHammerIconRenderRig_bp_C, DefaultSceneRoot1, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHammerIconRenderRig_bp_C, 0x0268);
		}

		// class Adm_BasePants_C : public ABasePants_C
		TEST_METHOD(BlueprintGeneratedClass__dm_BasePants__dm_BasePants_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Adm_BasePants_C, 0x0428);
		}

		// class Afor_BaseHead_C : public ABaseHead_C
		TEST_METHOD(BlueprintGeneratedClass__for_BaseHead__for_BaseHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Afor_BaseHead_C, 0x0428);
		}

		// class UTargetInfoWidget_Champion_C : public UChampionTargetInfoWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TargetInfoWidget_Champion__TargetInfoWidget_Champion_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Champion_C, UberGraphFrame, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Champion_C, Affix, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Champion_C, Bar_Background_Elite, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Champion_C, Bar_Cap_Elite, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Champion_C, Description, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Champion_C, EliteFrame, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Champion_C, EliteHealthBar, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Champion_C, EliteHPBarOverlay, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Champion_C, EliteTargetElement, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Champion_C, FiligreeLeft, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Champion_C, FiligreeRight, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Champion_C, LevelBox, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Champion_C, MonsterSpawnType, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Champion_C, NameGlow, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Champion_C, SizeBox_5, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Champion_C, TargetNameElite, 0x0790);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTargetInfoWidget_Champion_C, 0x0798);
		}

		// class UCoinFlip_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CoinFlip__CoinFlip_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoinFlip_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoinFlip_C, Loop, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoinFlip_C, TLImage, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoinFlip_C, TLImage_2, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoinFlip_C, TLImage_3, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoinFlip_C, TLImage_4, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoinFlip_C, TLImage_5, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoinFlip_C, TLImage_6, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoinFlip_C, TLImage_7, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoinFlip_C, TLImage_8, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoinFlip_C, TLImage_9, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoinFlip_C, TLImage_10, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoinFlip_C, TLImage_11, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoinFlip_C, TLImage_12, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoinFlip_C, TLImage_13, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoinFlip_C, TLImage_14, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoinFlip_C, TLImage_45, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoinFlip_C, 0x02E8);
		}

		// class UFriendEntryWidget_C : public UFriendEntryWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__FriendEntryWidget__FriendEntryWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendEntryWidget_C, UberGraphFrame, 0x1070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendEntryWidget_C, AccountNameText, 0x1078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendEntryWidget_C, AreaNameText, 0x1080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendEntryWidget_C, ButtonBox, 0x1088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendEntryWidget_C, ChatButton, 0x1090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendEntryWidget_C, DifficultyText, 0x1098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendEntryWidget_C, EmptyFullWidgetSwitcher, 0x10A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendEntryWidget_C, FriendStatusSwitcher, 0x10A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendEntryWidget_C, HardcoreText, 0x10B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendEntryWidget_C, InviteButton, 0x10B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendEntryWidget_C, InviteText, 0x10C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendEntryWidget_C, Profile, 0x10C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendEntryWidget_C, TLTextBlock_1, 0x10D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendEntryWidget_C, TLTextBlock_2, 0x10D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendEntryWidget_C, ViewProfileButton, 0x10E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFriendEntryWidget_C, 0x10E8);
		}

		// class ABaseHatch_C : public ABaseArmor_C
		TEST_METHOD(BlueprintGeneratedClass__BaseHatch__BaseHatch_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseHatch_C, 0x0428);
		}

		// class Afor_t0a_gloves_bp_C : public Afor_BaseGloves_C
		TEST_METHOD(BlueprintGeneratedClass__for_t0a_gloves_bp__for_t0a_gloves_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Afor_t0a_gloves_bp_C, 0x0438);
		}

		// class ABaseLocomotion_C : public ABaseArmor_C
		TEST_METHOD(BlueprintGeneratedClass__BaseLocomotion__BaseLocomotion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseLocomotion_C, 0x0428);
		}

		// class UOtherPlayerMenu_C : public UOtherPlayerMenuWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__OtherPlayerMenu__OtherPlayerMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOtherPlayerMenu_C, FiligreeLeft, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOtherPlayerMenu_C, FiligreeRight, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOtherPlayerMenu_C, FortOwnerVerticalBox, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOtherPlayerMenu_C, FortOwnerWidget, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOtherPlayerMenu_C, NearbyPlayerList, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOtherPlayerMenu_C, SkillCategoryHeader, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOtherPlayerMenu_C, TLTextBlock_2, 0x0688);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOtherPlayerMenu_C, 0x0690);
		}

		// class AArea_Master_ImperialOutpost_Intro_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__Area_Master_ImperialOutpost_Intro__Area_Master_ImperialOutpost_Intro_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AArea_Master_ImperialOutpost_Intro_C, 0x0228);
		}

		// class UForgedSteamFill_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ForgedSteamFill__ForgedSteamFill_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedSteamFill_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedSteamFill_C, Loop, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedSteamFill_C, ForgedSteamLoop, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedSteamFill_C, ForgedSteamLoop_C_2, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedSteamFill_C, ForgedSteamLoop_C_3, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedSteamFill_C, ForgedSteamLoop_C_4, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedSteamFill_C, ForgedSteamLoop_C_5, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedSteamFill_C, ForgedSteamLoop_C_6, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedSteamFill_C, ForgedSteamLoop_C_7, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedSteamFill_C, ForgedSteamLoop_C_8, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedSteamFill_C, ForgedSteamLoop_C_9, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedSteamFill_C, ForgedSteamLoop_C_10, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedSteamFill_C, ForgedSteamLoop_C_11, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedSteamFill_C, ForgedSteamLoop_C_12, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedSteamFill_C, ForgedSteamLoop_C_13, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedSteamFill_C, TLImage_103, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedSteamFill_C, TLImage_105, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedSteamFill_C, TLImage_106, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedSteamFill_C, TLImage_107, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedSteamFill_C, TLImage_108, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedSteamFill_C, TLImage_109, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForgedSteamFill_C, 0x0308);
		}

		// class UForgedResourceBarSteam_C : public UForgedResourceBar
		TEST_METHOD(WidgetBlueprintGeneratedClass__ForgedResourceBarSteam__ForgedResourceBarSteam_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedResourceBarSteam_C, TooltipMenuAnchor, 0x06A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForgedResourceBarSteam_C, 0x06B0);
		}

		// class UForgedResourceBarFullGowLoop_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ForgedResourceBarFullGowLoop__ForgedResourceBarFullGowLoop_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedResourceBarFullGowLoop_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForgedResourceBarFullGowLoop_C, glowloop, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForgedResourceBarFullGowLoop_C, 0x0270);
		}

		// class USkill_DoubleCross_C : public USkill_CursedCaptain_Base_C
		TEST_METHOD(BlueprintGeneratedClass__Skill_DoubleCross__Skill_DoubleCross_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_DoubleCross_C, 0x0540);
		}

		// class ABasePet_C : public ATLCharacter
		TEST_METHOD(BlueprintGeneratedClass__BasePet__BasePet_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePet_C, UberGraphFrame, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePet_C, ATM_Pet_LowHealth, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePet_C, BlobShadow, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePet_C, PlayerAffix, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePet_C, AudioImportance, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePet_C, NameData, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePet_C, MapMarker, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePet_C, MaterialManager, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePet_C, Spawn_Skills, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePet_C, Proc, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePet_C, SkillList, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePet_C, Base_Skills, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePet_C, AudioEffectMap, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePet_C, TLPathFollowing, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePet_C, PetFlee, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePet_C, PetSendToTown, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePet_C, BlinkEffectDefinition, 0x07D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABasePet_C, 0x08A0);
		}

		// class Ass_m_t1a_pants_bp_C : public Ass_BasePants_Modular_C
		TEST_METHOD(BlueprintGeneratedClass__ss_m_t1a_pants_bp__ss_m_t1a_pants_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ass_m_t1a_pants_bp_C, 0x0450);
		}

		// class Ass_m_t0a_chest_bp_C : public Ass_BaseChest_C
		TEST_METHOD(BlueprintGeneratedClass__ss_m_t0a_chest_bp__ss_m_t0a_chest_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ass_m_t0a_chest_bp_C, 0x0428);
		}

		// class Ass_m_t0a_boots_bp_C : public Ass_f_t0a_boots_bp_C
		TEST_METHOD(BlueprintGeneratedClass__ss_m_t0a_boots_bp__ss_m_t0a_boots_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ass_m_t0a_boots_bp_C, 0x0428);
		}

		// class Adm_f_t1c_boots_bp_C : public Adm_BaseBoots_C
		TEST_METHOD(BlueprintGeneratedClass__dm_f_t1c_boots_bp__dm_f_t1c_boots_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Adm_f_t1c_boots_bp_C, 0x0428);
		}

		// class Acc_f_player_C : public APlayer_Base_C
		TEST_METHOD(BlueprintGeneratedClass__cc_f_player__cc_f_player_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Acc_f_player_C, 0x0840);
		}

		// class UPartyInviteToast_C : public UPartyInviteToastWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PartyInviteToast__PartyInviteToast_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyInviteToast_C, UberGraphFrame, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyInviteToast_C, show, 0x0E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyInviteToast_C, AcceptButton, 0x0E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyInviteToast_C, DeclineButton, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyInviteToast_C, InviteButton, 0x0E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyInviteToast_C, InviteText, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyInviteToast_C, MKBButtons, 0x0E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyInviteToast_C, MuteButton, 0x0E70);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyInviteToast_C, 0x0E78);
		}

		// class ASkillShape_FurnaceBlastBigger_C : public ASkillShape_FurnaceBlast_C
		TEST_METHOD(BlueprintGeneratedClass__SkillShape_FurnaceBlastBigger__SkillShape_FurnaceBlastBigger_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkillShape_FurnaceBlastBigger_C, 0x02C0);
		}

		// class UStatusEffect_Consecration_Bonus_C : public UStatusEffectBase_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Consecration_Bonus__StatusEffect_Consecration_Bonus_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Consecration_Bonus_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Consecration_Bonus_C, 0x0288);
		}

		// class AHazard_Legendary_ConsecrationPoisonNovas_C : public ABaseAreaHazard_C
		TEST_METHOD(BlueprintGeneratedClass__Hazard_Legendary_ConsecrationPoisonNovas__Hazard_Legendary_ConsecrationPoisonNovas_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHazard_Legendary_ConsecrationPoisonNovas_C, UberGraphFrame, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHazard_Legendary_ConsecrationPoisonNovas_C, 0x0460);
		}

		// class UStatusEffect_SonicPulse_Vulnerable_C : public UStatusEffectBase_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_SonicPulse_Vulnerable__StatusEffect_SonicPulse_Vulnerable_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_SonicPulse_Vulnerable_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_SonicPulse_Vulnerable_C, vulnamount, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_SonicPulse_Vulnerable_C, 0x028C);
		}

		// class ASkillShape_PotionKnockback_C : public ASkillShapeSphere_C
		TEST_METHOD(BlueprintGeneratedClass__SkillShape_PotionKnockback__SkillShape_PotionKnockback_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_PotionKnockback_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_PotionKnockback_C, Decal, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_PotionKnockback_C, TLParticleSystem, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_PotionKnockback_C, Timeline_0_Inner_Falloff_AA907869477AB67A87F8CE9848EBA915, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_PotionKnockback_C, Timeline_0_Opacity_AA907869477AB67A87F8CE9848EBA915, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_PotionKnockback_C, Timeline_0_Outer_Radius_AA907869477AB67A87F8CE9848EBA915, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_PotionKnockback_C, Timeline_0_Inner_Radius_AA907869477AB67A87F8CE9848EBA915, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_PotionKnockback_C, Timeline_0__Direction_AA907869477AB67A87F8CE9848EBA915, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_PotionKnockback_C, UnknownData_LJNZ, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_PotionKnockback_C, Timeline_1, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_PotionKnockback_C, Mid, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkillShape_PotionKnockback_C, 0x02D0);
		}

		// class USkill_Potion_Master_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_Potion_Master__Skill_Potion_Master_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Potion_Master_C, StatusDuration, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Potion_Master_C, UnknownData_B2SZ, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Potion_Master_C, PotionStatusEffect, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Potion_Master_C, ApplyPotionToSelf, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Potion_Master_C, ApplyPotionToMinions, 0x0551);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Potion_Master_C, UnknownData_WLLF, 0x0552);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Potion_Master_C, PotionSound, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Potion_Master_C, AssociatedPotionActor, 0x0570);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Potion_Master_C, 0x0578);
		}

		// class UDungeonLevelTextStyle_C : public ULightHeader1TextStyle_C
		TEST_METHOD(BlueprintGeneratedClass__DungeonLevelTextStyle__DungeonLevelTextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonLevelTextStyle_C, 0x00A8);
		}

		// class Ubuyback_inv_C : public UTLInventoryContainerBuybackItems
		TEST_METHOD(BlueprintGeneratedClass__buyback_inv__buyback_inv_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ubuyback_inv_C, 0x01F8);
		}

		// class Ufort_inv_C : public UTLInventoryContainerFort
		TEST_METHOD(BlueprintGeneratedClass__fort_inv__fort_inv_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ufort_inv_C, 0x0200);
		}

		// class Ulegendaryaffix_inv_C : public UTLInventoryContainerEquippedLegendaryAffixes
		TEST_METHOD(BlueprintGeneratedClass__legendaryaffix_inv__legendaryaffix_inv_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ulegendaryaffix_inv_C, 0x0208);
		}

		// class Anpcgeneralgraye_intro_bp_C : public Anpc_quest_base_C
		TEST_METHOD(BlueprintGeneratedClass__npcgeneralgraye_intro_bp__npcgeneralgraye_intro_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Anpcgeneralgraye_intro_bp_C, QuipBox, 0x04C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Anpcgeneralgraye_intro_bp_C, 0x04D0);
		}

		// class Anpcsquash_trevailpt_blacksmith_bp_C : public Anpc_quest_base_C
		TEST_METHOD(BlueprintGeneratedClass__npcsquash_trevailpt_blacksmith_bp__npcsquash_trevailpt_blacksmith_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Anpcsquash_trevailpt_blacksmith_bp_C, 0x04C8);
		}

		// class USkill_PlayerPortal_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_PlayerPortal__Skill_PlayerPortal_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_PlayerPortal_C, 0x0540);
		}

		// class UMainMenuLoadingScreenBackground_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MainMenuLoadingScreenBackground__MainMenuLoadingScreenBackground_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuLoadingScreenBackground_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuLoadingScreenBackground_C, SpinnerAnim, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuLoadingScreenBackground_C, BGImage, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuLoadingScreenBackground_C, TLImage_4, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuLoadingScreenBackground_C, 0x0280);
		}

		// class UCraftingProductWidget_C : public UCraftingProductWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CraftingProductWidget__CraftingProductWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingProductWidget_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingProductWidget_C, GenericResourceWidget, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingProductWidget_C, ProductNameText, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingProductWidget_C, bShowName, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingProductWidget_C, 0x0279);
		}

		// class Aio_floor_doubledock_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_floor_doubledock_01_bp__io_floor_doubledock_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_floor_doubledock_01_bp_C, 0x0268);
		}

		// class USkill_Legendary_CoalLaunchRain_C : public UBaseProcSkill_C
		TEST_METHOD(BlueprintGeneratedClass__Skill_Legendary_CoalLaunchRain__Skill_Legendary_CoalLaunchRain_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Legendary_CoalLaunchRain_C, Radius, 0x0560);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Legendary_CoalLaunchRain_C, 0x0564);
		}

		// class ABrute_Soldier_Cutscene_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Brute_Soldier_Cutscene__Brute_Soldier_Cutscene_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrute_Soldier_Cutscene_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrute_Soldier_Cutscene_C, w_shield_1h_gobbrute_t0a_geo, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrute_Soldier_Cutscene_C, npcimperialguard_body_04_geo1, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrute_Soldier_Cutscene_C, npcimperialguard_body_04_geo, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrute_Soldier_Cutscene_C, w_club_1h_gobbrute_t0b_geo, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrute_Soldier_Cutscene_C, gobbrute_body_01_geo, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrute_Soldier_Cutscene_C, DefaultSceneRoot, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrute_Soldier_Cutscene_C, Min, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrute_Soldier_Cutscene_C, Max, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrute_Soldier_Cutscene_C, 0x0260);
		}

		// class AMonsterSpawner_BossRoom_Base_C : public AMonsterSpawnerBase_C
		TEST_METHOD(BlueprintGeneratedClass__MonsterSpawner_BossRoom_Base__MonsterSpawner_BossRoom_Base_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMonsterSpawner_BossRoom_Base_C, 0x0318);
		}

		// class ABaseBreakable_Container_NoTrap_C : public ABaseBreakable_C
		TEST_METHOD(BlueprintGeneratedClass__BaseBreakable_Container_NoTrap__BaseBreakable_Container_NoTrap_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseBreakable_Container_NoTrap_C, UberGraphFrame, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseBreakable_Container_NoTrap_C, 0x0470);
		}

		// class ABaseHideableObject_C : public AHideableActor
		TEST_METHOD(BlueprintGeneratedClass__BaseHideableObject__BaseHideableObject_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseHideableObject_C, UberGraphFrame, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseHideableObject_C, BlobShadow, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseHideableObject_C, Box, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseHideableObject_C, nav_mesh_blocker, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseHideableObject_C, HideableStaticMesh, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseHideableObject_C, 0x03D8);
		}

		// class ABasePulsingTrap_C : public ABaseAreaHazard_C
		TEST_METHOD(BlueprintGeneratedClass__BasePulsingTrap__BasePulsingTrap_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePulsingTrap_C, SkeletalMesh, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePulsingTrap_C, SkillPulse, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePulsingTrap_C, SkillList, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasePulsingTrap_C, SkillManager, 0x0470);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABasePulsingTrap_C, 0x0478);
		}

		// class Agbl_lootable_corpse_imperial_01_bp_C : public ABaseClickableWithAnims_C
		TEST_METHOD(BlueprintGeneratedClass__gbl_lootable_corpse_imperial_01_bp__gbl_lootable_corpse_imperial_01_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Agbl_lootable_corpse_imperial_01_bp_C, UberGraphFrame, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Agbl_lootable_corpse_imperial_01_bp_C, HighlightMaterial, 0x04C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agbl_lootable_corpse_imperial_01_bp_C, 0x04D0);
		}

		// class Aio_floor_dock_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_floor_dock_01_bp__io_floor_dock_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_floor_dock_01_bp_C, 0x0268);
		}

		// class Aio_prop_banner_03_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_banner_03_bp__io_prop_banner_03_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_banner_03_bp_C, Box, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_banner_03_bp_C, 0x0270);
		}

		// class Aio_prop_barrel_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_barrel_01_bp__io_prop_barrel_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_barrel_01_bp_C, 0x0268);
		}

		// class Aio_prop_barrel_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_barrel_02_bp__io_prop_barrel_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_barrel_02_bp_C, 0x0268);
		}

		// class Aio_prop_board_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_board_02_bp__io_prop_board_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_board_02_bp_C, 0x0268);
		}

		// class Aio_floor_05x05_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_floor_05x05_01_bp__io_floor_05x05_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_floor_05x05_01_bp_C, 0x0268);
		}

		// class AMissile_Scout_C : public AMissileBase_C
		TEST_METHOD(BlueprintGeneratedClass__Missile_Scout__Missile_Scout_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_Scout_C, UberGraphFrame, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_Scout_C, rats_roll, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_Scout_C, vfx_ss_scouts_bones_missile_01_p, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_Scout_C, ParticleSystem, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_Scout_C, SkeletalMesh, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_Scout_C, Rotation, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_Scout_C, Random, 0x06B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMissile_Scout_C, 0x06BC);
		}

		// class Aio_terrain_10x10x8_chasm_hill_straight_v1_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_terrain_10x10x8_chasm_hill_straight_v1_bp__io_terrain_10x10x8_chasm_hill_straight_v1_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_terrain_10x10x8_chasm_hill_straight_v1_bp_C, 0x0268);
		}

		// class Apetowl_base_C : public ABaseMeleePet_C
		TEST_METHOD(BlueprintGeneratedClass__petowl_base__petowl_base_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Apetowl_base_C, 0x08A0);
		}

		// class Agob_prop_barrel_03_bp_C : public ABaseBreakable_Container_C
		TEST_METHOD(BlueprintGeneratedClass__gob_prop_barrel_03_bp__gob_prop_barrel_03_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_prop_barrel_03_bp_C, 0x0478);
		}

		// class Aio_set_generalstore_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_set_generalstore_01_bp__io_set_generalstore_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_set_generalstore_01_bp_C, 0x0268);
		}

		// class Aio_set_clocktowerb_01_bp_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__io_set_clocktowerb_01_bp__io_set_clocktowerb_01_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_set_clocktowerb_01_bp_C, Box1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_set_clocktowerb_01_bp_C, SkeletalMesh, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_set_clocktowerb_01_bp_C, DefaultSceneRoot, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_set_clocktowerb_01_bp_C, 0x0238);
		}

		// class Uio_set_clocktowerb_01_anim_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__io_set_clocktowerb_01_anim__io_set_clocktowerb_01_anim_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Uio_set_clocktowerb_01_anim_C, UnknownData_HBNN, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uio_set_clocktowerb_01_anim_C, UberGraphFrame, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uio_set_clocktowerb_01_anim_C, AnimGraphNode_Root, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uio_set_clocktowerb_01_anim_C, AnimGraphNode_SequencePlayer, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Uio_set_clocktowerb_01_anim_C, 0x0378);
		}

		// class Aio_yappercell_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_yappercell_02_bp__io_yappercell_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_yappercell_02_bp_C, 0x0268);
		}

		// class ABaseCritter_C : public ACritter
		TEST_METHOD(BlueprintGeneratedClass__BaseCritter__BaseCritter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseCritter_C, TLPathFollowing, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseCritter_C, SkillList, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseCritter_C, SkillManager, 0x04E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseCritter_C, 0x04E8);
		}

		// class Aio_prop_ruins_wall_05_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_ruins_wall_05_bp__io_prop_ruins_wall_05_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_ruins_wall_05_bp_C, 0x0268);
		}

		// class Aio_prop_sack_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_sack_01_bp__io_prop_sack_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_sack_01_bp_C, 0x0268);
		}

		// class Aio_prop_sack_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_sack_02_bp__io_prop_sack_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_sack_02_bp_C, 0x0268);
		}

		// class Aio_prop_sack_group_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_sack_group_01_bp__io_prop_sack_group_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_sack_group_01_bp_C, 0x0268);
		}

		// class Utinymouse_anim_bp_C : public UTLAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__tinymouse_anim_bp__tinymouse_anim_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Utinymouse_anim_bp_C, UberGraphFrame, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::Utinymouse_anim_bp_C, AnimGraphNode_Root, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::Utinymouse_anim_bp_C, AnimGraphNode_BlendSpacePlayer, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::Utinymouse_anim_bp_C, TLAnimGraphNode_Slot, 0x0730);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Utinymouse_anim_bp_C, 0x0780);
		}

		// class Aio_prop_banner_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_banner_02_bp__io_prop_banner_02_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_banner_02_bp_C, Box, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_banner_02_bp_C, 0x0270);
		}

		// class Aio_prop_banner_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_banner_01_bp__io_prop_banner_01_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_banner_01_bp_C, Box, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_banner_01_bp_C, 0x0270);
		}

		// class Agob_prop_rockstanding_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_prop_rockstanding_02_bp__gob_prop_rockstanding_02_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_rockstanding_02_bp_C, Box, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_prop_rockstanding_02_bp_C, 0x0270);
		}

		// class Aio_statue_01b_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_statue_01b_bp__io_statue_01b_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_statue_01b_bp_C, PointLight, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_statue_01b_bp_C, 0x0270);
		}

		// class Aio_floor_10x10_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_floor_10x10_01_bp__io_floor_10x10_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_floor_10x10_01_bp_C, 0x0268);
		}

		// class Aio_floor_20x20_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_floor_20x20_01_bp__io_floor_20x20_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_floor_20x20_01_bp_C, 0x0268);
		}

		// class Aio_floor_dock_04_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_floor_dock_04_bp__io_floor_dock_04_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_floor_dock_04_bp_C, 0x0268);
		}

		// class Aio_floor_upper_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_floor_upper_02_bp__io_floor_upper_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_floor_upper_02_bp_C, 0x0268);
		}

		// class Aio_floor_upper_03_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_floor_upper_03_bp__io_floor_upper_03_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_floor_upper_03_bp_C, 0x0268);
		}

		// class Aio_prop_plank_scaffold_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_plank_scaffold_01_bp__io_prop_plank_scaffold_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_plank_scaffold_01_bp_C, 0x0268);
		}

		// class Aio_prop_portal_02_intro_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_portal_02_intro_bp__io_prop_portal_02_intro_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_portal_02_intro_bp_C, 0x0268);
		}

		// class Aio_prop_ruins_wall_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_ruins_wall_01_bp__io_prop_ruins_wall_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_ruins_wall_01_bp_C, 0x0268);
		}

		// class Aio_prop_ruins_wall_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_ruins_wall_02_bp__io_prop_ruins_wall_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_ruins_wall_02_bp_C, 0x0268);
		}

		// class Aio_props_group_04_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_props_group_04_bp__io_props_group_04_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_props_group_04_bp_C, 0x0268);
		}

		// class Atod_spotlight_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__tod_spotlight__tod_spotlight_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Atod_spotlight_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::Atod_spotlight_C, SpotLight, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::Atod_spotlight_C, DefaultSceneRoot, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Atod_spotlight_C, 0x0238);
		}

		// class Askybox_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__skybox__skybox_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Askybox_C, Sky, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Askybox_C, 0x0228);
		}

		// class AFriendlySpawner_ImperialGuard_Melee_C : public AMonsterSpawnerBase_C
		TEST_METHOD(BlueprintGeneratedClass__FriendlySpawner_ImperialGuard_Melee__FriendlySpawner_ImperialGuard_Melee_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFriendlySpawner_ImperialGuard_Melee_C, MonsterSpawnPosition4, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFriendlySpawner_ImperialGuard_Melee_C, MonsterSpawnPosition3, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFriendlySpawner_ImperialGuard_Melee_C, MonsterSpawnPosition2, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFriendlySpawner_ImperialGuard_Melee_C, MonsterSpawnPosition1, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFriendlySpawner_ImperialGuard_Melee_C, MonsterSpawnPosition, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFriendlySpawner_ImperialGuard_Melee_C, 0x0340);
		}

		// class ASpawncloset_JumpDown2m_IO_1_goblin_C : public AMonsterSpawner
		TEST_METHOD(BlueprintGeneratedClass__Spawncloset_JumpDown2m_IO_1_goblin__Spawncloset_JumpDown2m_IO_1_goblin_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpawncloset_JumpDown2m_IO_1_goblin_C, MonsterSpawnPosition2, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpawncloset_JumpDown2m_IO_1_goblin_C, MonsterSpawnPosition1, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpawncloset_JumpDown2m_IO_1_goblin_C, Jumpdown4m_Spawncloset, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpawncloset_JumpDown2m_IO_1_goblin_C, MonsterSpawnPosition, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpawncloset_JumpDown2m_IO_1_goblin_C, Box, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpawncloset_JumpDown2m_IO_1_goblin_C, MonsterSpawnSkillTarget, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpawncloset_JumpDown2m_IO_1_goblin_C, MonsterSpawnerTrigger, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpawncloset_JumpDown2m_IO_1_goblin_C, DefaultSceneRoot, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpawncloset_JumpDown2m_IO_1_goblin_C, 0x0350);
		}

		// class ALevelSequenceTrigger_Child_YapperIntro_C : public ALevelSequenceTrigger_C
		TEST_METHOD(BlueprintGeneratedClass__LevelSequenceTrigger_Child_YapperIntro__LevelSequenceTrigger_Child_YapperIntro_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelSequenceTrigger_Child_YapperIntro_C, 0x0230);
		}

		// class Agob_prop_barrel_02_bp_C : public ABaseBreakable_C
		TEST_METHOD(BlueprintGeneratedClass__gob_prop_barrel_02_bp__gob_prop_barrel_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_prop_barrel_02_bp_C, 0x0468);
		}

		// class Agob_bf_props1_g_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_bf_props1_g_01_bp__gob_bf_props1_g_01_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_bf_props1_g_01_bp_C, Box, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_bf_props1_g_01_bp_C, 0x0270);
		}

		// class Agob_bf_props1_g_03_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_bf_props1_g_03_bp__gob_bf_props1_g_03_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_bf_props1_g_03_bp_C, 0x0268);
		}

		// class Agob_prop_crate_03_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_prop_crate_03_bp__gob_prop_crate_03_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_prop_crate_03_bp_C, 0x0268);
		}

		// class Aio_wall_top_05x05_03_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_wall_top_05x05_03_bp__io_wall_top_05x05_03_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_wall_top_05x05_03_bp_C, 0x0268);
		}

		// class Aio_water_20x20_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_water_20x20_01_bp__io_water_20x20_01_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_water_20x20_01_bp_C, FMODAudio, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_water_20x20_01_bp_C, 0x0270);
		}

		// class Aio_floor_dock_ropes_01b_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_floor_dock_ropes_01b_bp__io_floor_dock_ropes_01b_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_floor_dock_ropes_01b_bp_C, 0x0268);
		}

		// class Aio_prop_anvil_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_anvil_01_bp__io_prop_anvil_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_anvil_01_bp_C, 0x0268);
		}

		// class Aio_prop_fencestraight_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_fencestraight_01_bp__io_prop_fencestraight_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_fencestraight_01_bp_C, 0x0268);
		}

		// class Aio_prop_lamppost_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_lamppost_01_bp__io_prop_lamppost_01_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_lamppost_01_bp_C, FMODAudio, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_lamppost_01_bp_C, PointLight, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_lamppost_01_bp_C, vfx_env_lightpost_fire_02_p, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_lamppost_01_bp_C, SwayAmount, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_lamppost_01_bp_C, 0x0284);
		}

		// class UCharacterMenuOtherPlayerWidget_C : public UOtherPlayerWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CharacterMenuOtherPlayerWidget__CharacterMenuOtherPlayerWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuOtherPlayerWidget_C, UberGraphFrame, 0x0EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuOtherPlayerWidget_C, AccountName, 0x0EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuOtherPlayerWidget_C, Actions, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuOtherPlayerWidget_C, DifficultyText, 0x0ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuOtherPlayerWidget_C, HardcoreText, 0x0ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuOtherPlayerWidget_C, InviteButton, 0x0EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuOtherPlayerWidget_C, InviteText, 0x0EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuOtherPlayerWidget_C, PartyMemberNameText, 0x0EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuOtherPlayerWidget_C, PortraitImage, 0x0EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuOtherPlayerWidget_C, TLImage_1, 0x0F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuOtherPlayerWidget_C, TLTextBlock_1, 0x0F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuOtherPlayerWidget_C, TLTextBlock_4, 0x0F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMenuOtherPlayerWidget_C, ViewProfileButton, 0x0F18);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterMenuOtherPlayerWidget_C, 0x0F20);
		}

		// class Ass_m_player_C : public Ass_f_player_C
		TEST_METHOD(BlueprintGeneratedClass__ss_m_player__ss_m_player_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ass_m_player_C, 0x0850);
		}

		// class AHealthPotion_C : public ABasePotion_C
		TEST_METHOD(BlueprintGeneratedClass__HealthPotion__HealthPotion_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHealthPotion_C, IconCameraPosition, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHealthPotion_C, 0x0460);
		}

		// class UPotionWidgetHyvid_C : public UPotionWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PotionWidgetHyvid__PotionWidgetHyvid_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidgetHyvid_C, UberGraphFrame, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidgetHyvid_C, UseLastPotion, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidgetHyvid_C, UsePotion, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidgetHyvid_C, CannotUse, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidgetHyvid_C, Cork, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidgetHyvid_C, CorkDisabled, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidgetHyvid_C, Count, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidgetHyvid_C, HotkeyWidget, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidgetHyvid_C, MenuAnchor_1, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidgetHyvid_C, PotionDisabled, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidgetHyvid_C, ProgressBar_1, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidgetHyvid_C, TLImage_1, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidgetHyvid_C, TLImage_213, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidgetHyvid_C, TopImage, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidgetHyvid_C, ShowHotkey, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidgetHyvid_C, UnknownData_V5X4, 0x0789);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidgetHyvid_C, Cooldown_Start, 0x078C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPotionWidgetHyvid_C, Cooldown_Duration, 0x0790);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPotionWidgetHyvid_C, 0x0794);
		}

		// class AHealthPickup_C : public ABasePotionPickup_C
		TEST_METHOD(BlueprintGeneratedClass__HealthPickup__HealthPickup_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHealthPickup_C, TLProjectileMovement_1, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHealthPickup_C, 0x0248);
		}

		// class AMountCylinder_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__MountCylinder__MountCylinder_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMountCylinder_C, StaticMesh, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMountCylinder_C, DefaultSceneRoot, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMountCylinder_C, 0x0230);
		}

		// class AMagicLeapSharedWorldGameMode : public AGameMode
		TEST_METHOD(Class__MagicLeapSharedWorld__MagicLeapSharedWorldGameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameMode, SharedWorldData, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameMode, OnNewLocalDataFromClients, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameMode, PinSelectionConfidenceThreshold, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameMode, UnknownData_MBE6, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameMode, ChosenOne, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMagicLeapSharedWorldGameMode, 0x03D8);
		}

		// class AMagicLeapSharedWorldGameState : public AGameState
		TEST_METHOD(Class__MagicLeapSharedWorld__MagicLeapSharedWorldGameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameState, SharedWorldData, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameState, AlignmentTransforms, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameState, OnSharedWorldDataUpdated, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameState, OnAlignmentTransformsUpdated, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMagicLeapSharedWorldGameState, 0x02D0);
		}

		// class AMagicLeapSharedWorldPlayerController : public APlayerController
		TEST_METHOD(Class__MagicLeapSharedWorld__MagicLeapSharedWorldPlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldPlayerController, UnknownData_3K5D, 0x0570);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMagicLeapSharedWorldPlayerController, 0x0588);
		}

		// class UMovieSceneMediaPlayerPropertySection : public UMovieSceneSection
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaPlayerPropertySection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaPlayerPropertySection, MediaSource, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaPlayerPropertySection, bLoop, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaPlayerPropertySection, UnknownData_PZP8, 0x00F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaPlayerPropertySection, 0x00F8);
		}

		// class UMovieSceneMediaPlayerPropertyTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaPlayerPropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaPlayerPropertyTrack, UnknownData_CJIS, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaPlayerPropertyTrack, 0x00B0);
		}

		// class UMovieSceneMediaSection : public UMovieSceneSection
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaSource, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, bLooping, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, UnknownData_MEK7, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, StartFrameOffset, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaTexture, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaSoundComponent, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, bUseExternalMediaPlayer, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, UnknownData_9UNW, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, ExternalMediaPlayer, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaSection, 0x0118);
		}

		// class UMovieSceneMediaTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaTrack, UnknownData_HIJJ, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaTrack, MediaSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaTrack, 0x0090);
		}

		// class UClothingSimulationInteractorNv : public UClothingSimulationInteractor
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothingSimulationInteractorNv)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingSimulationInteractorNv, UnknownData_WG3U, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationInteractorNv, 0x0040);
		}

		// class UClothPhysicalMeshDataNv_Legacy : public UClothPhysicalMeshDataBase_Legacy
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothPhysicalMeshDataNv_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, MaxDistances, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, BackstopDistances, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, BackstopRadiuses, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, AnimDriveMultipliers, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothPhysicalMeshDataNv_Legacy, 0x0120);
		}

		// class UClothConfigNv : public UClothConfigCommon
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothConfigNv)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, ClothingWindMethod, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, UnknownData_7PSW, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, VerticalConstraint, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, HorizontalConstraint, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, BendConstraint, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, ShearConstraint, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SelfCollisionRadius, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SelfCollisionStiffness, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SelfCollisionCullScale, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, Damping, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, Friction, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, WindDragCoefficient, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, WindLiftCoefficient, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, LinearDrag, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AngularDrag, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, LinearInertiaScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AngularInertiaScale, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, CentrifugalInertiaScale, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SolverFrequency, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, StiffnessFrequency, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, GravityScale, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, GravityOverride, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, bUseGravityOverride, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, UnknownData_DV8F, 0x00E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, TetherStiffness, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, TetherLimit, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, CollisionThickness, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AnimDriveSpringStiffness, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AnimDriveDamperStiffness, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, WindMethod, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, UnknownData_NXRZ, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, VerticalConstraintConfig, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, HorizontalConstraintConfig, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, BendConstraintConfig, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, ShearConstraintConfig, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothConfigNv, 0x0140);
		}

		// class UClothingSimulationFactoryNv : public UClothingSimulationFactory
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothingSimulationFactoryNv)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationFactoryNv, 0x0028);
		}

		// class UOverlays : public UObject
		TEST_METHOD(Class__Overlay__Overlays)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlays, 0x0028);
		}

		// class UBasicOverlays : public UOverlays
		TEST_METHOD(Class__Overlay__BasicOverlays)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicOverlays, Overlays, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasicOverlays, 0x0038);
		}

		// class ULocalizedOverlays : public UOverlays
		TEST_METHOD(Class__Overlay__LocalizedOverlays)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizedOverlays, DefaultOverlays, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizedOverlays, LocaleToOverlaysMap, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalizedOverlays, 0x0080);
		}

		// class UOnScreenMessage_C : public UMessageWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__OnScreenMessage__OnScreenMessage_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnScreenMessage_C, Hide, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnScreenMessage_C, show, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnScreenMessage_C, MessageText, 0x06E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnScreenMessage_C, 0x06F0);
		}

		// class ULightHeader2TextStyle_C : public ULightHeader1TextStyle_C
		TEST_METHOD(BlueprintGeneratedClass__LightHeader2TextStyle__LightHeader2TextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightHeader2TextStyle_C, 0x00A8);
		}

		// class UDefaultComboBoxStyle_C : public UTLComboBoxStyle
		TEST_METHOD(BlueprintGeneratedClass__DefaultComboBoxStyle__DefaultComboBoxStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultComboBoxStyle_C, 0x0C30);
		}

		// class UGenericMaterialHighlight_BorderStyle_Subtle_C : public UGenericMaterialHighlight_BorderStyle_C
		TEST_METHOD(BlueprintGeneratedClass__GenericMaterialHighlight_BorderStyle_Subtle__GenericMaterialHighlight_BorderStyle_Subtle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericMaterialHighlight_BorderStyle_Subtle_C, 0x00F8);
		}

		// class ULightSubHeader2TextStyle_C : public ULightSubHeader1TextStyle_C
		TEST_METHOD(BlueprintGeneratedClass__LightSubHeader2TextStyle__LightSubHeader2TextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightSubHeader2TextStyle_C, 0x00A8);
		}

		// class UTabbedSkillsMenu_C : public USkillsTabbedMenuWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TabbedSkillsMenu__TabbedSkillsMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedSkillsMenu_C, UberGraphFrame, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedSkillsMenu_C, MenuButtonList, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedSkillsMenu_C, WidgetClass, 0x0738);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTabbedSkillsMenu_C, 0x0740);
		}

		// class UPlayerInfo_C : public UPlayerInfoWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PlayerInfo__PlayerInfo_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, UberGraphFrame, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, Intro, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, ArmorStatContainer, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, ArmorValue, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, ChangeDifficulty, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, ChangeDifficultyButton, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, CharacterLevel, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, CharacterNameHeader, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, CurrentLevel, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, DamageOverTime, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, DifficultyBadge, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, DifficultyText, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, DPSIcon, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, DPSStatContainer, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, DPSValue, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, ElementIcon, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, EmberWeaponImage, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, EmberWeaponText, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, EmberWeaponWrapper, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, EnergyIcon, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, EnergyMax, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, EnergyPerSecond, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, EnergyStatContainer, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, FazeerBling, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, Hardcore, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, HealthIcon, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, HealthStatContainer, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, PhysicalArmorStatContainer, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, PhysicalArmorValue, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, Stats, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, TLImage_1, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, TLImage_3, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, TLImage_5, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, TLImage_6, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, TLImage_154, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, TLImage_156, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, TLImage_157, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, TLImage_158, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, TLImage_222, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, TLTextBlock_1, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfo_C, ShowStats, 0x07C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerInfo_C, 0x07C9);
		}

		// class ULegendaryAffixCollectionEquippedWidget_C : public ULegendaryAffixCollectionEquippedWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__LegendaryAffixCollectionEquippedWidget__LegendaryAffixCollectionEquippedWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionEquippedWidget_C, UberGraphFrame, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionEquippedWidget_C, SlotList, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegendaryAffixCollectionEquippedWidget_C, NumAffixesUnlockedText, 0x0658);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegendaryAffixCollectionEquippedWidget_C, 0x0660);
		}

		// class UQuestLog_C : public UQuestLogWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__QuestLog__QuestLog_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLog_C, AdventureCategory, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLog_C, AdventureQuestList, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLog_C, Divider, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLog_C, QuestScrollBox, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLog_C, StoryCategory, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLog_C, StoryQuests, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLog_C, TLImage_161, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLog_C, TLImage_163, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLog_C, TLImage_164, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLog_C, TutorialCategory, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLog_C, TutorialQuestList, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestLog_C, 0x0698);
		}

		// class UBaseSpreadsheetLoaderBP_C : public USpreadsheetLoader
		TEST_METHOD(BlueprintGeneratedClass__BaseSpreadsheetLoaderBP__BaseSpreadsheetLoaderBP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseSpreadsheetLoaderBP_C, 0x0380);
		}

		// class ATLBotController_C : public ATLAIController
		TEST_METHOD(BlueprintGeneratedClass__TLBotController__TLBotController_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATLBotController_C, 0x0398);
		}

		// class UDifficultyWidget2_C : public UDifficultyWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DifficultyWidget2__DifficultyWidget2_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyWidget2_C, UberGraphFrame, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyWidget2_C, Selected, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyWidget2_C, Over, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyWidget2_C, Normal, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyWidget2_C, Background, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyWidget2_C, Darken, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyWidget2_C, DescriptionText, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyWidget2_C, DifficultyText, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyWidget2_C, Frame, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyWidget2_C, Highlight, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyWidget2_C, SelectedGlow, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyWidget2_C, ShieldNormal, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyWidget2_C, ShieldOn, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyWidget2_C, Shoulders, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyWidget2_C, Spacer, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyWidget2_C, TLImage_248, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyWidget2_C, TLImage_250, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyWidget2_C, VisibleShieldLevel, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyWidget2_C, bHasSelectedUI, 0x07F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDifficultyWidget2_C, 0x07F9);
		}

		// class UControlHelpScreen_Xbox_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ControlHelpScreen_Xbox__ControlHelpScreen_Xbox_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlHelpScreen_Xbox_C, TLImage_1, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlHelpScreen_Xbox_C, TLImage_247, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlHelpScreen_Xbox_C, TLImage_249, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlHelpScreen_Xbox_C, TLImage_250, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlHelpScreen_Xbox_C, TLImage_251, 0x0660);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlHelpScreen_Xbox_C, 0x0668);
		}

		// class UCraftingResourceHelpScreen_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CraftingResourceHelpScreen__CraftingResourceHelpScreen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingResourceHelpScreen_C, show, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingResourceHelpScreen_C, TLImage_1, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingResourceHelpScreen_C, TLRichTextBlock_Base, 0x0650);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingResourceHelpScreen_C, 0x0658);
		}

		// class ULogQuestWidget_C : public UQuestWidgetBase_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__LogQuestWidget__LogQuestWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogQuestWidget_C, UberGraphFrame, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogQuestWidget_C, PinnedAnim, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogQuestWidget_C, Focused, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogQuestWidget_C, Hide, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogQuestWidget_C, FlagButton, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogQuestWidget_C, Pinned, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogQuestWidget_C, QuestTitle, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogQuestWidget_C, SpokeImage, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogQuestWidget_C, TaskList, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogQuestWidget_C, togglePin, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogQuestWidget_C, TooltipMenuAnchor, 0x0720);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULogQuestWidget_C, 0x0728);
		}

		// class UFortPropIconWidget_C : public UFortPropIconWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__FortPropIconWidget__FortPropIconWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropIconWidget_C, ItemBGImage, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropIconWidget_C, ItemFrameHighlightable, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropIconWidget_C, ItemImage, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropIconWidget_C, MenuAnchor, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFortPropIconWidget_C, Quantity, 0x08E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFortPropIconWidget_C, 0x08E8);
		}

		// class UTabbedSubMenuButtonAttached_C : public UTabbedMenuButton
		TEST_METHOD(WidgetBlueprintGeneratedClass__TabbedSubMenuButtonAttached__TabbedSubMenuButtonAttached_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedSubMenuButtonAttached_C, UberGraphFrame, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedSubMenuButtonAttached_C, OnStateIocnPlump, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedSubMenuButtonAttached_C, Notification, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedSubMenuButtonAttached_C, AlertBox, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedSubMenuButtonAttached_C, Button, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedSubMenuButtonAttached_C, ButtonSelected, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedSubMenuButtonAttached_C, ButtonTextTextBlock, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedSubMenuButtonAttached_C, Icon, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedSubMenuButtonAttached_C, SelectedIcon, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTabbedSubMenuButtonAttached_C, TLImage_1, 0x0758);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTabbedSubMenuButtonAttached_C, 0x0760);
		}

		// class UControlHelpScreen_PS4_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ControlHelpScreen_PS4__ControlHelpScreen_PS4_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlHelpScreen_PS4_C, TLImage_1, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlHelpScreen_PS4_C, TLImage_2, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlHelpScreen_PS4_C, TLImage_234, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlHelpScreen_PS4_C, TLImage_247, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlHelpScreen_PS4_C, TLImage_249, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlHelpScreen_PS4_C, TLImage_250, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlHelpScreen_PS4_C, TLImage_251, 0x0670);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlHelpScreen_PS4_C, 0x0678);
		}

		// class UWeaponHelpScreen_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WeaponHelpScreen__WeaponHelpScreen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponHelpScreen_C, show, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponHelpScreen_C, TLImage_1, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponHelpScreen_C, TLRichTextBlock_Base, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponHelpScreen_C, WidgetSwitcher_1, 0x0658);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponHelpScreen_C, 0x0660);
		}

		// class UQuestCategory4_C : public UTLTextStyle
		TEST_METHOD(BlueprintGeneratedClass__QuestCategory4__QuestCategory4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestCategory4_C, 0x00A8);
		}

		// class UQuestCategory2_C : public UTLTextStyle
		TEST_METHOD(BlueprintGeneratedClass__QuestCategory2__QuestCategory2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestCategory2_C, 0x00A8);
		}

		// class UQuestWidget_C : public UQuestWidgetBase_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__QuestWidget__QuestWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestWidget_C, Failure, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestWidget_C, Completion, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestWidget_C, Hide, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestWidget_C, QuestIcon, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestWidget_C, QuestNameBlock, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestWidget_C, TaskList, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestWidget_C, TLImage_172, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestWidget_C, TooltipMenuAnchor, 0x0708);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestWidget_C, 0x0710);
		}

		// class UVirtualCursor_C : public UVirtualCursor
		TEST_METHOD(WidgetBlueprintGeneratedClass__VirtualCursor__VirtualCursor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualCursor_C, UberGraphFrame, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualCursor_C, rotatingLoop, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualCursor_C, TLImage_1, 0x0660);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualCursor_C, 0x0668);
		}

		// class USkill_GoblinDeath_C : public USkill_Death_C
		TEST_METHOD(BlueprintGeneratedClass__Skill_GoblinDeath__Skill_GoblinDeath_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_GoblinDeath_C, FearSkillSlot, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_GoblinDeath_C, 0x0541);
		}

		// class UMiniMapWidget_C : public UMiniMapWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MiniMapWidget__MiniMapWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, UberGraphFrame, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, Affixes, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, AreaAffix, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, AreaLevel, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, AreaName, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, Benefits, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, BenefitsText, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, ChallengeLevel, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, DamageScaling, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, Detriments, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, DetrimentsText, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, DifficultyLevel, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, DifficultyShieldEasy, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, DifficultyShieldHard, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, DifficultyShieldNormal, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, DifficultyShieldPainful, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, DifficultyShieldRidiculous, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, DifficultyText, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, DungeonDecoration, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, DungeonGroup, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, FortName, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, FortTitle, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, GearLuckAffix, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, HealthScaling, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, InvalidationBox_1, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, MapWidget_1, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, PhaseDungeonHeader, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, ScalingBoxDungeon, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, SpeedScaling, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, TLImage_1, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, TLImage_346, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, TLTextBlock_1, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, TLWidgetSwitcher_1, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMiniMapWidget_C, DifficultyText_1, 0x07F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMiniMapWidget_C, 0x0800);
		}

		// class ASFX_Elemental_ICE_C : public ATLEffect
		TEST_METHOD(BlueprintGeneratedClass__SFX_Elemental_ICE__SFX_Elemental_ICE_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASFX_Elemental_ICE_C, FMODAudio, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASFX_Elemental_ICE_C, DefaultSceneRoot, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASFX_Elemental_ICE_C, 0x0270);
		}

		// class UDungeonCardBackShared_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DungeonCardBackShared__DungeonCardBackShared_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCardBackShared_C, BossCardBackSwitcher, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCardBackShared_C, BossCardBackTLBorder, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonCardBackShared_C, CardBackTLBorder, 0x0650);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonCardBackShared_C, 0x0658);
		}

		// class UCombatInvulnerableNotify_C : public UFloatingTextWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CombatInvulnerableNotify__CombatInvulnerableNotify_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombatInvulnerableNotify_C, UberGraphFrame, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombatInvulnerableNotify_C, RiseAndFade, 0x0658);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCombatInvulnerableNotify_C, 0x0660);
		}

		// class Upetretriever_anim_charactercreate_bp_C : public UTLCharacterSelectAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__petretriever_anim_charactercreate_bp__petretriever_anim_charactercreate_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_25, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_24, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_23, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_22, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_21, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_20, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_19, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_18, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_17, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_16, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_15, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_14, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_13, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_12, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_11, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_10, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_9, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_8, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_7, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_6, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_5, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_4, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_3, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_2, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_14, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_StateResult_14, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_13, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_StateResult_13, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_12, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_StateResult_12, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_11, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_StateResult_11, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_10, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_StateResult_10, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_9, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_StateResult_9, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_8, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_StateResult_8, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_7, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_StateResult_7, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_6, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_StateResult_6, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_5, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_StateResult_5, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_4, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_StateResult_4, 0x0EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_3, 0x0EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_StateResult_3, 0x0F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_2, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_StateResult_2, 0x1010);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_StateResult, 0x10C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_StateMachine, 0x10F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_TwoWayBlend, 0x11A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_PoseSnapshot, 0x1268);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_Slot, 0x12F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetretriever_anim_charactercreate_bp_C, AnimGraphNode_Root, 0x1340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Upetretriever_anim_charactercreate_bp_C, 0x1370);
		}

		// class Upetalpaca_anim_charactercreate_bp_C : public UTLCharacterSelectAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__petalpaca_anim_charactercreate_bp__petalpaca_anim_charactercreate_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_25, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_24, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_23, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_22, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_21, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_20, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_19, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_18, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_17, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_16, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_15, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_14, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_13, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_12, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_11, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_10, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_9, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_8, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_7, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_6, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_5, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_4, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_3, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult_2, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_TransitionResult, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_14, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_StateResult_14, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_13, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_StateResult_13, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_12, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_StateResult_12, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_11, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_StateResult_11, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_10, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_StateResult_10, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_9, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_StateResult_9, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_8, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_StateResult_8, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_7, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_StateResult_7, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_6, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_StateResult_6, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_5, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_StateResult_5, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_4, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_StateResult_4, 0x0EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_3, 0x0EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_StateResult_3, 0x0F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer_2, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_StateResult_2, 0x1010);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_SequencePlayer, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_StateResult, 0x10C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_StateMachine, 0x10F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_TwoWayBlend, 0x11A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_PoseSnapshot, 0x1268);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_Slot, 0x12F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upetalpaca_anim_charactercreate_bp_C, AnimGraphNode_Root, 0x1340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Upetalpaca_anim_charactercreate_bp_C, 0x1370);
		}

		// class ABaseStaticObject_C : public ALevelPropActor
		TEST_METHOD(BlueprintGeneratedClass__BaseStaticObject__BaseStaticObject_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseStaticObject_C, UberGraphFrame, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseStaticObject_C, BlobShadow, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseStaticObject_C, StaticMesh, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseStaticObject_C, DefaultSceneRoot, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseStaticObject_C, 0x0268);
		}

		// class UStatusEffect_DisableCollision_Charge_Looping_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_DisableCollision_Charge_looping__StatusEffect_DisableCollision_Charge_Looping_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_DisableCollision_Charge_Looping_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_DisableCollision_Charge_Looping_C, 0x0288);
		}

		// class ABruteCharge_Hit_SFX_C : public ATLEffect
		TEST_METHOD(BlueprintGeneratedClass__BruteCharge_Hit_SFX__BruteCharge_Hit_SFX_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABruteCharge_Hit_SFX_C, FMODAudio, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABruteCharge_Hit_SFX_C, DefaultSceneRoot, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABruteCharge_Hit_SFX_C, 0x0270);
		}

		// class UDungeonPortalLocationComp_C : public USceneComponent
		TEST_METHOD(BlueprintGeneratedClass__DungeonPortalLocationComp__DungeonPortalLocationComp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDungeonPortalLocationComp_C, UnknownData_J0JR, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDungeonPortalLocationComp_C, 0x0200);
		}

		// class UMapMarker_Quest_C : public UMapMarkerComponent
		TEST_METHOD(BlueprintGeneratedClass__MapMarker_Quest__MapMarker_Quest_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapMarker_Quest_C, 0x0100);
		}

		// class UCraftingPanel_C : public UCraftingPanel
		TEST_METHOD(WidgetBlueprintGeneratedClass__CraftingPanel__CraftingPanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanel_C, UberGraphFrame, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanel_C, show, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanel_C, CanvasPanel_1, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanel_C, CraftedObjectDescription, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanel_C, CraftedObjectName, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanel_C, CurrencyHeader, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanel_C, GamepadButtonLegend_118, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanel_C, MenuParent, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanel_C, NavigationHeader, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanel_C, PreviewAnchorWidget, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanel_C, TLImage_1, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanel_C, TLImage_2, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftingPanel_C, TLImage_3, 0x07F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftingPanel_C, 0x0800);
		}

		// class Agob_prop_rock_03_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__gob_prop_rock_03_bp__gob_prop_rock_03_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_rock_03_bp_C, Box, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_prop_rock_03_bp_C, 0x0270);
		}

		// class USkill_Spawn_Emerge_C : public USkill_Spawn_C
		TEST_METHOD(BlueprintGeneratedClass__Skill_Spawn_Emerge__Skill_Spawn_Emerge_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Spawn_Emerge_C, 0x0540);
		}

		// class Uss_f_startingitems_charactercreate_C : public Ufor_StartingItems_C
		TEST_METHOD(BlueprintGeneratedClass__ss_f_startingitems_charactercreate__ss_f_startingitems_charactercreate_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Uss_f_startingitems_charactercreate_C, 0x0078);
		}

		// class Adm_BaseHead_C : public ABaseHead_C
		TEST_METHOD(BlueprintGeneratedClass__dm_BaseHead__dm_BaseHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Adm_BaseHead_C, 0x0428);
		}

		// class Acc_m_t0a_hair_bp_C : public Acc_BaseHair_C
		TEST_METHOD(BlueprintGeneratedClass__cc_m_t0a_hair_bp__cc_m_t0a_hair_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Acc_m_t0a_hair_bp_C, 0x0428);
		}

		// class ASkillShape_CursedCannon_C : public ASkillShapeCone_C
		TEST_METHOD(BlueprintGeneratedClass__SkillShape_CursedCannon__SkillShape_CursedCannon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_CursedCannon_C, Cone1, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkillShape_CursedCannon_C, 0x0298);
		}

		// class USharpshooterTrinketSpinner4_C : public UHUDElementNoTick
		TEST_METHOD(WidgetBlueprintGeneratedClass__SharpshooterTrinketSpinner4__SharpshooterTrinketSpinner4_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterTrinketSpinner4_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterTrinketSpinner4_C, Spin, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterTrinketSpinner4_C, TLImage_1, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USharpshooterTrinketSpinner4_C, 0x0278);
		}

		// class UCustomizationCarouselWidget_C : public UCustomizationItemCarouselWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CustomizationCarouselWidget__CustomizationCarouselWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomizationCarouselWidget_C, UberGraphFrame, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomizationCarouselWidget_C, CountTextBlock, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomizationCarouselWidget_C, HeaderTextBlock, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomizationCarouselWidget_C, Label, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomizationCarouselWidget_C, LeftButton, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomizationCarouselWidget_C, RightButton, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomizationCarouselWidget_C, HeaderText, 0x06A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCustomizationCarouselWidget_C, 0x06B8);
		}

		// class USkillSelectIcon_CharacterCreate_C : public USkillInTabWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SkillSelectIcon_CharacterCreate__SkillSelectIcon_CharacterCreate_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_CharacterCreate_C, UberGraphFrame, 0x0E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_CharacterCreate_C, Over, 0x0E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_CharacterCreate_C, MenuAnchor_1, 0x0E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_CharacterCreate_C, SelectedBorder, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_CharacterCreate_C, SkillIcon, 0x0EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillSelectIcon_CharacterCreate_C, TLImage_4, 0x0EB0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillSelectIcon_CharacterCreate_C, 0x0EB8);
		}

		// class UGenderButton_C : public UGenderButtonWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__GenderButton__GenderButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenderButton_C, UberGraphFrame, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenderButton_C, Button, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenderButton_C, Text, 0x0670);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenderButton_C, 0x0678);
		}

		// class URailmasterResourceBar_C : public URailmasterResourceBar
		TEST_METHOD(WidgetBlueprintGeneratedClass__RailmasterResourceBar__RailmasterResourceBar_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URailmasterResourceBar_C, UberGraphFrame, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URailmasterResourceBar_C, StopGlow, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URailmasterResourceBar_C, ReadyGlow, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URailmasterResourceBar_C, BackgroundImage, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URailmasterResourceBar_C, glow, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URailmasterResourceBar_C, Pip1, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URailmasterResourceBar_C, Pip2, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URailmasterResourceBar_C, Pip3, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URailmasterResourceBar_C, Pip4, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URailmasterResourceBar_C, Pip5, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URailmasterResourceBar_C, TooltipMenuAnchor, 0x06F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URailmasterResourceBar_C, 0x0700);
		}

		// class UStatusEffect_ShastaHazardDamage_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_ShastaHazardDamage__StatusEffect_ShastaHazardDamage_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_ShastaHazardDamage_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_ShastaHazardDamage_C, 0x0288);
		}

		// class UStatusEffect_ChargeBarLock_DMLight_C : public UStatusEffect_ChargeBarLock_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_ChargeBarLock_DMLight__StatusEffect_ChargeBarLock_DMLight_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_ChargeBarLock_DMLight_C, UberGraphFrame, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_ChargeBarLock_DMLight_C, 0x0298);
		}

		// class UStatusEffect_Legendary_ManaOverload_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Legendary_ManaOverload__StatusEffect_Legendary_ManaOverload_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Legendary_ManaOverload_C, 0x0280);
		}

		// class UStatusEffect_ChargeBarLock_DMDark_C : public UStatusEffect_ChargeBarLock_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_ChargeBarLock_DMDark__StatusEffect_ChargeBarLock_DMDark_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_ChargeBarLock_DMDark_C, UberGraphFrame, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_ChargeBarLock_DMDark_C, 0x0298);
		}

		// class UStatusEffect_ChargeBarLock_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_ChargeBarLock__StatusEffect_ChargeBarLock_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_ChargeBarLock_C, ChargeBarName, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_ChargeBarLock_C, 0x0290);
		}

		// class USkill_PetMeleeAttack_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_PetMeleeAttack__Skill_PetMeleeAttack_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_PetMeleeAttack_C, 0x0540);
		}

		// class UStatusEffect_Shasta_Taunt_C : public UStatusEffectBase_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Shasta_Taunt__StatusEffect_Shasta_Taunt_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Shasta_Taunt_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Shasta_Taunt_C, vulnamount, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Shasta_Taunt_C, 0x028C);
		}

		// class Agob_prop_chest_02_bp_C : public ABaseTreasureChest_C
		TEST_METHOD(BlueprintGeneratedClass__gob_prop_chest_02_bp__gob_prop_chest_02_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_prop_chest_02_bp_C, NavigationBlocker, 0x04E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_prop_chest_02_bp_C, 0x04E8);
		}

		// class ASFX_PLAYER_Elemental_FIRE_C : public ATLEffect
		TEST_METHOD(BlueprintGeneratedClass__SFX_PLAYER_Elemental_FIRE__SFX_PLAYER_Elemental_FIRE_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASFX_PLAYER_Elemental_FIRE_C, FMODAudio, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASFX_PLAYER_Elemental_FIRE_C, DefaultSceneRoot, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASFX_PLAYER_Elemental_FIRE_C, 0x0270);
		}

		// class UATM_Pet_LowHealth_C : public UActiveTraitMonitorComponent
		TEST_METHOD(BlueprintGeneratedClass__ATM_Pet_LowHealth__ATM_Pet_LowHealth_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UATM_Pet_LowHealth_C, UberGraphFrame, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UATM_Pet_LowHealth_C, 0x00D8);
		}

		// class UStatusEffect_Forged_VentBase_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Forged_VentBase__StatusEffect_Forged_VentBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Forged_VentBase_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Forged_VentBase_C, VentDamageMultiplier, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Forged_VentBase_C, UnknownData_81PA, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Forged_VentBase_C, Hazard, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Forged_VentBase_C, bAttachHazard, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Forged_VentBase_C, 0x0299);
		}

		// class USkill_Forged_VentFurnaceBlast_C : public USkill_ForgedBase_C
		TEST_METHOD(BlueprintGeneratedClass__Skill_Forged_VentFurnaceBlast__Skill_Forged_VentFurnaceBlast_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Forged_VentFurnaceBlast_C, UnknownData_O049, 0x0542);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Forged_VentFurnaceBlast_C, BurnDuration, 0x0544);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Forged_VentFurnaceBlast_C, 0x0548);
		}

		// class USkill_Forged_PoisonDart_C : public USkill_ForgedBase_C
		TEST_METHOD(BlueprintGeneratedClass__Skill_Forged_PoisonDart__Skill_Forged_PoisonDart_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Forged_PoisonDart_C, UnknownData_KWVQ, 0x0542);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Forged_PoisonDart_C, HazardDuration, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_Forged_PoisonDart_C, HazardDamageMultiplier, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Forged_PoisonDart_C, 0x054C);
		}

		// class UStatusEffectBase_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffectBase__StatusEffectBase_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffectBase_C, 0x0280);
		}

		// class UStatusEffect_SonicPulse_Buff_C : public UStatusEffectBase_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_SonicPulse_Buff__StatusEffect_SonicPulse_Buff_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_SonicPulse_Buff_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_SonicPulse_Buff_C, vulnamount, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_SonicPulse_Buff_C, 0x028C);
		}

		// class UStatusEffect_DamageReductionOnMelee_C : public UStatusEffectBase_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_DamageReductionOnMelee__StatusEffect_DamageReductionOnMelee_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_DamageReductionOnMelee_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_DamageReductionOnMelee_C, 0x0288);
		}

		// class UStatusEffect_WarpBack_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_WarpBack__StatusEffect_WarpBack_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_WarpBack_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_WarpBack_C, 0x0288);
		}

		// class Agobgeneric_gunner_b_C : public Agobgeneric_stabby_b_C
		TEST_METHOD(BlueprintGeneratedClass__gobgeneric_gunner_b__gobgeneric_gunner_b_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agobgeneric_gunner_b_C, 0x0800);
		}

		// class UTargetInfoWidget_Boss_C : public UTargetInfoWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TargetInfoWidget_Boss__TargetInfoWidget_Boss_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Boss_C, UberGraphFrame, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Boss_C, Affixes, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Boss_C, AreaBossGroup, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Boss_C, Bar_Background_Elite, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Boss_C, Bar_Cap_Elite, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Boss_C, BossTargetElement, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Boss_C, Description, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Boss_C, EliteFrame, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Boss_C, HealthBar, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Boss_C, HealthBarOverlay, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Boss_C, LevelTextBox, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Boss_C, TargetNameElite, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Boss_C, TLWidgetSwitcher_1, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTargetInfoWidget_Boss_C, ZoneBossGroup, 0x0730);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTargetInfoWidget_Boss_C, 0x0738);
		}

		// class Atin_drop_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__tin_drop_01_bp__tin_drop_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Atin_drop_01_bp_C, 0x0268);
		}

		// class Ass_f_t0a_boots_bp_C : public Ass_BaseBoots_C
		TEST_METHOD(BlueprintGeneratedClass__ss_f_t0a_boots_bp__ss_f_t0a_boots_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ass_f_t0a_boots_bp_C, 0x0428);
		}

		// class Agobgeneric_stabby_yapper_b_C : public Agobgeneric_stabby_b_C
		TEST_METHOD(BlueprintGeneratedClass__gobgeneric_stabby_yapper_b__gobgeneric_stabby_yapper_b_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Agobgeneric_stabby_yapper_b_C, TLParticleSystem1, 0x0800);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agobgeneric_stabby_yapper_b_C, 0x0808);
		}

		// class USkill_Flourish_Left_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_Flourish_Left__Skill_Flourish_Left_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Flourish_Left_C, 0x0540);
		}

		// class Ugobbrute_anim_bp_C : public UTLAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__gobbrute_anim_bp__gobbrute_anim_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugobbrute_anim_bp_C, UberGraphFrame, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugobbrute_anim_bp_C, AnimGraphNode_Root, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugobbrute_anim_bp_C, AnimGraphNode_BlendSpacePlayer, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugobbrute_anim_bp_C, TLAnimGraphNode_Slot, 0x0730);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ugobbrute_anim_bp_C, 0x0780);
		}

		// class Aio_prop_tent_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_tent_02_bp__io_prop_tent_02_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_tent_02_bp_C, Box, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_tent_02_bp_C, 0x0270);
		}

		// class Aio_prop_shop_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_shop_02_bp__io_prop_shop_02_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_shop_02_bp_C, FMODAudio, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_shop_02_bp_C, 0x0270);
		}

		// class AMissile_Shock_C : public AMissileBase_C
		TEST_METHOD(BlueprintGeneratedClass__Missile_Shock__Missile_Shock_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMissile_Shock_C, ParticleSystem, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMissile_Shock_C, 0x0688);
		}

		// class ASkillShape_BloodDrinker_SpinningBlade_C : public ASkillShapeSphere_C
		TEST_METHOD(BlueprintGeneratedClass__SkillShape_BloodDrinker_SpinningBlade__SkillShape_BloodDrinker_SpinningBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_SpinningBlade_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_SpinningBlade_C, FMODAudio, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_SpinningBlade_C, LifetimeEvents, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_SpinningBlade_C, Blood_FX_Censored, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_SpinningBlade_C, Blood_FX, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_SpinningBlade_C, Timeline_1_Opacity_418A309E486874565EE2568CDE5902D5, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_SpinningBlade_C, Timeline_1__Direction_418A309E486874565EE2568CDE5902D5, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_SpinningBlade_C, UnknownData_WHJE, 0x02BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_SpinningBlade_C, Timeline_2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_SpinningBlade_C, Timeline_0_Opacity_C797D083481D68D0AAF5D1920BB75826, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_SpinningBlade_C, Timeline_0__Direction_C797D083481D68D0AAF5D1920BB75826, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_SpinningBlade_C, UnknownData_NRWB, 0x02CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkillShape_BloodDrinker_SpinningBlade_C, Timeline_1, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkillShape_BloodDrinker_SpinningBlade_C, 0x02D8);
		}

		// class UCustomMeshComponent : public UMeshComponent
		TEST_METHOD(Class__CustomMeshComponent__CustomMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomMeshComponent, UnknownData_FKGE, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomMeshComponent, UnknownData_YV4F, 0x0470);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCustomMeshComponent, 0x0480);
		}

		// class UOodleTrainerCommandlet : public UCommandlet
		TEST_METHOD(Class__OodleHandlerComponent__OodleTrainerCommandlet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOodleTrainerCommandlet, 0x0080);
		}

		// class ULayersBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ActorLayerUtilities__LayersBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULayersBlueprintLibrary, 0x0028);
		}

		// class UWebsocketClient : public UObject
		TEST_METHOD(Class__Websocket__WebsocketClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWebsocketClient, UnknownData_O1CC, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWebsocketClient, OnData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWebsocketClient, UnknownData_T7EK, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebsocketClient, 0x0098);
		}

		// class UGamepadButtonLegend_C : public UGamepadButtonLegend
		TEST_METHOD(WidgetBlueprintGeneratedClass__GamepadButtonLegend__GamepadButtonLegend_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamepadButtonLegend_C, ActionsList, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGamepadButtonLegend_C, 0x0650);
		}

		// class UPetDetailTooltip_C : public UPetDetailsWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PetDetailTooltip__PetDetailTooltip_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailTooltip_C, NewAnimation_2, 0x1250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailTooltip_C, Divider, 0x1258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailTooltip_C, FiligreeLeft, 0x1260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailTooltip_C, HeaderText, 0x1268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailTooltip_C, ItemRarity, 0x1270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailTooltip_C, ItemType, 0x1278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailTooltip_C, SkillDescriptionList, 0x1280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailTooltip_C, TLImage_3, 0x1288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDetailTooltip_C, TLTextBlock_1, 0x1290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPetDetailTooltip_C, 0x1298);
		}

		// class UCurrencyWidget_Small_C : public UCurrencyWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CurrencyWidget_Small__CurrencyWidget_Small_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget_Small_C, Amount, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget_Small_C, CurrencyIcon, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget_Small_C, FixedTextBlock, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyWidget_Small_C, MenuAnchor_185, 0x0710);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurrencyWidget_Small_C, 0x0718);
		}

		// class ULightHeader4TextStyle_C : public ULightHeader1TextStyle_C
		TEST_METHOD(BlueprintGeneratedClass__LightHeader4TextStyle__LightHeader4TextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightHeader4TextStyle_C, 0x00A8);
		}

		// class UDivider_C : public UTLUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Divider__Divider_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDivider_C, Filigree, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDivider_C, 0x0648);
		}

		// class UQuestTooltip_C : public UQuestDetailsWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__QuestTooltip__QuestTooltip_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestTooltip_C, Left, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestTooltip_C, Prefix, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestTooltip_C, QuestNameBlock, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestTooltip_C, RewardList, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestTooltip_C, Rewards, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestTooltip_C, Right, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestTooltip_C, SpokeImage, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestTooltip_C, TaskList, 0x0708);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestTooltip_C, 0x0710);
		}

		// class UPetStoredMenu_C : public UPetStoredMenuWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PetStoredMenu__PetStoredMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredMenu_C, UberGraphFrame, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredMenu_C, Intro, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredMenu_C, CanvasForTabs, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredMenu_C, GamepadButtonLegend, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetStoredMenu_C, NavigationHeader, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPetStoredMenu_C, 0x0768);
		}

		// class UPetDisplayMenu_C : public UPetDisplayMenuWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PetDisplayMenu__PetDisplayMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDisplayMenu_C, UberGraphFrame, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDisplayMenu_C, Intro, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDisplayMenu_C, CanvasForTabs, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDisplayMenu_C, GamepadButtonLegend, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPetDisplayMenu_C, NavigationHeader, 0x0778);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPetDisplayMenu_C, 0x0780);
		}

		// class UStatusEffect_GoldSacrificeProp_2_C : public UStatusEffect_LuckTree_Base_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_GoldSacrificeProp_3__StatusEffect_GoldSacrificeProp_2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_GoldSacrificeProp_2_C, 0x0280);
		}

		// class UStatusEffect_GoldSacrificeProp_4_C : public UStatusEffect_LuckTree_Base_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_GoldSacrificeProp_5__StatusEffect_GoldSacrificeProp_4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_GoldSacrificeProp_4_C, 0x0280);
		}

		// class UStatusEffect_HyvidSacrificeProp_2_C : public UStatusEffect_LuckTree_Base_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_HyvidSacrificeProp_3__StatusEffect_HyvidSacrificeProp_2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_HyvidSacrificeProp_2_C, 0x0280);
		}

		// class UStatusEffect_HyvidSacrificeProp_5_C : public UStatusEffect_LuckTree_Base_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_HyvidSacrificeProp_6__StatusEffect_HyvidSacrificeProp_5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_HyvidSacrificeProp_5_C, 0x0280);
		}

		// class UStatusEffect_LuckTree_2_C : public UStatusEffect_LuckTree_Base_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_LuckTree_3__StatusEffect_LuckTree_2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_LuckTree_2_C, 0x0280);
		}

		// class UStatusEffect_LuckTree_3_C : public UStatusEffect_LuckTree_Base_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_LuckTree_4__StatusEffect_LuckTree_3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_LuckTree_3_C, 0x0280);
		}

		// class UStatusEffect_LuckTree_4_C : public UStatusEffect_LuckTree_Base_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_LuckTree_5__StatusEffect_LuckTree_4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_LuckTree_4_C, 0x0280);
		}

		// class UMapWidget_Mini_C : public UMapWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MapWidget_Mini__MapWidget_Mini_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWidget_Mini_C, show, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWidget_Mini_C, MapImage, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWidget_Mini_C, MapLensOverlay, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWidget_Mini_C, MapMarkerList, 0x0798);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapWidget_Mini_C, 0x07A0);
		}

		// class USpeechBubble2TextStyle_C : public ULightHeader1TextStyle_C
		TEST_METHOD(BlueprintGeneratedClass__SpeechBubble2TextStyle__SpeechBubble2TextStyle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpeechBubble2TextStyle_C, 0x00A8);
		}

		// class Ugobgeneric_gunner_anim_bp_C : public UTLAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__gobgeneric_gunner_anim_bp__gobgeneric_gunner_anim_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugobgeneric_gunner_anim_bp_C, UberGraphFrame, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugobgeneric_gunner_anim_bp_C, AnimGraphNode_Root, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugobgeneric_gunner_anim_bp_C, AnimGraphNode_BlendSpacePlayer, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugobgeneric_gunner_anim_bp_C, TLAnimGraphNode_Slot, 0x0730);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ugobgeneric_gunner_anim_bp_C, 0x0780);
		}

		// class UGamepadAButton_C : public UGamepadInteractButtonUIWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__GamepadAButton__GamepadAButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamepadAButton_C, Hide, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamepadAButton_C, PlumpReveal, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamepadAButton_C, HotkeyWidget, 0x0650);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGamepadAButton_C, 0x0658);
		}

		// class UChatMessageWidget_C : public UChatMessageWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ChatMessageWidget__ChatMessageWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatMessageWidget_C, UberGraphFrame, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatMessageWidget_C, ButtonWrapper, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatMessageWidget_C, MessageTextBlock, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatMessageWidget_C, SocialMenuAnchor, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChatMessageWidget_C, 0x02E0);
		}

		// class UFrameNotification_Style_C : public UTLBorderStyle
		TEST_METHOD(BlueprintGeneratedClass__FrameNotification_Style__FrameNotification_Style_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrameNotification_Style_C, 0x00F8);
		}

		// class USharpshooterTrinketSpinner_C : public UHUDElementNoTick
		TEST_METHOD(WidgetBlueprintGeneratedClass__SharpshooterTrinketSpinner__SharpshooterTrinketSpinner_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterTrinketSpinner_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterTrinketSpinner_C, Spin, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpshooterTrinketSpinner_C, TLImage_1, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USharpshooterTrinketSpinner_C, 0x0278);
		}

		// class UStatusEffect_Charged_DMLight_C : public UStatusEffect_Charged_C
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Charged_DMLight__StatusEffect_Charged_DMLight_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Charged_DMLight_C, UberGraphFrame, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Charged_DMLight_C, 0x02A8);
		}

		// class UStatusEffect_Boss_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_Boss__StatusEffect_Boss_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffect_Boss_C, UberGraphFrame, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_Boss_C, 0x0288);
		}

		// class Uw_bow_2h_branch_anim_bp_C : public UTLAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__w_bow_2h_branch_anim_bp__w_bow_2h_branch_anim_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Uw_bow_2h_branch_anim_bp_C, UberGraphFrame, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uw_bow_2h_branch_anim_bp_C, AnimGraphNode_Root, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uw_bow_2h_branch_anim_bp_C, AnimGraphNode_Slot, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uw_bow_2h_branch_anim_bp_C, AnimGraphNode_BlendSpacePlayer, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Uw_bow_2h_branch_anim_bp_C, 0x0778);
		}

		// class Aio_blacksmithstall_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_blacksmithstall_01_bp__io_blacksmithstall_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_blacksmithstall_01_bp_C, 0x0268);
		}

		// class Aio_prop_boat_02b_bp_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__io_prop_boat_02b_bp__io_prop_boat_02b_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_boat_02b_bp_C, FMODAudio1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_boat_02b_bp_C, FMODAudio, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_boat_02b_bp_C, SkeletalMesh, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aio_prop_boat_02b_bp_C, DefaultSceneRoot, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_boat_02b_bp_C, 0x0240);
		}

		// class Agob_triggersphere_quest_introthreshold_bp_C : public ATriggerSphereQuest_C
		TEST_METHOD(BlueprintGeneratedClass__gob_triggersphere_quest_introthreshold_bp__gob_triggersphere_quest_introthreshold_bp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Agob_triggersphere_quest_introthreshold_bp_C, UberGraphFrame, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agob_triggersphere_quest_introthreshold_bp_C, 0x0240);
		}

		// class USkill_Pet_Teleport_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_Pet_Teleport__Skill_Pet_Teleport_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_Pet_Teleport_C, 0x0540);
		}

		// class Aio_prop_ruggeneralstore_01_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_ruggeneralstore_01_bp__io_prop_ruggeneralstore_01_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_ruggeneralstore_01_bp_C, 0x0268);
		}

		// class Aio_prop_scrollbarrel_02_bp_C : public ABaseStaticObject_C
		TEST_METHOD(BlueprintGeneratedClass__io_prop_scrollbarrel_02_bp__io_prop_scrollbarrel_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aio_prop_scrollbarrel_02_bp_C, 0x0268);
		}

		// class Anpcimperialguard_04_bp_C : public Anpcimperialguard_01_bp_C
		TEST_METHOD(BlueprintGeneratedClass__npcimperialguard_04_bp__npcimperialguard_04_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Anpcimperialguard_04_bp_C, 0x07F4);
		}

		// class Anpcimperialguard_02_bp_C : public Anpcimperialguard_01_bp_C
		TEST_METHOD(BlueprintGeneratedClass__npcimperialguard_02_bp__npcimperialguard_02_bp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Anpcimperialguard_02_bp_C, 0x07F4);
		}

		// class USkill_BloodDrinker_SpinningBlade_C : public USkill
		TEST_METHOD(BlueprintGeneratedClass__Skill_BloodDrinker_SpinningBlade__Skill_BloodDrinker_SpinningBlade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_BloodDrinker_SpinningBlade_C, BleedDuration, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_BloodDrinker_SpinningBlade_C, CheckLegendary, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_BloodDrinker_SpinningBlade_C, UnknownData_8Y1W, 0x0545);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkill_BloodDrinker_SpinningBlade_C, BleedDamage, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkill_BloodDrinker_SpinningBlade_C, 0x054C);
		}

		// class UImgMediaSettings : public UObject
		TEST_METHOD(Class__ImgMediaFactory__ImgMediaSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, DefaultFrameRate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheBehindPercentage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheSizeGB, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheThreads, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheThreadStackSizeKB, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, GlobalCacheSizeGB, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UseGlobalCache, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UnknownData_H6JK, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, ExrDecoderThreads, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UnknownData_WWT3, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, DefaultProxy, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UseDefaultProxy, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UnknownData_2QOF, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImgMediaSettings, 0x0068);
		}

		// class UCursor_MoveCamera_C : public UTLCustomCursor
		TEST_METHOD(WidgetBlueprintGeneratedClass__Cursor_MoveCamera__Cursor_MoveCamera_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCursor_MoveCamera_C, CursorImage, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCursor_MoveCamera_C, 0x0270);
		}

		// class UDmgTypeBP_Environmental_C : public UDamageType
		TEST_METHOD(BlueprintGeneratedClass__DmgTypeBP_Environmental__DmgTypeBP_Environmental_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDmgTypeBP_Environmental_C, 0x0040);
		}

		// class UDifficultyStatusEffectBase_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__DifficultyStatusEffectBase__DifficultyStatusEffectBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyStatusEffectBase_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDifficultyStatusEffectBase_C, DifficultyRow, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDifficultyStatusEffectBase_C, 0x0298);
		}

		// class UPlayerClassesBankSet_C : public UFMODBankSet
		TEST_METHOD(BlueprintGeneratedClass__PlayerClassesBankSet__PlayerClassesBankSet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerClassesBankSet_C, 0x0068);
		}

		// class UVO_BankSet_C : public UFMODBankSet
		TEST_METHOD(BlueprintGeneratedClass__VO_BankSet__VO_BankSet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVO_BankSet_C, 0x0068);
		}

		// class UStatusEffect_RapidFireBuff_C : public UStatusEffect
		TEST_METHOD(BlueprintGeneratedClass__StatusEffect_RapidFireBuff__StatusEffect_RapidFireBuff_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffect_RapidFireBuff_C, 0x0280);
		}

		// struct FFMODEventInstance
		TEST_METHOD(ScriptStruct__FMODStudio__FMODEventInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFMODEventInstance, UnknownData_V12R, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFMODEventInstance, 0x0004);
		}

		// struct FFMODAssetReference
		TEST_METHOD(ScriptStruct__FMODStudio__FMODAssetReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFMODAssetReference, AssetGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFMODAssetReference, AssetReference, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFMODAssetReference, 0x0018);
		}

		// struct FFMODBusReference : public FFMODAssetReference
		TEST_METHOD(ScriptStruct__FMODStudio__FMODBusReference)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFMODBusReference, 0x0018);
		}

		// struct FFMODLocalizedEventAudioTableEntry
		TEST_METHOD(ScriptStruct__FMODStudio__FMODLocalizedEventAudioTableEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFMODLocalizedEventAudioTableEntry, AudioTableEntry, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFMODLocalizedEventAudioTableEntry, 0x0010);
		}

		// struct FAudioImportanceBucketParameters
		TEST_METHOD(ScriptStruct__FMODStudio__AudioImportanceBucketParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioImportanceBucketParameters, MaxCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioImportanceBucketParameters, DebugDisplayColor, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioImportanceBucketParameters, VolumeDecibels, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioImportanceBucketParameters, PeakingFilterGainDecibels, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioImportanceBucketParameters, PeakingFilterFrequencyHz, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioImportanceBucketParameters, PeakingFilterQ, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioImportanceBucketParameters, HighShelfFilterGainDecibels, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioImportanceBucketParameters, HighShelfFilterFrequencyHz, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioImportanceBucketParameters, 0x0020);
		}

		// struct FCustomPoolSizes
		TEST_METHOD(ScriptStruct__FMODStudio__CustomPoolSizes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomPoolSizes, Desktop, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomPoolSizes, Mobile, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomPoolSizes, PS4, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomPoolSizes, SWITCH, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomPoolSizes, XboxOne, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomPoolSizes, 0x0014);
		}

		// struct FFMODSnapshotReference : public FFMODAssetReference
		TEST_METHOD(ScriptStruct__FMODStudio__FMODSnapshotReference)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFMODSnapshotReference, 0x0018);
		}

		// struct FFMODVCAReference : public FFMODAssetReference
		TEST_METHOD(ScriptStruct__FMODStudio__FMODVCAReference)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFMODVCAReference, 0x0018);
		}

		// struct FLocalizedAudioTableEntryOption
		TEST_METHOD(ScriptStruct__FMODStudio__LocalizedAudioTableEntryOption)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedAudioTableEntryOption, AudioTableEntry, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedAudioTableEntryOption, LengthSeconds, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedAudioTableEntryOption, bShouldStream, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedAudioTableEntryOption, UnknownData_D3I5, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizedAudioTableEntryOption, 0x0018);
		}

		// struct FLocalizedAudioTableEntry
		TEST_METHOD(ScriptStruct__FMODStudio__LocalizedAudioTableEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedAudioTableEntry, AudioTableEntryOptions, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizedAudioTableEntry, 0x0010);
		}

		// struct FLocalizedAudioTable
		TEST_METHOD(ScriptStruct__FMODStudio__LocalizedAudioTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedAudioTable, AudioTableEntries, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizedAudioTable, 0x0050);
		}

		// struct FFMODEventReference : public FFMODAssetReference
		TEST_METHOD(ScriptStruct__FMODStudio__FMODEventReference)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFMODEventReference, 0x0018);
		}

		// struct FTLFMODAudioSectionTemplateData
		TEST_METHOD(ScriptStruct__FMODStudio__TLFMODAudioSectionTemplateData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLFMODAudioSectionTemplateData, Event, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLFMODAudioSectionTemplateData, AudioStartOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLFMODAudioSectionTemplateData, UnknownData_LQ8K, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLFMODAudioSectionTemplateData, SectionStartTimeSeconds, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLFMODAudioSectionTemplateData, AudioPitchMultiplierCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLFMODAudioSectionTemplateData, AudioVolumeCurve, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLFMODAudioSectionTemplateData, RowIndex, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLFMODAudioSectionTemplateData, bStopSoundWhenSequenceStops, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLFMODAudioSectionTemplateData, UnknownData_0UTM, 0x016D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTLFMODAudioSectionTemplateData, 0x0170);
		}

		// struct FTLFMODAudioSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__FMODStudio__TLFMODAudioSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLFMODAudioSectionTemplate, AudioData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTLFMODAudioSectionTemplate, 0x0190);
		}

		// struct FFMODBankReference : public FFMODAssetReference
		TEST_METHOD(ScriptStruct__FMODStudio__FMODBankReference)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFMODBankReference, 0x0018);
		}

		// struct FDatasmithCameraFilmbackSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraFilmbackSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFilmbackSettingsTemplate, SensorWidth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFilmbackSettingsTemplate, SensorHeight, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraFilmbackSettingsTemplate, 0x0008);
		}

		// struct FDatasmithTessellationOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithTessellationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, ChordTolerance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, MaxEdgeLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, NormalTolerance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, StitchingTechnique, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, UnknownData_AD19, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithTessellationOptions, 0x0010);
		}

		// struct FDatasmithRetessellationOptions : public FDatasmithTessellationOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithRetessellationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithRetessellationOptions, RetessellationRule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithRetessellationOptions, UnknownData_BKP3, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithRetessellationOptions, 0x0014);
		}

		// struct FDatasmithAssetImportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithAssetImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithAssetImportOptions, PackagePath, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithAssetImportOptions, 0x0008);
		}

		// struct FDatasmithStaticMeshImportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticMeshImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, MinLightmapResolution, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, MaxLightmapResolution, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, bGenerateLightmapUVs, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, bRemoveDegenerates, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticMeshImportOptions, 0x0004);
		}

		// struct FDatasmithImportBaseOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithImportBaseOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, SceneHandling, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeGeometry, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeMaterial, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeLight, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeCamera, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeAnimation, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, UnknownData_SM9A, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, AssetOptions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, StaticMeshOptions, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithImportBaseOptions, 0x0014);
		}

		// struct FDatasmithReimportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithReimportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithReimportOptions, bUpdateActors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithReimportOptions, bRespawnDeletedActors, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithReimportOptions, 0x0002);
		}

		// struct FDatasmithStaticParameterSetTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticParameterSetTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticParameterSetTemplate, StaticSwitchParameters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticParameterSetTemplate, 0x0050);
		}

		// struct FDatasmithMeshSectionInfoTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshSectionInfoTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshSectionInfoTemplate, MaterialIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshSectionInfoTemplate, 0x0004);
		}

		// struct FDatasmithMeshSectionInfoMapTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshSectionInfoMapTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshSectionInfoMapTemplate, Map, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshSectionInfoMapTemplate, 0x0050);
		}

		// struct FDatasmithStaticMaterialTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticMaterialTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMaterialTemplate, MaterialSlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMaterialTemplate, MaterialInterface, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticMaterialTemplate, 0x0010);
		}

		// struct FDatasmithMeshBuildSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshBuildSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, UnknownData_T21C, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, MinLightmapResolution, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, SrcLightmapIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, DstLightmapIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshBuildSettingsTemplate, 0x0010);
		}

		// struct FDatasmithCameraLookatTrackingSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraLookatTrackingSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraLookatTrackingSettingsTemplate, UnknownData_SCF3, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraLookatTrackingSettingsTemplate, ActorToTrack, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraLookatTrackingSettingsTemplate, 0x0030);
		}

		// struct FDatasmithCameraLensSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraLensSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraLensSettingsTemplate, MaxFStop, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraLensSettingsTemplate, 0x0004);
		}

		// struct FDatasmithCameraFocusSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraFocusSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, FocusMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, UnknownData_DYF7, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, ManualFocusDistance, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraFocusSettingsTemplate, 0x0008);
		}

		// struct FDatasmithPostProcessSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithPostProcessSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_CRKZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_LGIH, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, WhiteTemp, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, VignetteIntensity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, FilmWhitePoint, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, ColorSaturation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, AutoExposureMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_FMO7, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, CameraISO, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, CameraShutterSpeed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, DepthOfFieldFstop, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithPostProcessSettingsTemplate, 0x0040);
		}

		// struct FGeometryCacheMeshData
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheMeshData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheMeshData, UnknownData_31Y7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheMeshData, 0x00A8);
		}

		// struct FGeometryCacheVertexInfo
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheVertexInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheVertexInfo, UnknownData_QOPX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheVertexInfo, 0x0008);
		}

		// struct FGeometryCacheMeshBatchInfo
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheMeshBatchInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheMeshBatchInfo, UnknownData_L8YG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheMeshBatchInfo, 0x000C);
		}

		// struct FTrackRenderData
		TEST_METHOD(ScriptStruct__GeometryCache__TrackRenderData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackRenderData, UnknownData_D5TX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackRenderData, 0x0070);
		}

		// struct FMovieSceneGeometryCacheParams
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, GeometryCacheAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, FirstLoopStartFrameOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, StartFrameOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, EndFrameOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, PlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, UnknownData_FID1, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, StartOffset, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, EndOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, UnknownData_UHGU, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, GeometryCache, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheParams, 0x0040);
		}

		// struct FMovieSceneGeometryCacheSectionTemplateParameters : public FMovieSceneGeometryCacheParams
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheSectionTemplateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplateParameters, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplateParameters, SectionEndTime, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheSectionTemplateParameters, 0x0048);
		}

		// struct FMovieSceneGeometryCacheSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheSectionTemplate, 0x0068);
		}

		// struct FMagicLeapRaycastHitResult
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapRaycastHitResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, HitState, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, UnknownData_LVXY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, HitPoint, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, Normal, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, Confidence, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, UserData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapRaycastHitResult, 0x0024);
		}

		// struct FMagicLeapRaycastQueryParams
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapRaycastQueryParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, Direction, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, UpVector, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, Width, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, Height, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, HorizontalFovDegrees, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, CollideWithUnobserved, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, UnknownData_E17E, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, UserData, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapRaycastQueryParams, 0x0038);
		}

		// struct FMagicLeapGraphicsClientPerformanceInfo
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapGraphicsClientPerformanceInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameStartCPUCompAcquireCPUTimeMs, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameStartCPUFrameEndGPUTimeMs, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameStartCPUFrameStartCPUTimeMs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameDurationCPUTimeMs, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameDurationGPUTimeMs, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameInternalDurationCPUTimeMs, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameInternalDurationGPUTimeMs, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapGraphicsClientPerformanceInfo, 0x001C);
		}

		// struct FMagicLeapHeadTrackingState
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapHeadTrackingState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHeadTrackingState, Mode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHeadTrackingState, Error, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHeadTrackingState, UnknownData_97K5, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHeadTrackingState, Confidence, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapHeadTrackingState, 0x0008);
		}

		// struct FMagicLeapResult
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapResult, bSuccess, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapResult, UnknownData_I607, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapResult, AdditionalInfo, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapResult, 0x0018);
		}

		// struct FMagicLeapMeshBlockRequest
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapMeshBlockRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockRequest, BlockID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockRequest, LevelOfDetail, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockRequest, UnknownData_45ZS, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapMeshBlockRequest, 0x0014);
		}

		// struct FMagicLeapMeshBlockInfo
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapMeshBlockInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, BlockID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, BlockPosition, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, BlockOrientation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, BlockDimensions, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, UnknownData_KRDG, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, Timestamp, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, BlockState, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, UnknownData_A1IS, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapMeshBlockInfo, 0x0048);
		}

		// struct FMagicLeapTrackingMeshInfo
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapTrackingMeshInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTrackingMeshInfo, Timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTrackingMeshInfo, BlockData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapTrackingMeshInfo, 0x0018);
		}

		// struct FPurchaseItemDetails
		TEST_METHOD(ScriptStruct__MagicLeap__PurchaseItemDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseItemDetails, UnknownData_KHVJ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseItemDetails, Price, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseItemDetails, Name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseItemDetails, Type, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseItemDetails, UnknownData_CCAN, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPurchaseItemDetails, 0x0040);
		}

		// struct FPurchaseConfirmation
		TEST_METHOD(ScriptStruct__MagicLeap__PurchaseConfirmation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseConfirmation, UnknownData_CKVR, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseConfirmation, PackageName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseConfirmation, UnknownData_SIQY, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseConfirmation, Type, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseConfirmation, UnknownData_LCV6, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPurchaseConfirmation, 0x0050);
		}

		// struct FXRMotionControllerData
		TEST_METHOD(ScriptStruct__HeadMountedDisplay__XRMotionControllerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, bValid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, UnknownData_Y79J, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, DeviceName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, ApplicationInstanceID, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, DeviceVisualType, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, HandIndex, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, TrackingStatus, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, UnknownData_ARJL, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, GripPosition, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, UnknownData_9LHZ, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, GripRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, AimPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, UnknownData_SE9W, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, AimRotation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, HandKeyPositions, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, HandKeyRotations, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, HandKeyRadii, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, bIsGrasped, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, UnknownData_GI6Z, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXRMotionControllerData, 0x00A0);
		}

		// struct FXRHMDData
		TEST_METHOD(ScriptStruct__HeadMountedDisplay__XRHMDData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, bValid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, UnknownData_Y6FJ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, DeviceName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, ApplicationInstanceID, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, TrackingStatus, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, UnknownData_UFG2, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, Position, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, UnknownData_AUHO, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, Rotation, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXRHMDData, 0x0040);
		}

		// struct FXRDeviceId
		TEST_METHOD(ScriptStruct__HeadMountedDisplay__XRDeviceId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRDeviceId, SystemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRDeviceId, DeviceID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXRDeviceId, 0x000C);
		}

		// struct FXRGestureConfig
		TEST_METHOD(ScriptStruct__HeadMountedDisplay__XRGestureConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, bTap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, bHold, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, AxisGesture, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, bNavigationAxisX, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, bNavigationAxisY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, bNavigationAxisZ, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXRGestureConfig, 0x0006);
		}

		// struct FWidgetTransform
		TEST_METHOD(ScriptStruct__UMG__WidgetTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Translation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Shear, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Angle, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetTransform, 0x001C);
		}

		// struct FEventReply
		TEST_METHOD(ScriptStruct__UMG__EventReply)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventReply, UnknownData_IZFX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventReply, 0x00B8);
		}

		// struct FPaintContext
		TEST_METHOD(ScriptStruct__UMG__PaintContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintContext, UnknownData_JYMW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintContext, 0x0030);
		}

		// struct FShapedTextOptions
		TEST_METHOD(ScriptStruct__UMG__ShapedTextOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FShapedTextOptions, TextShapingMethod, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShapedTextOptions, TextFlowDirection, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShapedTextOptions, 0x0003);
		}

		// struct FAnimationEventBinding
		TEST_METHOD(ScriptStruct__UMG__AnimationEventBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, Delegate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, AnimationEvent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UnknownData_1AFW, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UserTag, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UnknownData_38G6, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationEventBinding, 0x0028);
		}

		// struct FNamedSlotBinding
		TEST_METHOD(ScriptStruct__UMG__NamedSlotBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedSlotBinding, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedSlotBinding, Content, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedSlotBinding, 0x0010);
		}

		// struct FSlateChildSize
		TEST_METHOD(ScriptStruct__UMG__SlateChildSize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, SizeRule, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, UnknownData_V850, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateChildSize, 0x0008);
		}

		// struct FAnchorData
		TEST_METHOD(ScriptStruct__UMG__AnchorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Offsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Anchors, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Alignment, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnchorData, 0x0028);
		}

		// struct FDynamicPropertyPath : public FCachedPropertyPath
		TEST_METHOD(ScriptStruct__UMG__DynamicPropertyPath)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicPropertyPath, 0x0028);
		}

		// struct FMovieScene2DTransformMask
		TEST_METHOD(ScriptStruct__UMG__MovieScene2DTransformMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformMask, Mask, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene2DTransformMask, 0x0004);
		}

		// struct FMovieSceneMarginSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieSceneMarginSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, TopCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, LeftCurve, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, RightCurve, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, BottomCurve, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, BlendType, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, UnknownData_4WJC, 0x02B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMarginSectionTemplate, 0x02C0);
		}

		// struct FMovieSceneWidgetMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieSceneWidgetMaterialSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneWidgetMaterialSectionTemplate, BrushPropertyNamePath, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneWidgetMaterialSectionTemplate, 0x0090);
		}

		// struct FRadialBoxSettings
		TEST_METHOD(ScriptStruct__UMG__RadialBoxSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialBoxSettings, bDistributeItemsEvenly, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialBoxSettings, UnknownData_HXAC, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialBoxSettings, AngleBetweenItems, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialBoxSettings, StartingAngle, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialBoxSettings, 0x000C);
		}

		// struct FRichTextStyleRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__UMG__RichTextStyleRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichTextStyleRow, TextStyle, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichTextStyleRow, 0x0278);
		}

		// struct FRichImageRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__UMG__RichImageRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichImageRow, Brush, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichImageRow, 0x0090);
		}

		// struct FSlateMeshVertex
		TEST_METHOD(ScriptStruct__UMG__SlateMeshVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, Color, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV1, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV2, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV3, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV4, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV5, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateMeshVertex, 0x003C);
		}

		// struct FUserWidgetPool
		TEST_METHOD(ScriptStruct__UMG__UserWidgetPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserWidgetPool, ActiveWidgets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserWidgetPool, InactiveWidgets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserWidgetPool, UnknownData_X2VQ, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserWidgetPool, 0x0080);
		}

		// struct FWidgetAnimationBinding
		TEST_METHOD(ScriptStruct__UMG__WidgetAnimationBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, WidgetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, SlotWidgetName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, AnimationGuid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, bIsRootWidget, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, UnknownData_1N9A, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetAnimationBinding, 0x0024);
		}

		// struct FBlueprintWidgetAnimationDelegateBinding
		TEST_METHOD(ScriptStruct__UMG__BlueprintWidgetAnimationDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, Action, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, UnknownData_GSRQ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, AnimationToBind, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, FunctionNameToBind, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, UserTag, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintWidgetAnimationDelegateBinding, 0x001C);
		}

		// struct FDelegateRuntimeBinding
		TEST_METHOD(ScriptStruct__UMG__DelegateRuntimeBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, PropertyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, SourcePath, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, Kind, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, UnknownData_YZS2, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelegateRuntimeBinding, 0x0050);
		}

		// struct FWidgetComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__UMG__WidgetComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetComponentInstanceData, UnknownData_F1NS, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetComponentInstanceData, 0x00C8);
		}

		// struct FWidgetNavigationData
		TEST_METHOD(ScriptStruct__UMG__WidgetNavigationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, Rule, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, UnknownData_1E9Q, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, WidgetToFocus, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, Widget, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, CustomDelegate, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetNavigationData, 0x0024);
		}

		// struct FAIStimulus
		TEST_METHOD(ScriptStruct__AIModule__AIStimulus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Age, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, ExpirationAge, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Strength, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, StimulusLocation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, ReceiverLocation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Tag, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, UnknownData_GPKI, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, UnknownData_YS2Q, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIStimulus, 0x003C);
		}

		// struct FActorPerceptionUpdateInfo
		TEST_METHOD(ScriptStruct__AIModule__ActorPerceptionUpdateInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionUpdateInfo, TargetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionUpdateInfo, Target, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionUpdateInfo, Stimulus, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorPerceptionUpdateInfo, 0x0048);
		}

		// struct FAIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, UnknownData_L265, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, DataBinding, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, DataField, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderValue, 0x0020);
		}

		// struct FAIDataProviderTypedValue : public FAIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderTypedValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderTypedValue, PropertyType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderTypedValue, UnknownData_1RAP, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderTypedValue, 0x0030);
		}

		// struct FAIDataProviderBoolValue : public FAIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderBoolValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderBoolValue, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderBoolValue, UnknownData_WPQG, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderBoolValue, 0x0038);
		}

		// struct FAIDataProviderIntValue : public FAIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderIntValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderIntValue, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderIntValue, UnknownData_0RKA, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderIntValue, 0x0038);
		}

		// struct FAIDataProviderStructValue : public FAIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderStructValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderStructValue, UnknownData_GH4U, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderStructValue, 0x0030);
		}

		// struct FActorPerceptionBlueprintInfo
		TEST_METHOD(ScriptStruct__AIModule__ActorPerceptionBlueprintInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, Target, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, LastSensedStimuli, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, UnknownData_ZNIJ, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorPerceptionBlueprintInfo, 0x0020);
		}

		// struct FAISightEvent
		TEST_METHOD(ScriptStruct__AIModule__AISightEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, UnknownData_9JI4, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, SeenActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, Observer, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAISightEvent, 0x0018);
		}

		// struct FCrowdAvoidanceSamplingPattern
		TEST_METHOD(ScriptStruct__AIModule__CrowdAvoidanceSamplingPattern)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceSamplingPattern, Angles, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceSamplingPattern, Radii, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrowdAvoidanceSamplingPattern, 0x0020);
		}

		// struct FCrowdAvoidanceConfig
		TEST_METHOD(ScriptStruct__AIModule__CrowdAvoidanceConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, VelocityBias, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, DesiredVelocityWeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, CurrentVelocityWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, SideBiasWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, ImpactTimeWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, ImpactTimeRange, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, CustomPatternIdx, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveDivisions, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveRings, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveDepth, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrowdAvoidanceConfig, 0x001C);
		}

		// struct FEnvQueryInstanceCache
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryInstanceCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryInstanceCache, Template, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryInstanceCache, UnknownData_UISI, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryInstanceCache, 0x0178);
		}

		// struct FEnvQueryRequest
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, QueryTemplate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, Owner, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, World, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, UnknownData_D6N0, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryRequest, 0x0068);
		}

		// struct FEnvQueryResult
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_MSCK, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, ItemType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_6PG8, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, OptionIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, QueryID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_Y582, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryResult, 0x0040);
		}

		// struct FEnvOverlapData
		TEST_METHOD(ScriptStruct__AIModule__EnvOverlapData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentZ, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ShapeOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, OverlapChannel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, OverlapShape, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, UnknownData_RLY3, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, UnknownData_5I01, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvOverlapData, 0x0020);
		}

		// struct FEnvTraceData
		TEST_METHOD(ScriptStruct__AIModule__EnvTraceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, VersionNum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, UnknownData_XYGZ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, NavigationFilter, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ProjectDown, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ProjectUp, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentX, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentY, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentZ, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, PostProjectionVerticalOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceChannel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, SerializedChannel, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceShape, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceMode, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, UnknownData_6OX6, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvTraceData, 0x0030);
		}

		// struct FEnvDirection
		TEST_METHOD(ScriptStruct__AIModule__EnvDirection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, LineFrom, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, LineTo, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, DirMode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, UnknownData_VF67, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvDirection, 0x0020);
		}

		// struct FGenericTeamId
		TEST_METHOD(ScriptStruct__AIModule__GenericTeamId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenericTeamId, TeamID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGenericTeamId, 0x0001);
		}

		// struct FPawnActionStack
		TEST_METHOD(ScriptStruct__AIModule__PawnActionStack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionStack, TopAction, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPawnActionStack, 0x0008);
		}

		// struct FPawnActionEvent
		TEST_METHOD(ScriptStruct__AIModule__PawnActionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionEvent, Action, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionEvent, UnknownData_XWK2, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPawnActionEvent, 0x0018);
		}

		// struct FBlackboardKeySelector
		TEST_METHOD(ScriptStruct__AIModule__BlackboardKeySelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, AllowedTypes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, UnknownData_VI7A, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, UnknownData_Y9SO, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlackboardKeySelector, 0x0028);
		}

		// struct FAIDamageEvent
		TEST_METHOD(ScriptStruct__AIModule__AIDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Amount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Location, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, HitLocation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, UnknownData_TMGQ, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, DamagedActor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Instigator, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDamageEvent, 0x0030);
		}

		// struct FAINoiseEvent
		TEST_METHOD(ScriptStruct__AIModule__AINoiseEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, UnknownData_XK3V, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, NoiseLocation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Loudness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, MaxRange, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Instigator, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Tag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, UnknownData_J9FS, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAINoiseEvent, 0x0030);
		}

		// struct FAIPredictionEvent
		TEST_METHOD(ScriptStruct__AIModule__AIPredictionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, Requestor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, PredictedActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, UnknownData_LQDP, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIPredictionEvent, 0x0018);
		}

		// struct FAITeamStimulusEvent
		TEST_METHOD(ScriptStruct__AIModule__AITeamStimulusEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, UnknownData_C4HS, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, Broadcaster, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, Enemy, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITeamStimulusEvent, 0x0038);
		}

		// struct FAITouchEvent
		TEST_METHOD(ScriptStruct__AIModule__AITouchEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, UnknownData_PSLV, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, TouchReceiver, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, OtherActor, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITouchEvent, 0x0020);
		}

		// struct FAISenseAffiliationFilter
		TEST_METHOD(ScriptStruct__AIModule__AISenseAffiliationFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISenseAffiliationFilter, UnknownData_3LSJ, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAISenseAffiliationFilter, 0x0004);
		}

		// struct FAIMoveRequest
		TEST_METHOD(ScriptStruct__AIModule__AIMoveRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIMoveRequest, GoalActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIMoveRequest, UnknownData_H49Y, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIMoveRequest, 0x0040);
		}

		// struct FBTDecoratorLogic
		TEST_METHOD(ScriptStruct__AIModule__BTDecoratorLogic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, Operation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, UnknownData_84DT, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, Number, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBTDecoratorLogic, 0x0004);
		}

		// struct FBehaviorTreeTemplateInfo
		TEST_METHOD(ScriptStruct__AIModule__BehaviorTreeTemplateInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, Asset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, Template, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, UnknownData_3DWO, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBehaviorTreeTemplateInfo, 0x0018);
		}

		// struct FBlackboardEntry
		TEST_METHOD(ScriptStruct__AIModule__BlackboardEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, EntryName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, KeyType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, UnknownData_M2NC, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlackboardEntry, 0x0018);
		}

		// struct FBTCompositeChild
		TEST_METHOD(ScriptStruct__AIModule__BTCompositeChild)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, ChildComposite, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, ChildTask, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, Decorators, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, DecoratorOps, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBTCompositeChild, 0x0030);
		}

		// struct FAIDataProviderFloatValue : public FAIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderFloatValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderFloatValue, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderFloatValue, UnknownData_OGOR, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderFloatValue, 0x0038);
		}

		// struct FAIDynamicParam
		TEST_METHOD(ScriptStruct__AIModule__AIDynamicParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, UnknownData_62VO, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, Value, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, BBKey, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDynamicParam, 0x0038);
		}

		// struct FEQSParametrizedQueryExecutionRequest
		TEST_METHOD(ScriptStruct__AIModule__EQSParametrizedQueryExecutionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, QueryTemplate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, QueryConfig, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, EQSQueryBlackboardKey, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, RunMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, UnknownData_7WKA, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, UnknownData_4SWQ, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEQSParametrizedQueryExecutionRequest, 0x0048);
		}

		// struct FIntervalCountdown
		TEST_METHOD(ScriptStruct__AIModule__IntervalCountdown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntervalCountdown, Interval, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntervalCountdown, UnknownData_AFAX, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntervalCountdown, 0x0008);
		}

		// struct FEnvNamedValue
		TEST_METHOD(ScriptStruct__AIModule__EnvNamedValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, UnknownData_RO31, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, Value, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvNamedValue, 0x0010);
		}

		// struct FAIRequestID
		TEST_METHOD(ScriptStruct__AIModule__AIRequestID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIRequestID, RequestID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIRequestID, 0x0004);
		}

		// struct FLandscapeSplineSegmentConnection
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineSegmentConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, ControlPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, TangentLen, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, SocketName, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, UnknownData_FMMR, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineSegmentConnection, 0x0018);
		}

		// struct FLandscapeSplineInterpPoint
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineInterpPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Left, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Right, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, FalloffLeft, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, FalloffRight, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerLeft, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerRight, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerFalloffLeft, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerFalloffRight, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, StartEndFalloff, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineInterpPoint, 0x0070);
		}

		// struct FGrassInput
		TEST_METHOD(ScriptStruct__Landscape__GrassInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, GrassType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, Input, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, UnknownData_PPFL, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrassInput, 0x0028);
		}

		// struct FLayerBlendInput
		TEST_METHOD(ScriptStruct__Landscape__LayerBlendInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, LayerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, BlendType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_QUMK, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, LayerInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_PHVQ, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, HeightInput, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_FAWM, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, PreviewWeight, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, ConstLayerInput, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, ConstHeightInput, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLayerBlendInput, 0x0048);
		}

		// struct FPhysicalMaterialInput
		TEST_METHOD(ScriptStruct__Landscape__PhysicalMaterialInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalMaterialInput, PhysicalMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalMaterialInput, Input, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalMaterialInput, UnknownData_DZKG, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalMaterialInput, 0x0020);
		}

		// struct FLandscapeProxyMaterialOverride
		TEST_METHOD(ScriptStruct__Landscape__LandscapeProxyMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, LODIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, UnknownData_3Y6X, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeProxyMaterialOverride, 0x0010);
		}

		// struct FLandscapeComponentMaterialOverride
		TEST_METHOD(ScriptStruct__Landscape__LandscapeComponentMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, LODIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, UnknownData_QQYB, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeComponentMaterialOverride, 0x0010);
		}

		// struct FWeightmapLayerAllocationInfo
		TEST_METHOD(ScriptStruct__Landscape__WeightmapLayerAllocationInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, LayerInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, WeightmapTextureIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, WeightmapTextureChannel, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, UnknownData_2QJH, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightmapLayerAllocationInfo, 0x0010);
		}

		// struct FGrassVariety
		TEST_METHOD(ScriptStruct__Landscape__GrassVariety)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, GrassMesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, OverrideMaterials, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, GrassDensity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bUseGrid, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_M2XA, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, PlacementJitter, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, StartCullDistance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, EndCullDistance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, MinLOD, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, Scaling, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_TEV9, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleX, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleY, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleZ, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, RandomRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, AlignToSurface, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bUseLandscapeLightmap, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, LightingChannels, 0x004F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bReceivesDecals, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bCastDynamicShadow, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bKeepInstanceBufferCPUCopy, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_3GJQ, 0x0053);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrassVariety, 0x0058);
		}

		// struct FLandscapeLayerBrush
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerBrush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerBrush, UnknownData_QI3H, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerBrush, 0x0001);
		}

		// struct FLandscapeLayer
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, bVisible, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, bLocked, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, UnknownData_8LSW, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, HeightmapAlpha, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, WeightmapAlpha, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, BlendMode, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, UnknownData_LI0P, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, Brushes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, WeightmapLayerAllocationBlend, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayer, 0x0088);
		}

		// struct FHeightmapData
		TEST_METHOD(ScriptStruct__Landscape__HeightmapData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeightmapData, Texture, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHeightmapData, 0x0008);
		}

		// struct FWeightmapData
		TEST_METHOD(ScriptStruct__Landscape__WeightmapData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapData, Textures, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapData, LayerAllocations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapData, TextureUsages, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightmapData, 0x0030);
		}

		// struct FLandscapeLayerComponentData
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerComponentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerComponentData, HeightmapData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerComponentData, WeightmapData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerComponentData, 0x0038);
		}

		// struct FLandscapeEditToolRenderData
		TEST_METHOD(ScriptStruct__Landscape__LandscapeEditToolRenderData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, ToolMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, GizmoMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, SelectedType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelR, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelG, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelB, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DataTexture, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, LayerContributionTexture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DirtyTexture, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeEditToolRenderData, 0x0038);
		}

		// struct FGizmoSelectData
		TEST_METHOD(ScriptStruct__Landscape__GizmoSelectData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoSelectData, UnknownData_Z05J, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoSelectData, 0x0050);
		}

		// struct FLandscapeInfoLayerSettings
		TEST_METHOD(ScriptStruct__Landscape__LandscapeInfoLayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, LayerInfoObj, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, LayerName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeInfoLayerSettings, 0x0010);
		}

		// struct FLandscapeMaterialTextureStreamingInfo
		TEST_METHOD(ScriptStruct__Landscape__LandscapeMaterialTextureStreamingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeMaterialTextureStreamingInfo, TextureName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeMaterialTextureStreamingInfo, TexelFactor, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeMaterialTextureStreamingInfo, 0x000C);
		}

		// struct FLandscapeImportLayerInfo
		TEST_METHOD(ScriptStruct__Landscape__LandscapeImportLayerInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeImportLayerInfo, UnknownData_0RG8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeImportLayerInfo, 0x0001);
		}

		// struct FLandscapeLayerStruct
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerStruct, LayerInfoObj, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerStruct, 0x0008);
		}

		// struct FLandscapeEditorLayerSettings
		TEST_METHOD(ScriptStruct__Landscape__LandscapeEditorLayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditorLayerSettings, UnknownData_F6NP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeEditorLayerSettings, 0x0001);
		}

		// struct FLandscapeSplineConnection
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineConnection, Segment, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineConnection, UnknownData_T4VE, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineConnection, 0x0010);
		}

		// struct FForeignWorldSplineData
		TEST_METHOD(ScriptStruct__Landscape__ForeignWorldSplineData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignWorldSplineData, UnknownData_TWW5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignWorldSplineData, 0x0001);
		}

		// struct FForeignSplineSegmentData
		TEST_METHOD(ScriptStruct__Landscape__ForeignSplineSegmentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignSplineSegmentData, UnknownData_MQ4T, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignSplineSegmentData, 0x0001);
		}

		// struct FForeignControlPointData
		TEST_METHOD(ScriptStruct__Landscape__ForeignControlPointData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignControlPointData, UnknownData_NDQB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignControlPointData, 0x0001);
		}

		// struct FLandscapeSplineMeshEntry
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineMeshEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Mesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, MaterialOverrides, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_A41I, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, CenterAdjust, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_78GW, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Scale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Orientation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, ForwardAxis, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UpAxis, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_D2LF, 0x0037);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineMeshEntry, 0x0038);
		}

		// struct FMovieSceneGeometryCollectionParams
		TEST_METHOD(ScriptStruct__GeometryCollectionTracks__MovieSceneGeometryCollectionParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, UnknownData_NC56, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, GeometryCollectionCache, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, StartFrameOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, EndFrameOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, PlayRate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, UnknownData_9FOF, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCollectionParams, 0x0030);
		}

		// struct FMovieSceneGeometryCollectionSectionTemplateParameters : public FMovieSceneGeometryCollectionParams
		TEST_METHOD(ScriptStruct__GeometryCollectionTracks__MovieSceneGeometryCollectionSectionTemplateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionSectionTemplateParameters, SectionStartTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionSectionTemplateParameters, SectionEndTime, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCollectionSectionTemplateParameters, 0x0038);
		}

		// struct FMovieSceneGeometryCollectionSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__GeometryCollectionTracks__MovieSceneGeometryCollectionSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCollectionSectionTemplate, 0x0058);
		}

		// struct FGeometryCollectionDebugDrawWarningMessage
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionDebugDrawWarningMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawWarningMessage, UnknownData_N4QP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionDebugDrawWarningMessage, 0x0001);
		}

		// struct FGeometryCollectionSizeSpecificData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionSizeSpecificData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaxSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, CollisionType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, ImplicitType, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, UnknownData_M5SD, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MinLevelSetResolution, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaxLevelSetResolution, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MinClusterLevelSetResolution, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaxClusterLevelSetResolution, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, CollisionObjectReductionPercentage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, CollisionParticlesFraction, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaximumCollisionParticles, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionSizeSpecificData, 0x0024);
		}

		// struct FGeometryCollectionSource
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSource, SourceGeometryObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSource, UnknownData_VGM3, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSource, LocalTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSource, SourceMaterial, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionSource, 0x0060);
		}

		// struct FGeometryCollectionRepData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionRepData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionRepData, UnknownData_G6UC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionRepData, 0x0018);
		}

		// struct FGeomComponentCacheParameters
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeomComponentCacheParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, CacheMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_UYAW, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TargetCache, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, ReverseCacheBeginTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, SaveCollisionData, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoGenerateCollisionData, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_DLUI, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, CollisionDataSizeMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoCollisionDataSpatialHash, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_SA7N, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, CollisionDataSpatialHashRadius, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, MaxCollisionPerCell, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, SaveBreakingData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoGenerateBreakingData, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_WSMF, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, BreakingDataSizeMax, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoBreakingDataSpatialHash, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_V0P8, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, BreakingDataSpatialHashRadius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, MaxBreakingPerCell, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, SaveTrailingData, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoGenerateTrailingData, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_YQC3, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TrailingDataSizeMax, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TrailingMinSpeedThreshold, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TrailingMinVolumeThreshold, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_KJMQ, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeomComponentCacheParameters, 0x0050);
		}

		// struct FGeometryCollectionDebugDrawActorSelectedRigidBody
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionDebugDrawActorSelectedRigidBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, UnknownData_829Z, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, Solver, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, GeometryCollection, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, 0x0018);
		}

		// struct FChaosCollisionEventRequestSettings
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosCollisionEventRequestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MaxNumberResults, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MinImpulse, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MaxDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, SortMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, UnknownData_OVRE, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosCollisionEventRequestSettings, 0x0018);
		}

		// struct FChaosBreakingEventRequestSettings
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosBreakingEventRequestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MaxNumberOfResults, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MinRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MinMass, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MaxDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, SortMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, UnknownData_8D6W, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosBreakingEventRequestSettings, 0x0018);
		}

		// struct FChaosTrailingEventRequestSettings
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosTrailingEventRequestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MaxNumberOfResults, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MinAngularSpeed, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MaxDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, SortMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, UnknownData_QZ67, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosTrailingEventRequestSettings, 0x0018);
		}

		// struct FChaosCollisionEventData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosCollisionEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Velocity1, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Velocity2, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Mass1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Mass2, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Impulse, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, UnknownData_GG70, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosCollisionEventData, 0x0058);
		}

		// struct FChaosBreakingEventData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosBreakingEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventData, Mass, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosBreakingEventData, 0x001C);
		}

		// struct FChaosTrailingEventData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosTrailingEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, AngularVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, Mass, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, ParticleIndex, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosTrailingEventData, 0x002C);
		}

		// struct FLevelSequenceLegacyObjectReference
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceLegacyObjectReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceLegacyObjectReference, UnknownData_0OGO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceLegacyObjectReference, 0x0020);
		}

		// struct FLevelSequenceObject
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, ObjectOrOwner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, UnknownData_V3UR, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, ComponentName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, CachedComponent, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceObject, 0x0038);
		}

		// struct FLevelSequenceSnapshotSettings
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceSnapshotSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, ZeroPadAmount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, UnknownData_33UH, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, FrameRate, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceSnapshotSettings, 0x000C);
		}

		// struct FLevelSequencePlayerSnapshot
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequencePlayerSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, MasterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, MasterTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, SourceTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotLocalTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotSourceTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, SourceTimecode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CameraComponent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, Settings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, UnknownData_PWMU, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, ActiveShot, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, ShotID, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, UnknownData_T6AH, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequencePlayerSnapshot, 0x00B8);
		}

		// struct FLevelSequenceObjectReferenceMap
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceObjectReferenceMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObjectReferenceMap, UnknownData_3UV5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceObjectReferenceMap, 0x0050);
		}

		// struct FLevelSequenceBindingReference
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, ExternalObjectPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, ObjectPath, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReference, 0x0038);
		}

		// struct FLevelSequenceBindingReferenceArray
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReferenceArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferenceArray, References, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReferenceArray, 0x0010);
		}

		// struct FLevelSequenceBindingReferences
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferences, BindingIdToReferences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferences, AnimSequenceInstances, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReferences, 0x00A0);
		}

		// struct FLevelSequenceCameraSettings
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceCameraSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceCameraSettings, bOverrideAspectRatioAxisConstraint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceCameraSettings, AspectRatioAxisConstraint, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceCameraSettings, 0x0002);
		}

		// struct FBoundActorProxy
		TEST_METHOD(ScriptStruct__LevelSequence__BoundActorProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoundActorProxy, UnknownData_91LP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoundActorProxy, 0x0001);
		}

		// struct FLevelSequenceAnimSequenceLinkItem
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceAnimSequenceLinkItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, SkelTrackGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, PathToAnimSequence, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, bExportTransforms, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, bExportCurves, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, bRecordInWorldSpace, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, UnknownData_A5VQ, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceAnimSequenceLinkItem, 0x0030);
		}

		// struct FEyeTrackerStereoGazeData
		TEST_METHOD(ScriptStruct__EyeTracker__EyeTrackerStereoGazeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, LeftEyeOrigin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, LeftEyeDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, RightEyeOrigin, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, RightEyeDirection, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, FixationPoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, ConfidenceValue, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEyeTrackerStereoGazeData, 0x0040);
		}

		// struct FEyeTrackerGazeData
		TEST_METHOD(ScriptStruct__EyeTracker__EyeTrackerGazeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, GazeOrigin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, GazeDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, FixationPoint, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, ConfidenceValue, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEyeTrackerGazeData, 0x0028);
		}

		// struct FMediaCaptureDevice
		TEST_METHOD(ScriptStruct__MediaAssets__MediaCaptureDevice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureDevice, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureDevice, URL, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaCaptureDevice, 0x0028);
		}

		// struct FMediaSoundComponentSpectralData
		TEST_METHOD(ScriptStruct__MediaAssets__MediaSoundComponentSpectralData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaSoundComponentSpectralData, FrequencyHz, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaSoundComponentSpectralData, Magnitude, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaSoundComponentSpectralData, 0x0008);
		}

		// struct FCompositionGraphCapturePasses
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CompositionGraphCapturePasses)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositionGraphCapturePasses, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositionGraphCapturePasses, 0x0010);
		}

		// struct FFrameMetrics
		TEST_METHOD(ScriptStruct__MovieSceneCapture__FrameMetrics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, TotalElapsedTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, FrameDelta, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, FrameNumber, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, NumDroppedFrames, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameMetrics, 0x0010);
		}

		// struct FCaptureResolution
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CaptureResolution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureResolution, ResX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureResolution, ResY, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCaptureResolution, 0x0008);
		}

		// struct FMovieSceneCaptureSettings
		TEST_METHOD(ScriptStruct__MovieSceneCapture__MovieSceneCaptureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, OutputDirectory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, GameModeOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, OutputFormat, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bOverwriteExisting, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUseRelativeFrameNumbers, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_4THN, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, HandleFrames, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, MovieExtension, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, ZeroPadFrameNumbers, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_2EE3, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, FrameRate, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUseCustomFrameRate, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_844Y, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, CustomFrameRate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, Resolution, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bEnableTextureStreaming, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bCinematicEngineScalability, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bCinematicMode, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bAllowMovement, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bAllowTurning, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bShowPlayer, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bShowHUD, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUsePathTracer, 0x0067);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, PathTracerSamplePerPixel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_3IZB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCaptureSettings, 0x0070);
		}

		// struct FCapturedPixels
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CapturedPixels)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPixels, UnknownData_GI8F, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPixels, 0x0010);
		}

		// struct FCapturedPixelsID
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CapturedPixelsID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPixelsID, Identifiers, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPixelsID, 0x0050);
		}

		// struct FJsonObjectWrapper
		TEST_METHOD(ScriptStruct__JsonUtilities__JsonObjectWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJsonObjectWrapper, JsonString, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJsonObjectWrapper, UnknownData_1PZN, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJsonObjectWrapper, 0x0020);
		}

		// struct FAdaptorPolygon2Group
		TEST_METHOD(ScriptStruct__EditableMesh__AdaptorPolygon2Group)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, RenderingSectionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, MaterialIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, MaxTriangles, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, UnknownData_E3LR, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdaptorPolygon2Group, 0x0048);
		}

		// struct FAdaptorTriangleID : public FElementID
		TEST_METHOD(ScriptStruct__EditableMesh__AdaptorTriangleID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdaptorTriangleID, 0x0004);
		}

		// struct FAdaptorPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__AdaptorPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon, UnknownData_PL65, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon, TriangulatedPolygonTriangleIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdaptorPolygon, 0x0018);
		}

		// struct FPolygonGroupForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonGroupForPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupForPolygon, PolygonGroupID, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupForPolygon, 0x0008);
		}

		// struct FMeshElementAttributeValue
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeValue, UnknownData_ARQW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeValue, 0x0050);
		}

		// struct FMeshElementAttributeData
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, UnknownData_RB9J, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeValue, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeData, 0x0060);
		}

		// struct FMeshElementAttributeList
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeList, Attributes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeList, 0x0010);
		}

		// struct FPolygonGroupToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonGroupToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, PolygonGroupAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, OriginalPolygonGroupID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, UnknownData_147G, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupToCreate, 0x0018);
		}

		// struct FVertexToMove
		TEST_METHOD(ScriptStruct__EditableMesh__VertexToMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToMove, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToMove, NewVertexPosition, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexToMove, 0x0010);
		}

		// struct FVertexIndexAndInstanceID
		TEST_METHOD(ScriptStruct__EditableMesh__VertexIndexAndInstanceID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexIndexAndInstanceID, ContourIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexIndexAndInstanceID, VertexInstanceID, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexIndexAndInstanceID, 0x0008);
		}

		// struct FVertexInstancesForPolygonHole
		TEST_METHOD(ScriptStruct__EditableMesh__VertexInstancesForPolygonHole)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstancesForPolygonHole, VertexIndicesAndInstanceIDs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstancesForPolygonHole, 0x0010);
		}

		// struct FChangeVertexInstancesForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__ChangeVertexInstancesForPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, UnknownData_G1MW, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, PerimeterVertexIndicesAndInstanceIDs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, VertexIndicesAndInstanceIDsForEachHole, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChangeVertexInstancesForPolygon, 0x0028);
		}

		// struct FVertexAttributesForPolygonHole
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAttributesForPolygonHole)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygonHole, VertexAttributeList, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAttributesForPolygonHole, 0x0010);
		}

		// struct FVertexAttributesForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAttributesForPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, UnknownData_V907, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, PerimeterVertexAttributeLists, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, VertexAttributeListsForEachHole, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAttributesForPolygon, 0x0028);
		}

		// struct FAttributesForEdge
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, EdgeID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, UnknownData_MQ3H, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, EdgeAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForEdge, 0x0018);
		}

		// struct FAttributesForVertexInstance
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForVertexInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, VertexInstanceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, UnknownData_5KE6, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, VertexInstanceAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForVertexInstance, 0x0018);
		}

		// struct FAttributesForVertex
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, UnknownData_BP3U, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, VertexAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForVertex, 0x0018);
		}

		// struct FVertexPair
		TEST_METHOD(ScriptStruct__EditableMesh__VertexPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexPair, VertexID0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexPair, VertexID1, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexPair, 0x0008);
		}

		// struct FPolygonToSplit
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonToSplit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, UnknownData_N0IL, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, VertexPairsToSplitAt, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonToSplit, 0x0018);
		}

		// struct FVertexAndAttributes
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAndAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, VertexInstanceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, VertexID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, PolygonVertexAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAndAttributes, 0x0018);
		}

		// struct FPolygonToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, UnknownData_V9SU, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PerimeterVertices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, OriginalPolygonID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PolygonEdgeHardness, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, UnknownData_YI1G, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonToCreate, 0x0020);
		}

		// struct FEdgeToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__EdgeToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, VertexID0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, VertexID1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, EdgeAttributes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, OriginalEdgeID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, UnknownData_7DIL, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdgeToCreate, 0x0020);
		}

		// struct FVertexInstanceToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__VertexInstanceToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, UnknownData_TAGZ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, VertexInstanceAttributes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, OriginalVertexInstanceID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, UnknownData_U9FG, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstanceToCreate, 0x0020);
		}

		// struct FVertexToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__VertexToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, VertexAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, OriginalVertexID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, UnknownData_97AS, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexToCreate, 0x0018);
		}

		// struct FSubdividedQuadVertex
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedQuadVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexPositionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, TextureCoordinate0, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, TextureCoordinate1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexColor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexNormal, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexTangent, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexBinormalSign, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedQuadVertex, 0x0034);
		}

		// struct FSubdividedQuad
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedQuad)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex1, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex2, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex3, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedQuad, 0x00D0);
		}

		// struct FSubdivisionLimitSection
		TEST_METHOD(ScriptStruct__EditableMesh__SubdivisionLimitSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitSection, SubdividedQuads, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdivisionLimitSection, 0x0010);
		}

		// struct FSubdividedWireEdge
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedWireEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, EdgeVertex0PositionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, EdgeVertex1PositionIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, UnknownData_7XJS, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedWireEdge, 0x000C);
		}

		// struct FSubdivisionLimitData
		TEST_METHOD(ScriptStruct__EditableMesh__SubdivisionLimitData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, VertexPositions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, Sections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, SubdividedWireEdges, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdivisionLimitData, 0x0030);
		}

		// struct FRenderingPolygonGroup
		TEST_METHOD(ScriptStruct__EditableMesh__RenderingPolygonGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, RenderingSectionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, MaterialIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, MaxTriangles, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, UnknownData_M4X5, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRenderingPolygonGroup, 0x0048);
		}

		// struct FRenderingPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__RenderingPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, UnknownData_M54V, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, TriangulatedPolygonTriangleIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRenderingPolygon, 0x0018);
		}

		// struct FPlatformRuntimeAudioCompressionOverrides
		TEST_METHOD(ScriptStruct__AudioPlatformConfiguration__PlatformRuntimeAudioCompressionOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, bOverrideCompressionTimes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, UnknownData_4MDF, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, DurationThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, MaxNumRandomBranches, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, SoundCueQualityIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformRuntimeAudioCompressionOverrides, 0x0010);
		}

		// struct FMediaPlayerTrackOptions
		TEST_METHOD(ScriptStruct__MediaUtils__MediaPlayerTrackOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Audio, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Caption, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, MetaData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Script, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Subtitle, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Text, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Video, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaPlayerTrackOptions, 0x001C);
		}

		// struct FMediaPlayerOptions
		TEST_METHOD(ScriptStruct__MediaUtils__MediaPlayerOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, Tracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, UnknownData_5AHA, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, SeekTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, PlayOnOpen, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, Loop, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, UnknownData_CZQW, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaPlayerOptions, 0x0030);
		}

		// struct FMagicLeapHandMeshBlock
		TEST_METHOD(ScriptStruct__MagicLeapHandMeshing__MagicLeapHandMeshBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMeshBlock, IndexCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMeshBlock, VertexCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMeshBlock, Vertex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMeshBlock, Index, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapHandMeshBlock, 0x0028);
		}

		// struct FMagicLeapHandMesh
		TEST_METHOD(ScriptStruct__MagicLeapHandMeshing__MagicLeapHandMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMesh, Version, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMesh, DataCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMesh, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapHandMesh, 0x0018);
		}

		// struct FMagicLeapLightEstimationColorTemperatureState
		TEST_METHOD(ScriptStruct__MagicLeapLightEstimation__MagicLeapLightEstimationColorTemperatureState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationColorTemperatureState, ColorTemperatureKelvin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationColorTemperatureState, AmbientColor, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationColorTemperatureState, UnknownData_JFG8, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationColorTemperatureState, Timestamp, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapLightEstimationColorTemperatureState, 0x0020);
		}

		// struct FMagicLeapLightEstimationAmbientGlobalState
		TEST_METHOD(ScriptStruct__MagicLeapLightEstimation__MagicLeapLightEstimationAmbientGlobalState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationAmbientGlobalState, AmbientIntensityNits, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationAmbientGlobalState, Timestamp, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapLightEstimationAmbientGlobalState, 0x0018);
		}

		// struct FAppleImageUtilsImageConversionResult
		TEST_METHOD(ScriptStruct__AppleImageUtils__AppleImageUtilsImageConversionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleImageUtilsImageConversionResult, Error, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleImageUtilsImageConversionResult, ImageData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAppleImageUtilsImageConversionResult, 0x0020);
		}

		// struct FProceduralFoliageInstance
		TEST_METHOD(ScriptStruct__Foliage__ProceduralFoliageInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Rotation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Age, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Normal, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Scale, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Type, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, UnknownData_8Y47, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProceduralFoliageInstance, 0x0050);
		}

		// struct FFoliageTypeObject
		TEST_METHOD(ScriptStruct__Foliage__FoliageTypeObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, FoliageTypeObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, TypeInstance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, bIsAsset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, UnknownData_YCHE, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, Type, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageTypeObject, 0x0020);
		}

		// struct FFoliageVertexColorChannelMask
		TEST_METHOD(ScriptStruct__Foliage__FoliageVertexColorChannelMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, UnknownData_GNVN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, MaskThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, UnknownData_MTA2, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageVertexColorChannelMask, 0x000C);
		}

		// struct FCustomFieldData
		TEST_METHOD(ScriptStruct__BuildPatchServices__CustomFieldData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomFieldData, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomFieldData, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomFieldData, 0x0020);
		}

		// struct FSHAHashData
		TEST_METHOD(ScriptStruct__BuildPatchServices__SHAHashData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSHAHashData, Hash, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSHAHashData, 0x0014);
		}

		// struct FChunkInfoData
		TEST_METHOD(ScriptStruct__BuildPatchServices__ChunkInfoData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, Hash, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, ShaHash, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, UnknownData_2QB7, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, FileSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, GroupNumber, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, UnknownData_BT6M, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChunkInfoData, 0x0040);
		}

		// struct FChunkPartData
		TEST_METHOD(ScriptStruct__BuildPatchServices__ChunkPartData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Offset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Size, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChunkPartData, 0x0018);
		}

		// struct FFileManifestData
		TEST_METHOD(ScriptStruct__BuildPatchServices__FileManifestData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, Filename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, FileHash, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_DZMA, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, FileChunkParts, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, InstallTags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsUnixExecutable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_QPRF, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, SymlinkTarget, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsReadOnly, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsCompressed, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_KCA8, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFileManifestData, 0x0068);
		}

		// struct FNamedInterface
		TEST_METHOD(ScriptStruct__OnlineSubsystem__NamedInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterface, InterfaceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterface, InterfaceObject, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedInterface, 0x0010);
		}

		// struct FInAppPurchaseProductRequest
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseProductRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, ProductIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, bIsConsumable, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, UnknownData_AZC2, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductRequest, 0x0018);
		}

		// struct FNamedInterfaceDef
		TEST_METHOD(ScriptStruct__OnlineSubsystem__NamedInterfaceDef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterfaceDef, InterfaceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterfaceDef, InterfaceClassName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedInterfaceDef, 0x0018);
		}

		// struct FInAppPurchaseProductInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseProductInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, TransactionIdentifier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayDescription, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayPrice, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, RawPrice, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, UnknownData_0LTB, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, CurrencyCode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, CurrencySymbol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DecimalSeparator, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, GroupingSeparator, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, ReceiptData, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductInfo, 0x00A8);
		}

		// struct FInAppPurchaseRestoreInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseRestoreInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, ReceiptData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, TransactionIdentifier, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseRestoreInfo, 0x0030);
		}

		// struct FPaperTerrainMaterialRule
		TEST_METHOD(ScriptStruct__Paper2D__PaperTerrainMaterialRule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, StartCap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, Body, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, EndCap, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, MinimumAngle, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, MaximumAngle, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, bEnableCollision, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, UnknownData_40BZ, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, CollisionOffset, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, DrawOrder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, UnknownData_QH5B, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTerrainMaterialRule, 0x0038);
		}

		// struct FPaperTileInfo
		TEST_METHOD(ScriptStruct__Paper2D__PaperTileInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileInfo, TileSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileInfo, PackedTileIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileInfo, UnknownData_21SM, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTileInfo, 0x0010);
		}

		// struct FPaperTileSetTerrain
		TEST_METHOD(ScriptStruct__Paper2D__PaperTileSetTerrain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileSetTerrain, TerrainName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileSetTerrain, CenterTileIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileSetTerrain, UnknownData_Y66P, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTileSetTerrain, 0x0018);
		}

		// struct FSpriteGeometryShape
		TEST_METHOD(ScriptStruct__Paper2D__SpriteGeometryShape)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, ShapeType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, UnknownData_YWHN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, Vertices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, BoxSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, BoxPosition, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, bNegativeWinding, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, UnknownData_MXBB, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteGeometryShape, 0x0030);
		}

		// struct FSpriteGeometryCollection
		TEST_METHOD(ScriptStruct__Paper2D__SpriteGeometryCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, Shapes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, GeometryType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, UnknownData_06Y8, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, PixelsPerSubdivisionX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, PixelsPerSubdivisionY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, bAvoidVertexMerging, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, UnknownData_EJMB, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, AlphaThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, DetailAmount, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, SimplifyEpsilon, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, UnknownData_1J7C, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteGeometryCollection, 0x0030);
		}

		// struct FPaperTileMetadata
		TEST_METHOD(ScriptStruct__Paper2D__PaperTileMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, UserDataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, CollisionData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, TerrainMembership, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, UnknownData_S8CP, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTileMetadata, 0x0040);
		}

		// struct FSpriteDrawCallRecord
		TEST_METHOD(ScriptStruct__Paper2D__SpriteDrawCallRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, Destination, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, UnknownData_GWPF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, BaseTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, UnknownData_G6EP, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, Color, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, UnknownData_8KWL, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteDrawCallRecord, 0x00D0);
		}

		// struct FSpriteAssetInitParameters
		TEST_METHOD(ScriptStruct__Paper2D__SpriteAssetInitParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteAssetInitParameters, UnknownData_M50T, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteAssetInitParameters, 0x0040);
		}

		// struct FPaperFlipbookKeyFrame
		TEST_METHOD(ScriptStruct__Paper2D__PaperFlipbookKeyFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperFlipbookKeyFrame, Sprite, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperFlipbookKeyFrame, FrameRun, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperFlipbookKeyFrame, UnknownData_E9PI, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperFlipbookKeyFrame, 0x0010);
		}

		// struct FSpriteInstanceData
		TEST_METHOD(ScriptStruct__Paper2D__SpriteInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, SourceSprite, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, VertexColor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, MaterialIndex, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteInstanceData, 0x0050);
		}

		// struct FPaperSpriteSocket
		TEST_METHOD(ScriptStruct__Paper2D__PaperSpriteSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteSocket, LocalTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteSocket, SocketName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteSocket, UnknownData_IEAL, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperSpriteSocket, 0x0040);
		}

		// struct FIntMargin
		TEST_METHOD(ScriptStruct__Paper2D__IntMargin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Left, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Top, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Right, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Bottom, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntMargin, 0x0010);
		}

		// struct FPaperSpriteAtlasSlot
		TEST_METHOD(ScriptStruct__Paper2D__PaperSpriteAtlasSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, SpriteRef, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, AtlasIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, X, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, Y, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, Width, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, Height, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, UnknownData_LGBX, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperSpriteAtlasSlot, 0x0040);
		}

		// struct FPointWeightMap
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__PointWeightMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointWeightMap, Values, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointWeightMap, 0x0010);
		}

		// struct FClothPhysicalMeshData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothPhysicalMeshData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Vertices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Normals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Indices, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, WeightMaps, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, InverseMasses, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BoneData, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, MaxBoneWeights, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, NumFixedVerts, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, SelfCollisionIndices, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, MaxDistances, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BackstopDistances, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BackstopRadiuses, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, AnimDriveMultipliers, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothPhysicalMeshData, 0x00F8);
		}

		// struct FClothLODDataCommon
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothLODDataCommon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, PhysicalMeshData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, CollisionData, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, bUseMultipleInfluences, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, UnknownData_H18P, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, SkinningKernelRadius, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, UnknownData_OJXY, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothLODDataCommon, 0x0160);
		}

		// struct FClothParameterMask_Legacy
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothParameterMask_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, MaskName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, CurrentTarget, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, UnknownData_OBIA, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, MaxValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, MinValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, UnknownData_LTK1, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, Values, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, bEnabled, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, UnknownData_1AYV, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothParameterMask_Legacy, 0x0030);
		}

		// struct FClothConstraintSetup_Legacy
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothConstraintSetup_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, StiffnessMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, StretchLimit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, CompressionLimit, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConstraintSetup_Legacy, 0x0010);
		}

		// struct FClothConfig_Legacy
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothConfig_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, WindMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, UnknownData_BHAG, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, VerticalConstraintConfig, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, HorizontalConstraintConfig, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, BendConstraintConfig, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, ShearConstraintConfig, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SelfCollisionRadius, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SelfCollisionStiffness, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SelfCollisionCullScale, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, Damping, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, Friction, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, WindDragCoefficient, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, WindLiftCoefficient, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, LinearDrag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AngularDrag, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, LinearInertiaScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AngularInertiaScale, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, CentrifugalInertiaScale, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SolverFrequency, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, StiffnessFrequency, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, GravityScale, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, GravityOverride, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, bUseGravityOverride, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, UnknownData_JTRH, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, TetherStiffness, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, TetherLimit, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, CollisionThickness, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AnimDriveSpringStiffness, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AnimDriveDamperStiffness, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConfig_Legacy, 0x00D4);
		}

		// struct FMotoSynthRuntimeSettings
		TEST_METHOD(ScriptStruct__MotoSynth__MotoSynthRuntimeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, bSynthToneEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, UnknownData_S9RG, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, SynthToneVolume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, SynthToneFilterFrequency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, SynthOctaveShift, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, bGranularEngineEnabled, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, UnknownData_8274, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, GranularEngineVolume, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, GranularEnginePitchScale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, NumSamplesToCrossfadeBetweenGrains, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, NumGrainTableEntriesPerGrain, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, GrainTableRandomOffsetForConstantRPMs, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, GrainCrossfadeSamplesForConstantRPMs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, UnknownData_QAA5, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, AccelerationSource, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, DecelerationSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, bStereoWidenerEnabled, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, UnknownData_2GVF, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoDelayMsec, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoFeedback, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoWidenerWetlevel, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoWidenerDryLevel, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoWidenerDelayRatio, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, bStereoWidenerFilterEnabled, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, UnknownData_I65X, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoWidenerFilterFrequency, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoWidenerFilterQ, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, UnknownData_F4VI, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMotoSynthRuntimeSettings, 0x0068);
		}

		// struct FGrainTableEntry
		TEST_METHOD(ScriptStruct__MotoSynth__GrainTableEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrainTableEntry, SampleIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrainTableEntry, RPM, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrainTableEntry, 0x0008);
		}

		// struct FMagicLeapARPinQuery
		TEST_METHOD(ScriptStruct__MagicLeapARPin__MagicLeapARPinQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinQuery, Types, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinQuery, MaxResults, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinQuery, TargetPoint, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinQuery, Radius, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinQuery, bSorted, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinQuery, UnknownData_C4SF, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapARPinQuery, 0x0068);
		}

		// struct FMagicLeapARPinObjectIdList
		TEST_METHOD(ScriptStruct__MagicLeapARPin__MagicLeapARPinObjectIdList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinObjectIdList, ObjectIdList, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapARPinObjectIdList, 0x0050);
		}

		// struct FMagicLeapARPinState
		TEST_METHOD(ScriptStruct__MagicLeapARPin__MagicLeapARPinState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinState, Confidence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinState, ValidRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinState, RotationError, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinState, TranslationError, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinState, PinType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinState, UnknownData_DGAW, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapARPinState, 0x0014);
		}

		// struct FMagicLeapIdentityAttribute
		TEST_METHOD(ScriptStruct__MagicLeapIdentity__MagicLeapIdentityAttribute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapIdentityAttribute, Attribute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapIdentityAttribute, UnknownData_R17X, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapIdentityAttribute, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapIdentityAttribute, 0x0018);
		}

		// struct FMagicLeapImageTargetState
		TEST_METHOD(ScriptStruct__MagicLeapImageTracker__MagicLeapImageTargetState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapImageTargetState, TrackingStatus, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapImageTargetState, UnknownData_MWJ8, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapImageTargetState, Location, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapImageTargetState, Rotation, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapImageTargetState, 0x001C);
		}

		// struct FMagicLeapImageTargetSettings
		TEST_METHOD(ScriptStruct__MagicLeapImageTracker__MagicLeapImageTargetSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapImageTargetSettings, ImageTexture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapImageTargetSettings, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapImageTargetSettings, LongerDimension, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapImageTargetSettings, bIsStationary, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapImageTargetSettings, bIsEnabled, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapImageTargetSettings, UnknownData_LFV7, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapImageTargetSettings, 0x0020);
		}

		// struct FTemplateSequenceBindingOverrideData
		TEST_METHOD(ScriptStruct__TemplateSequence__TemplateSequenceBindingOverrideData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceBindingOverrideData, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceBindingOverrideData, bOverridesDefault, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceBindingOverrideData, UnknownData_7JXP, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTemplateSequenceBindingOverrideData, 0x000C);
		}

		// struct FGameplayTag
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTag, TagName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTag, 0x0008);
		}

		// struct FGameplayTagContainer
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagContainer, GameplayTags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagContainer, ParentTags, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagContainer, 0x0020);
		}

		// struct FGameplayTagQuery
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, TokenStreamVersion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, UnknownData_JYTN, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, TagDictionary, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, QueryTokenStream, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, UserDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, AutoDescription, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagQuery, 0x0048);
		}

		// struct FGameplayTagCreationWidgetHelper
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagCreationWidgetHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCreationWidgetHelper, UnknownData_MON6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagCreationWidgetHelper, 0x0001);
		}

		// struct FGameplayTagReferenceHelper
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagReferenceHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagReferenceHelper, UnknownData_JOPA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagReferenceHelper, 0x0010);
		}

		// struct FGameplayTagNode
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagNode, UnknownData_OA2F, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagNode, 0x0050);
		}

		// struct FGameplayTagTableRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagTableRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagTableRow, Tag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagTableRow, DevComment, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagTableRow, 0x0020);
		}

		// struct FRestrictedGameplayTagTableRow : public FGameplayTagTableRow
		TEST_METHOD(ScriptStruct__GameplayTags__RestrictedGameplayTagTableRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedGameplayTagTableRow, bAllowNonRestrictedChildren, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedGameplayTagTableRow, UnknownData_N30S, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRestrictedGameplayTagTableRow, 0x0028);
		}

		// struct FRestrictedConfigInfo
		TEST_METHOD(ScriptStruct__GameplayTags__RestrictedConfigInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedConfigInfo, RestrictedConfigName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedConfigInfo, Owners, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRestrictedConfigInfo, 0x0020);
		}

		// struct FGameplayTagRedirect
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRedirect, OldTagName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRedirect, NewTagName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagRedirect, 0x0010);
		}

		// struct FGameplayTagSource
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, UnknownData_USK7, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceTagList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceRestrictedTagList, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagSource, 0x0020);
		}

		// struct FGameplayTagCategoryRemap
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagCategoryRemap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCategoryRemap, BaseCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCategoryRemap, RemapCategories, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagCategoryRemap, 0x0020);
		}

		// struct FSolverBreakingFilterSettings
		TEST_METHOD(ScriptStruct__Chaos__SolverBreakingFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, FilterEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, UnknownData_HMIN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, MinVolume, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverBreakingFilterSettings, 0x0010);
		}

		// struct FSolverCollisionFilterSettings
		TEST_METHOD(ScriptStruct__Chaos__SolverCollisionFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, FilterEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, UnknownData_9T5J, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, MinImpulse, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverCollisionFilterSettings, 0x0010);
		}

		// struct FSolverCollisionData
		TEST_METHOD(ScriptStruct__Chaos__SolverCollisionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, AccumulatedImpulse, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Normal, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Velocity1, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Velocity2, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, AngularVelocity1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, AngularVelocity2, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Mass1, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Mass2, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, ParticleIndex, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, LevelsetIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, ParticleIndexMesh, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, LevelsetIndexMesh, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverCollisionData, 0x006C);
		}

		// struct FSolverBreakingData
		TEST_METHOD(ScriptStruct__Chaos__SolverBreakingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, AngularVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, Mass, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, ParticleIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, ParticleIndexMesh, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverBreakingData, 0x0030);
		}

		// struct FRecordedFrame
		TEST_METHOD(ScriptStruct__Chaos__RecordedFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, TransformIndices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, PreviousTransformIndices, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, DisabledFlags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Collisions, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Breakings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Trailings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Timestamp, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, UnknownData_31HE, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecordedFrame, 0x00B8);
		}

		// struct FRecordedTransformTrack
		TEST_METHOD(ScriptStruct__Chaos__RecordedTransformTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedTransformTrack, Records, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecordedTransformTrack, 0x0010);
		}

		// struct FSolverTrailingData
		TEST_METHOD(ScriptStruct__Chaos__SolverTrailingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, AngularVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, Mass, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, ParticleIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, ParticleIndexMesh, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverTrailingData, 0x0030);
		}

		// struct FSolverTrailingFilterSettings
		TEST_METHOD(ScriptStruct__Chaos__SolverTrailingFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, FilterEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, UnknownData_XR8S, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, MinVolume, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverTrailingFilterSettings, 0x0010);
		}

		// struct FChaosSolverConfiguration
		TEST_METHOD(ScriptStruct__Chaos__ChaosSolverConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, Iterations, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionPairIterations, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, PushOutIterations, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionPushOutPairIterations, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionMarginFraction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionMarginMax, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionCullDistance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, JointPairIterations, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, JointPushOutPairIterations, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, ClusterConnectionFactor, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, ClusterUnionConnectionType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, bGenerateCollisionData, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, UnknownData_O2SY, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionFilterSettings, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, bGenerateBreakData, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, UnknownData_9789, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, BreakingFilterSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, bGenerateTrailingData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, UnknownData_GVNS, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, TrailingFilterSettings, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, bGenerateContactGraph, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, UnknownData_6K65, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosSolverConfiguration, 0x0068);
		}

		// struct FKey
		TEST_METHOD(ScriptStruct__InputCore__Key)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKey, KeyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKey, UnknownData_75X7, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKey, 0x0018);
		}

		// struct FBodyInstanceCore
		TEST_METHOD(ScriptStruct__PhysicsCore__BodyInstanceCore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstanceCore, UnknownData_OFZW, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstanceCore, UnknownData_0BX6, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBodyInstanceCore, 0x0018);
		}

		// struct FGizmoFloatParameterChange
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__GizmoFloatParameterChange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoFloatParameterChange, InitialValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoFloatParameterChange, CurrentValue, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoFloatParameterChange, 0x0008);
		}

		// struct FGizmoVec2ParameterChange
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__GizmoVec2ParameterChange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoVec2ParameterChange, InitialValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoVec2ParameterChange, CurrentValue, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoVec2ParameterChange, 0x0010);
		}

		// struct FInputRayHit
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__InputRayHit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRayHit, UnknownData_F3UE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputRayHit, 0x0028);
		}

		// struct FBrushStampData
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__BrushStampData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushStampData, UnknownData_YTLB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBrushStampData, 0x00AC);
		}

		// struct FBehaviorInfo
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__BehaviorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorInfo, Behavior, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorInfo, UnknownData_K26F, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBehaviorInfo, 0x0020);
		}

		// struct FActiveGizmo
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__ActiveGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGizmo, UnknownData_W33Q, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveGizmo, 0x0030);
		}

		// struct FLocalizedIconInfo
		TEST_METHOD(ScriptStruct__LuminRuntimeSettings__LocalizedIconInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedIconInfo, LanguageCode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedIconInfo, IconModelPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedIconInfo, IconPortalPath, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizedIconInfo, 0x0030);
		}

		// struct FLocalizedIconInfos
		TEST_METHOD(ScriptStruct__LuminRuntimeSettings__LocalizedIconInfos)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedIconInfos, IconData, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizedIconInfos, 0x0010);
		}

		// struct FLocalizedAppName
		TEST_METHOD(ScriptStruct__LuminRuntimeSettings__LocalizedAppName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedAppName, LanguageCode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedAppName, AppName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizedAppName, 0x0020);
		}

		// struct FLuminComponentSubElement
		TEST_METHOD(ScriptStruct__LuminRuntimeSettings__LuminComponentSubElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentSubElement, ElementType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentSubElement, UnknownData_Q1T6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentSubElement, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLuminComponentSubElement, 0x0018);
		}

		// struct FLuminComponentElement
		TEST_METHOD(ScriptStruct__LuminRuntimeSettings__LuminComponentElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, VisibleName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, ExecutableName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, ComponentType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, UnknownData_72UD, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, ExtraComponentSubElements, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLuminComponentElement, 0x0048);
		}

		// struct FMagicLeapEyeBlinkState
		TEST_METHOD(ScriptStruct__MagicLeapEyeTracker__MagicLeapEyeBlinkState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapEyeBlinkState, LeftEyeBlinked, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapEyeBlinkState, RightEyeBlinked, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapEyeBlinkState, 0x0002);
		}

		// struct FUdpMockMessage
		TEST_METHOD(ScriptStruct__UdpMessaging__UdpMockMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUdpMockMessage, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUdpMockMessage, 0x0010);
		}

		// struct FActorSequenceObjectReference
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, UnknownData_0JCT, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, ActorId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, UnknownData_FJBX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, PathToComponent, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReference, 0x0028);
		}

		// struct FActorSequenceObjectReferences
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferences, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReferences, 0x0010);
		}

		// struct FActorSequenceObjectReferenceMap
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReferenceMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferenceMap, BindingIds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferenceMap, References, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReferenceMap, 0x0020);
		}

		// struct FUVMapSettings
		TEST_METHOD(ScriptStruct__StaticMeshDescription__UVMapSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, UVTile, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Position, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Rotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Scale, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUVMapSettings, 0x0038);
		}

		// struct FPropertyAccessIndirectionChain
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessIndirectionChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirectionChain, Property, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirectionChain, IndirectionStartIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirectionChain, IndirectionEndIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirectionChain, EventId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirectionChain, UnknownData_5JRD, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessIndirectionChain, 0x0030);
		}

		// struct FPropertyAccessCopy
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessCopy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopy, AccessIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopy, DestAccessStartIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopy, DestAccessEndIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopy, Type, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopy, UnknownData_EM4E, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessCopy, 0x0010);
		}

		// struct FPropertyAccessCopyBatch
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessCopyBatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopyBatch, Copies, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessCopyBatch, 0x0010);
		}

		// struct FPropertyAccessPath
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessPath, PathSegmentStartIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessPath, PathSegmentCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessPath, UnknownData_9UHL, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessPath, 0x000C);
		}

		// struct FPropertyAccessSegment
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, Struct, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, Property, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, Function, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, ArrayIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, Flags, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, UnknownData_54SS, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessSegment, 0x0040);
		}

		// struct FPropertyAccessIndirection
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessIndirection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, ArrayProperty, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, Function, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, ReturnBufferSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, ReturnBufferAlignment, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, ArrayIndex, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, Offset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, ObjectType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, Type, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, UnknownData_H6DU, 0x003A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessIndirection, 0x0040);
		}

		// struct FPropertyAccessLibrary
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessLibrary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, PathSegments, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, SrcPaths, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, DestPaths, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, CopyBatches, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, SrcAccesses, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, DestAccesses, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, Indirections, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, EventAccessIndices, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, UnknownData_PRVJ, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessLibrary, 0x00C8);
		}

		// struct FClothVertBoneData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothVertBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, NumInfluences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, BoneIndices, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, BoneWeights, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothVertBoneData, 0x004C);
		}

		// struct FClothCollisionPrim_Sphere
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Sphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, BoneIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, Radius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, LocalPosition, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Sphere, 0x0014);
		}

		// struct FClothCollisionPrim_SphereConnection
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_SphereConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_SphereConnection, SphereIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_SphereConnection, 0x0008);
		}

		// struct FClothCollisionPrim_Convex
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Convex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, Planes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, SurfacePoints, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, BoneIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, UnknownData_PZDP, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Convex, 0x0028);
		}

		// struct FClothCollisionPrim_Box
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Box)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, LocalPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, UnknownData_63EY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, LocalRotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, HalfExtents, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, BoneIndex, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Box, 0x0030);
		}

		// struct FClothCollisionData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Spheres, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, SphereConnections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Convexes, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Boxes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionData, 0x0040);
		}

		// struct FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__ElementID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FElementID, IDValue, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FElementID, 0x0004);
		}

		// struct FPolygonGroupID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__PolygonGroupID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupID, 0x0004);
		}

		// struct FPolygonID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__PolygonID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonID, 0x0004);
		}

		// struct FVertexID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__VertexID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexID, 0x0004);
		}

		// struct FVertexInstanceID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__VertexInstanceID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstanceID, 0x0004);
		}

		// struct FEdgeID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__EdgeID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdgeID, 0x0004);
		}

		// struct FTriangleID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__TriangleID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTriangleID, 0x0004);
		}

		// struct FChaosDestructionEvent
		TEST_METHOD(ScriptStruct__ChaosNiagara__ChaosDestructionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, Normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, Velocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, AngularVelocity, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, ExtentMin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, ExtentMax, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, ParticleID, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, Time, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, Type, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosDestructionEvent, 0x0044);
		}

		// struct FMagicLeapTouchpadGesture
		TEST_METHOD(ScriptStruct__MagicLeapController__MagicLeapTouchpadGesture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Hand, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, UnknownData_GTWV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, MotionSource, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Type, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Direction, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, UnknownData_XE3L, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, PositionAndForce, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Speed, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Distance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, FingerGap, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Radius, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Angle, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapTouchpadGesture, 0x0030);
		}

		// struct FAutoCompleteCommand
		TEST_METHOD(ScriptStruct__EngineSettings__AutoCompleteCommand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, Desc, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, UnknownData_D2L0, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoCompleteCommand, 0x0028);
		}

		// struct FGameModeName
		TEST_METHOD(ScriptStruct__EngineSettings__GameModeName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameModeName, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameModeName, GameMode, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameModeName, 0x0028);
		}

		// struct FMovieSceneTangentData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTangentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, ArriveTangent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, LeaveTangent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, ArriveTangentWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, LeaveTangentWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, TangentWeightMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, UnknownData_2G25, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTangentData, 0x0014);
		}

		// struct FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneChannel, UnknownData_J3AM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneChannel, 0x0008);
		}

		// struct FMovieSceneBoolChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBoolChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, bHasDefaultValue, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, UnknownData_CVYQ, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, UnknownData_NDFM, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBoolChannel, 0x0090);
		}

		// struct FMovieSceneIntegerChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneIntegerChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, bHasDefaultValue, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, UnknownData_S0HU, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, UnknownData_MBCP, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneIntegerChannel, 0x0090);
		}

		// struct FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplateBase, UnknownData_ZHG2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplateBase, 0x0010);
		}

		// struct FMovieSceneTrackImplementation : public FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackImplementation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackImplementation, 0x0010);
		}

		// struct FMovieSceneEvalTemplate : public FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, CompletionMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, UnknownData_M62G, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, SourceSectionPtr, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, UnknownData_EWNR, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplate, 0x0020);
		}

		// struct FMovieScenePropertySectionData
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertySectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, PropertyPath, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertySectionData, 0x0018);
		}

		// struct FMovieScenePropertySectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionTemplate, PropertyData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertySectionTemplate, 0x0038);
		}

		// struct FTrackInstanceInputComponent
		TEST_METHOD(ScriptStruct__MovieScene__TrackInstanceInputComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackInstanceInputComponent, Section, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackInstanceInputComponent, OutputIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackInstanceInputComponent, UnknownData_GQ3V, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackInstanceInputComponent, 0x0010);
		}

		// struct FMovieSceneTrackInstanceComponent
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackInstanceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceComponent, Owner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceComponent, TrackInstanceClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackInstanceComponent, 0x0010);
		}

		// struct FEasingComponentData
		TEST_METHOD(ScriptStruct__MovieScene__EasingComponentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEasingComponentData, Section, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEasingComponentData, 0x0008);
		}

		// struct FMovieScenePropertyBinding
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertyBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertyBinding, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertyBinding, PropertyPath, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertyBinding, bCanUseClassLookup, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertyBinding, UnknownData_239X, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertyBinding, 0x0014);
		}

		// struct FMovieSceneSectionGroup
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionGroup, Sections, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionGroup, 0x0010);
		}

		// struct FMovieSceneObjectBindingID
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectBindingID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, Space, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, UnknownData_9G0S, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, Guid, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectBindingID, 0x0018);
		}

		// struct FMovieSceneObjectBindingIDs
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectBindingIDs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingIDs, IDs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectBindingIDs, 0x0010);
		}

		// struct FMovieSceneTrackLabels
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackLabels)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackLabels, Strings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackLabels, 0x0010);
		}

		// struct FMovieSceneExpansionState
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneExpansionState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneExpansionState, bExpanded, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneExpansionState, 0x0001);
		}

		// struct FMovieSceneEditorData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ExpansionStates, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, PinnedNodes, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewStart, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewEnd, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkStart, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkEnd, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, MarkedFrames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkingRange, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewRange, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEditorData, 0x00F0);
		}

		// struct FMovieSceneMarkedFrame
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneMarkedFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarkedFrame, FrameNumber, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarkedFrame, UnknownData_B6PZ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarkedFrame, Label, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMarkedFrame, 0x0018);
		}

		// struct FMovieSceneTimecodeSource
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimecodeSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimecodeSource, Timecode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimecodeSource, DeltaFrame, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimecodeSource, 0x0018);
		}

		// struct FMovieSceneBinding
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, ObjectGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, BindingName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, Tracks, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBinding, 0x0030);
		}

		// struct FMovieSceneBindingOverrideData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBindingOverrideData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, ObjectBindingId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, Object, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, bOverridesDefault, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, UnknownData_XR9E, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBindingOverrideData, 0x0024);
		}

		// struct FMovieSceneByteChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneByteChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, bHasDefaultValue, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, UnknownData_FSX8, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Enum, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, UnknownData_K1RF, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneByteChannel, 0x0098);
		}

		// struct FMovieSceneSequenceCompilerMaskStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceCompilerMaskStruct)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceCompilerMaskStruct, 0x0001);
		}

		// struct FMovieSceneEntitySystemGraphNodes
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEntitySystemGraphNodes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraphNodes, UnknownData_78EG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEntitySystemGraphNodes, 0x0038);
		}

		// struct FMovieSceneEntitySystemGraph
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEntitySystemGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraph, UnknownData_Z8Y5, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraph, Nodes, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraph, UnknownData_MR1P, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEntitySystemGraph, 0x0138);
		}

		// struct FMovieSceneEntitySystemGraphNode
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEntitySystemGraphNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraphNode, UnknownData_J4LM, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraphNode, System, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEntitySystemGraphNode, 0x0028);
		}

		// struct FMovieSceneEvalTemplatePtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplatePtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplatePtr, UnknownData_OMTX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplatePtr, 0x0088);
		}

		// struct FMovieSceneEmptyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEmptyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEmptyStruct, UnknownData_BUBS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEmptyStruct, 0x0001);
		}

		// struct FMovieSceneEvaluationGroupLUTIndex
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationGroupLUTIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, NumInitPtrs, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, NumEvalPtrs, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationGroupLUTIndex, 0x0008);
		}

		// struct FMovieSceneSequenceID
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceID, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceID, 0x0004);
		}

		// struct FMovieSceneTrackIdentifier
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackIdentifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackIdentifier, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackIdentifier, 0x0004);
		}

		// struct FMovieSceneEvaluationFieldTrackPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldTrackPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldTrackPtr, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldTrackPtr, TrackIdentifier, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldTrackPtr, 0x0008);
		}

		// struct FMovieSceneFieldEntry_EvaluationTrack
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFieldEntry_EvaluationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_EvaluationTrack, TrackPtr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_EvaluationTrack, NumChildren, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_EvaluationTrack, UnknownData_A5VP, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFieldEntry_EvaluationTrack, 0x000C);
		}

		// struct FMovieSceneFieldEntry_ChildTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFieldEntry_ChildTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_ChildTemplate, ChildIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_ChildTemplate, Flags, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_ChildTemplate, UnknownData_WSWS, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_ChildTemplate, ForcedTime, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFieldEntry_ChildTemplate, 0x0008);
		}

		// struct FMovieSceneEvaluationGroup
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, LUTIndices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, TrackLUT, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, SectionLUT, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationGroup, 0x0030);
		}

		// struct FMovieSceneEvaluationKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, TrackIdentifier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, SectionIndex, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationKey, 0x000C);
		}

		// struct FMovieSceneOrderedEvaluationKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneOrderedEvaluationKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, SetupIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, TearDownIndex, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneOrderedEvaluationKey, 0x0010);
		}

		// struct FMovieSceneEvaluationMetaData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, ActiveSequences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, ActiveEntities, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationMetaData, 0x0020);
		}

		// struct FMovieSceneFrameRange
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFrameRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFrameRange, UnknownData_XSOE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFrameRange, 0x0010);
		}

		// struct FMovieSceneEvaluationField
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, Ranges, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, Groups, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, MetaData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationField, 0x0030);
		}

		// struct FMovieSceneSegmentIdentifier
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSegmentIdentifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSegmentIdentifier, IdentifierIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSegmentIdentifier, 0x0004);
		}

		// struct FMovieSceneEvaluationFieldSegmentPtr : public FMovieSceneEvaluationFieldTrackPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldSegmentPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldSegmentPtr, SegmentID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldSegmentPtr, 0x000C);
		}

		// struct FMovieSceneEvaluationFieldEntityTree
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldEntityTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityTree, UnknownData_TIXZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldEntityTree, 0x0060);
		}

		// struct FMovieSceneEvaluationFieldEntityKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldEntityKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityKey, EntityOwner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityKey, EntityID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldEntityKey, 0x000C);
		}

		// struct FMovieSceneEvaluationFieldEntity
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldEntity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntity, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntity, SharedMetaDataIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldEntity, 0x0010);
		}

		// struct FMovieSceneEvaluationFieldEntityMetaData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldEntityMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityMetaData, ForcedTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityMetaData, UnknownData_BKZN, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityMetaData, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityMetaData, UnknownData_3RBS, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldEntityMetaData, 0x000C);
		}

		// struct FMovieSceneEvaluationFieldSharedEntityMetaData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldSharedEntityMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldSharedEntityMetaData, ObjectBindingId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldSharedEntityMetaData, 0x0010);
		}

		// struct FMovieSceneEntityComponentField
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEntityComponentField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntityComponentField, PersistentEntityTree, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntityComponentField, OneShotEntityTree, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntityComponentField, Entities, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntityComponentField, EntityMetaData, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntityComponentField, SharedMetaData, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEntityComponentField, 0x00F0);
		}

		// struct FMovieSceneEvaluationOperand
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationOperand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationOperand, ObjectBindingId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationOperand, SequenceID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationOperand, 0x0014);
		}

		// struct FMovieSceneSubSectionData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, Section, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, ObjectBindingId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, Flags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, UnknownData_P7RY, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSectionData, 0x001C);
		}

		// struct FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyStruct, UnknownData_9A98, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyStruct, 0x0008);
		}

		// struct FMovieSceneKeyTimeStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyTimeStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyTimeStruct, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyTimeStruct, UnknownData_3Y4E, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyTimeStruct, 0x0028);
		}

		// struct FGeneratedMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__GeneratedMovieSceneKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedMovieSceneKeyStruct, UnknownData_BJT9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeneratedMovieSceneKeyStruct, 0x0050);
		}

		// struct FMovieSceneObjectPathChannelKeyValue
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectPathChannelKeyValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannelKeyValue, SoftPtr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannelKeyValue, HardPtr, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectPathChannelKeyValue, 0x0030);
		}

		// struct FMovieSceneObjectPathChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectPathChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, PropertyClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, UnknownData_9LHS, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectPathChannel, 0x00C0);
		}

		// struct FMovieSceneSegment
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSegment, UnknownData_2U1D, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSegment, 0x0058);
		}

		// struct FSectionEvaluationData
		TEST_METHOD(ScriptStruct__MovieScene__SectionEvaluationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, ImplIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, ForcedTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, UnknownData_3RB0, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSectionEvaluationData, 0x000C);
		}

		// struct FMovieSceneTimeTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimeTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeTransform, TimeScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeTransform, Offset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimeTransform, 0x000C);
		}

		// struct FMovieSceneSequenceInstanceDataPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceInstanceDataPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceInstanceDataPtr, UnknownData_BRMY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceInstanceDataPtr, 0x0018);
		}

		// struct FMovieSceneSubSequenceTree
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSequenceTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceTree, UnknownData_NIO1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSequenceTree, 0x0060);
		}

		// struct FMovieSceneSubSequenceTreeEntry
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSequenceTreeEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceTreeEntry, UnknownData_LVGP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSequenceTreeEntry, 0x0008);
		}

		// struct FMovieSceneSequenceInstanceData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceInstanceData, UnknownData_B5BQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceInstanceData, 0x0008);
		}

		// struct FMovieSceneSequencePlaybackParams
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequencePlaybackParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, Frame, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, UnknownData_JUL5, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, MarkedFrame, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, PositionType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, UpdateMethod, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, UnknownData_1WTG, 0x0022);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequencePlaybackParams, 0x0028);
		}

		// struct FMovieSceneSequenceLoopCount
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceLoopCount)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceLoopCount, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceLoopCount, 0x0004);
		}

		// struct FMovieSceneSequencePlaybackSettings
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequencePlaybackSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, UnknownData_4FY4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, LoopCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, StartTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, UnknownData_QZCB, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequencePlaybackSettings, 0x0014);
		}

		// struct FMovieSceneSequenceReplProperties
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceReplProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, LastKnownPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, LastKnownStatus, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, UnknownData_R2UC, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, LastKnownNumLoops, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceReplProperties, 0x0010);
		}

		// struct FMovieSceneWarpCounter
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneWarpCounter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneWarpCounter, WarpCounts, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneWarpCounter, 0x0010);
		}

		// struct FMovieSceneSpawnable
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSpawnable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, SpawnTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Tags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, bContinuouslyRespawn, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, bEvaluateTracksWhenNotSpawned, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_0MVU, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Guid, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_LI1K, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Name, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, ObjectTemplate, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, ChildPossessables, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Ownership, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_IGLC, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, LevelName, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_FZUL, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSpawnable, 0x0090);
		}

		// struct FTestMovieSceneEvalTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieScene__TestMovieSceneEvalTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTestMovieSceneEvalTemplate, 0x0020);
		}

		// struct FMovieSceneTrackDisplayOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackDisplayOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackDisplayOptions, UnknownData_DQAK, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackDisplayOptions, 0x0004);
		}

		// struct FMovieSceneTrackInstanceInput
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackInstanceInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceInput, Section, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceInput, UnknownData_5CVY, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackInstanceInput, 0x0010);
		}

		// struct FMovieSceneTrackInstanceEntry
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackInstanceEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceEntry, BoundObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceEntry, TrackInstance, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackInstanceEntry, 0x0010);
		}

		// struct FMovieSceneSectionEvalOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionEvalOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionEvalOptions, bCanEditCompletionMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionEvalOptions, CompletionMode, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionEvalOptions, 0x0002);
		}

		// struct FMovieSceneEasingSettings
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEasingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, AutoEaseInDuration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, AutoEaseOutDuration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, EaseIn, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, bManualEaseIn, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, UnknownData_9BID, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, ManualEaseInDuration, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, EaseOut, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, bManualEaseOut, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, UnknownData_7RW9, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, ManualEaseOutDuration, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEasingSettings, 0x0038);
		}

		// struct FOptionalMovieSceneBlendType
		TEST_METHOD(ScriptStruct__MovieScene__OptionalMovieSceneBlendType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionalMovieSceneBlendType, BlendType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionalMovieSceneBlendType, bIsValid, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOptionalMovieSceneBlendType, 0x0002);
		}

		// struct FMovieSceneTrackEvalOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackEvalOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvalOptions, UnknownData_VFUG, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackEvalOptions, 0x0004);
		}

		// struct FMovieSceneTrackEvaluationFieldEntry
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackEvaluationFieldEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, Section, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, Range, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, ForcedTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, Flags, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, UnknownData_XS3M, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, LegacySortOrder, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackEvaluationFieldEntry, 0x0020);
		}

		// struct FMovieSceneTrackEvaluationField
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackEvaluationField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationField, Entries, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackEvaluationField, 0x0010);
		}

		// struct FMovieSceneRootEvaluationTemplateInstance
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneRootEvaluationTemplateInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, WeakRootSequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, CompiledDataManager, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_KL9O, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, EntitySystemLinker, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_9O7G, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, DirectorInstances, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_D6QC, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneRootEvaluationTemplateInstance, 0x00E8);
		}

		// struct FMovieSceneSectionParameters
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, StartFrameOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, bCanLoop, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, UnknownData_W5JF, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, EndFrameOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, FirstLoopStartFrameOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, TimeScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, HierarchicalBias, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, StartOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, PrerollTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, PostrollTime, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionParameters, 0x0024);
		}

		// struct FMovieScenePossessable
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePossessable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Tags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Guid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, PossessedObjectClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, ParentGuid, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePossessable, 0x0048);
		}

		// struct FMovieSceneTrackImplementationPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackImplementationPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackImplementationPtr, UnknownData_UKMY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackImplementationPtr, 0x0038);
		}

		// struct FMovieSceneEvaluationTrack
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, ObjectBindingId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationPriority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationMethod, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_YV6Y, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, SourceTrack, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_1FWZ, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, ChildTemplates, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, TrackTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationGroup, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_O1ND, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTrack, 0x0078);
		}

		// struct FMovieSceneEvaluationTemplateSerialNumber
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTemplateSerialNumber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplateSerialNumber, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTemplateSerialNumber, 0x0004);
		}

		// struct FMovieSceneTemplateGenerationLedger
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTemplateGenerationLedger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, LastTrackIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, UnknownData_TOB1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, TrackSignatureToTrackIdentifier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, SubSectionRanges, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTemplateGenerationLedger, 0x00A8);
		}

		// struct FMovieSceneEvaluationTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, Tracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, UnknownData_R8FC, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, SequenceSignature, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TemplateSerialNumber, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, UnknownData_S9RU, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TemplateLedger, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTemplate, 0x0160);
		}

		// struct FMovieSceneSequenceHierarchyNode
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceHierarchyNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, ParentID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, UnknownData_VJQH, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, Children, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceHierarchyNode, 0x0018);
		}

		// struct FMovieSceneTimeWarping
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimeWarping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeWarping, Start, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeWarping, End, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimeWarping, 0x0008);
		}

		// struct FMovieSceneNestedSequenceTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneNestedSequenceTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNestedSequenceTransform, LinearTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNestedSequenceTransform, Warping, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNestedSequenceTransform, 0x0014);
		}

		// struct FMovieSceneSequenceTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, LinearTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, UnknownData_7X66, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, NestedTransforms, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceTransform, 0x0020);
		}

		// struct FMovieSceneSubSequenceData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSequenceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, Sequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, RootToSequenceTransform, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, TickResolution, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, DeterministicSequenceID, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PlayRange, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, FullPlayRange, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnwarpedPlayRange, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PreRollRange, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PostRollRange, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, HierarchicalBias, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, bHasHierarchicalEasing, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnknownData_8BCN, 0x0097);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, InstanceData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnknownData_7TYX, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, SubSectionSignature, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, OuterToInnerTransform, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSequenceData, 0x00E8);
		}

		// struct FMovieSceneSequenceHierarchy
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceHierarchy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, RootNode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, Tree, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, SubSequences, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, Hierarchy, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceHierarchy, 0x0118);
		}

		// struct FMovieSceneFloatValue
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFloatValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, Tangent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, InterpMode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, TangentMode, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, PaddingByte, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, UnknownData_TE4X, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatValue, 0x001C);
		}

		// struct FMovieSceneKeyHandleMap : public FKeyHandleLookupTable
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyHandleMap)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyHandleMap, 0x0060);
		}

		// struct FMovieSceneFloatChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFloatChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, PreInfinityExtrap, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, PostInfinityExtrap, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, UnknownData_WDB1, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, bHasDefaultValue, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, UnknownData_NJR9, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, KeyHandles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, TickResolution, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatChannel, 0x00A0);
		}

		// struct FUIPFType : public FTableRowBase
		TEST_METHOD(ScriptStruct__UIPF__UIPFType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIPFType, StaticMesh, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIPFType, SkeletalMesh, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIPFType, CollideWithWorldStatic, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIPFType, CollideWithWorldDynamic, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIPFType, CollideWithPhysicsFoliage, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIPFType, KinematicBlocksPawn, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIPFType, UnknownData_LXHS, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUIPFType, 0x0020);
		}

		// struct FAlwaysRelevantActorInfo
		TEST_METHOD(ScriptStruct__ReplicationGraph__AlwaysRelevantActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlwaysRelevantActorInfo, Connection, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlwaysRelevantActorInfo, LastViewer, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlwaysRelevantActorInfo, LastViewTarget, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAlwaysRelevantActorInfo, 0x0018);
		}

		// struct FTearOffActorInfo
		TEST_METHOD(ScriptStruct__ReplicationGraph__TearOffActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTearOffActorInfo, UnknownData_MGVB, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTearOffActorInfo, Actor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTearOffActorInfo, UnknownData_EV1C, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTearOffActorInfo, 0x0018);
		}

		// struct FLastLocationGatherInfo
		TEST_METHOD(ScriptStruct__ReplicationGraph__LastLocationGatherInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLastLocationGatherInfo, Connection, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLastLocationGatherInfo, LastLocation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLastLocationGatherInfo, LastOutOfRangeLocationCheck, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLastLocationGatherInfo, 0x0020);
		}

		// struct FClassReplicationInfo
		TEST_METHOD(ScriptStruct__ReplicationGraph__ClassReplicationInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassReplicationInfo, DistancePriorityScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassReplicationInfo, StarvationPriorityScale, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassReplicationInfo, AccumulatedNetPriorityBias, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassReplicationInfo, ReplicationPeriodFrame, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassReplicationInfo, FastPath_ReplicationPeriodFrame, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassReplicationInfo, ActorChannelFrameTimeout, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassReplicationInfo, UnknownData_3FGE, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassReplicationInfo, CullDistance, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassReplicationInfo, CullDistanceSquared, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClassReplicationInfo, 0x0070);
		}

		// struct FConnectionAlwaysRelevantNodePair
		TEST_METHOD(ScriptStruct__ReplicationGraph__ConnectionAlwaysRelevantNodePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConnectionAlwaysRelevantNodePair, NetConnection, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConnectionAlwaysRelevantNodePair, Node, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConnectionAlwaysRelevantNodePair, 0x0010);
		}

		// struct FCapturedPropSegment
		TEST_METHOD(ScriptStruct__VariantManagerContent__CapturedPropSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, PropertyIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, UnknownData_7ACM, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, ComponentName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPropSegment, 0x0028);
		}

		// struct FVariantDependency
		TEST_METHOD(ScriptStruct__VariantManagerContent__VariantDependency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVariantDependency, VariantSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVariantDependency, Variant, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVariantDependency, bEnabled, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVariantDependency, UnknownData_AKCQ, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVariantDependency, 0x0058);
		}

		// struct FFunctionCaller
		TEST_METHOD(ScriptStruct__VariantManagerContent__FunctionCaller)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionCaller, FunctionName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionCaller, 0x0008);
		}

		// struct FMovieScene3DPathSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DPathSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, PathBindingID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, TimingCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, FrontAxisEnum, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UpAxisEnum, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UnknownData_S0WU, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UnknownData_7VTF, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DPathSectionTemplate, 0x00E0);
		}

		// struct FMovieSceneTransformMask
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneTransformMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTransformMask, Mask, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTransformMask, 0x0004);
		}

		// struct FMovieScene3DTransformKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DTransformKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Rotation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Time, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, UnknownData_PNSD, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DTransformKeyStruct, 0x0048);
		}

		// struct FMovieScene3DScaleKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DScaleKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, UnknownData_5PWM, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DScaleKeyStruct, 0x0030);
		}

		// struct FMovieScene3DRotationKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DRotationKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, Rotation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, UnknownData_OLO2, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DRotationKeyStruct, 0x0030);
		}

		// struct FMovieScene3DLocationKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DLocationKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, UnknownData_V7J6, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DLocationKeyStruct, 0x0030);
		}

		// struct FMovieScene3DTransformTemplateData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DTransformTemplateData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, TranslationCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, RotationCurve, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, ScaleCurve, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, ManualWeight, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, BlendType, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, UnknownData_QHOJ, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, Mask, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, bUseQuaternionInterpolation, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, UnknownData_ID46, 0x0649);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DTransformTemplateData, 0x0650);
		}

		// struct FMovieSceneActorReferenceKey
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, ComponentName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, SocketName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceKey, 0x0028);
		}

		// struct FMovieSceneActorReferenceData : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, UnknownData_3QVN, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, KeyValues, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, UnknownData_2G05, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceData, 0x00B0);
		}

		// struct FMovieSceneActorReferenceSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceSectionTemplate, PropertyData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceSectionTemplate, ActorReferenceData, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceSectionTemplate, 0x00E8);
		}

		// struct FMovieSceneAudioSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAudioSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplate, AudioSection, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAudioSectionTemplate, 0x0028);
		}

		// struct FMovieSceneAdditiveCameraAnimationTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAdditiveCameraAnimationTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAdditiveCameraAnimationTemplate, 0x0020);
		}

		// struct FMovieSceneCameraShakeSectionData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, ShakeClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, PlayScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, PlaySpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UnknownData_166K, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UserDefinedPlaySpace, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UnknownData_861R, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSectionData, 0x0020);
		}

		// struct FMovieSceneCameraShakeSectionTemplate : public FMovieSceneAdditiveCameraAnimationTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, UnknownData_S186, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSectionTemplate, 0x0048);
		}

		// struct FMovieSceneCameraAnimSectionData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraAnimSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, CameraAnim, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, PlayScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, BlendInTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, BlendOutTime, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, bLooping, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, UnknownData_8F4G, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraAnimSectionData, 0x0020);
		}

		// struct FMovieSceneCameraAnimSectionTemplate : public FMovieSceneAdditiveCameraAnimationTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraAnimSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, UnknownData_V3UG, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraAnimSectionTemplate, 0x0048);
		}

		// struct FMovieSceneCameraShakeSourceShakeSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSourceShakeSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceShakeSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceShakeSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceShakeSectionTemplate, SectionEndTime, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSourceShakeSectionTemplate, 0x0048);
		}

		// struct FMovieSceneCameraShakeSourceTrigger
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSourceTrigger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, ShakeClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, PlayScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, PlaySpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, UnknownData_EVR5, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, UserDefinedPlaySpace, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, UnknownData_R9E6, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSourceTrigger, 0x0020);
		}

		// struct FMovieSceneCameraShakeSourceTriggerSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSourceTriggerSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTriggerSectionTemplate, TriggerTimes, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTriggerSectionTemplate, TriggerValues, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSourceTriggerSectionTemplate, 0x0040);
		}

		// struct FMovieSceneColorKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneColorKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, Color, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, Time, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, UnknownData_0RBL, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneColorKeyStruct, 0x0038);
		}

		// struct FMovieSceneColorSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneColorSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, Curves, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, BlendType, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, UnknownData_GZMG, 0x02B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneColorSectionTemplate, 0x02C0);
		}

		// struct FMovieSceneEventPayloadVariable
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventPayloadVariable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventPayloadVariable, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventPayloadVariable, 0x0010);
		}

		// struct FMovieSceneEventPtrs
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventPtrs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventPtrs, Function, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventPtrs, BoundObjectProperty, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventPtrs, 0x0028);
		}

		// struct FMovieSceneEvent
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvent, Ptrs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvent, 0x0028);
		}

		// struct FMovieSceneEventChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, UnknownData_NQF5, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventChannel, 0x0088);
		}

		// struct FMovieSceneEventTriggerData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventTriggerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerData, Ptrs, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerData, ObjectBindingId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerData, UnknownData_LV9R, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventTriggerData, 0x0048);
		}

		// struct FMovieSceneEventParameters
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventParameters, UnknownData_673I, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventParameters, 0x0028);
		}

		// struct FEventPayload
		TEST_METHOD(ScriptStruct__MovieSceneTracks__EventPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventPayload, EventName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventPayload, Parameters, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventPayload, 0x0030);
		}

		// struct FMovieSceneEventSectionData : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, UnknownData_K6CZ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventSectionData, 0x0088);
		}

		// struct FMovieSceneEventSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionTemplate, EventData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionTemplate, UnknownData_32J6, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventSectionTemplate, 0x00B0);
		}

		// struct FMovieSceneFadeSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneFadeSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, FadeCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, FadeColor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, UnknownData_OAWD, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFadeSectionTemplate, 0x00D8);
		}

		// struct FColorParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__ColorParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, RedCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, GreenCurve, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, BlueCurve, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, AlphaCurve, 0x01E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorParameterNameAndCurves, 0x0288);
		}

		// struct FScalarParameterNameAndCurve
		TEST_METHOD(ScriptStruct__MovieSceneTracks__ScalarParameterNameAndCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterNameAndCurve, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterNameAndCurve, ParameterCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterNameAndCurve, 0x00A8);
		}

		// struct FBoolParameterNameAndCurve
		TEST_METHOD(ScriptStruct__MovieSceneTracks__BoolParameterNameAndCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolParameterNameAndCurve, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolParameterNameAndCurve, ParameterCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoolParameterNameAndCurve, 0x0098);
		}

		// struct FVector2DParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__Vector2DParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2DParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2DParameterNameAndCurves, XCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2DParameterNameAndCurves, YCurve, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2DParameterNameAndCurves, 0x0148);
		}

		// struct FVectorParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__VectorParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, XCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, YCurve, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, ZCurve, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorParameterNameAndCurves, 0x01E8);
		}

		// struct FTransformParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__TransformParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, Translation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, Rotation, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, Scale, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformParameterNameAndCurves, 0x05A8);
		}

		// struct FMovieSceneParameterSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Scalars, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Bools, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Vector2Ds, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Vectors, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Colors, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Transforms, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParameterSectionTemplate, 0x0080);
		}

		// struct FMovieSceneMaterialParameterCollectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneMaterialParameterCollectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMaterialParameterCollectionTemplate, MPC, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMaterialParameterCollectionTemplate, 0x0088);
		}

		// struct FMovieSceneObjectPropertyTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneObjectPropertyTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPropertyTemplate, ObjectChannel, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectPropertyTemplate, 0x00F8);
		}

		// struct FMovieSceneComponentMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneComponentMaterialSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentMaterialSectionTemplate, MaterialIndex, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentMaterialSectionTemplate, UnknownData_85VV, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneComponentMaterialSectionTemplate, 0x0088);
		}

		// struct FMovieSceneParticleParameterSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleParameterSectionTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleParameterSectionTemplate, 0x0080);
		}

		// struct FMovieSceneParticleChannel : public FMovieSceneByteChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleChannel)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleChannel, 0x0098);
		}

		// struct FMovieSceneParticleSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParticleSectionTemplate, ParticleKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleSectionTemplate, 0x00B8);
		}

		// struct FMovieScenePrimitiveMaterialTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScenePrimitiveMaterialTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePrimitiveMaterialTemplate, MaterialIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePrimitiveMaterialTemplate, UnknownData_DY8E, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePrimitiveMaterialTemplate, MaterialChannel, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePrimitiveMaterialTemplate, 0x00E8);
		}

		// struct FMovieSceneVectorPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, ComponentCurves, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, NumChannelsUsed, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, BlendType, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, UnknownData_PY2Z, 0x02BD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorPropertySectionTemplate, 0x02C0);
		}

		// struct FMovieSceneStringChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneStringChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, Values, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, DefaultValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, bHasDefaultValue, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, UnknownData_OW5Y, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneStringChannel, 0x00A0);
		}

		// struct FMovieSceneStringPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneStringPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringPropertySectionTemplate, StringCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneStringPropertySectionTemplate, 0x00D8);
		}

		// struct FMovieSceneIntegerPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneIntegerPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, IntegerCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, BlendType, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, UnknownData_XOXE, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneIntegerPropertySectionTemplate, 0x00D0);
		}

		// struct FMovieSceneEnumPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEnumPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEnumPropertySectionTemplate, EnumCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEnumPropertySectionTemplate, 0x00D0);
		}

		// struct FMovieSceneBytePropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneBytePropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBytePropertySectionTemplate, ByteCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBytePropertySectionTemplate, 0x00D0);
		}

		// struct FMovieSceneBoolPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneBoolPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolPropertySectionTemplate, BoolCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBoolPropertySectionTemplate, 0x00C8);
		}

		// struct FMovieSceneSkeletalAnimationParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, FirstLoopStartFrameOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, StartFrameOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, EndFrameOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, PlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_VHUN, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, SlotName, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_26S3, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, Weight, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, bSkipAnimNotifiers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, bForceCustomMode, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_TIR1, 0x00CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, StartOffset, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, EndOffset, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_6YWX, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationParams, 0x00D8);
		}

		// struct FMovieSceneSkeletalAnimationSectionTemplateParameters : public FMovieSceneSkeletalAnimationParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationSectionTemplateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionStartTime, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionEndTime, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, 0x00E0);
		}

		// struct FMovieSceneSkeletalAnimationSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationSectionTemplate, 0x0100);
		}

		// struct FMovieSceneSlomoSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSlomoSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSlomoSectionTemplate, SlomoCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSlomoSectionTemplate, 0x00C0);
		}

		// struct FLevelVisibilityComponentData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__LevelVisibilityComponentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelVisibilityComponentData, Section, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelVisibilityComponentData, 0x0008);
		}

		// struct FMovieSceneVectorKeyStructBase : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorKeyStructBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStructBase, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStructBase, UnknownData_XLR7, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorKeyStructBase, 0x0028);
		}

		// struct FMovieSceneVector4KeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVector4KeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector4KeyStruct, UnknownData_IHVJ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector4KeyStruct, Vector, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVector4KeyStruct, 0x0040);
		}

		// struct FMovieSceneVectorKeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStruct, Vector, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStruct, UnknownData_KUE5, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorKeyStruct, 0x0038);
		}

		// struct FMovieSceneVector2DKeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVector2DKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector2DKeyStruct, Vector, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVector2DKeyStruct, 0x0030);
		}

		// struct FMovieSceneVisibilitySectionTemplate : public FMovieSceneBoolPropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVisibilitySectionTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVisibilitySectionTemplate, 0x00C8);
		}

		// struct FMovieSceneCameraShakeSourceTriggerChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSourceTriggerChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTriggerChannel, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTriggerChannel, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTriggerChannel, UnknownData_B0QK, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSourceTriggerChannel, 0x0088);
		}

		// struct FMovieSceneSkeletalAnimRootMotionTrackParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimRootMotionTrackParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimRootMotionTrackParams, UnknownData_F69Q, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimRootMotionTrackParams, 0x0030);
		}

		// struct FSourceEffectChorusSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectChorusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Depth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, WetLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, DryLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Spread, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, DepthModulation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, FrequencyModulation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, FeedbackModulation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, WetModulation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, DryModulation, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, SpreadModulation, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectChorusSettings, 0x0078);
		}

		// struct FSourceEffectChorusBaseSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectChorusBaseSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusBaseSettings, Depth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusBaseSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusBaseSettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusBaseSettings, WetLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusBaseSettings, DryLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusBaseSettings, Spread, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectChorusBaseSettings, 0x0018);
		}

		// struct FSourceEffectDynamicsProcessorSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectDynamicsProcessorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, DynamicsProcessorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, PeakMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, UnknownData_LCBA, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, LookAheadMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, AttackTimeMsec, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, ReleaseTimeMsec, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, ThresholdDb, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, Ratio, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, KneeBandwidthDb, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, InputGainDb, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, OutputGainDb, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, UnknownData_2BNL, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectDynamicsProcessorSettings, 0x0028);
		}

		// struct FSourceEffectEnvelopeFollowerSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectEnvelopeFollowerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, AttackTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, ReleaseTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, PeakMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, bIsAnalogMode, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, UnknownData_9MHY, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectEnvelopeFollowerSettings, 0x000C);
		}

		// struct FSourceEffectEQBand
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectEQBand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, Bandwidth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, GainDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, UnknownData_QXD6, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectEQBand, 0x0010);
		}

		// struct FSourceEffectEQSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectEQSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQSettings, EQBands, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectEQSettings, 0x0010);
		}

		// struct FSourceEffectFilterAudioBusModulationSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectFilterAudioBusModulationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, AudioBus, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, EnvelopeFollowerAttackTimeMsec, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, EnvelopeFollowerReleaseTimeMsec, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, EnvelopeGainMultiplier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, FilterParam, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, UnknownData_NXDL, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, MinFrequencyModulation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, MaxFrequencyModulation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, MinResonanceModulation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, MaxResonanceModulation, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectFilterAudioBusModulationSettings, 0x0028);
		}

		// struct FSourceEffectFilterSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, FilterCircuit, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, FilterType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, UnknownData_X3EF, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, CutoffFrequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, FilterQ, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, UnknownData_JUT6, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, AudioBusModulation, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectFilterSettings, 0x0020);
		}

		// struct FSourceEffectFoldbackDistortionSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectFoldbackDistortionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFoldbackDistortionSettings, InputGainDb, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFoldbackDistortionSettings, ThresholdDb, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFoldbackDistortionSettings, OutputGainDb, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectFoldbackDistortionSettings, 0x000C);
		}

		// struct FSourceEffectMidSideSpreaderSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectMidSideSpreaderSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, SpreadAmount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, InputMode, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, OutputMode, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, bEqualPower, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, UnknownData_B3LR, 0x0007);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectMidSideSpreaderSettings, 0x0008);
		}

		// struct FSourceEffectPannerSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectPannerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPannerSettings, Spread, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPannerSettings, Pan, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectPannerSettings, 0x0008);
		}

		// struct FSourceEffectPhaserSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectPhaserSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, WetLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, LFOType, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, UseQuadraturePhase, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, UnknownData_RBLE, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectPhaserSettings, 0x0010);
		}

		// struct FSourceEffectRingModulationSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectRingModulationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, ModulatorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, UnknownData_C85D, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, Depth, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, DryLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, WetLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, UnknownData_26ZY, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, AudioBusModulator, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectRingModulationSettings, 0x0020);
		}

		// struct FSourceEffectSimpleDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectSimpleDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, SpeedOfSound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, DelayAmount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, DryAmount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, WetAmount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, Feedback, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, UnknownData_DZOK, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectSimpleDelaySettings, 0x0018);
		}

		// struct FSourceEffectStereoDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectStereoDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DelayMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, UnknownData_6ZTC, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DelayTimeMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DelayRatio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, WetLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DryLevel, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, bFilterEnabled, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, FilterType, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, UnknownData_09QV, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, FilterFrequency, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, FilterQ, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectStereoDelaySettings, 0x0024);
		}

		// struct FSourceEffectWaveShaperSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectWaveShaperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectWaveShaperSettings, Amount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectWaveShaperSettings, OutputGainDb, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectWaveShaperSettings, 0x0008);
		}

		// struct FSubmixEffectConvolutionReverbSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectConvolutionReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, NormalizationVolumeDb, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, bBypass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, bMixInputChannelFormatToImpulseResponseFormat, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, bMixReverbOutputToOutputChannelFormat, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, UnknownData_KIHW, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, SurroundRearChannelBleedDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, bInvertRearChannelBleedPhase, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, bSurroundRearChannelFlip, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, UnknownData_ETU8, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, SurroundRearChannelBleedAmount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, UnknownData_SPV8, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, ImpulseResponse, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, AllowHArdwareAcceleration, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, UnknownData_H42C, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectConvolutionReverbSettings, 0x0028);
		}

		// struct FSubmixEffectDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDelaySettings, MaximumDelayLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDelaySettings, InterpolationTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDelaySettings, DelayLength, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDelaySettings, 0x000C);
		}

		// struct FSubmixEffectFilterSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterAlgorithm, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, UnknownData_H072, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterFrequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterQ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectFilterSettings, 0x000C);
		}

		// struct FSubmixEffectFlexiverbSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectFlexiverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, PreDelay, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, DecayTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, RoomDampening, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, Complexity, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectFlexiverbSettings, 0x0010);
		}

		// struct FDynamicsBandSettings
		TEST_METHOD(ScriptStruct__Synthesis__DynamicsBandSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, CrossoverTopFrequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, AttackTimeMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, ReleaseTimeMsec, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, ThresholdDb, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, Ratio, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, KneeBandwidthDb, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, InputGainDb, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, OutputGainDb, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicsBandSettings, 0x0020);
		}

		// struct FSubmixEffectMultibandCompressorSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectMultibandCompressorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, DynamicsProcessorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, PeakMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, UnknownData_0X4O, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, LookAheadMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, bLinkChannels, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, bAnalogMode, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, bFourPole, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, UnknownData_SXKU, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, Bands, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectMultibandCompressorSettings, 0x0020);
		}

		// struct FSubmixEffectStereoDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectStereoDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, DelayMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, UnknownData_OSXY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, DelayTimeMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, DelayRatio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, WetLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, DryLevel, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, bFilterEnabled, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, FilterType, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, UnknownData_MZGF, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, FilterFrequency, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, FilterQ, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectStereoDelaySettings, 0x0024);
		}

		// struct FTapDelayInfo
		TEST_METHOD(ScriptStruct__Synthesis__TapDelayInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, TapLineMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, UnknownData_8FZX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, DelayLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, Gain, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, OutputChannel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, PanInDegrees, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, TapId, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTapDelayInfo, 0x0018);
		}

		// struct FSubmixEffectTapDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectTapDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectTapDelaySettings, MaximumDelayLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectTapDelaySettings, InterpolationTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectTapDelaySettings, Taps, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectTapDelaySettings, 0x0018);
		}

		// struct FSynthKnobStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__Synthesis__SynthKnobStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, LargeKnob, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, LargeKnobOverlay, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MediumKnob, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MediumKnobOverlay, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MinValueAngle, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MaxValueAngle, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, KnobSize, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, UnknownData_NOGL, 0x0231);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynthKnobStyle, 0x0238);
		}

		// struct FSynthSlateStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__Synthesis__SynthSlateStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthSlateStyle, SizeType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthSlateStyle, ColorStyle, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthSlateStyle, UnknownData_WOGL, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynthSlateStyle, 0x0010);
		}

		// struct FSynth1PatchCable
		TEST_METHOD(ScriptStruct__Synthesis__Synth1PatchCable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth1PatchCable, Depth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth1PatchCable, Destination, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth1PatchCable, UnknownData_JROT, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynth1PatchCable, 0x0008);
		}

		// struct FEpicSynth1Patch
		TEST_METHOD(ScriptStruct__Synthesis__EpicSynth1Patch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEpicSynth1Patch, PatchSource, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEpicSynth1Patch, UnknownData_YMMM, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEpicSynth1Patch, PatchCables, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEpicSynth1Patch, 0x0018);
		}

		// struct FModularSynthPreset : public FTableRowBase
		TEST_METHOD(ScriptStruct__Synthesis__ModularSynthPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_YXK1, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Type, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_0FIL, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Gain, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Octave, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Semitones, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Cents, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1PulseWidth, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Type, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_ZTMK, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Gain, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Octave, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Semitones, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Cents, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2PulseWidth, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Portamento, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_KRZ7, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Spread, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Pan, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Frequency, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Gain, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Type, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Mode, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1PatchType, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_EW8J, 0x0057);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Frequency, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Gain, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Type, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Mode, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2PatchType, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_23KG, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, GainDb, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, AttackTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, DecayTime, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, SustainGain, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ReleaseTime, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModEnvPatchType, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModEnvBiasPatchType, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_SZTE, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_ABCZ, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeDepth, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeAttackTime, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeDecayTime, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeSustainGain, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeReleaseTime, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_0CCH, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterFrequency, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterQ, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterType, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterAlgorithm, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_OHXO, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_51WE, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_G97C, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayTime, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayFeedback, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayWetlevel, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayRatio, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_QBRQ, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ChorusDepth, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ChorusFeedback, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ChorusFrequency, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_HTPI, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Patches, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModularSynthPreset, 0x00E0);
		}

		// struct FModularSynthPresetBankEntry
		TEST_METHOD(ScriptStruct__Synthesis__ModularSynthPresetBankEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPresetBankEntry, PresetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPresetBankEntry, Preset, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModularSynthPresetBankEntry, 0x00F0);
		}

		// struct FSourceEffectBitCrusherSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectBitCrusherSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, CrushedSampleRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, UnknownData_AK9I, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, SampleRateModulation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, CrushedBits, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, UnknownData_7V4L, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, BitModulation, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectBitCrusherSettings, 0x0030);
		}

		// struct FSynth2DSliderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__Synthesis__Synth2DSliderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, NormalThumbImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, DisabledThumbImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, NormalBarImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, DisabledBarImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, BackgroundImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, BarThickness, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, UnknownData_E6QL, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynth2DSliderStyle, 0x02B8);
		}

		// struct FPatchId
		TEST_METHOD(ScriptStruct__Synthesis__PatchId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPatchId, ID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPatchId, 0x0004);
		}

		// struct FSourceEffectBitCrusherBaseSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectBitCrusherBaseSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherBaseSettings, SampleRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherBaseSettings, BitDepth, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectBitCrusherBaseSettings, 0x0008);
		}

		// struct FNavigationFilterArea
		TEST_METHOD(ScriptStruct__NavigationSystem__NavigationFilterArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, AreaClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, TravelCostOverride, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, EnteringCostOverride, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, UnknownData_UB8E, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationFilterArea, 0x0018);
		}

		// struct FNavigationFilterFlags
		TEST_METHOD(ScriptStruct__NavigationSystem__NavigationFilterFlags)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterFlags, UnknownData_P1VS, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationFilterFlags, 0x0004);
		}

		// struct FNavCollisionBox
		TEST_METHOD(ScriptStruct__NavigationSystem__NavCollisionBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionBox, Offset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionBox, Extent, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavCollisionBox, 0x0018);
		}

		// struct FNavCollisionCylinder
		TEST_METHOD(ScriptStruct__NavigationSystem__NavCollisionCylinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Offset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Radius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Height, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavCollisionCylinder, 0x0014);
		}

		// struct FNavGraphNode
		TEST_METHOD(ScriptStruct__NavigationSystem__NavGraphNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphNode, Owner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphNode, UnknownData_LI46, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavGraphNode, 0x0018);
		}

		// struct FNavGraphEdge
		TEST_METHOD(ScriptStruct__NavigationSystem__NavGraphEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphEdge, UnknownData_O58C, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavGraphEdge, 0x0018);
		}

		// struct FNavLinkCustomInstanceData : public FActorComponentInstanceData
		TEST_METHOD(ScriptStruct__NavigationSystem__NavLinkCustomInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavLinkCustomInstanceData, NavLinkUserId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavLinkCustomInstanceData, UnknownData_GHYW, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavLinkCustomInstanceData, 0x0070);
		}

		// struct FRecastNavMeshGenerationProperties
		TEST_METHOD(ScriptStruct__NavigationSystem__RecastNavMeshGenerationProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, TilePoolSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, TileSizeUU, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, CellSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, CellHeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentRadius, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentHeight, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentMaxSlope, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentMaxStepHeight, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, MinRegionArea, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, MergeRegionSize, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, MaxSimplificationError, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, TileNumberHardLimit, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, RegionPartitioning, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, LayerPartitioning, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, UnknownData_L48Y, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, RegionChunkSplits, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, LayerChunkSplits, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, UnknownData_B2L4, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecastNavMeshGenerationProperties, 0x0040);
		}

		// struct FSupportedAreaData
		TEST_METHOD(ScriptStruct__NavigationSystem__SupportedAreaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaClassName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, UnknownData_EHH0, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaClass, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupportedAreaData, 0x0020);
		}

		// struct FGameplayResourceSet
		TEST_METHOD(ScriptStruct__GameplayTasks__GameplayResourceSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayResourceSet, UnknownData_PZA5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayResourceSet, 0x0002);
		}

		// struct FProcMeshTangent
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshTangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, TangentX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, bFlipTangentY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, UnknownData_72EY, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshTangent, 0x0010);
		}

		// struct FProcMeshVertex
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Tangent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Color, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV0, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV1, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV2, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV3, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshVertex, 0x004C);
		}

		// struct FProcMeshSection
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, ProcVertexBuffer, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, ProcIndexBuffer, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, SectionLocalBox, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, bEnableCollision, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, bSectionVisible, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, UnknownData_8T84, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshSection, 0x0040);
		}

		// struct FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__InputEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputEvent, UnknownData_N6TZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputEvent, 0x0018);
		}

		// struct FKeyEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__KeyEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyEvent, UnknownData_54NB, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyEvent, 0x0038);
		}

		// struct FNavigationEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__NavigationEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationEvent, UnknownData_B5AD, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationEvent, 0x0020);
		}

		// struct FAnalogInputEvent : public FKeyEvent
		TEST_METHOD(ScriptStruct__SlateCore__AnalogInputEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnalogInputEvent, UnknownData_D6TR, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnalogInputEvent, 0x0040);
		}

		// struct FFontOutlineSettings
		TEST_METHOD(ScriptStruct__SlateCore__FontOutlineSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, bSeparateFillAlpha, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, bApplyOutlineToDropShadows, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, UnknownData_RWPB, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineColor, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontOutlineSettings, 0x0020);
		}

		// struct FSlateFontInfo
		TEST_METHOD(ScriptStruct__SlateCore__SlateFontInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, FontObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, FontMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, OutlineSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, UnknownData_0AA1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, TypefaceFontName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, Size, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, LetterSpacing, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, UnknownData_00HM, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateFontInfo, 0x0058);
		}

		// struct FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateWidgetStyle, UnknownData_MAJA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateWidgetStyle, 0x0008);
		}

		// struct FMargin
		TEST_METHOD(ScriptStruct__SlateCore__Margin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Left, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Top, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Right, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Bottom, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMargin, 0x0010);
		}

		// struct FSlateColor
		TEST_METHOD(ScriptStruct__SlateCore__SlateColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, SpecifiedColor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, ColorUseRule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, UnknownData_ZRQ0, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateColor, 0x0028);
		}

		// struct FSlateBrush
		TEST_METHOD(ScriptStruct__SlateCore__SlateBrush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_8VAI, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ImageSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Margin, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, TintColor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ResourceObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ResourceName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UVRegion, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, DrawAs, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Tiling, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Mirroring, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ImageType, 0x006F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_YZX1, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_KUQX, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateBrush, 0x0088);
		}

		// struct FTableRowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TableRowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, SelectorFocusedBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveHoveredBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveHoveredBrush, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveBrush, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, EvenRowBackgroundHoveredBrush, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, EvenRowBackgroundBrush, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, OddRowBackgroundHoveredBrush, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, OddRowBackgroundBrush, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, TextColor, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, SelectedTextColor, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Above, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Onto, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Below, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveHighlightedBrush, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveHighlightedBrush, 0x0740);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableRowStyle, 0x07C8);
		}

		// struct FSlateSound
		TEST_METHOD(ScriptStruct__SlateCore__SlateSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateSound, ResourceObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateSound, UnknownData_HCW7, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateSound, 0x0018);
		}

		// struct FButtonStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ButtonStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Normal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Hovered, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Pressed, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Disabled, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, NormalPadding, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, PressedPadding, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, PressedSlateSound, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, HoveredSlateSound, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FButtonStyle, 0x0278);
		}

		// struct FComboButtonStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ComboButtonStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, DownArrowImage, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ShadowOffset, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ShadowColorAndOpacity, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, MenuBorderBrush, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, MenuBorderPadding, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComboButtonStyle, 0x03B8);
		}

		// struct FComboBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ComboBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, ComboButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, PressedSlateSound, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, SelectionChangeSlateSound, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComboBoxStyle, 0x03F0);
		}

		// struct FEditableTextStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__EditableTextStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, Font, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, ColorAndOpacity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, BackgroundImageSelected, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, BackgroundImageComposing, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, CaretImage, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditableTextStyle, 0x0220);
		}

		// struct FScrollBarStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBarStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalBackgroundImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalBackgroundImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalTopSlotImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalTopSlotImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalBottomSlotImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalBottomSlotImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, NormalThumbImage, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HoveredThumbImage, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, DraggedThumbImage, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBarStyle, 0x04D0);
		}

		// struct FEditableTextBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__EditableTextBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageNormal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageHovered, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageFocused, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageReadOnly, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, Padding, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, Font, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ForegroundColor, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundColor, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ReadOnlyForegroundColor, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, HScrollBarPadding, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, VScrollBarPadding, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ScrollBarStyle, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditableTextBoxStyle, 0x07F8);
		}

		// struct FTextBlockStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TextBlockStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, Font, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ColorAndOpacity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ShadowOffset, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ShadowColorAndOpacity, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, SelectedBackgroundColor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, HighlightColor, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, HighlightShape, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, StrikeBrush, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, UnderlineBrush, 0x01E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextBlockStyle, 0x0270);
		}

		// struct FSpinBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SpinBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, BackgroundBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, HoveredBackgroundBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ActiveFillBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, InactiveFillBrush, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ArrowsImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ForegroundColor, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, TextPadding, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpinBoxStyle, 0x02E8);
		}

		// struct FFocusEvent
		TEST_METHOD(ScriptStruct__SlateCore__FocusEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFocusEvent, UnknownData_ETES, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFocusEvent, 0x0008);
		}

		// struct FMotionEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__MotionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotionEvent, UnknownData_TZRB, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMotionEvent, 0x0048);
		}

		// struct FGeometry
		TEST_METHOD(ScriptStruct__SlateCore__Geometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometry, UnknownData_JHRM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometry, 0x0038);
		}

		// struct FPointerEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__PointerEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointerEvent, UnknownData_MVJM, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointerEvent, 0x0070);
		}

		// struct FCharacterEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__CharacterEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterEvent, UnknownData_DATQ, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterEvent, 0x0020);
		}

		// struct FFontData
		TEST_METHOD(ScriptStruct__SlateCore__FontData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, FontFilename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, Hinting, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, LoadingPolicy, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, UnknownData_97ZL, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, SubFaceIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, FontFaceAsset, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontData, 0x0020);
		}

		// struct FTypefaceEntry
		TEST_METHOD(ScriptStruct__SlateCore__TypefaceEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypefaceEntry, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypefaceEntry, Font, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTypefaceEntry, 0x0028);
		}

		// struct FTypeface
		TEST_METHOD(ScriptStruct__SlateCore__Typeface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypeface, Fonts, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTypeface, 0x0010);
		}

		// struct FCompositeFallbackFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeFallbackFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, Typeface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, ScalingFactor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, UnknownData_M2W8, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeFallbackFont, 0x0018);
		}

		// struct FCompositeSubFont : public FCompositeFallbackFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeSubFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSubFont, CharacterRanges, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSubFont, Cultures, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeSubFont, 0x0038);
		}

		// struct FCaptureLostEvent
		TEST_METHOD(ScriptStruct__SlateCore__CaptureLostEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureLostEvent, UnknownData_PELX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCaptureLostEvent, 0x0008);
		}

		// struct FWindowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__WindowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, MinimizeButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, MaximizeButtonStyle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, RestoreButtonStyle, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, CloseButtonStyle, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, TitleTextStyle, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, ActiveTitleBrush, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, InactiveTitleBrush, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, FlashTitleBrush, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BackgroundColor, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, OutlineBrush, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, OutlineColor, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BorderBrush, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BackgroundBrush, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, ChildBackgroundBrush, 0x0FD8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWindowStyle, 0x1060);
		}

		// struct FScrollBorderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBorderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBorderStyle, TopShadowBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBorderStyle, BottomShadowBrush, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBorderStyle, 0x0118);
		}

		// struct FScrollBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, TopShadowBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, BottomShadowBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, LeftShadowBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, RightShadowBrush, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBoxStyle, 0x0228);
		}

		// struct FDockTabStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__DockTabStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, CloseButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, NormalBrush, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ActiveBrush, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ColorOverlayTabBrush, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ColorOverlayIconBrush, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ForegroundBrush, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, HoveredBrush, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ContentAreaBrush, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, TabWellBrush, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, TabPadding, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, OverlapWidth, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, UnknownData_N695, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, FlashColor, 0x06D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDockTabStyle, 0x0700);
		}

		// struct FTableColumnHeaderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TableColumnHeaderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortPrimaryAscendingImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortPrimaryDescendingImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortSecondaryAscendingImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortSecondaryDescendingImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, NormalBrush, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, HoveredBrush, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownImage, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownNormalBorderBrush, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownHoveredBorderBrush, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableColumnHeaderStyle, 0x04D0);
		}

		// struct FSplitterStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SplitterStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplitterStyle, HandleNormalBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplitterStyle, HandleHighlightBrush, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplitterStyle, 0x0118);
		}

		// struct FHeaderRowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__HeaderRowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ColumnStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, LastColumnStyle, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ColumnSplitterStyle, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, BackgroundBrush, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ForegroundColor, 0x0B48);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHeaderRowStyle, 0x0B70);
		}

		// struct FInlineTextImageStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__InlineTextImageStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, Image, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, Baseline, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, UnknownData_7M83, 0x0092);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInlineTextImageStyle, 0x0098);
		}

		// struct FSliderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SliderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, NormalBarImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, HoveredBarImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, DisabledBarImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, NormalThumbImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, HoveredThumbImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, DisabledThumbImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, BarThickness, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, UnknownData_GIIL, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSliderStyle, 0x0340);
		}

		// struct FVolumeControlStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__VolumeControlStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, SliderStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, HighVolumeImage, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, MidVolumeImage, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, LowVolumeImage, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, NoVolumeImage, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, MutedImage, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVolumeControlStyle, 0x05F0);
		}

		// struct FSearchBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SearchBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, TextBoxStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ActiveFontInfo, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, UpArrowImage, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, DownArrowImage, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, GlassImage, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ClearImage, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ImagePadding, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, bLeftAlignButtons, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, UnknownData_B3P6, 0x0A89);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSearchBoxStyle, 0x0A90);
		}

		// struct FExpandableAreaStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ExpandableAreaStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, CollapsedImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, ExpandedImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, RolloutAnimationSeconds, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, UnknownData_HHEZ, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpandableAreaStyle, 0x0120);
		}

		// struct FInlineEditableTextBlockStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__InlineEditableTextBlockStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineEditableTextBlockStyle, EditableTextBoxStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineEditableTextBlockStyle, TextStyle, 0x0800);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInlineEditableTextBlockStyle, 0x0A70);
		}

		// struct FHyperlinkStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__HyperlinkStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, UnderlineStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, TextStyle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, Padding, 0x04F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHyperlinkStyle, 0x0500);
		}

		// struct FCheckBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__CheckBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckBoxType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UnknownData_6S9J, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedImage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedHoveredImage, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedPressedImage, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedImage, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedHoveredImage, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedPressedImage, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedImage, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedHoveredImage, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedPressedImage, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, Padding, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, ForegroundColor, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, BorderBackgroundColor, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedSlateSound, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedSlateSound, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, HoveredSlateSound, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCheckBoxStyle, 0x0580);
		}

		// struct FProgressBarStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ProgressBarStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, BackgroundImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, FillImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, MarqueeImage, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProgressBarStyle, 0x01A0);
		}

		// struct FCompositeFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, DefaultTypeface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, FallbackTypeface, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, SubTypefaces, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeFont, 0x0038);
		}

		// struct FVirtualKeyboardOptions
		TEST_METHOD(ScriptStruct__Slate__VirtualKeyboardOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualKeyboardOptions, bEnableAutocorrect, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualKeyboardOptions, 0x0001);
		}

		// struct FInputChord
		TEST_METHOD(ScriptStruct__Slate__InputChord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputChord, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputChord, UnknownData_RETS, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputChord, 0x0020);
		}

		// struct FAnchors
		TEST_METHOD(ScriptStruct__Slate__Anchors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchors, Minimum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchors, Maximum, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnchors, 0x0010);
		}

		// struct FCustomizedToolMenuEntry
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenuEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuEntry, Visibility, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuEntry, UnknownData_8SPD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenuEntry, 0x0004);
		}

		// struct FCustomizedToolMenuSection
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenuSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuSection, Visibility, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuSection, UnknownData_GFBW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenuSection, 0x0004);
		}

		// struct FCustomizedToolMenuNameArray
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenuNameArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuNameArray, Names, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenuNameArray, 0x0010);
		}

		// struct FCustomizedToolMenu
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, Entries, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, Sections, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, EntryOrder, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, SectionOrder, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, UnknownData_7GVD, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenu, 0x01E8);
		}

		// struct FMRMeshConfiguration
		TEST_METHOD(ScriptStruct__MRMesh__MRMeshConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMRMeshConfiguration, UnknownData_KHXB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMRMeshConfiguration, 0x0001);
		}

		// struct FLiveLinkSourceHandle
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSourceHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceHandle, UnknownData_II5L, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSourceHandle, 0x0018);
		}

		// struct FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkBaseBlueprintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseBlueprintData, UnknownData_CKCY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkBaseBlueprintData, 0x0008);
		}

		// struct FSubjectFrameHandle : public FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__SubjectFrameHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubjectFrameHandle, UnknownData_ORUJ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubjectFrameHandle, 0x0018);
		}

		// struct FLiveLinkTransform
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTransform, UnknownData_JQLE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTransform, 0x0020);
		}

		// struct FCachedSubjectFrame
		TEST_METHOD(ScriptStruct__LiveLinkInterface__CachedSubjectFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedSubjectFrame, UnknownData_7H5A, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedSubjectFrame, 0x0160);
		}

		// struct FSubjectMetadata
		TEST_METHOD(ScriptStruct__LiveLinkInterface__SubjectMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubjectMetadata, StringMetadata, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubjectMetadata, SceneTimecode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubjectMetadata, SceneFramerate, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubjectMetadata, UnknownData_5YTE, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubjectMetadata, 0x0070);
		}

		// struct FLiveLinkWorldTime
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkWorldTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkWorldTime, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkWorldTime, Offset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkWorldTime, 0x0010);
		}

		// struct FLiveLinkMetaData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkMetaData, StringMetadata, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkMetaData, SceneTime, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkMetaData, 0x0060);
		}

		// struct FLiveLinkBaseFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkBaseFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseFrameData, WorldTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseFrameData, MetaData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseFrameData, PropertyValues, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseFrameData, UnknownData_WZ6H, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkBaseFrameData, 0x00A0);
		}

		// struct FLiveLinkAnimationFrameData : public FLiveLinkBaseFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkAnimationFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkAnimationFrameData, Transforms, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkAnimationFrameData, 0x00B0);
		}

		// struct FLiveLinkBaseStaticData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkBaseStaticData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseStaticData, PropertyNames, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkBaseStaticData, 0x0010);
		}

		// struct FLiveLinkSkeletonStaticData : public FLiveLinkBaseStaticData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSkeletonStaticData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSkeletonStaticData, BoneNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSkeletonStaticData, BoneParents, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSkeletonStaticData, 0x0030);
		}

		// struct FLiveLinkBasicBlueprintData : public FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkBasicBlueprintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBasicBlueprintData, StaticData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBasicBlueprintData, FrameData, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkBasicBlueprintData, 0x00B8);
		}

		// struct FLiveLinkTransformStaticData : public FLiveLinkBaseStaticData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTransformStaticData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTransformStaticData, 0x0010);
		}

		// struct FLiveLinkCameraStaticData : public FLiveLinkTransformStaticData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkCameraStaticData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsFieldOfViewSupported, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsAspectRatioSupported, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsFocalLengthSupported, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsProjectionModeSupported, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, FilmBackWidth, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, FilmBackHeight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsApertureSupported, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsFocusDistanceSupported, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, UnknownData_7FKK, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkCameraStaticData, 0x0020);
		}

		// struct FLiveLinkTransformFrameData : public FLiveLinkBaseFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTransformFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTransformFrameData, Transform, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTransformFrameData, 0x00D0);
		}

		// struct FLiveLinkCameraFrameData : public FLiveLinkTransformFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkCameraFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, FieldOfView, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, AspectRatio, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, FocalLength, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, Aperture, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, FocusDistance, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, ProjectionMode, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, UnknownData_PCGH, 0x00E5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkCameraFrameData, 0x00F0);
		}

		// struct FLiveLinkCameraBlueprintData : public FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkCameraBlueprintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraBlueprintData, StaticData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraBlueprintData, UnknownData_4DS4, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraBlueprintData, FrameData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkCameraBlueprintData, 0x0120);
		}

		// struct FLiveLinkFrameRate : public FFrameRate
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkFrameRate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkFrameRate, 0x0008);
		}

		// struct FLiveLinkTimeCode_Base_DEPRECATED
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTimeCode_Base_DEPRECATED)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTimeCode_Base_DEPRECATED, Seconds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTimeCode_Base_DEPRECATED, Frames, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTimeCode_Base_DEPRECATED, FrameRate, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTimeCode_Base_DEPRECATED, 0x0010);
		}

		// struct FLiveLinkTimeCode : public FLiveLinkTimeCode_Base_DEPRECATED
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTimeCode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTimeCode, 0x0010);
		}

		// struct FLiveLinkTime
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTime, WorldTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTime, SceneTime, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTime, 0x0018);
		}

		// struct FLiveLinkCurveConversionSettings
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkCurveConversionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCurveConversionSettings, CurveConversionAssetMap, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkCurveConversionSettings, 0x0050);
		}

		// struct FLiveLinkLightStaticData : public FLiveLinkTransformStaticData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkLightStaticData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsTemperatureSupported, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsIntensitySupported, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsLightColorSupported, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsInnerConeAngleSupported, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsOuterConeAngleSupported, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsAttenuationRadiusSupported, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsSourceLenghtSupported, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsSourceRadiusSupported, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsSoftSourceRadiusSupported, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, UnknownData_CMQL, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkLightStaticData, 0x0020);
		}

		// struct FLiveLinkLightFrameData : public FLiveLinkTransformFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkLightFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, Temperature, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, Intensity, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, LightColor, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, InnerConeAngle, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, OuterConeAngle, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, AttenuationRadius, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, SourceRadius, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, SoftSourceRadius, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, SourceLength, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, UnknownData_ZZGQ, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkLightFrameData, 0x0100);
		}

		// struct FLiveLinkLightBlueprintData : public FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkLightBlueprintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightBlueprintData, StaticData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightBlueprintData, UnknownData_LG5C, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightBlueprintData, FrameData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkLightBlueprintData, 0x0130);
		}

		// struct FLiveLinkSubjectName
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSubjectName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectName, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSubjectName, 0x0008);
		}

		// struct FLiveLinkSubjectKey
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSubjectKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectKey, Source, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectKey, SubjectName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSubjectKey, 0x0018);
		}

		// struct FLiveLinkSubjectPreset
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSubjectPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, Role, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, Settings, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, VirtualSubject, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, bEnabled, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, UnknownData_20WP, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSubjectPreset, 0x0038);
		}

		// struct FLiveLinkSourcePreset
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSourcePreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourcePreset, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourcePreset, Settings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourcePreset, SourceType, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSourcePreset, 0x0030);
		}

		// struct FLiveLinkRefSkeleton
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkRefSkeleton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkRefSkeleton, BoneNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkRefSkeleton, BoneParents, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkRefSkeleton, 0x0020);
		}

		// struct FLiveLinkSubjectRepresentation
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSubjectRepresentation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectRepresentation, Subject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectRepresentation, Role, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSubjectRepresentation, 0x0010);
		}

		// struct FLiveLinkInterpolationSettings
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkInterpolationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkInterpolationSettings, bUseInterpolation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkInterpolationSettings, UnknownData_QRPT, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkInterpolationSettings, InterpolationOffset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkInterpolationSettings, 0x0008);
		}

		// struct FLiveLinkTimeSynchronizationSettings
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTimeSynchronizationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTimeSynchronizationSettings, FrameRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTimeSynchronizationSettings, FrameOffset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTimeSynchronizationSettings, 0x000C);
		}

		// struct FLiveLinkSourceDebugInfo
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSourceDebugInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceDebugInfo, SubjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceDebugInfo, SnapshotIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceDebugInfo, NumberOfBufferAtSnapshot, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSourceDebugInfo, 0x0010);
		}

		// struct FLiveLinkTransformBlueprintData : public FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTransformBlueprintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTransformBlueprintData, StaticData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTransformBlueprintData, UnknownData_KPYR, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTransformBlueprintData, FrameData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTransformBlueprintData, 0x00F0);
		}

		// struct FLiveLinkCurveElement
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkCurveElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCurveElement, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCurveElement, CurveValue, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkCurveElement, 0x000C);
		}

		// struct FLiveLinkFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkFrameData, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkFrameData, CurveElements, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkFrameData, WorldTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkFrameData, MetaData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkFrameData, 0x0090);
		}

		// struct FLiveLinkSourceBufferManagementSettings
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSourceBufferManagementSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, bValidEngineTimeEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_KIAF, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, ValidEngineTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, EngineTimeOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_N9L7, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, EngineTimeClockOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, bGenerateSubFrame, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_67JW, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, DetectedFrameRate, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, bUseTimecodeSmoothLatest, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_1MYB, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, SourceTimecodeFrameRate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, bValidTimecodeFrameEnabled, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_60DO, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, ValidTimecodeFrame, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, TimecodeFrameOffset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_HLL3, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, TimecodeClockOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, LatestOffset, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, MaxNumberOfFrameToBuffered, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, bKeepAtLeastOneFrame, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_KMDX, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSourceBufferManagementSettings, 0x0058);
		}

		// struct FTickAnimationSharingFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__AnimationSharing__TickAnimationSharingFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickAnimationSharingFunction, UnknownData_CCY3, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickAnimationSharingFunction, 0x0030);
		}

		// struct FAnimationSharingScalability
		TEST_METHOD(ScriptStruct__AnimationSharing__AnimationSharingScalability)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, UseBlendTransitions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, UnknownData_U20P, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, BlendSignificanceValue, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, MaximumNumberConcurrentBlends, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, TickSignificanceValue, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationSharingScalability, 0x0010);
		}

		// struct FAnimationSetup
		TEST_METHOD(ScriptStruct__AnimationSharing__AnimationSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, AnimSequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, AnimBlueprint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, NumRandomizedInstances, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, Enabled, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, UnknownData_4CVV, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationSetup, 0x0018);
		}

		// struct FAnimationStateEntry
		TEST_METHOD(ScriptStruct__AnimationSharing__AnimationStateEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, State, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_JNQW, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, AnimationSetups, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bOnDemand, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bAdditive, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_VBDH, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, BlendTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bReturnToPreviousState, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bSetNextState, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, NextState, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_9QGR, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, MaximumNumberOfConcurrentInstances, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, WiggleTimePercentage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bRequiresCurves, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_OKTY, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationStateEntry, 0x0030);
		}

		// struct FPerSkeletonAnimationSharingSetup
		TEST_METHOD(ScriptStruct__AnimationSharing__PerSkeletonAnimationSharingSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, Skeleton, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, SkeletalMesh, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, BlendAnimBlueprint, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, AdditiveAnimBlueprint, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, StateProcessorClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, AnimationStates, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerSkeletonAnimationSharingSetup, 0x0038);
		}

		// struct FImageWriteOptions
		TEST_METHOD(ScriptStruct__ImageWriteQueue__ImageWriteOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, Format, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, UnknownData_W2VK, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, OnComplete, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, CompressionQuality, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, bOverwriteFile, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, bAsync, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, UnknownData_8ZDO, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImageWriteOptions, 0x0060);
		}

		// struct FMaterialQualityOverrides
		TEST_METHOD(ScriptStruct__MaterialShaderQualitySettings__MaterialQualityOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bDiscardQualityDuringCook, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bEnableOverride, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceFullyRough, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceNonMetal, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceDisableLMDirectionality, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceLQReflections, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceDisablePreintegratedGF, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bDisableMaterialNormalCalculation, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, MobileShadowQuality, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialQualityOverrides, 0x0009);
		}

		// struct FStructSerializerObjectTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerObjectTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, Class, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, SubClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, SoftClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, Object, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, WeakObject, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, SoftObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, ClassPath, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, ObjectPath, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerObjectTestStruct, 0x00A0);
		}

		// struct FStructSerializerBooleanTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerBooleanTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, BoolFalse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, BoolTrue, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerBooleanTestStruct, 0x0003);
		}

		// struct FStructSerializerNumericTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerNumericTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_PXYE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int16, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int32, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int64, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt8, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_UM10, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt16, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt32, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt64, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Float, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_TGWJ, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Double, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerNumericTestStruct, 0x0030);
		}

		// struct FStructSerializerByteArray
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerByteArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Dummy1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, UnknownData_K0H0, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, ByteArray, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Dummy2, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, UnknownData_4F0X, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Int8Array, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Dummy3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, UnknownData_6X6A, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerByteArray, 0x0038);
		}

		// struct FStructSerializerBuiltinTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerBuiltinTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, String, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Text, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Vector, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_M5KZ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Vector4, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Rotator, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_BATS, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Quat, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Color, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_18SW, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerBuiltinTestStruct, 0x0090);
		}

		// struct FStructSerializerMapTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerMapTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, IntToStr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToStr, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToVec, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToStruct, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerMapTestStruct, 0x0140);
		}

		// struct FStructSerializerArrayTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerArrayTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, Int32Array, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, ByteArray, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticSingleElement, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticInt32Array, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticFloatArray, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, UnknownData_O6QI, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, VectorArray, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StructArray, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerArrayTestStruct, 0x0060);
		}

		// struct FStructSerializerSetTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerSetTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, StrSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, IntSet, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, NameSet, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, StructSet, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerSetTestStruct, 0x0140);
		}

		// struct FStructSerializerTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Numerics, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Booleans, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, UnknownData_175N, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Objects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, UnknownData_2WML, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Builtins, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Arrays, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Maps, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Sets, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerTestStruct, 0x0450);
		}

		// struct FSessionServiceLogSubscribe
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLogSubscribe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLogSubscribe, UnknownData_RFA3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLogSubscribe, 0x0001);
		}

		// struct FSessionServiceLog
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Data, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, InstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, TimeSeconds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Verbosity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, UnknownData_3S8K, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLog, 0x0038);
		}

		// struct FSessionServicePing
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServicePing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePing, UserName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServicePing, 0x0010);
		}

		// struct FSessionServiceLogUnsubscribe
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLogUnsubscribe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLogUnsubscribe, UnknownData_EH7N, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLogUnsubscribe, 0x0001);
		}

		// struct FSessionServicePong
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServicePong)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, Authorized, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_9YD6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, BuildDate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, DeviceName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, InstanceId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, InstanceName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, PlatformName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionId, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, Standalone, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_NT3S, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServicePong, 0x0090);
		}

		// struct FNiagaraDataInterfaceGeneratedFunction
		TEST_METHOD(ScriptStruct__NiagaraShader__NiagaraDataInterfaceGeneratedFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGeneratedFunction, UnknownData_5B4H, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataInterfaceGeneratedFunction, 0x0028);
		}

		// struct FNiagaraDataInterfaceGPUParamInfo
		TEST_METHOD(ScriptStruct__NiagaraShader__NiagaraDataInterfaceGPUParamInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGPUParamInfo, DataInterfaceHLSLSymbol, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGPUParamInfo, DIClassName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGPUParamInfo, GeneratedFunctions, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataInterfaceGPUParamInfo, 0x0030);
		}

		// struct FNiagaraCompileEvent
		TEST_METHOD(ScriptStruct__NiagaraShader__NiagaraCompileEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, Severity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, UnknownData_L7XU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, Message, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, NodeGuid, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, PinGuid, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, StackGuids, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCompileEvent, 0x0048);
		}

		// struct FSimulationStageMetaData
		TEST_METHOD(ScriptStruct__NiagaraShader__SimulationStageMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, SimulationStageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, IterationSource, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, UnknownData_CKEM, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, OutputDestinations, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, MinStage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, MaxStage, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimulationStageMetaData, 0x0030);
		}

		// struct FChaosPhysicsCollisionInfo
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosPhysicsCollisionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherComponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Normal, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, AccumulatedImpulse, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Velocity, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherVelocity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, AngularVelocity, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherAngularVelocity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Mass, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherMass, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, UnknownData_BU9P, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosPhysicsCollisionInfo, 0x0070);
		}

		// struct FChaosBreakEvent
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosBreakEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Velocity, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, AngularVelocity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Mass, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosBreakEvent, 0x0030);
		}

		// struct FBreakEventCallbackWrapper
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__BreakEventCallbackWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBreakEventCallbackWrapper, UnknownData_299X, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBreakEventCallbackWrapper, 0x0040);
		}

		// struct FChaosDebugSubstepControl
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosDebugSubstepControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDebugSubstepControl, bPause, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDebugSubstepControl, bSubstep, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDebugSubstepControl, bStep, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosDebugSubstepControl, 0x0003);
		}

		// struct FChaosHandlerSet
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosHandlerSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosHandlerSet, UnknownData_SA9K, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosHandlerSet, ChaosHandlers, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosHandlerSet, 0x0058);
		}

		// struct FCameraLensSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraLensSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinFocalLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MaxFocalLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinFStop, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MaxFStop, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinimumFocusDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, DiaphragmBladeCount, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraLensSettings, 0x0018);
		}

		// struct FCameraFilmbackSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraFilmbackSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorWidth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorHeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorAspectRatio, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraFilmbackSettings, 0x000C);
		}

		// struct FNamedFilmbackPreset
		TEST_METHOD(ScriptStruct__CinematicCamera__NamedFilmbackPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, FilmbackSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, UnknownData_XLMW, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedFilmbackPreset, 0x0020);
		}

		// struct FCameraLookatTrackingSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraLookatTrackingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_HQ4J, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, LookAtTrackingInterpSpeed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_CON1, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, ActorToTrack, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, RelativeOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_U6ML, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraLookatTrackingSettings, 0x0050);
		}

		// struct FCameraTrackingFocusSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraTrackingFocusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, ActorToTrack, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, RelativeOffset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, UnknownData_MK5V, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraTrackingFocusSettings, 0x0038);
		}

		// struct FCameraFocusSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraFocusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_ZGPQ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, ManualFocusDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, TrackingFocusSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_4JDE, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, DebugFocusPlaneColor, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_QND4, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusSmoothingInterpSpeed, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusOffset, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_P2AF, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraFocusSettings, 0x0058);
		}

		// struct FNamedLensPreset
		TEST_METHOD(ScriptStruct__CinematicCamera__NamedLensPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedLensPreset, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedLensPreset, LensSettings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedLensPreset, 0x0028);
		}

		// struct FNetAnalyticsDataConfig
		TEST_METHOD(ScriptStruct__NetCore__NetAnalyticsDataConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, DataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, bEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, UnknownData_21QZ, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetAnalyticsDataConfig, 0x000C);
		}

		// struct FTagAndValue
		TEST_METHOD(ScriptStruct__AssetRegistry__TagAndValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagAndValue, Tag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagAndValue, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTagAndValue, 0x0018);
		}

		// struct FAssetRegistryDependencyOptions
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetRegistryDependencyOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeSoftPackageReferences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeHardPackageReferences, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeSearchableNames, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeSoftManagementReferences, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeHardManagementReferences, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetRegistryDependencyOptions, 0x0005);
		}

		// struct FTickFunction
		TEST_METHOD(ScriptStruct__Engine__TickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_AIBI, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, TickGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, EndTickGroup, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_3WNX, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, TickInterval, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_Z65Z, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickFunction, 0x0028);
		}

		// struct FActorComponentTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ActorComponentTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentTickFunction, UnknownData_SXLR, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentTickFunction, 0x0030);
		}

		// struct FSimpleMemberReference
		TEST_METHOD(ScriptStruct__Engine__SimpleMemberReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleMemberReference, 0x0020);
		}

		// struct FActorTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ActorTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorTickFunction, UnknownData_LF9A, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorTickFunction, 0x0030);
		}

		// struct FRepMovement
		TEST_METHOD(ScriptStruct__Engine__RepMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, LinearVelocity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, AngularVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, Location, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, Rotation, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, LocationQuantizationLevel, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, VelocityQuantizationLevel, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, RotationQuantizationLevel, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepMovement, 0x0034);
		}

		// struct FVector_NetQuantize100 : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize100)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize100, 0x000C);
		}

		// struct FRepAttachment
		TEST_METHOD(ScriptStruct__Engine__RepAttachment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, LocationOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, RelativeScale3D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, RotationOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachSocket, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, UnknownData_BLPR, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachComponent, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepAttachment, 0x0040);
		}

		// struct FLightingChannels
		TEST_METHOD(ScriptStruct__Engine__LightingChannels)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightingChannels, 0x0001);
		}

		// struct FCustomPrimitiveData
		TEST_METHOD(ScriptStruct__Engine__CustomPrimitiveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomPrimitiveData, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomPrimitiveData, 0x0010);
		}

		// struct FCollisionResponseContainer
		TEST_METHOD(ScriptStruct__Engine__CollisionResponseContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, WorldStatic, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, WorldDynamic, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Pawn, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Visibility, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Camera, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, PhysicsBody, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Vehicle, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Destructible, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel1, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel2, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel3, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel4, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel5, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel6, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel1, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel2, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel3, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel4, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel5, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel6, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel7, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel8, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel9, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel10, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel11, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel12, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel13, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel14, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel15, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel16, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel17, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel18, 0x001F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponseContainer, 0x0020);
		}

		// struct FResponseChannel
		TEST_METHOD(ScriptStruct__Engine__ResponseChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, Channel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, Response, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, UnknownData_NI1O, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FResponseChannel, 0x000C);
		}

		// struct FCollisionResponse
		TEST_METHOD(ScriptStruct__Engine__CollisionResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponse, ResponseToChannels, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponse, ResponseArray, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponse, 0x0030);
		}

		// struct FWalkableSlopeOverride
		TEST_METHOD(ScriptStruct__Engine__WalkableSlopeOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, WalkableSlopeBehavior, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, UnknownData_66GC, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, WalkableSlopeAngle, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, UnknownData_BWLE, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWalkableSlopeOverride, 0x0010);
		}

		// struct FBodyInstance : public FBodyInstanceCore
		TEST_METHOD(ScriptStruct__Engine__BodyInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_GFJJ, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, ObjectType, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_FNHG, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionEnabled, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_ZLHH, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, SleepFamily, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, DOFMode, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_2N59, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionProfileName, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PositionSolverIterationCount, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, VelocitySolverIterationCount, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_JG2R, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionResponses, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MaxDepenetrationVelocity, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MassInKgOverride, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_6AUN, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, LinearDamping, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, AngularDamping, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CustomDOFPlaneNormal, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, COMNudge, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MassScale, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, InertiaTensorScale, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_HLPU, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, WalkableSlopeOverride, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PhysMaterialOverride, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MaxAngularVelocity, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CustomSleepThresholdMultiplier, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, StabilizationThresholdMultiplier, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PhysicsBlendWeight, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_FYPY, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBodyInstance, 0x0158);
		}

		// struct FVertexOffsetUsage
		TEST_METHOD(ScriptStruct__Engine__VertexOffsetUsage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexOffsetUsage, Usage, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexOffsetUsage, 0x0004);
		}

		// struct FSkelMeshComponentLODInfo
		TEST_METHOD(ScriptStruct__Engine__SkelMeshComponentLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshComponentLODInfo, HiddenMaterials, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshComponentLODInfo, UnknownData_YOAG, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkelMeshComponentLODInfo, 0x0048);
		}

		// struct FMeshUVChannelInfo
		TEST_METHOD(ScriptStruct__Engine__MeshUVChannelInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, bInitialized, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, bOverrideDensities, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, UnknownData_W2UP, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, LocalUVDensities, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshUVChannelInfo, 0x0014);
		}

		// struct FSkeletalMaterial
		TEST_METHOD(ScriptStruct__Engine__SkeletalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, MaterialInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, UVChannelData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, UnknownData_9CBU, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMaterial, 0x0028);
		}

		// struct FBoneMirrorInfo
		TEST_METHOD(ScriptStruct__Engine__BoneMirrorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, SourceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, BoneFlipAxis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, UnknownData_57O0, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneMirrorInfo, 0x0008);
		}

		// struct FPerPlatformFloat
		TEST_METHOD(ScriptStruct__Engine__PerPlatformFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformFloat, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformFloat, 0x0004);
		}

		// struct FSkeletalMeshBuildSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, UnknownData_2RL9, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, ThresholdPosition, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, ThresholdTangentNormal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, ThresholdUV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, MorphThresholdPosition, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshBuildSettings, 0x0014);
		}

		// struct FSkeletalMeshOptimizationSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshOptimizationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, TerminationCriterion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_7ZKK, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NumOfTrianglesPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NumOfVertPercentage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxNumOfTriangles, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxNumOfVerts, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxDeviationPercentage, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, ReductionMethod, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, SilhouetteImportance, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, TextureImportance, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, ShadingImportance, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, SkinningImportance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_GD8U, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, WeldingThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NormalsThreshold, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxBonesPerVertex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_DGSM, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, VolumeImportance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_7UYU, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, BaseLOD, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshOptimizationSettings, 0x003C);
		}

		// struct FBoneReference
		TEST_METHOD(ScriptStruct__Engine__BoneReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReference, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReference, UnknownData_UV7A, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneReference, 0x0010);
		}

		// struct FSkeletalMeshLODInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, LODHysteresis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, LODMaterialMap, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BuildSettings, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, ReductionSettings, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BonesToRemove, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BonesToPrioritize, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, WeightOfPrioritization, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, UnknownData_H69O, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BakePose, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BakePoseOverride, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, SourceImportFilename, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, SkinCacheUsage, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, UnknownData_VNAU, 0x00B2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshLODInfo, 0x00B8);
		}

		// struct FPerPlatformInt
		TEST_METHOD(ScriptStruct__Engine__PerPlatformInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformInt, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformInt, 0x0004);
		}

		// struct FPerPlatformBool
		TEST_METHOD(ScriptStruct__Engine__PerPlatformBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformBool, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformBool, 0x0001);
		}

		// struct FSkeletalMeshSamplingRegionMaterialFilter
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionMaterialFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionMaterialFilter, MaterialName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionMaterialFilter, 0x0008);
		}

		// struct FSkeletalMeshSamplingRegionBoneFilter
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionBoneFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBoneFilter, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBoneFilter, UnknownData_MPRB, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionBoneFilter, 0x000C);
		}

		// struct FSkeletalMeshSamplingRegion
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, LODIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, UnknownData_12S9, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, MaterialFilters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, BoneFilters, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegion, 0x0030);
		}

		// struct FSkeletalMeshSamplingLODBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingLODBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingLODBuiltData, UnknownData_89XT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingLODBuiltData, 0x0048);
		}

		// struct FSkeletalMeshSamplingRegionBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBuiltData, UnknownData_49M3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionBuiltData, 0x0078);
		}

		// struct FSkeletalMeshSamplingBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingBuiltData, WholeMeshBuiltData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingBuiltData, RegionBuiltData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingBuiltData, 0x0020);
		}

		// struct FSkeletalMeshSamplingInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingInfo, Regions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingInfo, BuiltData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingInfo, 0x0030);
		}

		// struct FSkinWeightProfileInfo
		TEST_METHOD(ScriptStruct__Engine__SkinWeightProfileInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, DefaultProfile, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, UnknownData_TYWL, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, DefaultProfileFromLODIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkinWeightProfileInfo, 0x0010);
		}

		// struct FUniqueNetIdRepl : public FUniqueNetIdWrapper
		TEST_METHOD(ScriptStruct__Engine__UniqueNetIdRepl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdRepl, UnknownData_UG47, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdRepl, ReplicationBytes, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUniqueNetIdRepl, 0x0028);
		}

		// struct FChannelDefinition
		TEST_METHOD(ScriptStruct__Engine__ChannelDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, ChannelName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, ClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, ChannelClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, StaticChannelIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bTickOnCreate, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bServerOpen, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bClientOpen, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bInitialServer, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bInitialClient, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, UnknownData_1YEB, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChannelDefinition, 0x0028);
		}

		// struct FExpressionInput
		TEST_METHOD(ScriptStruct__Engine__ExpressionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, OutputIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, ExpressionName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpressionInput, 0x000C);
		}

		// struct FBasedMovementInfo
		TEST_METHOD(ScriptStruct__Engine__BasedMovementInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, MovementBase, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, BoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, Rotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bServerHasBaseComponent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bRelativeRotation, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bServerHasVelocity, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, UnknownData_0363, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasedMovementInfo, 0x0030);
		}

		// struct FRootMotionSourceSettings
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceSettings, Flags, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceSettings, 0x0001);
		}

		// struct FVector_NetQuantize10 : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize10)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize10, 0x000C);
		}

		// struct FRootMotionSourceGroup
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, UnknownData_VVM8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, LastAccumulatedSettings, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, UnknownData_I6MS, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, LastPreAdditiveVelocity, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceGroup, 0x0038);
		}

		// struct FRootMotionMovementParams
		TEST_METHOD(ScriptStruct__Engine__RootMotionMovementParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, bHasRootMotion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, UnknownData_K0V6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, BlendWeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, UnknownData_GDWT, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, RootMotionTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionMovementParams, 0x0040);
		}

		// struct FRepRootMotionMontage
		TEST_METHOD(ScriptStruct__Engine__RepRootMotionMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bIsActive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_NPHY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, AnimMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Position, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Location, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Rotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_FQFW, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, MovementBase, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, MovementBaseBoneName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bRelativePosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bRelativeRotation, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_ZKEY, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, AuthoritativeRootMotion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Acceleration, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, LinearVelocity, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepRootMotionMontage, 0x0098);
		}

		// struct FSimulatedRootMotionReplicatedMove
		TEST_METHOD(ScriptStruct__Engine__SimulatedRootMotionReplicatedMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, UnknownData_6DSE, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, RootMotion, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimulatedRootMotionReplicatedMove, 0x00A0);
		}

		// struct FSplineCurves
		TEST_METHOD(ScriptStruct__Engine__SplineCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Rotation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Scale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, ReparamTable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, MetaData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Version, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, UnknownData_2XWH, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineCurves, 0x0070);
		}

		// struct FSingleAnimationPlayData
		TEST_METHOD(ScriptStruct__Engine__SingleAnimationPlayData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, AnimToPlay, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, UnknownData_V764, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, SavedPosition, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, SavedPlayRate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, UnknownData_DHRY, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSingleAnimationPlayData, 0x0018);
		}

		// struct FAnimNotifyEventReference
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyEventReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEventReference, UnknownData_3BC2, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEventReference, NotifySource, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyEventReference, 0x0010);
		}

		// struct FAnimNotifyArray
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyArray, Notifies, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyArray, 0x0010);
		}

		// struct FAnimNotifyQueue
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyQueue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, UnknownData_T4KB, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, AnimNotifies, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, UnfilteredMontageAnimNotifies, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyQueue, 0x0070);
		}

		// struct FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__AnimLinkableElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, UnknownData_FYQA, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkedMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SlotIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkMethod, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, CachedLinkMethod, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, UnknownData_1F1H, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentBeginTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentLength, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkedSequence, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLinkableElement, 0x0030);
		}

		// struct FAnimNotifyEvent : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, DisplayTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TriggerTimeOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, EndTriggerTimeOffset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TriggerWeightThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, Notify, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyStateClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, Duration, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_HVGC, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, EndLink, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bConvertedFromBranchingPoint, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, MontageTickType, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_KV5I, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyTriggerChance, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyFilterType, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_GUEJ, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyFilterLOD, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bTriggerOnDedicatedServer, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bTriggerOnFollower, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_DA63, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TrackIndex, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_RB1B, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyEvent, 0x00B8);
		}

		// struct FActiveForceFeedbackEffect
		TEST_METHOD(ScriptStruct__Engine__ActiveForceFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveForceFeedbackEffect, ForceFeedbackEffect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveForceFeedbackEffect, UnknownData_M5X7, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveForceFeedbackEffect, 0x0018);
		}

		// struct FStaticMeshComponentLODInfo
		TEST_METHOD(ScriptStruct__Engine__StaticMeshComponentLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentLODInfo, UnknownData_RP11, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshComponentLODInfo, 0x0090);
		}

		// struct FStreamingTextureBuildInfo
		TEST_METHOD(ScriptStruct__Engine__StreamingTextureBuildInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, PackedRelativeBox, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, TextureLevelIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, TexelFactor, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingTextureBuildInfo, 0x000C);
		}

		// struct FLightmassPrimitiveSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassPrimitiveSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, UnknownData_5OY0, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveLightFalloffExponent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveLightExplicitInfluenceRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveBoost, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, DiffuseBoost, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, FullyOccludedSamplesFraction, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassPrimitiveSettings, 0x0018);
		}

		// struct FMovementProperties
		TEST_METHOD(ScriptStruct__Engine__MovementProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovementProperties, 0x0001);
		}

		// struct FNavAgentProperties : public FMovementProperties
		TEST_METHOD(ScriptStruct__Engine__NavAgentProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, UnknownData_B0A2, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentHeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentStepHeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, NavWalkingSearchHeightScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, UnknownData_EKXP, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, PreferredNavData, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAgentProperties, 0x0030);
		}

		// struct FStreamingLevelsToConsider
		TEST_METHOD(ScriptStruct__Engine__StreamingLevelsToConsider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingLevelsToConsider, StreamingLevels, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingLevelsToConsider, UnknownData_IOJD, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingLevelsToConsider, 0x0028);
		}

		// struct FLevelCollection
		TEST_METHOD(ScriptStruct__Engine__LevelCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, UnknownData_Y5N8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, GameState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, NetDriver, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, DemoNetDriver, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, PersistentLevel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, Levels, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelCollection, 0x0078);
		}

		// struct FPSCPoolElem
		TEST_METHOD(ScriptStruct__Engine__PSCPoolElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPoolElem, PSC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPoolElem, UnknownData_Q8F1, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPSCPoolElem, 0x0010);
		}

		// struct FPSCPool
		TEST_METHOD(ScriptStruct__Engine__PSCPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, FreeElements, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, InUseComponents_Auto, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, InUseComponents_Manual, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, UnknownData_12HA, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPSCPool, 0x0038);
		}

		// struct FWorldPSCPool
		TEST_METHOD(ScriptStruct__Engine__WorldPSCPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldPSCPool, WorldParticleSystemPools, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldPSCPool, UnknownData_SKOF, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldPSCPool, 0x0058);
		}

		// struct FVector_NetQuantize : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize, 0x000C);
		}

		// struct FVector_NetQuantizeNormal : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantizeNormal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantizeNormal, 0x000C);
		}

		// struct FHitResult
		TEST_METHOD(ScriptStruct__Engine__HitResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, UnknownData_IAVU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, FaceIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Distance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ImpactPoint, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Normal, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ImpactNormal, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, TraceStart, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, TraceEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, PenetrationDepth, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Item, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ElementIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, UnknownData_F7Z9, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, PhysMaterial, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Actor, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Component, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, BoneName, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, MyBoneName, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHitResult, 0x008C);
		}

		// struct FFindFloorResult
		TEST_METHOD(ScriptStruct__Engine__FindFloorResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, UnknownData_76O4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, FloorDist, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, LineDist, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, HitResult, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFindFloorResult, 0x0098);
		}

		// struct FNavAvoidanceMask
		TEST_METHOD(ScriptStruct__Engine__NavAvoidanceMask)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAvoidanceMask, 0x0004);
		}

		// struct FCharacterMovementComponentPostPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__CharacterMovementComponentPostPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterMovementComponentPostPhysicsTickFunction, UnknownData_AKU4, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterMovementComponentPostPhysicsTickFunction, 0x0030);
		}

		// struct FStatColorMapEntry
		TEST_METHOD(ScriptStruct__Engine__StatColorMapEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapEntry, In, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapEntry, Out, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatColorMapEntry, 0x0008);
		}

		// struct FStatColorMapping
		TEST_METHOD(ScriptStruct__Engine__StatColorMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, StatName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, ColorMap, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, UnknownData_BSPU, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatColorMapping, 0x0028);
		}

		// struct FGameNameRedirect
		TEST_METHOD(ScriptStruct__Engine__GameNameRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNameRedirect, OldGameName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNameRedirect, NewGameName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameNameRedirect, 0x0010);
		}

		// struct FClassRedirect
		TEST_METHOD(ScriptStruct__Engine__ClassRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, OldClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, OldSubobjName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewSubobjName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassPackage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, InstanceOnly, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, UnknownData_3MZS, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClassRedirect, 0x003C);
		}

		// struct FPluginRedirect
		TEST_METHOD(ScriptStruct__Engine__PluginRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPluginRedirect, OldPluginName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPluginRedirect, NewPluginName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPluginRedirect, 0x0020);
		}

		// struct FStructRedirect
		TEST_METHOD(ScriptStruct__Engine__StructRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructRedirect, OldStructName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructRedirect, NewStructName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructRedirect, 0x0010);
		}

		// struct FDropNoteInfo
		TEST_METHOD(ScriptStruct__Engine__DropNoteInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Comment, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDropNoteInfo, 0x0028);
		}

		// struct FNetDriverDefinition
		TEST_METHOD(ScriptStruct__Engine__NetDriverDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DefName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DriverClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DriverClassNameFallback, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetDriverDefinition, 0x0018);
		}

		// struct FDebugDisplayProperty
		TEST_METHOD(ScriptStruct__Engine__DebugDisplayProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, Obj, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, WithinClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, UnknownData_5YBG, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugDisplayProperty, 0x0020);
		}

		// struct FParticleSysParam
		TEST_METHOD(ScriptStruct__Engine__ParticleSysParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, UnknownData_6X83, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Scalar, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Scalar_Low, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Vector, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Vector_Low, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Color, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Actor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Material, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, UnknownData_2OOK, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSysParam, 0x0080);
		}

		// struct FWeightedBlendable
		TEST_METHOD(ScriptStruct__Engine__WeightedBlendable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, Weight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, UnknownData_S8EH, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, Object, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightedBlendable, 0x0010);
		}

		// struct FWeightedBlendables
		TEST_METHOD(ScriptStruct__Engine__WeightedBlendables)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendables, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightedBlendables, 0x0010);
		}

		// struct FPostProcessSettings
		TEST_METHOD(ScriptStruct__Engine__PostProcessSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_LWU7, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_6IO1, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_YMBN, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_WPHE, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomMethod, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMethod, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_Y2DF, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WhiteTemp, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WhiteTint, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_0357, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrast, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGamma, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGain, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffset, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationShadows, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastShadows, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaShadows, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainShadows, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetShadows, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationMidtones, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastMidtones, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaMidtones, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainMidtones, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetMidtones, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationHighlights, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastHighlights, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaHighlights, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainHighlights, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetHighlights, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorCorrectionHighlightsMin, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorCorrectionShadowsMax, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BlueCorrection, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ExpandGamut, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ToneCurveAmount, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmSlope, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmToe, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShoulder, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmBlackClip, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmWhiteClip, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmWhitePoint, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTint, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTintBlend, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTintAmount, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmSaturation, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerRed, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerGreen, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerBlue, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmContrast, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmToeAmount, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmHealAmount, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmDynamicRange, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, SceneColorTint, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, SceneFringeIntensity, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ChromaticAberrationStartOffset, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomIntensity, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomThreshold, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomSizeScale, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom1Size, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom2Size, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom3Size, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom4Size, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom5Size, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom6Size, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom1Tint, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom2Tint, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom3Tint, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom4Tint, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom5Tint, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom6Tint, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionSize, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_EX63, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionTexture, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionCenterUV, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMin, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMax, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMult, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionBufferScale, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMask, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMaskIntensity, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMaskTint, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemapTint, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemapIntensity, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemap, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, CameraShutterSpeed, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, CameraISO, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFstop, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldMinFstop, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldBladeCount, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBias, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBiasBackup, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_ZOT1, 0x031D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_4529, 0x0321);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBiasCurve, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMeterMask, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureLowPercent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureHighPercent, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMinBrightness, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMaxBrightness, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureSpeedUp, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureSpeedDown, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, HistogramLogMin, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, HistogramLogMax, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureCalibrationConstant, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareIntensity, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareTint, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareBokehSize, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareThreshold, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareBokehShape, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareTints, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, VignetteIntensity, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, GrainJitter, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, GrainIntensity, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionIntensity, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionStaticFraction, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionRadius, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_Y7AO, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionFadeDistance, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionFadeRadius, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionDistance, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionPower, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionBias, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionQuality, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipBlend, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipScale, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipThreshold, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionTemporalBlendWeight, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_DRKF, 0x0445);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingAOSamplesPerPixel, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingAOIntensity, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingAORadius, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, IndirectLightingColor, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, IndirectLightingIntensity, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingGIType, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_PQJE, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingGIMaxBounces, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingGISamplesPerPixel, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGradingIntensity, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGradingLUT, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSensorWidth, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFocalDistance, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldDepthBlurAmount, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldDepthBlurRadius, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFocalRegion, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldNearTransitionRegion, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFarTransitionRegion, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldScale, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldNearBlurSize, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFarBlurSize, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldOcclusion, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSkyFocusDistance, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldVignetteSize, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurAmount, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurMax, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurTargetFPS, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurPerObjectSize, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVIntensity, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVVplInjectionBias, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSize, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSecondaryOcclusionIntensity, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSecondaryBounceIntensity, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVGeometryVolumeBias, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVEmissiveInjectionIntensity, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionIntensity, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionRadius, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDiffuseOcclusionExponent, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSpecularOcclusionExponent, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDiffuseOcclusionIntensity, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSpecularOcclusionIntensity, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ReflectionsType, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_EJB5, 0x04F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionIntensity, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionQuality, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionMaxRoughness, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsMaxRoughness, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsMaxBounces, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsSamplesPerPixel, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsShadows, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, TranslucencyType, 0x0516);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_REJZ, 0x0517);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencyMaxRoughness, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencyRefractionRays, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencySamplesPerPixel, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencyShadows, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_KR3C, 0x0526);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, PathTracingMaxBounces, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, PathTracingSamplesPerPixel, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVFadeRange, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionFadeRange, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenPercentage, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_5T20, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WeightedBlendables, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPostProcessSettings, 0x0550);
		}

		// struct FMinimalViewInfo
		TEST_METHOD(ScriptStruct__Engine__MinimalViewInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, FOV, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, DesiredFOV, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoWidth, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoNearClipPlane, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoFarClipPlane, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, AspectRatio, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_XHQ0, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, ProjectionMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_1ZBI, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, PostProcessBlendWeight, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_TZX6, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, PostProcessSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OffCenterProjectionOffset, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_FPWU, 0x0598);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMinimalViewInfo, 0x05E0);
		}

		// struct FCameraCacheEntry
		TEST_METHOD(ScriptStruct__Engine__CameraCacheEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, Timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, UnknownData_46ST, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, POV, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraCacheEntry, 0x05F0);
		}

		// struct FTViewTarget
		TEST_METHOD(ScriptStruct__Engine__TViewTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, Target, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, UnknownData_ASMP, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, POV, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, PlayerState, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, UnknownData_H3M1, 0x05F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTViewTarget, 0x0600);
		}

		// struct FReverbSettings
		TEST_METHOD(ScriptStruct__Engine__ReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, bApplyReverb, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, UnknownData_IW7I, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbEffect, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbPluginEffect, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, Volume, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, FadeTime, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReverbSettings, 0x0020);
		}

		// struct FInteriorSettings
		TEST_METHOD(ScriptStruct__Engine__InteriorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, bIsWorldSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, UnknownData_1GFZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorVolume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorLPF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorLPFTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorVolume, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorLPF, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorLPFTime, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInteriorSettings, 0x0024);
		}

		// struct FBroadphaseSettings
		TEST_METHOD(ScriptStruct__Engine__BroadphaseSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOnClient, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOnServer, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOuterBounds, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, UnknownData_E8MF, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPBounds, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPOuterBounds, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPNumSubdivs, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBroadphaseSettings, 0x0040);
		}

		// struct FInstancedStaticMeshInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshInstanceData, Transform, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshInstanceData, 0x0040);
		}

		// struct FInstancedStaticMeshMappingInfo
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshMappingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshMappingInfo, UnknownData_0JP5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshMappingInfo, 0x0008);
		}

		// struct FGeomSelection
		TEST_METHOD(ScriptStruct__Engine__GeomSelection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, Index, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, SelectionIndex, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeomSelection, 0x000C);
		}

		// struct FLightmassMaterialInterfaceSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassMaterialInterfaceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, EmissiveBoost, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, DiffuseBoost, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, ExportResolutionScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, UnknownData_FE11, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassMaterialInterfaceSettings, 0x0010);
		}

		// struct FMaterialTextureInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialTextureInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, SamplingScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, UVChannelIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, TextureName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialTextureInfo, 0x0010);
		}

		// struct FMaterialParameterInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialParameterInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Association, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, UnknownData_QP2T, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Index, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialParameterInfo, 0x0010);
		}

		// struct FScalarParameterValue
		TEST_METHOD(ScriptStruct__Engine__ScalarParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ExpressionGUID, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterValue, 0x0024);
		}

		// struct FVectorParameterValue
		TEST_METHOD(ScriptStruct__Engine__VectorParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ExpressionGUID, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorParameterValue, 0x0030);
		}

		// struct FTextureParameterValue
		TEST_METHOD(ScriptStruct__Engine__TextureParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ExpressionGUID, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureParameterValue, 0x0028);
		}

		// struct FRuntimeVirtualTextureParameterValue
		TEST_METHOD(ScriptStruct__Engine__RuntimeVirtualTextureParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeVirtualTextureParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeVirtualTextureParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeVirtualTextureParameterValue, ExpressionGUID, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeVirtualTextureParameterValue, 0x0028);
		}

		// struct FFontParameterValue
		TEST_METHOD(ScriptStruct__Engine__FontParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, FontValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, FontPage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, ExpressionGUID, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, UnknownData_LGO3, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontParameterValue, 0x0030);
		}

		// struct FMaterialInstanceBasePropertyOverrides
		TEST_METHOD(ScriptStruct__Engine__MaterialInstanceBasePropertyOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, BlendMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, ShadingModel, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, OpacityMaskClipValue, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialInstanceBasePropertyOverrides, 0x0008);
		}

		// struct FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, bOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, UnknownData_6X8I, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, ExpressionGUID, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticParameterBase, 0x0024);
		}

		// struct FStaticSwitchParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticSwitchParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, Value, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, UnknownData_PBYP, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticSwitchParameter, 0x0028);
		}

		// struct FStaticComponentMaskParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticComponentMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, R, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, G, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, B, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, A, 0x0027);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticComponentMaskParameter, 0x0028);
		}

		// struct FStaticTerrainLayerWeightParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticTerrainLayerWeightParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, WeightmapIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, bWeightBasedBlend, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, UnknownData_OJBT, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticTerrainLayerWeightParameter, 0x002C);
		}

		// struct FMaterialLayersFunctions
		TEST_METHOD(ScriptStruct__Engine__MaterialLayersFunctions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, Layers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, Blends, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, LayerStates, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, KeyString, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialLayersFunctions, 0x0040);
		}

		// struct FStaticMaterialLayersParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticMaterialLayersParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, UnknownData_XHG2, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, Value, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMaterialLayersParameter, 0x0068);
		}

		// struct FStaticParameterSet
		TEST_METHOD(ScriptStruct__Engine__StaticParameterSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, StaticSwitchParameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, StaticComponentMaskParameters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, TerrainLayerWeightParameters, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, MaterialLayersParameters, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticParameterSet, 0x0040);
		}

		// struct FMaterialCachedParameterEntry
		TEST_METHOD(ScriptStruct__Engine__MaterialCachedParameterEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, NameHashes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, ParameterInfos, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, ExpressionGuids, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, Overrides, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialCachedParameterEntry, 0x0040);
		}

		// struct FMaterialCachedParameters
		TEST_METHOD(ScriptStruct__Engine__MaterialCachedParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, RuntimeEntries, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, ScalarValues, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, VectorValues, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, TextureValues, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, FontValues, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, FontPageValues, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, RuntimeVirtualTextureValues, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialCachedParameters, 0x01A0);
		}

		// struct FBPComponentClassOverride
		TEST_METHOD(ScriptStruct__Engine__BPComponentClassOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPComponentClassOverride, ComponentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPComponentClassOverride, ComponentClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPComponentClassOverride, 0x0010);
		}

		// struct FBlueprintComponentChangedPropertyInfo
		TEST_METHOD(ScriptStruct__Engine__BlueprintComponentChangedPropertyInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, ArrayIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, UnknownData_UOR1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, PropertyScope, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintComponentChangedPropertyInfo, 0x0018);
		}

		// struct FBlueprintCookedComponentInstancingData
		TEST_METHOD(ScriptStruct__Engine__BlueprintCookedComponentInstancingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, ChangedPropertyList, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, UnknownData_7SSM, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, bHasValidCookedData, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, UnknownData_VSKQ, 0x0022);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintCookedComponentInstancingData, 0x0048);
		}

		// struct FSoundConcurrencySettings
		TEST_METHOD(ScriptStruct__Engine__SoundConcurrencySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, MaxCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_TQTC, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, ResolutionRule, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_GG7T, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, RetriggerTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScaleMode, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_FZRW, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScaleAttackTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_QS98, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScaleReleaseTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VoiceStealReleaseTime, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundConcurrencySettings, 0x0028);
		}

		// struct FSoundModulationDestinationSettings
		TEST_METHOD(ScriptStruct__Engine__SoundModulationDestinationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDestinationSettings, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDestinationSettings, UnknownData_6O1A, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDestinationSettings, Modulator, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundModulationDestinationSettings, 0x0010);
		}

		// struct FSoundModulationDefaultSettings
		TEST_METHOD(ScriptStruct__Engine__SoundModulationDefaultSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultSettings, VolumeModulationDestination, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultSettings, PitchModulationDestination, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultSettings, HighpassModulationDestination, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultSettings, LowpassModulationDestination, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundModulationDefaultSettings, 0x0040);
		}

		// struct FSoundModulationDefaultRoutingSettings : public FSoundModulationDefaultSettings
		TEST_METHOD(ScriptStruct__Engine__SoundModulationDefaultRoutingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultRoutingSettings, VolumeRouting, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultRoutingSettings, PitchRouting, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultRoutingSettings, HighpassRouting, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultRoutingSettings, LowpassRouting, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultRoutingSettings, UnknownData_HQCX, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundModulationDefaultRoutingSettings, 0x0048);
		}

		// struct FKeyHandleMap
		TEST_METHOD(ScriptStruct__Engine__KeyHandleMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyHandleMap, UnknownData_EHMC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyHandleMap, 0x0060);
		}

		// struct FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__IndexedCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIndexedCurve, UnknownData_UNIN, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIndexedCurve, KeyHandlesToIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIndexedCurve, 0x0068);
		}

		// struct FRealCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__RealCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, DefaultValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, PreInfinityExtrap, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, PostInfinityExtrap, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, UnknownData_CF8A, 0x006E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRealCurve, 0x0070);
		}

		// struct FRichCurveKey
		TEST_METHOD(ScriptStruct__Engine__RichCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, InterpMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, TangentMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, TangentWeightMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, UnknownData_NGSW, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, Time, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, ArriveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, ArriveTangentWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, LeaveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, LeaveTangentWeight, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichCurveKey, 0x001C);
		}

		// struct FRichCurve : public FRealCurve
		TEST_METHOD(ScriptStruct__Engine__RichCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurve, Keys, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichCurve, 0x0080);
		}

		// struct FRuntimeFloatCurve
		TEST_METHOD(ScriptStruct__Engine__RuntimeFloatCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeFloatCurve, EditorCurveData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeFloatCurve, ExternalCurve, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeFloatCurve, 0x0088);
		}

		// struct FSoundSourceBusSendInfo
		TEST_METHOD(ScriptStruct__Engine__SoundSourceBusSendInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SourceBusSendLevelControlMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, UnknownData_6SBY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SoundSourceBus, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, AudioBus, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SendLevel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MinSendLevel, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MaxSendLevel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MinSendDistance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MaxSendDistance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, UnknownData_HLHJ, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, CustomSendLevelCurve, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSourceBusSendInfo, 0x00B8);
		}

		// struct FSoundWaveSpectralDataEntry
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralDataEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataEntry, Magnitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataEntry, NormalizedMagnitude, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralDataEntry, 0x0008);
		}

		// struct FSoundWaveSpectralTimeData
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralTimeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralTimeData, Data, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralTimeData, TimeSec, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralTimeData, UnknownData_VNIJ, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralTimeData, 0x0018);
		}

		// struct FSoundWaveEnvelopeTimeData
		TEST_METHOD(ScriptStruct__Engine__SoundWaveEnvelopeTimeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeTimeData, Amplitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeTimeData, TimeSec, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveEnvelopeTimeData, 0x0008);
		}

		// struct FSubtitleCue
		TEST_METHOD(ScriptStruct__Engine__SubtitleCue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, Text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, Time, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, UnknownData_ELN2, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubtitleCue, 0x0020);
		}

		// struct FInterpolationParameter
		TEST_METHOD(ScriptStruct__Engine__InterpolationParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, InterpolationTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, InterpolationType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, UnknownData_XRC4, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpolationParameter, 0x0008);
		}

		// struct FPerBoneInterpolation
		TEST_METHOD(ScriptStruct__Engine__PerBoneInterpolation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, BoneReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, InterpolationSpeedPerSec, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneInterpolation, 0x0014);
		}

		// struct FBlendSample
		TEST_METHOD(ScriptStruct__Engine__BlendSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, SampleValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, RateScale, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendSample, 0x0018);
		}

		// struct FCustomAttributeSetting
		TEST_METHOD(ScriptStruct__Engine__CustomAttributeSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttributeSetting, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttributeSetting, Meaning, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomAttributeSetting, 0x0020);
		}

		// struct FTimeStretchCurveMarker
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurveMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveMarker, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveMarker, Alpha, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurveMarker, 0x0010);
		}

		// struct FTimeStretchCurve
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, SamplingRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, CurveValueMinPrecision, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, Markers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, Sum_dT_i_by_C_i, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, UnknownData_WZ7D, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurve, 0x0028);
		}

		// struct FStringCurveKey
		TEST_METHOD(ScriptStruct__Engine__StringCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, UnknownData_EEZW, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStringCurveKey, 0x0018);
		}

		// struct FStringCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__StringCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurve, DefaultValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurve, Keys, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStringCurve, 0x0088);
		}

		// struct FBakedStringCustomAttribute
		TEST_METHOD(ScriptStruct__Engine__BakedStringCustomAttribute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStringCustomAttribute, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStringCustomAttribute, StringCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedStringCustomAttribute, 0x0090);
		}

		// struct FIntegralKey
		TEST_METHOD(ScriptStruct__Engine__IntegralKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntegralKey, 0x0008);
		}

		// struct FIntegralCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__IntegralCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, Keys, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, DefaultValue, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, bUseDefaultValueBeforeFirstKey, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, UnknownData_BN1Y, 0x007D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntegralCurve, 0x0080);
		}

		// struct FBakedIntegerCustomAttribute
		TEST_METHOD(ScriptStruct__Engine__BakedIntegerCustomAttribute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedIntegerCustomAttribute, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedIntegerCustomAttribute, IntCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedIntegerCustomAttribute, 0x0088);
		}

		// struct FSimpleCurveKey
		TEST_METHOD(ScriptStruct__Engine__SimpleCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurveKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleCurveKey, 0x0008);
		}

		// struct FSimpleCurve : public FRealCurve
		TEST_METHOD(ScriptStruct__Engine__SimpleCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurve, InterpMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurve, UnknownData_0HZ3, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurve, Keys, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleCurve, 0x0088);
		}

		// struct FBakedFloatCustomAttribute
		TEST_METHOD(ScriptStruct__Engine__BakedFloatCustomAttribute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedFloatCustomAttribute, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedFloatCustomAttribute, FloatCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedFloatCustomAttribute, 0x0090);
		}

		// struct FBakedCustomAttributePerBoneData
		TEST_METHOD(ScriptStruct__Engine__BakedCustomAttributePerBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedCustomAttributePerBoneData, BoneTreeIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedCustomAttributePerBoneData, UnknownData_7P35, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedCustomAttributePerBoneData, StringAttributes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedCustomAttributePerBoneData, IntAttributes, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedCustomAttributePerBoneData, FloatAttributes, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedCustomAttributePerBoneData, 0x0038);
		}

		// struct FAttenuationSubmixSendSettings
		TEST_METHOD(ScriptStruct__Engine__AttenuationSubmixSendSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, Submix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendMethod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, UnknownData_ZPX1, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendLevelMin, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendLevelMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendDistanceMin, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendDistanceMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, ManualSubmixSendLevel, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, CustomSubmixSendCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttenuationSubmixSendSettings, 0x00A8);
		}

		// struct FSoundAttenuationPluginSettings
		TEST_METHOD(ScriptStruct__Engine__SoundAttenuationPluginSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, SpatializationPluginSettingsArray, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, OcclusionPluginSettingsArray, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, ReverbPluginSettingsArray, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundAttenuationPluginSettings, 0x0030);
		}

		// struct FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__BaseAttenuationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_BZOV, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, DistanceAlgorithm, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, AttenuationShape, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_XOZK, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, dBAttenuationAtMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, FalloffMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_V0R2, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, AttenuationShapeExtents, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, ConeOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, FalloffDistance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, CustomAttenuationCurve, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseAttenuationSettings, 0x00B0);
		}

		// struct FSoundAttenuationSettings : public FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__SoundAttenuationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, SpatializationAlgorithm, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_A0VE, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, BinauralRadius, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, AbsorptionMethod, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionTraceChannel, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbSendMethod, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationMethod, 0x00BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OmniRadius, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, StereoSpread, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFRadiusMin, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFRadiusMax, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_ELXP, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomLowpassAirAbsorptionCurve, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomHighpassAirAbsorptionCurve, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFFrequencyAtMin, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFFrequencyAtMax, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, HPFFrequencyAtMin, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, HPFFrequencyAtMax, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusAzimuth, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusAzimuth, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusDistanceScale, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusDistanceScale, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusPriorityScale, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusPriorityScale, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusVolumeAttenuation, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusVolumeAttenuation, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusAttackInterpSpeed, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusReleaseInterpSpeed, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionLowPassFilterFrequency, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionVolumeAttenuation, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionInterpolationTime, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbWetLevelMin, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbWetLevelMax, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbDistanceMin, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbDistanceMax, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ManualReverbSendLevel, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomReverbSendCurve, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, SubmixSendSettings, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationMin, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationMax, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationDistanceMin, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationDistanceMax, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ManualPriorityAttenuation, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_HTK2, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomPriorityAttenuationCurve, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PluginSettings, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundAttenuationSettings, 0x03A0);
		}

		// struct FBoneNode
		TEST_METHOD(ScriptStruct__Engine__BoneNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, ParentIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, TranslationRetargetingMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, UnknownData_UBNA, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneNode, 0x0010);
		}

		// struct FVirtualBone
		TEST_METHOD(ScriptStruct__Engine__VirtualBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, SourceBoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, TargetBoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, VirtualBoneName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualBone, 0x0018);
		}

		// struct FSmartNameContainer
		TEST_METHOD(ScriptStruct__Engine__SmartNameContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartNameContainer, UnknownData_RXQF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartNameContainer, 0x0050);
		}

		// struct FAnimSlotGroup
		TEST_METHOD(ScriptStruct__Engine__AnimSlotGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotGroup, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotGroup, SlotNames, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotGroup, 0x0018);
		}

		// struct FDelegateArray
		TEST_METHOD(ScriptStruct__Engine__DelegateArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateArray, Delegates, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelegateArray, 0x0010);
		}

		// struct FRedirector
		TEST_METHOD(ScriptStruct__Engine__Redirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRedirector, OldName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRedirector, NewName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRedirector, 0x0010);
		}

		// struct FTextureLODGroup
		TEST_METHOD(ScriptStruct__Engine__TextureLODGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, Group, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_ZPBT, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias_Smaller, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias_Smallest, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_LL09, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, NumStreamedMips, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipGenSettings, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_FZPZ, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MinLODSize, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize_Smaller, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize_Smallest, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, OptionalLODBias, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, OptionalMaxLODSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_NYHC, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MinMagFilter, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipFilter, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipLoadOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, DuplicateNonOptionalMips, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_LQAW, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, Downscale, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, DownscaleOptions, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_2BDY, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, VirtualTextureTileCountBias, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, VirtualTextureTileSizeBias, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureLODGroup, 0x0064);
		}

		// struct FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassLightSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, IndirectLightingSaturation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, ShadowExponent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, bUseAreaShadowsForStationaryLight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, UnknownData_GKVX, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassLightSettings, 0x000C);
		}

		// struct FLightmassDirectionalLightSettings : public FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassDirectionalLightSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDirectionalLightSettings, LightSourceAngle, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassDirectionalLightSettings, 0x0010);
		}

		// struct FInputAxisProperties
		TEST_METHOD(ScriptStruct__Engine__InputAxisProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, DeadZone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, Sensitivity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, Exponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, UnknownData_R8JJ, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisProperties, 0x0010);
		}

		// struct FInputAxisConfigEntry
		TEST_METHOD(ScriptStruct__Engine__InputAxisConfigEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisConfigEntry, AxisKeyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisConfigEntry, AxisProperties, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisConfigEntry, 0x0018);
		}

		// struct FInputActionKeyMapping
		TEST_METHOD(ScriptStruct__Engine__InputActionKeyMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, UnknownData_RBUJ, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, Key, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputActionKeyMapping, 0x0028);
		}

		// struct FInputAxisKeyMapping
		TEST_METHOD(ScriptStruct__Engine__InputAxisKeyMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, AxisName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, UnknownData_14VM, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, Key, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisKeyMapping, 0x0028);
		}

		// struct FInputActionSpeechMapping
		TEST_METHOD(ScriptStruct__Engine__InputActionSpeechMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionSpeechMapping, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionSpeechMapping, SpeechKeyword, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputActionSpeechMapping, 0x0010);
		}

		// struct FInterpControlPoint
		TEST_METHOD(ScriptStruct__Engine__InterpControlPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, PositionControlPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, bPositionIsRelative, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, UnknownData_M84O, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpControlPoint, 0x001C);
		}

		// struct FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__MaterialInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, OutputIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, ExpressionName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialInput, 0x000C);
		}

		// struct FScalarMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ScalarMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarMaterialInput, 0x000C);
		}

		// struct FVectorMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__VectorMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorMaterialInput, 0x000C);
		}

		// struct FColorMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ColorMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorMaterialInput, 0x000C);
		}

		// struct FMaterialAttributesInput : public FExpressionInput
		TEST_METHOD(ScriptStruct__Engine__MaterialAttributesInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialAttributesInput, PropertyConnectedBitmask, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialAttributesInput, 0x0010);
		}

		// struct FShadingModelMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ShadingModelMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShadingModelMaterialInput, 0x000C);
		}

		// struct FDistributionLookupTable
		TEST_METHOD(ScriptStruct__Engine__DistributionLookupTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, TimeScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, TimeBias, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, Values, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, Op, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, EntryCount, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, EntryStride, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, SubEntryStride, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, LockFlag, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, UnknownData_ZBV5, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistributionLookupTable, 0x0020);
		}

		// struct FVectorDistribution
		TEST_METHOD(ScriptStruct__Engine__VectorDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorDistribution, 0x0020);
		}

		// struct FVector4Distribution
		TEST_METHOD(ScriptStruct__Engine__Vector4Distribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4Distribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector4Distribution, 0x0020);
		}

		// struct FFloatRK4SpringInterpolator
		TEST_METHOD(ScriptStruct__Engine__FloatRK4SpringInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRK4SpringInterpolator, StiffnessConstant, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRK4SpringInterpolator, DampeningRatio, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRK4SpringInterpolator, 0x0008);
		}

		// struct FVectorRK4SpringInterpolator
		TEST_METHOD(ScriptStruct__Engine__VectorRK4SpringInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorRK4SpringInterpolator, StiffnessConstant, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorRK4SpringInterpolator, DampeningRatio, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorRK4SpringInterpolator, 0x0008);
		}

		// struct FFormatArgumentData
		TEST_METHOD(ScriptStruct__Engine__FormatArgumentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, UnknownData_9I6Q, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueInt, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueFloat, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueGender, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, UnknownData_12Y0, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFormatArgumentData, 0x0040);
		}

		// struct FVector2MaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__Vector2MaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2MaterialInput, 0x000C);
		}

		// struct FBranchingPointNotifyPayload
		TEST_METHOD(ScriptStruct__Engine__BranchingPointNotifyPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointNotifyPayload, UnknownData_M5CD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPointNotifyPayload, 0x0020);
		}

		// struct FPlatformInterfaceData
		TEST_METHOD(ScriptStruct__Engine__PlatformInterfaceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, DataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, UnknownData_ZSK0, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, IntValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, FloatValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, UnknownData_EIDS, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, StringValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, ObjectValue, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformInterfaceData, 0x0030);
		}

		// struct FPlatformInterfaceDelegateResult
		TEST_METHOD(ScriptStruct__Engine__PlatformInterfaceDelegateResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, bSuccessful, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, UnknownData_2Z5R, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformInterfaceDelegateResult, 0x0038);
		}

		// struct FDebugFloatHistory
		TEST_METHOD(ScriptStruct__Engine__DebugFloatHistory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, Samples, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MaxSamples, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MinValue, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MaxValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, bAutoAdjustMinMax, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, UnknownData_BCZL, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugFloatHistory, 0x0020);
		}

		// struct FLatentActionInfo
		TEST_METHOD(ScriptStruct__Engine__LatentActionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, Linkage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, UUID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, ExecutionFunction, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, CallbackTarget, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLatentActionInfo, 0x0018);
		}

		// struct FTimerHandle
		TEST_METHOD(ScriptStruct__Engine__TimerHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimerHandle, Handle, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimerHandle, 0x0008);
		}

		// struct FCollisionProfileName
		TEST_METHOD(ScriptStruct__Engine__CollisionProfileName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionProfileName, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionProfileName, 0x0008);
		}

		// struct FGenericStruct
		TEST_METHOD(ScriptStruct__Engine__GenericStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenericStruct, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGenericStruct, 0x0004);
		}

		// struct FUserActivity
		TEST_METHOD(ScriptStruct__Engine__UserActivity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserActivity, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserActivity, UnknownData_PXHG, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserActivity, 0x0018);
		}

		// struct FKeyHandleLookupTable
		TEST_METHOD(ScriptStruct__Engine__KeyHandleLookupTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyHandleLookupTable, UnknownData_CSWQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyHandleLookupTable, 0x0060);
		}

		// struct FTableRowBase
		TEST_METHOD(ScriptStruct__Engine__TableRowBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowBase, UnknownData_6WFK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableRowBase, 0x0008);
		}

		// struct FFastArraySerializer
		TEST_METHOD(ScriptStruct__Engine__FastArraySerializer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_BYC4, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, ArrayReplicationKey, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_8WOI, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, DeltaFlags, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_TZQQ, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFastArraySerializer, 0x0108);
		}

		// struct FFastArraySerializerItem
		TEST_METHOD(ScriptStruct__Engine__FastArraySerializerItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, ReplicationID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, ReplicationKey, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, MostRecentArrayReplicationKey, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFastArraySerializerItem, 0x000C);
		}

		// struct FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__Engine__AnimInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimInstanceProxy, UnknownData_S5R2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimInstanceProxy, 0x0760);
		}

		// struct FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Base)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Base, UnknownData_WLBV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Base, 0x0010);
		}

		// struct FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__PoseLinkBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseLinkBase, LinkID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseLinkBase, UnknownData_6A37, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseLinkBase, 0x0010);
		}

		// struct FPoseLink : public FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__PoseLink)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseLink, 0x0010);
		}

		// struct FRuntimeCurveLinearColor
		TEST_METHOD(ScriptStruct__Engine__RuntimeCurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeCurveLinearColor, ColorCurves, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeCurveLinearColor, ExternalCurve, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeCurveLinearColor, 0x0208);
		}

		// struct FNetViewer
		TEST_METHOD(ScriptStruct__Engine__NetViewer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, Connection, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, InViewer, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewTarget, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewLocation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewDir, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetViewer, 0x0030);
		}

		// struct FAnimNode_AssetPlayerBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_AssetPlayerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupRole, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupScope, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, bIgnoreForRelevancyTest, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_HOZ0, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, BlendWeight, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, InternalTimeAccumulator, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_B21S, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AssetPlayerBase, 0x0038);
		}

		// struct FInputRange
		TEST_METHOD(ScriptStruct__Engine__InputRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRange, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRange, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputRange, 0x0008);
		}

		// struct FInputScaleBiasClamp
		TEST_METHOD(ScriptStruct__Engine__InputScaleBiasClamp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bMapRange, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bClampResult, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bInterpResult, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, UnknownData_ADML, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InRange, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, OutRange, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, Scale, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, Bias, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, ClampMin, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, ClampMax, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InterpSpeedIncreasing, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InterpSpeedDecreasing, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, UnknownData_FG64, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputScaleBiasClamp, 0x0030);
		}

		// struct FAlphaBlend
		TEST_METHOD(ScriptStruct__Engine__AlphaBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, CustomCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, BlendTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, UnknownData_ZIWO, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, BlendOption, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, UnknownData_FPOR, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAlphaBlend, 0x0030);
		}

		// struct FInputAlphaBoolBlend
		TEST_METHOD(ScriptStruct__Engine__InputAlphaBoolBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendInTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendOutTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, bInitialized, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, UnknownData_VH69, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, CustomCurve, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, AlphaBlend, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAlphaBoolBlend, 0x0048);
		}

		// struct FInputScaleBias
		TEST_METHOD(ScriptStruct__Engine__InputScaleBias)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBias, Scale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBias, Bias, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputScaleBias, 0x0008);
		}

		// struct FComponentSpacePoseLink : public FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__ComponentSpacePoseLink)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSpacePoseLink, 0x0010);
		}

		// struct FPerBoneBlendWeight
		TEST_METHOD(ScriptStruct__Engine__PerBoneBlendWeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeight, SourceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeight, BlendWeight, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneBlendWeight, 0x0008);
		}

		// struct FBranchFilter
		TEST_METHOD(ScriptStruct__Engine__BranchFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, BlendDepth, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchFilter, 0x000C);
		}

		// struct FInputBlendPose
		TEST_METHOD(ScriptStruct__Engine__InputBlendPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputBlendPose, BranchFilters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputBlendPose, 0x0010);
		}

		// struct FPoseSnapshot
		TEST_METHOD(ScriptStruct__Engine__PoseSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, LocalTransforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, BoneNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, SkeletalMeshName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, SnapshotName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, bIsValid, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, UnknownData_MZU8, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseSnapshot, 0x0038);
		}

		// struct FAnimNode_Root : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Root)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Result, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Group, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Root, 0x0030);
		}

		// struct FAnimCurveParam
		TEST_METHOD(ScriptStruct__Engine__AnimCurveParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveParam, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveParam, UnknownData_A3GU, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveParam, 0x000C);
		}

		// struct FActorComponentDuplicatedObjectData
		TEST_METHOD(ScriptStruct__Engine__ActorComponentDuplicatedObjectData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentDuplicatedObjectData, UnknownData_Y7CE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentDuplicatedObjectData, 0x0010);
		}

		// struct FActorComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__ActorComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, UnknownData_BNV5, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SourceComponentTemplate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SourceComponentCreationMethod, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, UnknownData_562S, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SourceComponentTypeSerializedIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SavedProperties, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, UniqueTransientPackage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, DuplicatedObjects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, ReferencedObjects, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, ReferencedNames, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentInstanceData, 0x0068);
		}

		// struct FSceneComponentInstanceData : public FActorComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__SceneComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSceneComponentInstanceData, AttachedInstanceComponents, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSceneComponentInstanceData, 0x00B8);
		}

		// struct FDirectoryPath
		TEST_METHOD(ScriptStruct__Engine__DirectoryPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectoryPath, Path, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectoryPath, 0x0010);
		}

		// struct FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KShapeElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_WBE1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, RestOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, Name, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_C5RN, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, CollisionEnabled, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_U2GH, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKShapeElem, 0x0030);
		}

		// struct FKSphereElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KSphereElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, Radius, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKSphereElem, 0x0040);
		}

		// struct FKBoxElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KBoxElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, X, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Y, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Z, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, UnknownData_1GZG, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKBoxElem, 0x0058);
		}

		// struct FKSphylElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KSphylElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Radius, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Length, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKSphylElem, 0x0050);
		}

		// struct FKConvexElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KConvexElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, VertexData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, IndexData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, ElemBox, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, UnknownData_NZ5W, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, Transform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, UnknownData_1UI6, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKConvexElem, 0x00B0);
		}

		// struct FKTaperedCapsuleElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KTaperedCapsuleElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Radius0, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Radius1, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Length, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, UnknownData_4U03, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKTaperedCapsuleElem, 0x0058);
		}

		// struct FKAggregateGeom
		TEST_METHOD(ScriptStruct__Engine__KAggregateGeom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, SphereElems, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, BoxElems, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, SphylElems, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, ConvexElems, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, TaperedCapsuleElems, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, UnknownData_KQFO, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKAggregateGeom, 0x0058);
		}

		// struct FAnimationGroupReference
		TEST_METHOD(ScriptStruct__Engine__AnimationGroupReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupRole, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupScope, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, UnknownData_QHPB, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationGroupReference, 0x000C);
		}

		// struct FAnimGroupInstance
		TEST_METHOD(ScriptStruct__Engine__AnimGroupInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInstance, UnknownData_2XDP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGroupInstance, 0x0070);
		}

		// struct FAnimTickRecord
		TEST_METHOD(ScriptStruct__Engine__AnimTickRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTickRecord, SourceAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTickRecord, UnknownData_C2UK, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTickRecord, 0x0048);
		}

		// struct FMarkerSyncAnimPosition
		TEST_METHOD(ScriptStruct__Engine__MarkerSyncAnimPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, PreviousMarkerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, NextMarkerName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, PositionBetweenMarkers, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMarkerSyncAnimPosition, 0x0014);
		}

		// struct FBlendFilter
		TEST_METHOD(ScriptStruct__Engine__BlendFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendFilter, UnknownData_CAFL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendFilter, 0x0078);
		}

		// struct FBlendSampleData
		TEST_METHOD(ScriptStruct__Engine__BlendSampleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, SampleDataIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, UnknownData_YGON, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, Animation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, TotalWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, PreviousTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, SamplePlayRate, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, UnknownData_EKR4, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendSampleData, 0x0040);
		}

		// struct FAnimationRecordingSettings
		TEST_METHOD(ScriptStruct__Engine__AnimationRecordingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRecordInWorldSpace, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRemoveRootAnimation, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bAutoSaveAsset, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_3C7R, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, SampleRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, Length, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, InterpMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, TangentMode, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_3WEF, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRecordTransforms, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRecordCurves, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_XDL6, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationRecordingSettings, 0x0014);
		}

		// struct FComponentSpacePose
		TEST_METHOD(ScriptStruct__Engine__ComponentSpacePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSpacePose, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSpacePose, Names, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSpacePose, 0x0020);
		}

		// struct FLocalSpacePose
		TEST_METHOD(ScriptStruct__Engine__LocalSpacePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalSpacePose, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalSpacePose, Names, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalSpacePose, 0x0020);
		}

		// struct FNamedTransform
		TEST_METHOD(ScriptStruct__Engine__NamedTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, UnknownData_HDRP, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedTransform, 0x0040);
		}

		// struct FNamedColor
		TEST_METHOD(ScriptStruct__Engine__NamedColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedColor, 0x000C);
		}

		// struct FNamedVector
		TEST_METHOD(ScriptStruct__Engine__NamedVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, Name, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedVector, 0x0014);
		}

		// struct FNamedFloat
		TEST_METHOD(ScriptStruct__Engine__NamedFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedFloat, 0x000C);
		}

		// struct FAnimParentNodeAssetOverride
		TEST_METHOD(ScriptStruct__Engine__AnimParentNodeAssetOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimParentNodeAssetOverride, NewAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimParentNodeAssetOverride, ParentNodeGuid, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimParentNodeAssetOverride, 0x0018);
		}

		// struct FAnimGroupInfo
		TEST_METHOD(ScriptStruct__Engine__AnimGroupInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInfo, Color, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGroupInfo, 0x0018);
		}

		// struct FAnimBlueprintDebugData
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintDebugData, UnknownData_1DMH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintDebugData, 0x0001);
		}

		// struct FAnimationFrameSnapshot
		TEST_METHOD(ScriptStruct__Engine__AnimationFrameSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationFrameSnapshot, UnknownData_KFWQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationFrameSnapshot, 0x0001);
		}

		// struct FStateMachineDebugData
		TEST_METHOD(ScriptStruct__Engine__StateMachineDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStateMachineDebugData, UnknownData_6NPJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStateMachineDebugData, 0x00B0);
		}

		// struct FStateMachineStateDebugData
		TEST_METHOD(ScriptStruct__Engine__StateMachineStateDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStateMachineStateDebugData, UnknownData_P3NK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStateMachineStateDebugData, 0x0010);
		}

		// struct FAnimBlueprintFunctionData
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintFunctionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunctionData, OutputPoseNodeProperty, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunctionData, InputPoseNodeProperties, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunctionData, InputProperties, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintFunctionData, 0x0040);
		}

		// struct FAnimGraphBlendOptions
		TEST_METHOD(ScriptStruct__Engine__AnimGraphBlendOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGraphBlendOptions, BlendInTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGraphBlendOptions, BlendOutTime, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGraphBlendOptions, 0x0008);
		}

		// struct FGraphAssetPlayerInformation
		TEST_METHOD(ScriptStruct__Engine__GraphAssetPlayerInformation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphAssetPlayerInformation, PlayerNodeIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGraphAssetPlayerInformation, 0x0010);
		}

		// struct FCachedPoseIndices
		TEST_METHOD(ScriptStruct__Engine__CachedPoseIndices)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPoseIndices, OrderedSavedPoseNodeIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedPoseIndices, 0x0010);
		}

		// struct FAnimBlueprintFunction
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, Group, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, OutputPoseNodeIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, UnknownData_DN4C, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, InputPoseNames, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, InputPoseNodeIndices, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, UnknownData_RBBK, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, bImplemented, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, UnknownData_VH0Y, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintFunction, 0x0068);
		}

		// struct FAnimSegment
		TEST_METHOD(ScriptStruct__Engine__AnimSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, StartPos, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimStartTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimEndTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimPlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, LoopingCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, UnknownData_654Z, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSegment, 0x0020);
		}

		// struct FAnimTrack
		TEST_METHOD(ScriptStruct__Engine__AnimTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTrack, AnimSegments, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTrack, 0x0010);
		}

		// struct FRootMotionExtractionStep
		TEST_METHOD(ScriptStruct__Engine__RootMotionExtractionStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, AnimSequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, StartPosition, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, EndPosition, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionExtractionStep, 0x0010);
		}

		// struct FAnimationErrorStats
		TEST_METHOD(ScriptStruct__Engine__AnimationErrorStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationErrorStats, UnknownData_D2V8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationErrorStats, 0x0010);
		}

		// struct FSmartName
		TEST_METHOD(ScriptStruct__Engine__SmartName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartName, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartName, UnknownData_SH53, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartName, 0x000C);
		}

		// struct FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__AnimCurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, LastObservedName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, CurveTypeFlags, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveBase, 0x0018);
		}

		// struct FFloatCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__FloatCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatCurve, FloatCurve, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatCurve, 0x0098);
		}

		// struct FRawCurveTracks
		TEST_METHOD(ScriptStruct__Engine__RawCurveTracks)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawCurveTracks, FloatCurves, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawCurveTracks, 0x0010);
		}

		// struct FVectorCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__VectorCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorCurve, FloatCurves, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorCurve, 0x0198);
		}

		// struct FTransformCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__TransformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, TranslationCurve, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, RotationCurve, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, ScaleCurve, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformCurve, 0x04E0);
		}

		// struct FSlotEvaluationPose
		TEST_METHOD(ScriptStruct__Engine__SlotEvaluationPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, AdditiveType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, UnknownData_7PO9, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, Weight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, UnknownData_YC0C, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotEvaluationPose, 0x00E0);
		}

		// struct FA2Pose
		TEST_METHOD(ScriptStruct__Engine__A2Pose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2Pose, Bones, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FA2Pose, 0x0010);
		}

		// struct FA2CSPose : public FA2Pose
		TEST_METHOD(ScriptStruct__Engine__A2CSPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2CSPose, UnknownData_G617, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2CSPose, ComponentSpaceFlags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FA2CSPose, 0x0028);
		}

		// struct FQueuedDrawDebugItem
		TEST_METHOD(ScriptStruct__Engine__QueuedDrawDebugItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, ItemType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, UnknownData_Y0VF, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, StartLoc, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, EndLoc, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Center, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Radius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Size, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Segments, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Color, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, bPersistentLines, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, UnknownData_4OX6, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Lifetime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Thickness, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Message, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, TextScale, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQueuedDrawDebugItem, 0x0068);
		}

		// struct FAnimInstanceSubsystemData
		TEST_METHOD(ScriptStruct__Engine__AnimInstanceSubsystemData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimInstanceSubsystemData, UnknownData_QWZJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimInstanceSubsystemData, 0x0001);
		}

		// struct FAnimMontageInstance
		TEST_METHOD(ScriptStruct__Engine__AnimMontageInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Montage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_S6HG, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, bPlaying, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_0EKX, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, DefaultBlendTimeMultiplier, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_3AG4, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, NextSections, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, PrevSections, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_UO5Z, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, ActiveStateBranchingPoints, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Position, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, PlayRate, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Blend, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_1IGO, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, DisableRootMotionCount, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_7C68, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimMontageInstance, 0x01B0);
		}

		// struct FBranchingPointMarker
		TEST_METHOD(ScriptStruct__Engine__BranchingPointMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, NotifyIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, TriggerTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, NotifyEventType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, UnknownData_TJ2U, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPointMarker, 0x000C);
		}

		// struct FBranchingPoint : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__BranchingPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, EventName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, DisplayTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, TriggerTimeOffset, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPoint, 0x0040);
		}

		// struct FSlotAnimationTrack
		TEST_METHOD(ScriptStruct__Engine__SlotAnimationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotAnimationTrack, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotAnimationTrack, AnimTrack, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotAnimationTrack, 0x0018);
		}

		// struct FCompositeSection : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__CompositeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, SectionName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, StartTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, NextSectionName, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, UnknownData_LQP1, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, MetaData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeSection, 0x0058);
		}

		// struct FAnimNode_ApplyMeshSpaceAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ApplyMeshSpaceAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaInputType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_334K, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Alpha, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_5K6T, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaBoolBlend, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaCurveName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaScaleBias, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaScaleBiasClamp, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, LODThreshold, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_49FY, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyMeshSpaceAdditive, 0x00D0);
		}

		// struct FAnimNode_CustomProperty : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_CustomProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, SourcePropertyNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, DestPropertyNames, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, TargetInstance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, UnknownData_U1UP, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CustomProperty, 0x0058);
		}

		// struct FAnimNode_Inertialization : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Inertialization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Inertialization, Source, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Inertialization, UnknownData_QKMQ, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Inertialization, 0x0070);
		}

		// struct FInertializationPoseDiff
		TEST_METHOD(ScriptStruct__Engine__InertializationPoseDiff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationPoseDiff, UnknownData_9IXQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationPoseDiff, 0x0028);
		}

		// struct FInertializationCurveDiff
		TEST_METHOD(ScriptStruct__Engine__InertializationCurveDiff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationCurveDiff, UnknownData_M0LN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationCurveDiff, 0x0008);
		}

		// struct FInertializationBoneDiff
		TEST_METHOD(ScriptStruct__Engine__InertializationBoneDiff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationBoneDiff, UnknownData_VOB1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationBoneDiff, 0x003C);
		}

		// struct FInertializationPose
		TEST_METHOD(ScriptStruct__Engine__InertializationPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationPose, UnknownData_UV4R, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationPose, 0x00A0);
		}

		// struct FAnimNode_LinkedAnimGraph : public FAnimNode_CustomProperty
		TEST_METHOD(ScriptStruct__Engine__AnimNode_LinkedAnimGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, InputPoses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, InputPoseNames, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, InstanceClass, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, Tag, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, UnknownData_MHLT, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, UnknownData_ROKW, 0x009D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LinkedAnimGraph, 0x00A0);
		}

		// struct FAnimNode_LinkedAnimLayer : public FAnimNode_LinkedAnimGraph
		TEST_METHOD(ScriptStruct__Engine__AnimNode_LinkedAnimLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimLayer, Interface, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimLayer, Layer, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LinkedAnimLayer, 0x00B0);
		}

		// struct FAnimNode_LinkedInputPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_LinkedInputPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, Graph, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, InputPose, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, UnknownData_KI46, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LinkedInputPose, 0x0118);
		}

		// struct FAnimNode_SaveCachedPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SaveCachedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, Pose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, CachePoseName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, UnknownData_39NJ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SaveCachedPose, 0x0158);
		}

		// struct FAnimNode_SequencePlayer : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, Sequence, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRateBasis, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRate, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRateScaleBiasClamp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, StartPosition, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, bLoopAnimation, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, UnknownData_YLDV, 0x007D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SequencePlayer, 0x0080);
		}

		// struct FAnimNode_StateMachine : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_StateMachine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, StateMachineIndexInClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, MaxTransitionsPerFrame, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, bSkipFirstUpdateTransition, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, bReinitializeOnBecomingRelevant, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, UnknownData_XIK1, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_StateMachine, 0x00B0);
		}

		// struct FAnimationPotentialTransition
		TEST_METHOD(ScriptStruct__Engine__AnimationPotentialTransition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationPotentialTransition, UnknownData_PDII, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationPotentialTransition, 0x0030);
		}

		// struct FAnimationActiveTransitionEntry
		TEST_METHOD(ScriptStruct__Engine__AnimationActiveTransitionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, UnknownData_VPUK, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, BlendProfile, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, UnknownData_O6QZ, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationActiveTransitionEntry, 0x00C8);
		}

		// struct FAnimNode_TransitionPoseEvaluator : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_TransitionPoseEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_HU2B, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, FramesToCachePose, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_QEOK, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, DataSource, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, EvaluatorMode, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_MWKZ, 0x00F2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TransitionPoseEvaluator, 0x00F8);
		}

		// struct FAnimNode_TransitionResult : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_TransitionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionResult, bCanEnterTransition, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionResult, UnknownData_6A42, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TransitionResult, 0x0028);
		}

		// struct FAnimNode_UseCachedPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_UseCachedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_UseCachedPose, LinkToCachingNode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_UseCachedPose, CachePoseName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_UseCachedPose, 0x0028);
		}

		// struct FExposedValueCopyRecord
		TEST_METHOD(ScriptStruct__Engine__ExposedValueCopyRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, CopyIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, PostCopyOperation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, UnknownData_09RX, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposedValueCopyRecord, 0x0008);
		}

		// struct FExposedValueHandler
		TEST_METHOD(ScriptStruct__Engine__ExposedValueHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, BoundFunction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, CopyRecords, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, Function, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, ValueHandlerNodeProperty, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, UnknownData_9XW6, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposedValueHandler, 0x0050);
		}

		// struct FAnimNode_ConvertLocalToComponentSpace : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ConvertLocalToComponentSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ConvertLocalToComponentSpace, LocalPose, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ConvertLocalToComponentSpace, 0x0020);
		}

		// struct FAnimNode_ConvertComponentToLocalSpace : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ConvertComponentToLocalSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ConvertComponentToLocalSpace, ComponentPose, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ConvertComponentToLocalSpace, 0x0020);
		}

		// struct FCompressedTrack
		TEST_METHOD(ScriptStruct__Engine__CompressedTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, ByteStream, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Mins, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Ranges, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompressedTrack, 0x0038);
		}

		// struct FCurveTrack
		TEST_METHOD(ScriptStruct__Engine__CurveTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTrack, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTrack, CurveWeights, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveTrack, 0x0018);
		}

		// struct FScaleTrack
		TEST_METHOD(ScriptStruct__Engine__ScaleTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleTrack, ScaleKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScaleTrack, 0x0020);
		}

		// struct FRotationTrack
		TEST_METHOD(ScriptStruct__Engine__RotationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationTrack, RotKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationTrack, 0x0020);
		}

		// struct FTranslationTrack
		TEST_METHOD(ScriptStruct__Engine__TranslationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTranslationTrack, PosKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTranslationTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTranslationTrack, 0x0020);
		}

		// struct FRawAnimSequenceTrack
		TEST_METHOD(ScriptStruct__Engine__RawAnimSequenceTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, PosKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, RotKeys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, ScaleKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawAnimSequenceTrack, 0x0030);
		}

		// struct FAnimSequenceTrackContainer
		TEST_METHOD(ScriptStruct__Engine__AnimSequenceTrackContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceTrackContainer, AnimationTracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceTrackContainer, TrackNames, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSequenceTrackContainer, 0x0020);
		}

		// struct FAnimSetMeshLinkup
		TEST_METHOD(ScriptStruct__Engine__AnimSetMeshLinkup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSetMeshLinkup, BoneToTrackTable, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSetMeshLinkup, 0x0010);
		}

		// struct FAnimSingleNodeInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__Engine__AnimSingleNodeInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSingleNodeInstanceProxy, UnknownData_SOU4, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSingleNodeInstanceProxy, 0x08B0);
		}

		// struct FAnimNode_SingleNode : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SingleNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SingleNode, SourcePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SingleNode, UnknownData_CIJ2, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SingleNode, 0x0030);
		}

		// struct FBakedStateExitTransition
		TEST_METHOD(ScriptStruct__Engine__BakedStateExitTransition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, CanTakeDelegateIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, CustomResultNodeIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, TransitionIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, bDesiredTransitionReturnValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, bAutomaticRemainingTimeRule, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, UnknownData_9FN7, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, PoseEvaluatorLinks, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedStateExitTransition, 0x0020);
		}

		// struct FBakedAnimationState
		TEST_METHOD(ScriptStruct__Engine__BakedAnimationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StateName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, Transitions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StateRootNodeIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StartNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, EndNotify, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, FullyBlendedNotify, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, bIsAConduit, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, UnknownData_YQZP, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, EntryRuleNodeIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, PlayerNodeIndices, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, LayerNodeIndices, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, bAlwaysResetOnEntry, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, UnknownData_Z2OY, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedAnimationState, 0x0058);
		}

		// struct FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationStateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateBase, StateName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationStateBase, 0x0008);
		}

		// struct FAnimationTransitionBetweenStates : public FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationTransitionBetweenStates)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, PreviousState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, NextState, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, CrossfadeDuration, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, StartNotify, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, EndNotify, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, InterruptNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, BlendMode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, UnknownData_KPT1, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, CustomCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, BlendProfile, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, LogicType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, UnknownData_BT5E, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationTransitionBetweenStates, 0x0040);
		}

		// struct FBakedAnimationStateMachine
		TEST_METHOD(ScriptStruct__Engine__BakedAnimationStateMachine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, MachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, InitialState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, UnknownData_52CD, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, States, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, Transitions, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedAnimationStateMachine, 0x0030);
		}

		// struct FAnimationTransitionRule
		TEST_METHOD(ScriptStruct__Engine__AnimationTransitionRule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, RuleToExecute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, TransitionReturnVal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, UnknownData_33D3, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, TransitionIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationTransitionRule, 0x0010);
		}

		// struct FAnimationState : public FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, Transitions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, StateRootNodeIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, StartNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, EndNotify, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, FullyBlendedNotify, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationState, 0x0028);
		}

		// struct FTrackToSkeletonMap
		TEST_METHOD(ScriptStruct__Engine__TrackToSkeletonMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackToSkeletonMap, BoneTreeIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackToSkeletonMap, 0x0004);
		}

		// struct FAnimSyncMarker
		TEST_METHOD(ScriptStruct__Engine__AnimSyncMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, MarkerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSyncMarker, 0x000C);
		}

		// struct FMarkerSyncData
		TEST_METHOD(ScriptStruct__Engine__MarkerSyncData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncData, AuthoredSyncMarkers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncData, UnknownData_Y7FK, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMarkerSyncData, 0x0020);
		}

		// struct FAnimNotifyTrack
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, TrackName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, TrackColor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, UnknownData_JWWF, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyTrack, 0x0038);
		}

		// struct FPerBoneBlendWeights
		TEST_METHOD(ScriptStruct__Engine__PerBoneBlendWeights)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeights, BoneBlendWeights, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneBlendWeights, 0x0010);
		}

		// struct FAssetImportInfo
		TEST_METHOD(ScriptStruct__Engine__AssetImportInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetImportInfo, UnknownData_LJGS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetImportInfo, 0x0001);
		}

		// struct FPrimaryAssetRules
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRules)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, Priority, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, ChunkId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, bApplyRecursively, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, CookRule, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, UnknownData_161U, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRules, 0x000C);
		}

		// struct FPrimaryAssetRulesCustomOverride
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRulesCustomOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, FilterDirectory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, FilterString, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, Rules, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, UnknownData_N56P, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRulesCustomOverride, 0x0038);
		}

		// struct FPrimaryAssetRulesOverride
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRulesOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesOverride, PrimaryAssetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesOverride, Rules, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRulesOverride, 0x001C);
		}

		// struct FAssetManagerRedirect
		TEST_METHOD(ScriptStruct__Engine__AssetManagerRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetManagerRedirect, Old, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetManagerRedirect, New, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetManagerRedirect, 0x0020);
		}

		// struct FPrimaryAssetTypeInfo
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetTypeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetBaseClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetBaseClassLoaded, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bHasBlueprintClasses, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bIsEditorOnly, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_ASP1, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, Directories, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, SpecificAssets, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, Rules, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_NDTT, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetScanPaths, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bIsDynamicAsset, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_7WUW, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, NumberOfAssets, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetTypeInfo, 0x0088);
		}

		// struct FAssetMapping
		TEST_METHOD(ScriptStruct__Engine__AssetMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetMapping, SourceAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetMapping, TargetAsset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetMapping, 0x0010);
		}

		// struct FAtmospherePrecomputeInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__AtmospherePrecomputeInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeInstanceData, UnknownData_XAUX, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtmospherePrecomputeInstanceData, 0x0160);
		}

		// struct FAtmospherePrecomputeParameters
		TEST_METHOD(ScriptStruct__Engine__AtmospherePrecomputeParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, DensityHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, DecayHeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, MaxScatteringOrder, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, TransmittanceTexWidth, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, TransmittanceTexHeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, IrradianceTexWidth, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, IrradianceTexHeight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterAltitudeSampleNum, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterMuNum, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterMuSNum, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterNuNum, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtmospherePrecomputeParameters, 0x002C);
		}

		// struct FAudioComponentParam
		TEST_METHOD(ScriptStruct__Engine__AudioComponentParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, FloatParam, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, BoolParam, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, UnknownData_1XQY, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, IntParam, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, UnknownData_NHX1, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, SoundWaveParam, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioComponentParam, 0x0020);
		}

		// struct FAudioEffectParameters
		TEST_METHOD(ScriptStruct__Engine__AudioEffectParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEffectParameters, UnknownData_Z75S, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioEffectParameters, 0x0008);
		}

		// struct FAudioReverbEffect : public FAudioEffectParameters
		TEST_METHOD(ScriptStruct__Engine__AudioReverbEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioReverbEffect, UnknownData_6KB6, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioReverbEffect, 0x0048);
		}

		// struct FAudioQualitySettings
		TEST_METHOD(ScriptStruct__Engine__AudioQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, MaxChannels, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, UnknownData_S151, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioQualitySettings, 0x0020);
		}

		// struct FAudioVolumeSubmixOverrideSettings
		TEST_METHOD(ScriptStruct__Engine__AudioVolumeSubmixOverrideSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixOverrideSettings, Submix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixOverrideSettings, SubmixEffectChain, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixOverrideSettings, CrossfadeTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixOverrideSettings, UnknownData_3NFP, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioVolumeSubmixOverrideSettings, 0x0020);
		}

		// struct FSoundSubmixSendInfo
		TEST_METHOD(ScriptStruct__Engine__SoundSubmixSendInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SendLevelControlMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SendStage, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, UnknownData_8ZQE, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SoundSubmix, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SendLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MinSendLevel, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MaxSendLevel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MinSendDistance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MaxSendDistance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, UnknownData_ME4B, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, CustomSendLevelCurve, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSubmixSendInfo, 0x00B0);
		}

		// struct FAudioVolumeSubmixSendSettings
		TEST_METHOD(ScriptStruct__Engine__AudioVolumeSubmixSendSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixSendSettings, ListenerLocationState, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixSendSettings, SourceLocationState, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixSendSettings, UnknownData_9V83, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixSendSettings, SubmixSends, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioVolumeSubmixSendSettings, 0x0018);
		}

		// struct FFilePath
		TEST_METHOD(ScriptStruct__Engine__FilePath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilePath, FilePath, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilePath, 0x0010);
		}

		// struct FLaunchOnTestSettings
		TEST_METHOD(ScriptStruct__Engine__LaunchOnTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLaunchOnTestSettings, LaunchOnTestmap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLaunchOnTestSettings, DeviceID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLaunchOnTestSettings, 0x0020);
		}

		// struct FEditorMapPerformanceTestDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorMapPerformanceTestDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, PerformanceTestmap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, TestTimer, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, UnknownData_A2A2, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorMapPerformanceTestDefinition, 0x0020);
		}

		// struct FImportFactorySettingValues
		TEST_METHOD(ScriptStruct__Engine__ImportFactorySettingValues)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportFactorySettingValues, SettingName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportFactorySettingValues, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImportFactorySettingValues, 0x0020);
		}

		// struct FEditorImportWorkflowDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorImportWorkflowDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportWorkflowDefinition, ImportFilePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportWorkflowDefinition, FactorySettings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorImportWorkflowDefinition, 0x0020);
		}

		// struct FBuildPromotionImportWorkflowSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionImportWorkflowSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Diffuse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Normal, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, StaticMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, ReimportStaticMesh, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, BlendShapeMesh, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, MorphMesh, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, SkeletalMesh, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Animation, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Sound, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, SurroundSound, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, OtherAssetsToImport, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionImportWorkflowSettings, 0x0150);
		}

		// struct FBuildPromotionOpenAssetSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionOpenAssetSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, BlueprintAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, MaterialAsset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, ParticleSystemAsset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, SkeletalMeshAsset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, StaticMeshAsset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, TextureAsset, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionOpenAssetSettings, 0x0060);
		}

		// struct FBuildPromotionNewProjectSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionNewProjectSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionNewProjectSettings, NewProjectFolderOverride, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionNewProjectSettings, NewProjectNameOverride, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionNewProjectSettings, 0x0020);
		}

		// struct FBuildPromotionTestSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, DefaultStaticMeshAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, ImportWorkflow, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, OpenAssets, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, NewProjectSettings, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, SourceControlMaterial, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionTestSettings, 0x01F0);
		}

		// struct FBlueprintEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__BlueprintEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, FirstMeshPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, SecondMeshPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, DefaultParticleAsset, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintEditorPromotionSettings, 0x0030);
		}

		// struct FParticleEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__ParticleEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEditorPromotionSettings, DefaultParticleAsset, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEditorPromotionSettings, 0x0010);
		}

		// struct FMaterialEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__MaterialEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultMaterialAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultDiffuseTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultNormalTexture, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialEditorPromotionSettings, 0x0030);
		}

		// struct FEditorImportExportTestDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorImportExportTestDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, ImportFilePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, ExportFileExtension, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, bSkipExport, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, UnknownData_VKKT, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, FactorySettings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorImportExportTestDefinition, 0x0038);
		}

		// struct FExternalToolDefinition
		TEST_METHOD(ScriptStruct__Engine__ExternalToolDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ToolName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ExecutablePath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, CommandLineOptions, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, WorkingDirectory, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ScriptExtension, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ScriptDirectory, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExternalToolDefinition, 0x0060);
		}

		// struct FNavAvoidanceData
		TEST_METHOD(ScriptStruct__Engine__NavAvoidanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAvoidanceData, UnknownData_MAT7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAvoidanceData, 0x003C);
		}

		// struct FBandwidthTestItem
		TEST_METHOD(ScriptStruct__Engine__BandwidthTestItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBandwidthTestItem, Kilobyte, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBandwidthTestItem, 0x0010);
		}

		// struct FBandwidthTestGenerator
		TEST_METHOD(ScriptStruct__Engine__BandwidthTestGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBandwidthTestGenerator, ReplicatedBuffers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBandwidthTestGenerator, UnknownData_AA2O, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBandwidthTestGenerator, 0x0020);
		}

		// struct FBlendProfileBoneEntry
		TEST_METHOD(ScriptStruct__Engine__BlendProfileBoneEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, BoneReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, BlendScale, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendProfileBoneEntry, 0x0014);
		}

		// struct FEditorElement
		TEST_METHOD(ScriptStruct__Engine__EditorElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorElement, Indices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorElement, Weights, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorElement, 0x0018);
		}

		// struct FGridBlendSample
		TEST_METHOD(ScriptStruct__Engine__GridBlendSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridBlendSample, GridElement, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridBlendSample, BlendWeight, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGridBlendSample, 0x001C);
		}

		// struct FBlendParameter
		TEST_METHOD(ScriptStruct__Engine__BlendParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, Min, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, Max, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, GridNum, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, UnknownData_X524, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendParameter, 0x0020);
		}

		// struct FBPEditorBookmarkNode
		TEST_METHOD(ScriptStruct__Engine__BPEditorBookmarkNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, NodeGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, ParentGuid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, DisplayName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPEditorBookmarkNode, 0x0038);
		}

		// struct FEditedDocumentInfo
		TEST_METHOD(ScriptStruct__Engine__EditedDocumentInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, EditedObjectPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, SavedViewOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, SavedZoomAmount, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, UnknownData_33IO, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, EditedObject, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditedDocumentInfo, 0x0030);
		}

		// struct FBPInterfaceDescription
		TEST_METHOD(ScriptStruct__Engine__BPInterfaceDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPInterfaceDescription, Interface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPInterfaceDescription, Graphs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPInterfaceDescription, 0x0018);
		}

		// struct FEdGraphTerminalType
		TEST_METHOD(ScriptStruct__Engine__EdGraphTerminalType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalSubCategory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalSubCategoryObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsConst, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsWeakPointer, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsUObjectWrapper, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, UnknownData_23UO, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphTerminalType, 0x001C);
		}

		// struct FEdGraphPinType
		TEST_METHOD(ScriptStruct__Engine__EdGraphPinType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategoryObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategoryMemberReference, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinValueType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, ContainerType, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, UnknownData_ERE1, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphPinType, 0x0058);
		}

		// struct FBPVariableMetaDataEntry
		TEST_METHOD(ScriptStruct__Engine__BPVariableMetaDataEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableMetaDataEntry, DataKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableMetaDataEntry, DataValue, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPVariableMetaDataEntry, 0x0018);
		}

		// struct FBPVariableDescription
		TEST_METHOD(ScriptStruct__Engine__BPVariableDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarGuid, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, FriendlyName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, Category, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, PropertyFlags, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, RepNotifyFunc, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, ReplicationCondition, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, UnknownData_Y3N3, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, MetaDataArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, DefaultValue, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPVariableDescription, 0x00D0);
		}

		// struct FBlueprintMacroCosmeticInfo
		TEST_METHOD(ScriptStruct__Engine__BlueprintMacroCosmeticInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintMacroCosmeticInfo, UnknownData_2GUH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintMacroCosmeticInfo, 0x0001);
		}

		// struct FCompilerNativizationOptions
		TEST_METHOD(ScriptStruct__Engine__CompilerNativizationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, PlatformName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ServerOnlyPlatform, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ClientOnlyPlatform, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, bExcludeMonolithicHeaders, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, UnknownData_SRC2, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedModules, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedAssets, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedFolderPaths, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompilerNativizationOptions, 0x0080);
		}

		// struct FEventGraphFastCallPair
		TEST_METHOD(ScriptStruct__Engine__EventGraphFastCallPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, FunctionToPatch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, EventGraphCallOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, UnknownData_SH2W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventGraphFastCallPair, 0x0010);
		}

		// struct FBlueprintDebugData
		TEST_METHOD(ScriptStruct__Engine__BlueprintDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintDebugData, UnknownData_QRDD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintDebugData, 0x0001);
		}

		// struct FPointerToUberGraphFrame
		TEST_METHOD(ScriptStruct__Engine__PointerToUberGraphFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointerToUberGraphFrame, UnknownData_O3WF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointerToUberGraphFrame, 0x0008);
		}

		// struct FDebuggingInfoForSingleFunction
		TEST_METHOD(ScriptStruct__Engine__DebuggingInfoForSingleFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebuggingInfoForSingleFunction, UnknownData_R6B7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebuggingInfoForSingleFunction, 0x0190);
		}

		// struct FNodeToCodeAssociation
		TEST_METHOD(ScriptStruct__Engine__NodeToCodeAssociation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeToCodeAssociation, UnknownData_FN82, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeToCodeAssociation, 0x0014);
		}

		// struct FAnimCurveType
		TEST_METHOD(ScriptStruct__Engine__AnimCurveType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveType, UnknownData_UASJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveType, 0x0002);
		}

		// struct FBookmarkBaseJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__BookmarkBaseJumpToSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBookmarkBaseJumpToSettings, UnknownData_IA90, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmarkBaseJumpToSettings, 0x0001);
		}

		// struct FBookmarkJumpToSettings : public FBookmarkBaseJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__BookmarkJumpToSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmarkJumpToSettings, 0x0001);
		}

		// struct FBookmark2DJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__Bookmark2DJumpToSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBookmark2DJumpToSettings, UnknownData_5W34, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmark2DJumpToSettings, 0x0001);
		}

		// struct FBuilderPoly
		TEST_METHOD(ScriptStruct__Engine__BuilderPoly)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, VertexIndices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, Direction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, ItemName, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, PolyFlags, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuilderPoly, 0x0020);
		}

		// struct FCachedAnimTransitionData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimTransitionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, FromStateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, ToStateName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, UnknownData_DNNF, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimTransitionData, 0x0024);
		}

		// struct FCachedAnimRelevancyData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimRelevancyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, UnknownData_2INR, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimRelevancyData, 0x001C);
		}

		// struct FCachedAnimAssetPlayerData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimAssetPlayerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, UnknownData_GRIE, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimAssetPlayerData, 0x0018);
		}

		// struct FCachedAnimStateData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimStateData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, UnknownData_10BQ, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimStateData, 0x001C);
		}

		// struct FCachedAnimStateArray
		TEST_METHOD(ScriptStruct__Engine__CachedAnimStateArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateArray, States, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateArray, UnknownData_6PTA, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimStateArray, 0x0018);
		}

		// struct FActiveCameraShakeInfo
		TEST_METHOD(ScriptStruct__Engine__ActiveCameraShakeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveCameraShakeInfo, ShakeInstance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveCameraShakeInfo, ShakeSource, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveCameraShakeInfo, 0x0010);
		}

		// struct FPooledCameraShakes
		TEST_METHOD(ScriptStruct__Engine__PooledCameraShakes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPooledCameraShakes, PooledShakes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPooledCameraShakes, 0x0010);
		}

		// struct FFOscillator
		TEST_METHOD(ScriptStruct__Engine__FOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Amplitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, InitialOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Waveform, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, UnknownData_Y8BX, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFOscillator, 0x000C);
		}

		// struct FVOscillator
		TEST_METHOD(ScriptStruct__Engine__VOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, Y, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, Z, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVOscillator, 0x0024);
		}

		// struct FROscillator
		TEST_METHOD(ScriptStruct__Engine__ROscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Pitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Yaw, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Roll, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FROscillator, 0x0024);
		}

		// struct FCameraShakeDuration
		TEST_METHOD(ScriptStruct__Engine__CameraShakeDuration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeDuration, Duration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeDuration, Type, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeDuration, UnknownData_KRI6, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraShakeDuration, 0x0008);
		}

		// struct FCameraShakeInfo
		TEST_METHOD(ScriptStruct__Engine__CameraShakeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInfo, Duration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInfo, BlendIn, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInfo, BlendOut, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraShakeInfo, 0x0010);
		}

		// struct FCameraShakeUpdateResult
		TEST_METHOD(ScriptStruct__Engine__CameraShakeUpdateResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeUpdateResult, UnknownData_DOMS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraShakeUpdateResult, 0x0020);
		}

		// struct FCameraShakeUpdateParams
		TEST_METHOD(ScriptStruct__Engine__CameraShakeUpdateParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeUpdateParams, UnknownData_IXHU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraShakeUpdateParams, 0x05F0);
		}

		// struct FDummySpacerCameraTypes
		TEST_METHOD(ScriptStruct__Engine__DummySpacerCameraTypes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDummySpacerCameraTypes, UnknownData_PASG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDummySpacerCameraTypes, 0x0001);
		}

		// struct FCanvasIcon
		TEST_METHOD(ScriptStruct__Engine__CanvasIcon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, U, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, V, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, UL, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, VL, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanvasIcon, 0x0018);
		}

		// struct FWrappedStringElement
		TEST_METHOD(ScriptStruct__Engine__WrappedStringElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWrappedStringElement, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWrappedStringElement, LineExtent, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWrappedStringElement, 0x0018);
		}

		// struct FTextSizingParameters
		TEST_METHOD(ScriptStruct__Engine__TextSizingParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawXL, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawYL, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, Scaling, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawFont, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, SpacingAdjust, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextSizingParameters, 0x0028);
		}

		// struct FCharacterNetworkSerializationPackedBits
		TEST_METHOD(ScriptStruct__Engine__CharacterNetworkSerializationPackedBits)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterNetworkSerializationPackedBits, UnknownData_O0ZP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterNetworkSerializationPackedBits, 0x0098);
		}

		// struct FCharacterMoveResponsePackedBits : public FCharacterNetworkSerializationPackedBits
		TEST_METHOD(ScriptStruct__Engine__CharacterMoveResponsePackedBits)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterMoveResponsePackedBits, 0x0098);
		}

		// struct FCharacterServerMovePackedBits : public FCharacterNetworkSerializationPackedBits
		TEST_METHOD(ScriptStruct__Engine__CharacterServerMovePackedBits)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterServerMovePackedBits, 0x0098);
		}

		// struct FChildActorAttachedActorInfo
		TEST_METHOD(ScriptStruct__Engine__ChildActorAttachedActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, SocketName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, RelativeTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChildActorAttachedActorInfo, 0x0040);
		}

		// struct FChildActorComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__ChildActorComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, ChildActorClass, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, ChildActorName, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, AttachedActors, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, UnknownData_4W3S, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChildActorComponentInstanceData, 0x00E8);
		}

		// struct FCustomProfile
		TEST_METHOD(ScriptStruct__Engine__CustomProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomProfile, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomProfile, CustomResponses, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomProfile, 0x0018);
		}

		// struct FCustomChannelSetup
		TEST_METHOD(ScriptStruct__Engine__CustomChannelSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, Channel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, DefaultResponse, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, bTraceType, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, bStaticObject, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomChannelSetup, 0x000C);
		}

		// struct FCollisionResponseTemplate
		TEST_METHOD(ScriptStruct__Engine__CollisionResponseTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, CollisionEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_N1LD, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, bCanModify, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_ACIW, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, ObjectTypeName, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_HHG5, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, CustomResponses, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponseTemplate, 0x0048);
		}

		// struct FBlueprintComponentDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintComponentDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, ComponentPropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, DelegatePropertyName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, FunctionNameToBind, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintComponentDelegateBinding, 0x0018);
		}

		// struct FAutoCompleteNode
		TEST_METHOD(ScriptStruct__Engine__AutoCompleteNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, IndexChar, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, UnknownData_10S7, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, AutoCompleteListIndices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, UnknownData_85BQ, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoCompleteNode, 0x0028);
		}

		// struct FConstraintDrive
		TEST_METHOD(ScriptStruct__Engine__ConstraintDrive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, Damping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, MaxForce, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, UnknownData_MG9H, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDrive, 0x0010);
		}

		// struct FAngularDriveConstraint
		TEST_METHOD(ScriptStruct__Engine__AngularDriveConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, TwistDrive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, SwingDrive, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, SlerpDrive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, OrientationTarget, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, AngularVelocityTarget, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, AngularDriveMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, UnknownData_K1JT, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAngularDriveConstraint, 0x004C);
		}

		// struct FLinearDriveConstraint
		TEST_METHOD(ScriptStruct__Engine__LinearDriveConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, PositionTarget, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, VelocityTarget, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, XDrive, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, YDrive, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, ZDrive, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, UnknownData_E1YJ, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearDriveConstraint, 0x004C);
		}

		// struct FConstraintInstanceBase
		TEST_METHOD(ScriptStruct__Engine__ConstraintInstanceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstanceBase, UnknownData_FZ0G, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintInstanceBase, 0x0018);
		}

		// struct FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__ConstraintBaseParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Damping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Restitution, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, ContactDistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, UnknownData_RMFI, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintBaseParams, 0x0014);
		}

		// struct FLinearConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__LinearConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, Limit, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, XMotion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, YMotion, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, ZMotion, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, UnknownData_SGKO, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearConstraint, 0x001C);
		}

		// struct FConeConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__ConeConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing1LimitDegrees, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing2LimitDegrees, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing1Motion, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing2Motion, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, UnknownData_CFV1, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConeConstraint, 0x0020);
		}

		// struct FTwistConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__TwistConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, TwistLimitDegrees, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, TwistMotion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, UnknownData_GSOA, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwistConstraint, 0x001C);
		}

		// struct FConstraintProfileProperties
		TEST_METHOD(ScriptStruct__Engine__ConstraintProfileProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionLinearTolerance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionAngularTolerance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionLinearAlpha, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionAngularAlpha, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearBreakThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, AngularBreakThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearLimit, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ConeLimit, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, TwistLimit, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearDrive, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, AngularDrive, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, UnknownData_KMD3, 0x0109);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintProfileProperties, 0x010C);
		}

		// struct FConstraintInstance : public FConstraintInstanceBase
		TEST_METHOD(ScriptStruct__Engine__ConstraintInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, JointName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ConstraintBone1, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ConstraintBone2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Pos1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, PriAxis1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SecAxis1, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Pos2, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, PriAxis2, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SecAxis2, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, AngularRotationOffset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_KT13, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ProfileInstance, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_Y4VM, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintInstance, 0x01C0);
		}

		// struct FCullDistanceSizePair
		TEST_METHOD(ScriptStruct__Engine__CullDistanceSizePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCullDistanceSizePair, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCullDistanceSizePair, CullDistance, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCullDistanceSizePair, 0x0008);
		}

		// struct FNamedCurveValue
		TEST_METHOD(ScriptStruct__Engine__NamedCurveValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedCurveValue, 0x000C);
		}

		// struct FCurveTableRowHandle
		TEST_METHOD(ScriptStruct__Engine__CurveTableRowHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTableRowHandle, CurveTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTableRowHandle, RowName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveTableRowHandle, 0x0010);
		}

		// struct FCustomAttribute
		TEST_METHOD(ScriptStruct__Engine__CustomAttribute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttribute, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttribute, VariantType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttribute, UnknownData_DOZI, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttribute, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttribute, UnknownData_YBLP, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomAttribute, 0x0030);
		}

		// struct FCustomAttributePerBoneData
		TEST_METHOD(ScriptStruct__Engine__CustomAttributePerBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttributePerBoneData, BoneTreeIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttributePerBoneData, UnknownData_E6OW, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttributePerBoneData, Attributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomAttributePerBoneData, 0x0018);
		}

		// struct FDataTableCategoryHandle
		TEST_METHOD(ScriptStruct__Engine__DataTableCategoryHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, DataTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, ColumnName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, RowContents, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableCategoryHandle, 0x0018);
		}

		// struct FDataTableRowHandle
		TEST_METHOD(ScriptStruct__Engine__DataTableRowHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableRowHandle, DataTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableRowHandle, RowName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableRowHandle, 0x0010);
		}

		// struct FDebugCameraControllerSettingsViewModeIndex
		TEST_METHOD(ScriptStruct__Engine__DebugCameraControllerSettingsViewModeIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugCameraControllerSettingsViewModeIndex, UnknownData_HLLA, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugCameraControllerSettingsViewModeIndex, ViewModeIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugCameraControllerSettingsViewModeIndex, UnknownData_NQHS, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugCameraControllerSettingsViewModeIndex, 0x0010);
		}

		// struct FDebugTextInfo
		TEST_METHOD(ScriptStruct__Engine__DebugTextInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActorOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActorDesiredOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, DebugText, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, TimeRemaining, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, Duration, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, TextColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_PZ9Y, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, OrigActorLocation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_G1JS, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, Font, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, FontScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_CJR7, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugTextInfo, 0x0060);
		}

		// struct FMulticastRecordOptions
		TEST_METHOD(ScriptStruct__Engine__MulticastRecordOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, FuncPathName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, bServerSkip, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, bClientSkip, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, UnknownData_VPHP, 0x0012);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMulticastRecordOptions, 0x0018);
		}

		// struct FRollbackNetStartupActorInfo
		TEST_METHOD(ScriptStruct__Engine__RollbackNetStartupActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_PM7Q, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, Archetype, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_8BCG, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, Level, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_LUOP, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, ObjReferences, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRollbackNetStartupActorInfo, 0x00B0);
		}

		// struct FDialogueContext
		TEST_METHOD(ScriptStruct__Engine__DialogueContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContext, Speaker, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContext, Targets, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueContext, 0x0018);
		}

		// struct FDialogueWaveParameter
		TEST_METHOD(ScriptStruct__Engine__DialogueWaveParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueWaveParameter, DialogueWave, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueWaveParameter, Context, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueWaveParameter, 0x0020);
		}

		// struct FDialogueContextMapping
		TEST_METHOD(ScriptStruct__Engine__DialogueContextMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, Context, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, SoundWave, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, LocalizationKeyFormat, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, Proxy, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueContextMapping, 0x0038);
		}

		// struct FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistribution, 0x0020);
		}

		// struct FRawDistributionFloat : public FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistributionFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, MinValue, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, MaxValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, Distribution, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistributionFloat, 0x0030);
		}

		// struct FRawDistributionVector : public FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistributionVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MinValue, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MaxValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MinValueVec, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MaxValueVec, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, Distribution, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistributionVector, 0x0048);
		}

		// struct FGraphReference
		TEST_METHOD(ScriptStruct__Engine__GraphReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, MacroGraph, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, GraphBlueprint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, GraphGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGraphReference, 0x0020);
		}

		// struct FEdGraphPinReference
		TEST_METHOD(ScriptStruct__Engine__EdGraphPinReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinReference, OwningNode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinReference, PinId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphPinReference, 0x0018);
		}

		// struct FEdGraphSchemaAction
		TEST_METHOD(ScriptStruct__Engine__EdGraphSchemaAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, UnknownData_U9O2, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, MenuDescription, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, TooltipDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Category, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Keywords, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Grouping, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, SectionId, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, MenuDescriptionArray, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchTitlesArray, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchKeywordsArray, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchCategoryArray, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedMenuDescriptionArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchTitlesArray, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchKeywordsArray, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchCategoryArray, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, SearchText, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphSchemaAction, 0x0100);
		}

		// struct FEdGraphSchemaAction_NewNode : public FEdGraphSchemaAction
		TEST_METHOD(ScriptStruct__Engine__EdGraphSchemaAction_NewNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction_NewNode, NodeTemplate, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphSchemaAction_NewNode, 0x0108);
		}

		// struct FScreenMessageString
		TEST_METHOD(ScriptStruct__Engine__ScreenMessageString)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, ScreenMessage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, DisplayColor, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, TimeToDisplay, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, CurrentTimeDisplayed, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, TextScale, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, UnknownData_KIE3, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScreenMessageString, 0x0030);
		}

		// struct FURL
		TEST_METHOD(ScriptStruct__Engine__URL)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Protocol, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Host, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Port, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Valid, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Map, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, RedirectURL, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Op, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Portal, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FURL, 0x0068);
		}

		// struct FFullyLoadedPackagesInfo
		TEST_METHOD(ScriptStruct__Engine__FullyLoadedPackagesInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, FullyLoadType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, UnknownData_VSDR, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, Tag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, PackagesToLoad, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, LoadedObjects, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFullyLoadedPackagesInfo, 0x0038);
		}

		// struct FLevelStreamingStatus
		TEST_METHOD(ScriptStruct__Engine__LevelStreamingStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, UnknownData_HOZN, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, LODIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelStreamingStatus, 0x0010);
		}

		// struct FNamedNetDriver
		TEST_METHOD(ScriptStruct__Engine__NamedNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedNetDriver, NetDriver, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedNetDriver, UnknownData_04XO, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedNetDriver, 0x0010);
		}

		// struct FWorldContext
		TEST_METHOD(ScriptStruct__Engine__WorldContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_HIYQ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LastURL, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LastRemoteURL, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PendingNetGame, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PackagesToFullyLoad, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_0Z3J, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LoadedLevelsForPendingMapChange, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_KI2L, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, ObjectReferencers, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PendingLevelStreamingStatusUpdates, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, GameViewport, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, OwningGameInstance, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, ActiveNetDrivers, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_MHOM, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldContext, 0x0288);
		}

		// struct FExposureSettings
		TEST_METHOD(ScriptStruct__Engine__ExposureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, FixedEV100, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, bFixed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, UnknownData_HCW1, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposureSettings, 0x0008);
		}

		// struct FTickPrerequisite
		TEST_METHOD(ScriptStruct__Engine__TickPrerequisite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickPrerequisite, UnknownData_1OCA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickPrerequisite, 0x0010);
		}

		// struct FCanvasUVTri
		TEST_METHOD(ScriptStruct__Engine__CanvasUVTri)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_Pos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_UV, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_Color, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_Pos, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_UV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_Color, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_Pos, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_UV, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_Color, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanvasUVTri, 0x0060);
		}

		// struct FDepthFieldGlowInfo
		TEST_METHOD(ScriptStruct__Engine__DepthFieldGlowInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, UnknownData_I5ZA, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowColor, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowOuterRadius, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowInnerRadius, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDepthFieldGlowInfo, 0x0024);
		}

		// struct FFontRenderInfo
		TEST_METHOD(ScriptStruct__Engine__FontRenderInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontRenderInfo, UnknownData_8QUX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontRenderInfo, GlowInfo, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontRenderInfo, 0x0028);
		}

		// struct FCollectionReference
		TEST_METHOD(ScriptStruct__Engine__CollectionReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionReference, CollectionName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionReference, 0x0008);
		}

		// struct FComponentReference
		TEST_METHOD(ScriptStruct__Engine__ComponentReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, OtherActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, ComponentProperty, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, PathToComponent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, UnknownData_PRK8, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentReference, 0x0028);
		}

		// struct FConstrainComponentPropName
		TEST_METHOD(ScriptStruct__Engine__ConstrainComponentPropName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstrainComponentPropName, ComponentName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstrainComponentPropName, 0x0008);
		}

		// struct FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__DamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, UnknownData_0QF1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, DamageTypeClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDamageEvent, 0x0010);
		}

		// struct FRadialDamageParams
		TEST_METHOD(ScriptStruct__Engine__RadialDamageParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, BaseDamage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, MinimumDamage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, InnerRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, OuterRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, DamageFalloff, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialDamageParams, 0x0014);
		}

		// struct FRadialDamageEvent : public FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__RadialDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, Params, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, Origin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, ComponentHits, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialDamageEvent, 0x0040);
		}

		// struct FPointDamageEvent : public FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__PointDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, Damage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, ShotDirection, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, HitInfo, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, UnknownData_4SHO, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointDamageEvent, 0x00B0);
		}

		// struct FMeshBuildSettings
		TEST_METHOD(ScriptStruct__Engine__MeshBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, UnknownData_MMN0, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, MinLightmapResolution, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, SrcLightmapIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DstLightmapIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, BuildScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, BuildScale3D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DistanceFieldResolutionScale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, UnknownData_EAHS, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DistanceFieldReplacementMesh, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshBuildSettings, 0x0030);
		}

		// struct FPOV
		TEST_METHOD(ScriptStruct__Engine__POV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, FOV, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPOV, 0x001C);
		}

		// struct FAnimUpdateRateParameters
		TEST_METHOD(ScriptStruct__Engine__AnimUpdateRateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_NS7X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, ShiftBucket, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_EF4F, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UpdateRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, EvaluationRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, TickedPoseOffestTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, AdditionalTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_UTZO, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, BaseNonRenderedUpdateRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, MaxEvalRateForInterpolation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, BaseVisibleDistanceFactorThesholds, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, LODToFrameSkipMap, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, SkippedUpdateFrames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, SkippedEvalFrames, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimUpdateRateParameters, 0x0088);
		}

		// struct FAnimSlotDesc
		TEST_METHOD(ScriptStruct__Engine__AnimSlotDesc)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, NumChannels, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotDesc, 0x000C);
		}

		// struct FAnimSlotInfo
		TEST_METHOD(ScriptStruct__Engine__AnimSlotInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotInfo, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotInfo, ChannelWeights, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotInfo, 0x0018);
		}

		// struct FMTDResult
		TEST_METHOD(ScriptStruct__Engine__MTDResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMTDResult, Direction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMTDResult, Distance, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMTDResult, 0x0010);
		}

		// struct FOverlapResult
		TEST_METHOD(ScriptStruct__Engine__OverlapResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, Component, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, UnknownData_UGTU, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, UnknownData_RQSP, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlapResult, 0x0018);
		}

		// struct FPrimitiveMaterialRef
		TEST_METHOD(ScriptStruct__Engine__PrimitiveMaterialRef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, Primitive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, Decal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, ElementIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, UnknownData_VGB1, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimitiveMaterialRef, 0x0018);
		}

		// struct FSwarmDebugOptions
		TEST_METHOD(ScriptStruct__Engine__SwarmDebugOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwarmDebugOptions, UnknownData_SM06, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSwarmDebugOptions, 0x0004);
		}

		// struct FLightmassDebugOptions
		TEST_METHOD(ScriptStruct__Engine__LightmassDebugOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, UnknownData_ZOGK, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, CoplanarTolerance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, UnknownData_XTMD, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, ExecutionTimeDivisor, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassDebugOptions, 0x0010);
		}

		// struct FLightmassPointLightSettings : public FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassPointLightSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassPointLightSettings, 0x000C);
		}

		// struct FBasedPosition
		TEST_METHOD(ScriptStruct__Engine__BasedPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, Base, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, Position, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedBaseLocation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedBaseRotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedTransPosition, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasedPosition, 0x0038);
		}

		// struct FFractureEffect
		TEST_METHOD(ScriptStruct__Engine__FractureEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureEffect, ParticleSystem, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureEffect, Sound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFractureEffect, 0x0010);
		}

		// struct FRigidBodyContactInfo
		TEST_METHOD(ScriptStruct__Engine__RigidBodyContactInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactNormal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactPenetration, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, UnknownData_O5H0, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, PhysMaterial, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyContactInfo, 0x0030);
		}

		// struct FCollisionImpactData
		TEST_METHOD(ScriptStruct__Engine__CollisionImpactData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, ContactInfos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, TotalNormalImpulse, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, TotalFrictionImpulse, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, bIsVelocityDeltaUnderThreshold, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, UnknownData_A8M6, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionImpactData, 0x0030);
		}

		// struct FRigidBodyErrorCorrection
		TEST_METHOD(ScriptStruct__Engine__RigidBodyErrorCorrection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PingExtrapolation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PingLimit, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorPerLinearDifference, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorPerAngularDifference, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, MaxRestoredStateError, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, MaxLinearHardSnapDistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PositionLerp, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngleLerp, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, LinearVelocityCoefficient, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngularVelocityCoefficient, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationSeconds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationDistanceSq, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationSimilarity, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyErrorCorrection, 0x0034);
		}

		// struct FRigidBodyState
		TEST_METHOD(ScriptStruct__Engine__RigidBodyState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, UnknownData_PRCG, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Quaternion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, LinVel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, AngVel, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Flags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, UnknownData_CCHA, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyState, 0x0040);
		}

		// struct FMaterialShadingModelField
		TEST_METHOD(ScriptStruct__Engine__MaterialShadingModelField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialShadingModelField, ShadingModelField, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialShadingModelField, 0x0002);
		}

		// struct FExponentialHeightFogData
		TEST_METHOD(ScriptStruct__Engine__ExponentialHeightFogData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExponentialHeightFogData, FogDensity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExponentialHeightFogData, FogHeightFalloff, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExponentialHeightFogData, FogHeightOffset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExponentialHeightFogData, 0x000C);
		}

		// struct FFontCharacter
		TEST_METHOD(ScriptStruct__Engine__FontCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, StartU, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, StartV, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, USize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, VSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, TextureIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, UnknownData_RTXK, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, VerticalOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontCharacter, 0x0018);
		}

		// struct FFontImportOptionsData
		TEST_METHOD(ScriptStruct__Engine__FontImportOptionsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, FontName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Height, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_57PV, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharacterSet, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_X6TS, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Chars, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnicodeRange, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharsFilePath, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharsFileWildcard, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_XPJ2, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ForegroundColor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_I3GY, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, TexturePageWidth, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, TexturePageMaxHeight, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, XPadding, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, YPadding, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxTop, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxBottom, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxRight, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxLeft, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_FAY8, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Kerning, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_127M, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, DistanceFieldScaleFactor, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, DistanceFieldScanRadiusScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_6VEE, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontImportOptionsData, 0x00B0);
		}

		// struct FForceFeedbackAttenuationSettings : public FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackAttenuationSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackAttenuationSettings, 0x00B0);
		}

		// struct FForceFeedbackParameters
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, Tag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, bLooping, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, bIgnoreTimeDilation, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, bPlayWhilePaused, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, UnknownData_CA0C, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackParameters, 0x000C);
		}

		// struct FForceFeedbackChannelDetails
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackChannelDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackChannelDetails, UnknownData_BSJL, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackChannelDetails, Curve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackChannelDetails, 0x0090);
		}

		// struct FPredictProjectilePathPointData
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathPointData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Time, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathPointData, 0x001C);
		}

		// struct FPredictProjectilePathResult
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, PathData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, LastTraceDestination, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, HitResult, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathResult, 0x00B8);
		}

		// struct FPredictProjectilePathParams
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, StartLocation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, LaunchVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceWithCollision, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_Y6US, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ProjectileRadius, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, MaxSimTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceWithChannel, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, TraceChannel, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_VNZW, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ObjectTypes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ActorsToIgnore, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, SimFrequency, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, OverrideGravityZ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, DrawDebugType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_SJVV, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, DrawDebugTime, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceComplex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_H530, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathParams, 0x0060);
		}

		// struct FActiveHapticFeedbackEffect
		TEST_METHOD(ScriptStruct__Engine__ActiveHapticFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveHapticFeedbackEffect, HapticEffect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveHapticFeedbackEffect, UnknownData_9YP3, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveHapticFeedbackEffect, 0x0018);
		}

		// struct FHapticFeedbackDetails_Curve
		TEST_METHOD(ScriptStruct__Engine__HapticFeedbackDetails_Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedbackDetails_Curve, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedbackDetails_Curve, Amplitude, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHapticFeedbackDetails_Curve, 0x0110);
		}

		// struct FClusterNode
		TEST_METHOD(ScriptStruct__Engine__ClusterNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, BoundMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, FirstChild, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, BoundMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, LastChild, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, FirstInstance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, LastInstance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, MinInstanceScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, MaxInstanceScale, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClusterNode, 0x0040);
		}

		// struct FClusterNode_DEPRECATED
		TEST_METHOD(ScriptStruct__Engine__ClusterNode_DEPRECATED)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, BoundMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, FirstChild, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, BoundMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, LastChild, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, FirstInstance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, LastInstance, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClusterNode_DEPRECATED, 0x0028);
		}

		// struct FHLODISMComponentDesc
		TEST_METHOD(ScriptStruct__Engine__HLODISMComponentDesc)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODISMComponentDesc, StaticMesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODISMComponentDesc, Material, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODISMComponentDesc, Instances, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHLODISMComponentDesc, 0x0020);
		}

		// struct FHLODProxyMesh
		TEST_METHOD(ScriptStruct__Engine__HLODProxyMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, LODActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, UnknownData_6TAB, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, StaticMesh, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, Key, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHLODProxyMesh, 0x0030);
		}

		// struct FImportanceTexture
		TEST_METHOD(ScriptStruct__Engine__ImportanceTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, NumMips, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, UnknownData_RFXS, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, MarginalCDF, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, ConditionalCDF, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, TextureData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Texture, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Weighting, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, UnknownData_31D3, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImportanceTexture, 0x0050);
		}

		// struct FComponentKey
		TEST_METHOD(ScriptStruct__Engine__ComponentKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, OwnerClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, SCSVariableName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, AssociatedGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentKey, 0x0020);
		}

		// struct FComponentOverrideRecord
		TEST_METHOD(ScriptStruct__Engine__ComponentOverrideRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentTemplate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentKey, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, CookedComponentInstancingData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentOverrideRecord, 0x0078);
		}

		// struct FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputDelegateBinding, UnknownData_2SQJ, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputDelegateBinding, 0x0004);
		}

		// struct FBlueprintInputActionDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputActionDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, InputActionName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, InputKeyEvent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, UnknownData_Y8ST, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, FunctionNameToBind, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputActionDelegateBinding, 0x0018);
		}

		// struct FBlueprintInputAxisDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputAxisDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, InputAxisName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, FunctionNameToBind, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputAxisDelegateBinding, 0x0014);
		}

		// struct FBlueprintInputAxisKeyDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputAxisKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, UnknownData_5TAP, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, AxisKey, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, FunctionNameToBind, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputAxisKeyDelegateBinding, 0x0028);
		}

		// struct FCachedKeyToActionInfo
		TEST_METHOD(ScriptStruct__Engine__CachedKeyToActionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedKeyToActionInfo, PlayerInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedKeyToActionInfo, UnknownData_ZH21, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedKeyToActionInfo, 0x0070);
		}

		// struct FBlueprintInputKeyDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_HGLM, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, InputChord, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, InputKeyEvent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_7J5F, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, FunctionNameToBind, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_NN35, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputKeyDelegateBinding, 0x0038);
		}

		// struct FBlueprintInputTouchDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputTouchDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, InputKeyEvent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, UnknownData_ITKI, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, FunctionNameToBind, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputTouchDelegateBinding, 0x0010);
		}

		// struct FInstancedStaticMeshLightMapInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshLightMapInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshLightMapInstanceData, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshLightMapInstanceData, MapBuildDataIds, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshLightMapInstanceData, 0x0040);
		}

		// struct FInstancedStaticMeshComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, StaticMesh, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, CachedStaticLighting, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, PerInstanceSMData, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, PerInstanceSMCustomData, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, UnknownData_0RRA, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, InstancingRandomSeed, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, UnknownData_ABMM, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshComponentInstanceData, 0x0150);
		}

		// struct FCurveEdEntry
		TEST_METHOD(ScriptStruct__Engine__CurveEdEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveColor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, UnknownData_SM32, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bHideCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bColorCurve, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bFloatingPointColorCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bClamp, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, ClampLow, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, ClampHigh, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveEdEntry, 0x0038);
		}

		// struct FCurveEdTab
		TEST_METHOD(ScriptStruct__Engine__CurveEdTab)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, TabName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, Curves, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewStartInput, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewEndInput, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewStartOutput, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewEndOutput, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveEdTab, 0x0030);
		}

		// struct FInterpEdSelKey
		TEST_METHOD(ScriptStruct__Engine__InterpEdSelKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, Group, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, Track, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, KeyIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, UnsnappedPosition, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpEdSelKey, 0x0018);
		}

		// struct FCameraPreviewInfo
		TEST_METHOD(ScriptStruct__Engine__CameraPreviewInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, PawnClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, AnimSeq, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, Rotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, PawnInst, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraPreviewInfo, 0x0030);
		}

		// struct FSubTrackGroup
		TEST_METHOD(ScriptStruct__Engine__SubTrackGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, TrackIndices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, UnknownData_2WVW, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubTrackGroup, 0x0028);
		}

		// struct FSupportedSubTrackInfo
		TEST_METHOD(ScriptStruct__Engine__SupportedSubTrackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, SupportedClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, SubTrackName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, GroupIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, UnknownData_9I53, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupportedSubTrackInfo, 0x0020);
		}

		// struct FAnimControlTrackKey
		TEST_METHOD(ScriptStruct__Engine__AnimControlTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, StartTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, UnknownData_H10Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimSeq, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimStartOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimEndOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimPlayRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, UnknownData_YAIH, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimControlTrackKey, 0x0020);
		}

		// struct FBoolTrackKey
		TEST_METHOD(ScriptStruct__Engine__BoolTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolTrackKey, UnknownData_HTDA, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoolTrackKey, 0x0008);
		}

		// struct FDirectorTrackCut
		TEST_METHOD(ScriptStruct__Engine__DirectorTrackCut)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, TransitionTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, TargetCamGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, ShotNumber, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectorTrackCut, 0x0014);
		}

		// struct FEventTrackKey
		TEST_METHOD(ScriptStruct__Engine__EventTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, EventName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventTrackKey, 0x000C);
		}

		// struct FInterpLookupPoint
		TEST_METHOD(ScriptStruct__Engine__InterpLookupPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpLookupPoint, 0x000C);
		}

		// struct FInterpLookupTrack
		TEST_METHOD(ScriptStruct__Engine__InterpLookupTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupTrack, Points, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpLookupTrack, 0x0010);
		}

		// struct FParticleReplayTrackKey
		TEST_METHOD(ScriptStruct__Engine__ParticleReplayTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, Duration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, ClipIDNumber, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleReplayTrackKey, 0x000C);
		}

		// struct FSoundTrackKey
		TEST_METHOD(ScriptStruct__Engine__SoundTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Volume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Pitch, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, UnknownData_SA57, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Sound, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundTrackKey, 0x0018);
		}

		// struct FToggleTrackKey
		TEST_METHOD(ScriptStruct__Engine__ToggleTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, ToggleAction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, UnknownData_CEH6, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FToggleTrackKey, 0x0008);
		}

		// struct FVisibilityTrackKey
		TEST_METHOD(ScriptStruct__Engine__VisibilityTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, Action, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, ActiveCondition, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, UnknownData_IBYD, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVisibilityTrackKey, 0x0008);
		}

		// struct FVectorSpringState
		TEST_METHOD(ScriptStruct__Engine__VectorSpringState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorSpringState, UnknownData_61XY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorSpringState, 0x0018);
		}

		// struct FFloatSpringState
		TEST_METHOD(ScriptStruct__Engine__FloatSpringState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatSpringState, UnknownData_HA0L, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatSpringState, 0x0008);
		}

		// struct FDrawToRenderTargetContext
		TEST_METHOD(ScriptStruct__Engine__DrawToRenderTargetContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrawToRenderTargetContext, RenderTarget, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrawToRenderTargetContext, UnknownData_AFXY, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDrawToRenderTargetContext, 0x0010);
		}

		// struct FLatentActionManager
		TEST_METHOD(ScriptStruct__Engine__LatentActionManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionManager, UnknownData_ONZW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLatentActionManager, 0x0060);
		}

		// struct FLayerActorStats
		TEST_METHOD(ScriptStruct__Engine__LayerActorStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, Total, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, UnknownData_J9RU, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLayerActorStats, 0x0010);
		}

		// struct FReplicatedStaticActorDestructionInfo
		TEST_METHOD(ScriptStruct__Engine__ReplicatedStaticActorDestructionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedStaticActorDestructionInfo, UnknownData_H23G, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedStaticActorDestructionInfo, ObjClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedStaticActorDestructionInfo, 0x0038);
		}

		// struct FMaterialProxySettings
		TEST_METHOD(ScriptStruct__Engine__MaterialProxySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TextureSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, GutterSpace, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MetallicConstant, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, RoughnessConstant, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AnisotropyConstant, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, SpecularConstant, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityConstant, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityMaskConstant, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AmbientOcclusionConstant, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TextureSizingType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MaterialMergeType, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, BlendMode, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_2L20, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, DiffuseTextureSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, NormalTextureSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TangentTextureSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MetallicTextureSize, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, RoughnessTextureSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AnisotropyTextureSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, SpecularTextureSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, EmissiveTextureSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityTextureSize, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityMaskTextureSize, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AmbientOcclusionTextureSize, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialProxySettings, 0x0088);
		}

		// struct FLevelSimplificationDetails
		TEST_METHOD(ScriptStruct__Engine__LevelSimplificationDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bCreatePackagePerAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_E0KL, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, DetailsPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, StaticMeshMaterialSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bOverrideLandscapeExportLOD, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_5IAY, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, LandscapeExportLOD, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, LandscapeMaterialSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bBakeFoliageToLandscape, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bBakeGrassToLandscape, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshNormalMap, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshMetallicMap, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshRoughnessMap, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshSpecularMap, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeNormalMap, 0x0126);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeMetallicMap, 0x0127);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeRoughnessMap, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeSpecularMap, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_NA9S, 0x012A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSimplificationDetails, 0x012C);
		}

		// struct FStreamableTextureInstance
		TEST_METHOD(ScriptStruct__Engine__StreamableTextureInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamableTextureInstance, UnknownData_9S07, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamableTextureInstance, 0x0028);
		}

		// struct FDynamicTextureInstance : public FStreamableTextureInstance
		TEST_METHOD(ScriptStruct__Engine__DynamicTextureInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, Texture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, bAttached, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, UnknownData_KDQO, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, OriginalRadius, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicTextureInstance, 0x0038);
		}

		// struct FPrecomputedLightInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__PrecomputedLightInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, UnknownData_GU7K, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, Transform, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, LightGuid, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, PreviewShadowMapChannel, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, UnknownData_LXN1, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrecomputedLightInstanceData, 0x0110);
		}

		// struct FBatchedPoint
		TEST_METHOD(ScriptStruct__Engine__BatchedPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, Color, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, PointSize, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, RemainingLifeTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, DepthPriority, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, UnknownData_2I3X, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBatchedPoint, 0x0028);
		}

		// struct FBatchedLine
		TEST_METHOD(ScriptStruct__Engine__BatchedLine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Start, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, End, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Color, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Thickness, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, RemainingLifeTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, DepthPriority, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, UnknownData_9Z6T, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBatchedLine, 0x0034);
		}

		// struct FClientReceiveData
		TEST_METHOD(ScriptStruct__Engine__ClientReceiveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, LocalPC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, UnknownData_YFZ9, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageString, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, RelatedPlayerState_2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, RelatedPlayerState_3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, OptionalObject, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientReceiveData, 0x0040);
		}

		// struct FComponentSync
		TEST_METHOD(ScriptStruct__Engine__ComponentSync)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSync, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSync, SyncOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSync, UnknownData_1E2O, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSync, 0x000C);
		}

		// struct FLODMappingData
		TEST_METHOD(ScriptStruct__Engine__LODMappingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLODMappingData, Mapping, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLODMappingData, InverseMapping, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLODMappingData, 0x0020);
		}

		// struct FParameterGroupData
		TEST_METHOD(ScriptStruct__Engine__ParameterGroupData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, GroupSortPriority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, UnknownData_0L91, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParameterGroupData, 0x0018);
		}

		// struct FMaterialSpriteElement
		TEST_METHOD(ScriptStruct__Engine__MaterialSpriteElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, DistanceToOpacityCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, UnknownData_6XGZ, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, BaseSizeX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, BaseSizeY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, UnknownData_4NTT, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, DistanceToSizeCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialSpriteElement, 0x0028);
		}

		// struct FMaterialFunctionInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialFunctionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialFunctionInfo, StateId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialFunctionInfo, Function, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialFunctionInfo, 0x0018);
		}

		// struct FMaterialParameterCollectionInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialParameterCollectionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterCollectionInfo, StateId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterCollectionInfo, ParameterCollection, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialParameterCollectionInfo, 0x0018);
		}

		// struct FMaterialCachedExpressionData
		TEST_METHOD(ScriptStruct__Engine__MaterialCachedExpressionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, Parameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, ReferencedTextures, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, FunctionInfos, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, ParameterCollectionInfos, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, DefaultLayers, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, DefaultLayerBlends, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, GrassTypes, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, DynamicParameterNames, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, QualityLevelsUsed, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, UnknownData_3AAH, 0x0221);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialCachedExpressionData, 0x0228);
		}

		// struct FStaticComponentMaskValue
		TEST_METHOD(ScriptStruct__Engine__StaticComponentMaskValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskValue, R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskValue, G, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskValue, B, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskValue, A, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticComponentMaskValue, 0x0004);
		}

		// struct FParameterChannelNames
		TEST_METHOD(ScriptStruct__Engine__ParameterChannelNames)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, G, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, B, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, A, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParameterChannelNames, 0x0060);
		}

		// struct FCustomDefine
		TEST_METHOD(ScriptStruct__Engine__CustomDefine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomDefine, DefineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomDefine, DefineValue, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomDefine, 0x0020);
		}

		// struct FCustomOutput
		TEST_METHOD(ScriptStruct__Engine__CustomOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomOutput, OutputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomOutput, OutputType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomOutput, UnknownData_5J6E, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomOutput, 0x000C);
		}

		// struct FCustomInput
		TEST_METHOD(ScriptStruct__Engine__CustomInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, InputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, Input, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, UnknownData_GMSK, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomInput, 0x001C);
		}

		// struct FExpressionOutput
		TEST_METHOD(ScriptStruct__Engine__ExpressionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionOutput, OutputName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpressionOutput, 0x0008);
		}

		// struct FFunctionExpressionOutput
		TEST_METHOD(ScriptStruct__Engine__FunctionExpressionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, ExpressionOutput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, ExpressionOutputId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, Output, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionExpressionOutput, 0x0020);
		}

		// struct FFunctionExpressionInput
		TEST_METHOD(ScriptStruct__Engine__FunctionExpressionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, ExpressionInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, ExpressionInputId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, Input, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, UnknownData_1SU9, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionExpressionInput, 0x0030);
		}

		// struct FScalarParameterAtlasInstanceData
		TEST_METHOD(ScriptStruct__Engine__ScalarParameterAtlasInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, bIsUsedAsAtlasPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, UnknownData_BE2V, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, Curve, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, Atlas, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterAtlasInstanceData, 0x0058);
		}

		// struct FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionParameterBase, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionParameterBase, ID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionParameterBase, 0x0018);
		}

		// struct FCollectionVectorParameter : public FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionVectorParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionVectorParameter, DefaultValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionVectorParameter, 0x0028);
		}

		// struct FCollectionScalarParameter : public FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionScalarParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionScalarParameter, DefaultValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionScalarParameter, 0x001C);
		}

		// struct FInterpGroupActorInfo
		TEST_METHOD(ScriptStruct__Engine__InterpGroupActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, Actors, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpGroupActorInfo, 0x0018);
		}

		// struct FCameraCutInfo
		TEST_METHOD(ScriptStruct__Engine__CameraCutInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCutInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCutInfo, Timestamp, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraCutInfo, 0x0010);
		}

		// struct FMemberReference
		TEST_METHOD(ScriptStruct__Engine__MemberReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberScope, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberGuid, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, bSelfContext, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, bWasDeprecated, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, UnknownData_2ZFZ, 0x0032);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMemberReference, 0x0038);
		}

		// struct FMeshInstancingSettings
		TEST_METHOD(ScriptStruct__Engine__MeshInstancingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, ActorClassToUse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, InstanceReplacementThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, MeshReplacementMethod, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, bSkipMeshesWithVertexColors, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, bUseHLODVolumes, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, UnknownData_OBMM, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, ISMComponentToUse, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshInstancingSettings, 0x0018);
		}

		// struct FMeshMergingSettings
		TEST_METHOD(ScriptStruct__Engine__MeshMergingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, TargetLightMapResolution, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, OutputUVs, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, MaterialSettings, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, GutterSize, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, SpecificLOD, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, LODSelectionType, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_QBTJ, 0x009F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshMergingSettings, 0x00A0);
		}

		// struct FMeshProxySettings
		TEST_METHOD(ScriptStruct__Engine__MeshProxySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, VoxelSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MaterialSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MergeDistance, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnresolvedGeometryColor, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MaxRayCastDist, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, HardAngleThreshold, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, LightMapResolution, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, NormalCalculationMethod, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, LandscapeCullingPrecision, 0x00A5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshProxySettings, 0x00A8);
		}

		// struct FMeshReductionSettings
		TEST_METHOD(ScriptStruct__Engine__MeshReductionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PercentTriangles, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PercentVertices, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, MaxDeviation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PixelError, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, WeldingThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, HardAngleThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, BaseLODModel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, SilhouetteImportance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, TextureImportance, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, ShadingImportance, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, TerminationCriterion, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, VisibilityAggressiveness, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, VertexColorImportance, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, UnknownData_RVA5, 0x0023);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshReductionSettings, 0x0024);
		}

		// struct FPurchaseInfo
		TEST_METHOD(ScriptStruct__Engine__PurchaseInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayPrice, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPurchaseInfo, 0x0040);
		}

		// struct FNameCurveKey
		TEST_METHOD(ScriptStruct__Engine__NameCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameCurveKey, 0x000C);
		}

		// struct FNameCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__NameCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurve, Keys, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameCurve, 0x0078);
		}

		// struct FNavDataConfig : public FNavAgentProperties
		TEST_METHOD(ScriptStruct__Engine__NavDataConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, Color, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, DefaultQueryExtent, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, NavigationDataClass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, NavDataClass, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavDataConfig, 0x0078);
		}

		// struct FNavAgentSelector
		TEST_METHOD(ScriptStruct__Engine__NavAgentSelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentSelector, UnknownData_NE2D, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAgentSelector, 0x0004);
		}

		// struct FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationLinkBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, LeftProjectHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, MaxFallDownLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_KGG8, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SnapRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SnapHeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SupportedAgents, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_QE0A, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, Direction, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_2Q5Y, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, AreaClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_UPHC, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationLinkBase, 0x0030);
		}

		// struct FNavigationSegmentLink : public FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationSegmentLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, LeftStart, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, LeftEnd, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, RightStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, RightEnd, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationSegmentLink, 0x0060);
		}

		// struct FNavigationLink : public FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLink, Left, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLink, Right, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationLink, 0x0048);
		}

		// struct FPacketSimulationSettings
		TEST_METHOD(ScriptStruct__Engine__PacketSimulationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLoss, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLossMaxSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLossMinSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktOrder, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktDup, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLag, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagVariance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagMin, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagMax, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktIncomingLagMin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktIncomingLagMax, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktIncomingLoss, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktJitter, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPacketSimulationSettings, 0x0034);
		}

		// struct FNetworkEmulationProfileDescription
		TEST_METHOD(ScriptStruct__Engine__NetworkEmulationProfileDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetworkEmulationProfileDescription, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetworkEmulationProfileDescription, ToolTip, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetworkEmulationProfileDescription, 0x0020);
		}

		// struct FNodeItem
		TEST_METHOD(ScriptStruct__Engine__NodeItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, ParentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, UnknownData_84DR, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, Transform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeItem, 0x0040);
		}

		// struct FParticleBurst
		TEST_METHOD(ScriptStruct__Engine__ParticleBurst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, Count, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, CountLow, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleBurst, 0x000C);
		}

		// struct FParticleRandomSeedInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleRandomSeedInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, UnknownData_VF35, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, RandomSeeds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleRandomSeedInfo, 0x0020);
		}

		// struct FParticleCurvePair
		TEST_METHOD(ScriptStruct__Engine__ParticleCurvePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCurvePair, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCurvePair, CurveObject, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleCurvePair, 0x0018);
		}

		// struct FBeamModifierOptions
		TEST_METHOD(ScriptStruct__Engine__BeamModifierOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamModifierOptions, UnknownData_U4I3, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeamModifierOptions, 0x0004);
		}

		// struct FParticleEvent_GenerateInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleEvent_GenerateInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, UnknownData_BQ8W, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, ParticleFrequency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, UnknownData_ZY9J, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, CustomName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, ParticleModuleEventsToSendToGame, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEvent_GenerateInfo, 0x0028);
		}

		// struct FLocationBoneSocketInfo
		TEST_METHOD(ScriptStruct__Engine__LocationBoneSocketInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, BoneSocketName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, Offset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocationBoneSocketInfo, 0x0014);
		}

		// struct FOrbitOptions
		TEST_METHOD(ScriptStruct__Engine__OrbitOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrbitOptions, UnknownData_5U3J, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOrbitOptions, 0x0004);
		}

		// struct FEmitterDynamicParameter
		TEST_METHOD(ScriptStruct__Engine__EmitterDynamicParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_ACJD, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ValueMethod, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_CQ0B, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_N86T, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ParamValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmitterDynamicParameter, 0x0048);
		}

		// struct FBeamTargetData
		TEST_METHOD(ScriptStruct__Engine__BeamTargetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, TargetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, TargetPercentage, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeamTargetData, 0x000C);
		}

		// struct FGPUSpriteResourceData
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteResourceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedColorSamples, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedMiscSamples, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedSimulationAttrSamples, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ColorScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ColorBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MiscScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MiscBias, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SimulationAttrCurveScale, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SimulationAttrCurveBias, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SubImageSize, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SizeBySpeed, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ConstantAcceleration, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitOffsetBase, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitOffsetRange, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitFrequencyBase, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitFrequencyRange, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitPhaseBase, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitPhaseRange, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, GlobalVectorFieldScale, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, GlobalVectorFieldTightness, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PerParticleVectorFieldScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PerParticleVectorFieldBias, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, DragCoefficientScale, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, DragCoefficientBias, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ResilienceScale, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ResilienceBias, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRadiusScale, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRadiusBias, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionTimeBias, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRandomSpread, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRandomDistribution, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OneMinusFriction, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, RotationRateScale, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CameraMotionBlurAmount, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ScreenAlignment, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, LockAxisFlag, 0x0145);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_ALSE, 0x0146);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PivotOffset, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_NKOV, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MinFacingCameraBlendDistance, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MaxFacingCameraBlendDistance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_669L, 0x015C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteResourceData, 0x0160);
		}

		// struct FGPUSpriteLocalVectorFieldInfo
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteLocalVectorFieldInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Field, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, UnknownData_RI95, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, MinInitialRotation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, MaxInitialRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, RotationRate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Intensity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Tightness, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, UnknownData_Q7GO, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteLocalVectorFieldInfo, 0x0070);
		}

		// struct FFloatDistribution
		TEST_METHOD(ScriptStruct__Engine__FloatDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatDistribution, 0x0020);
		}

		// struct FGPUSpriteEmitterInfo
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteEmitterInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, RequiredModule, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnModule, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnPerUnitModule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnModules, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_B4QS, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, LocalVectorField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, VectorFieldScale, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DragCoefficient, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorStrength, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, Resilience, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, ConstantAcceleration, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorPosition, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorRadiusSq, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, OrbitOffsetBase, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, OrbitOffsetRange, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, InvMaxSize, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, InvRotationRateScale, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxLifetime, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxParticleCount, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, ScreenAlignment, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, LockAxisFlag, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_5Z3E, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_EHQC, 0x016D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, CollisionMode, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_TPVN, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_F46V, 0x0175);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MinFacingCameraBlendDistance, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxFacingCameraBlendDistance, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicColor, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicAlpha, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicColorScale, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicAlphaScale, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_GHND, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteEmitterInfo, 0x0280);
		}

		// struct FNamedEmitterMaterial
		TEST_METHOD(ScriptStruct__Engine__NamedEmitterMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedEmitterMaterial, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedEmitterMaterial, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedEmitterMaterial, 0x0010);
		}

		// struct FLODSoloTrack
		TEST_METHOD(ScriptStruct__Engine__LODSoloTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLODSoloTrack, SoloEnableSetting, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLODSoloTrack, 0x0010);
		}

		// struct FParticleSystemLOD
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemLOD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemLOD, UnknownData_D8W3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemLOD, 0x0001);
		}

		// struct FParticleSystemWorldManagerTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemWorldManagerTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemWorldManagerTickFunction, UnknownData_R4VP, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemWorldManagerTickFunction, 0x0030);
		}

		// struct FParticleSystemReplayFrame
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemReplayFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemReplayFrame, UnknownData_1RRG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemReplayFrame, 0x0010);
		}

		// struct FParticleEmitterReplayFrame
		TEST_METHOD(ScriptStruct__Engine__ParticleEmitterReplayFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEmitterReplayFrame, UnknownData_49IX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEmitterReplayFrame, 0x0010);
		}

		// struct FFreezablePerPlatformInt
		TEST_METHOD(ScriptStruct__Engine__FreezablePerPlatformInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFreezablePerPlatformInt, UnknownData_QJRZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFreezablePerPlatformInt, 0x0004);
		}

		// struct FPhysicalAnimationData
		TEST_METHOD(ScriptStruct__Engine__PhysicalAnimationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, BodyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, UnknownData_Q61B, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, OrientationStrength, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, AngularVelocityStrength, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, PositionStrength, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, VelocityStrength, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, MaxLinearForce, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, MaxAngularForce, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalAnimationData, 0x0024);
		}

		// struct FPhysicalAnimationProfile
		TEST_METHOD(ScriptStruct__Engine__PhysicalAnimationProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationProfile, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationProfile, PhysicalAnimationData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalAnimationProfile, 0x002C);
		}

		// struct FSolverIterations
		TEST_METHOD(ScriptStruct__Engine__SolverIterations)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, FixedTimeStep, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, SolverIterations, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, JointIterations, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, CollisionIterations, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, SolverPushOutIterations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, JointPushOutIterations, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, CollisionPushOutIterations, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverIterations, 0x001C);
		}

		// struct FPhysicsConstraintProfileHandle
		TEST_METHOD(ScriptStruct__Engine__PhysicsConstraintProfileHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, ProfileProperties, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, ProfileName, 0x010C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicsConstraintProfileHandle, 0x0114);
		}

		// struct FChaosPhysicsSettings
		TEST_METHOD(ScriptStruct__Engine__ChaosPhysicsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsSettings, DefaultThreadingModel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsSettings, DedicatedThreadTickMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsSettings, DedicatedThreadBufferMode, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosPhysicsSettings, 0x0003);
		}

		// struct FPhysicalSurfaceName
		TEST_METHOD(ScriptStruct__Engine__PhysicalSurfaceName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, UnknownData_XV0V, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalSurfaceName, 0x000C);
		}

		// struct FViewTargetTransitionParams
		TEST_METHOD(ScriptStruct__Engine__ViewTargetTransitionParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendFunction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, UnknownData_BVI4, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendExp, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, UnknownData_QNP7, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FViewTargetTransitionParams, 0x0010);
		}

		// struct FUpdateLevelStreamingLevelStatus
		TEST_METHOD(ScriptStruct__Engine__UpdateLevelStreamingLevelStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, LODIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, UnknownData_WALC, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateLevelStreamingLevelStatus, 0x0010);
		}

		// struct FKeyBind
		TEST_METHOD(ScriptStruct__Engine__KeyBind)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, Command, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, UnknownData_0YWG, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyBind, 0x0030);
		}

		// struct FPlayerMuteList
		TEST_METHOD(ScriptStruct__Engine__PlayerMuteList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, UnknownData_BU92, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, bHasVoiceHandshakeCompleted, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, UnknownData_RME2, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, VoiceChannelIdx, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerMuteList, 0x0038);
		}

		// struct FPoseData
		TEST_METHOD(ScriptStruct__Engine__PoseData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, LocalSpacePose, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, TrackToBufferIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, CurveData, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseData, 0x0070);
		}

		// struct FPoseDataContainer
		TEST_METHOD(ScriptStruct__Engine__PoseDataContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, PoseNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Tracks, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, TrackMap, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Poses, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Curves, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDataContainer, 0x0090);
		}

		// struct FPreviewAttachedObjectPair
		TEST_METHOD(ScriptStruct__Engine__PreviewAttachedObjectPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, AttachedObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, Object, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, AttachedTo, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewAttachedObjectPair, 0x0038);
		}

		// struct FPreviewAssetAttachContainer
		TEST_METHOD(ScriptStruct__Engine__PreviewAssetAttachContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAssetAttachContainer, AttachedObjects, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewAssetAttachContainer, 0x0010);
		}

		// struct FPreviewMeshCollectionEntry
		TEST_METHOD(ScriptStruct__Engine__PreviewMeshCollectionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewMeshCollectionEntry, SkeletalMesh, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewMeshCollectionEntry, 0x0028);
		}

		// struct FPrimitiveComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__PrimitiveComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, UnknownData_AVX6, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, ComponentTransform, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, VisibilityId, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, UnknownData_T70L, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, LODParent, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimitiveComponentInstanceData, 0x0100);
		}

		// struct FSpriteCategoryInfo
		TEST_METHOD(ScriptStruct__Engine__SpriteCategoryInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, Description, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteCategoryInfo, 0x0038);
		}

		// struct FQuartzPulseOverrideStep
		TEST_METHOD(ScriptStruct__Engine__QuartzPulseOverrideStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzPulseOverrideStep, NumberOfPulses, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzPulseOverrideStep, PulseDuration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzPulseOverrideStep, UnknownData_UBV5, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuartzPulseOverrideStep, 0x0008);
		}

		// struct FQuartzTimeSignature
		TEST_METHOD(ScriptStruct__Engine__QuartzTimeSignature)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzTimeSignature, NumBeats, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzTimeSignature, BeatType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzTimeSignature, UnknownData_CQ3N, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzTimeSignature, OptionalPulseOverride, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuartzTimeSignature, 0x0018);
		}

		// struct FQuartzClockSettings
		TEST_METHOD(ScriptStruct__Engine__QuartzClockSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzClockSettings, TimeSignature, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzClockSettings, bIgnoreLevelChange, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzClockSettings, UnknownData_64S8, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuartzClockSettings, 0x0020);
		}

		// struct FQuartzQuantizationBoundary
		TEST_METHOD(ScriptStruct__Engine__QuartzQuantizationBoundary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzQuantizationBoundary, Quantization, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzQuantizationBoundary, UnknownData_8YD4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzQuantizationBoundary, Multiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzQuantizationBoundary, CountingReferencePoint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzQuantizationBoundary, UnknownData_CVHT, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuartzQuantizationBoundary, 0x000C);
		}

		// struct FQuartzTransportTimeStamp
		TEST_METHOD(ScriptStruct__Engine__QuartzTransportTimeStamp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzTransportTimeStamp, UnknownData_VJC6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuartzTransportTimeStamp, 0x000C);
		}

		// struct FLevelNameAndTime
		TEST_METHOD(ScriptStruct__Engine__LevelNameAndTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, LevelName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, LevelChangeTimeInMS, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, UnknownData_5UVB, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelNameAndTime, 0x0018);
		}

		// struct FCompressedRichCurve
		TEST_METHOD(ScriptStruct__Engine__CompressedRichCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedRichCurve, UnknownData_T502, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompressedRichCurve, 0x0018);
		}

		// struct FRigTransformConstraint
		TEST_METHOD(ScriptStruct__Engine__RigTransformConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, TranformType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, UnknownData_MJ0X, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, ParentSpace, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, Weight, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigTransformConstraint, 0x0010);
		}

		// struct FTransformBaseConstraint
		TEST_METHOD(ScriptStruct__Engine__TransformBaseConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBaseConstraint, TransformConstraints, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformBaseConstraint, 0x0010);
		}

		// struct FTransformBase
		TEST_METHOD(ScriptStruct__Engine__TransformBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBase, Node, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBase, Constraints, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformBase, 0x0028);
		}

		// struct FNode
		TEST_METHOD(ScriptStruct__Engine__Node)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, ParentName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, DisplayName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, bAdvanced, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, UnknownData_BNQE, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNode, 0x0060);
		}

		// struct FRootMotionSourceStatus
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceStatus, Flags, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceStatus, 0x0001);
		}

		// struct FRootMotionFinishVelocitySettings
		TEST_METHOD(ScriptStruct__Engine__RootMotionFinishVelocitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, Mode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, UnknownData_MJUV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, SetVelocity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, ClampVelocity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionFinishVelocitySettings, 0x0014);
		}

		// struct FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_523A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Priority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, LocalID, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, AccumulateMode, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_FCHM, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, InstanceName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, StartTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, CurrentTime, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, PreviousTime, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Duration, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Status, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Settings, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, bInLocalSpace, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_YRQ9, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, RootMotionParams, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, FinishVelocityParams, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_LG0F, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource, 0x0098);
		}

		// struct FRootMotionSource_JumpForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_JumpForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Rotation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Distance, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Height, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, bDisableTimeout, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, UnknownData_9OGG, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, PathOffsetCurve, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, TimeMappingCurve, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, UnknownData_2HDM, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_JumpForce, 0x00D0);
		}

		// struct FRootMotionSource_MoveToDynamicForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_MoveToDynamicForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, StartLocation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, InitialTargetLocation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, TargetLocation, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, bRestrictSpeedToExpected, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, UnknownData_801S, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, PathOffsetCurve, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, TimeMappingCurve, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_MoveToDynamicForce, 0x00D0);
		}

		// struct FRootMotionSource_MoveToForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_MoveToForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, StartLocation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, TargetLocation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, bRestrictSpeedToExpected, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, UnknownData_TJI7, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, PathOffsetCurve, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_MoveToForce, 0x00C0);
		}

		// struct FRootMotionSource_RadialForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_RadialForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Location, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_PIP8, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, LocationActor, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Radius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Strength, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bIsPush, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bNoZForce, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_FD68, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, StrengthDistanceFalloff, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, StrengthOverTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bUseFixedWorldDirection, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_R3QO, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, FixedWorldDirection, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_RadialForce, 0x00E0);
		}

		// struct FRootMotionSource_ConstantForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_ConstantForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, Force, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, UnknownData_BZGY, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, StrengthOverTime, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_ConstantForce, 0x00B0);
		}

		// struct FCameraExposureSettings
		TEST_METHOD(ScriptStruct__Engine__CameraExposureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, Method, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, UnknownData_BU24, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, LowPercent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HighPercent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MinBrightness, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MaxBrightness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, SpeedUp, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, SpeedDown, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, Bias, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, BiasCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MeterMask, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HistogramLogMin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HistogramLogMax, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, CalibrationConstant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, UnknownData_KTOE, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraExposureSettings, 0x0040);
		}

		// struct FGaussianSumBloomSettings
		TEST_METHOD(ScriptStruct__Engine__GaussianSumBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Intensity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Threshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, SizeScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter1Size, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter2Size, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter3Size, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter4Size, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter5Size, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter6Size, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter1Tint, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter2Tint, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter3Tint, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter4Tint, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter5Tint, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter6Tint, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGaussianSumBloomSettings, 0x0084);
		}

		// struct FConvolutionBloomSettings
		TEST_METHOD(ScriptStruct__Engine__ConvolutionBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, Size, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, CenterUV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMin, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMult, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, BufferScale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, UnknownData_3ZG5, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConvolutionBloomSettings, 0x0028);
		}

		// struct FLensBloomSettings
		TEST_METHOD(ScriptStruct__Engine__LensBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, GaussianSum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, UnknownData_ZS5Z, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, Convolution, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, Method, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, UnknownData_SBJE, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensBloomSettings, 0x00B8);
		}

		// struct FLensImperfectionSettings
		TEST_METHOD(ScriptStruct__Engine__LensImperfectionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMask, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMaskIntensity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMaskTint, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, UnknownData_G7A0, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensImperfectionSettings, 0x0020);
		}

		// struct FLensSettings
		TEST_METHOD(ScriptStruct__Engine__LensSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, Bloom, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, Imperfections, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, ChromaticAberration, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, UnknownData_TNW7, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensSettings, 0x00E0);
		}

		// struct FFilmStockSettings
		TEST_METHOD(ScriptStruct__Engine__FilmStockSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Slope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Toe, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Shoulder, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, BlackClip, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, WhiteClip, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilmStockSettings, 0x0014);
		}

		// struct FColorGradePerRangeSettings
		TEST_METHOD(ScriptStruct__Engine__ColorGradePerRangeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Saturation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Contrast, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Gamma, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Gain, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Offset, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorGradePerRangeSettings, 0x0050);
		}

		// struct FColorGradingSettings
		TEST_METHOD(ScriptStruct__Engine__ColorGradingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Global, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Shadows, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Midtones, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Highlights, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, ShadowsMax, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, HighlightsMin, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, UnknownData_KZJF, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorGradingSettings, 0x0150);
		}

		// struct FEngineShowFlagsSetting
		TEST_METHOD(ScriptStruct__Engine__EngineShowFlagsSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, ShowFlagName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, Enabled, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, UnknownData_C4SL, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineShowFlagsSetting, 0x0018);
		}

		// struct FSceneViewExtensionIsActiveFunctor
		TEST_METHOD(ScriptStruct__Engine__SceneViewExtensionIsActiveFunctor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSceneViewExtensionIsActiveFunctor, UnknownData_60IX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSceneViewExtensionIsActiveFunctor, 0x0050);
		}

		// struct FClothPhysicsProperties_Legacy
		TEST_METHOD(ScriptStruct__Engine__ClothPhysicsProperties_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, VerticalResistance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, HorizontalResistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, BendResistance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, ShearResistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Friction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Damping, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, TetherStiffness, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, TetherLimit, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Drag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, StiffnessFrequency, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, GravityScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, MassScale, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, InertiaBlend, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionThickness, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionSquashScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionStiffness, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SolverFrequency, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberCompression, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberExpansion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberResistance, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothPhysicsProperties_Legacy, 0x0050);
		}

		// struct FClothingAssetData_Legacy
		TEST_METHOD(ScriptStruct__Engine__ClothingAssetData_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, AssetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, ApexFileName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, bClothPropertiesChanged, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, UnknownData_VRVK, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, PhysicsProperties, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, UnknownData_TTV1, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothingAssetData_Legacy, 0x0078);
		}

		// struct FSkeletalMeshClothBuildParams
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshClothBuildParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, TargetAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, TargetLod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, bRemapParameters, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, UnknownData_8DDT, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, AssetName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, LODIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, SourceSection, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, bRemoveFromMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, UnknownData_B2WY, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, PhysicsAsset, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshClothBuildParams, 0x0058);
		}

		// struct FBoneMirrorExport
		TEST_METHOD(ScriptStruct__Engine__BoneMirrorExport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, SourceBoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, BoneFlipAxis, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, UnknownData_MZXB, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneMirrorExport, 0x0014);
		}

		// struct FSkeletalMeshComponentClothTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponentClothTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshComponentClothTickFunction, UnknownData_42WN, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshComponentClothTickFunction, 0x0030);
		}

		// struct FSkeletalMeshComponentEndPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponentEndPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshComponentEndPhysicsTickFunction, UnknownData_LR3N, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshComponentEndPhysicsTickFunction, 0x0030);
		}

		// struct FBoneFilter
		TEST_METHOD(ScriptStruct__Engine__BoneFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, bExcludeSelf, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, UnknownData_YCDL, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, BoneName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneFilter, 0x000C);
		}

		// struct FSkeletalMeshLODGroupSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshLODGroupSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, LODHysteresis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BoneFilterActionOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_69I5, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BoneList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BonesToPrioritize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, WeightOfPrioritization, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_A5GV, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BakePose, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, ReductionSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_VHHU, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshLODGroupSettings, 0x0080);
		}

		// struct FNameMapping
		TEST_METHOD(ScriptStruct__Engine__NameMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameMapping, NodeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameMapping, BoneName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameMapping, 0x0010);
		}

		// struct FRigConfiguration
		TEST_METHOD(ScriptStruct__Engine__RigConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigConfiguration, Rig, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigConfiguration, BoneMappingTable, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigConfiguration, 0x0018);
		}

		// struct FBoneReductionSetting
		TEST_METHOD(ScriptStruct__Engine__BoneReductionSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReductionSetting, BonesToRemove, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneReductionSetting, 0x0010);
		}

		// struct FReferencePose
		TEST_METHOD(ScriptStruct__Engine__ReferencePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferencePose, PoseName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferencePose, ReferencePose, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReferencePose, 0x0018);
		}

		// struct FSkeletonToMeshLinkup
		TEST_METHOD(ScriptStruct__Engine__SkeletonToMeshLinkup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletonToMeshLinkup, SkeletonToMeshTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletonToMeshLinkup, MeshToSkeletonTable, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletonToMeshLinkup, 0x0020);
		}

		// struct FSkelMeshSkinWeightInfo
		TEST_METHOD(ScriptStruct__Engine__SkelMeshSkinWeightInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshSkinWeightInfo, Bones, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshSkinWeightInfo, Weights, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkelMeshSkinWeightInfo, 0x003C);
		}

		// struct FSkinWeightProfileManagerTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkinWeightProfileManagerTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileManagerTickFunction, UnknownData_JHLK, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkinWeightProfileManagerTickFunction, 0x0030);
		}

		// struct FTentDistribution
		TEST_METHOD(ScriptStruct__Engine__TentDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTentDistribution, TipAltitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTentDistribution, TipValue, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTentDistribution, Width, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTentDistribution, 0x000C);
		}

		// struct FPrecomputedSkyLightInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__PrecomputedSkyLightInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedSkyLightInstanceData, LightGuid, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedSkyLightInstanceData, AverageBrightness, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedSkyLightInstanceData, UnknownData_L6F4, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrecomputedSkyLightInstanceData, 0x0170);
		}

		// struct FSmartNameMapping
		TEST_METHOD(ScriptStruct__Engine__SmartNameMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartNameMapping, UnknownData_WW8N, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartNameMapping, 0x0070);
		}

		// struct FCurveMetaData
		TEST_METHOD(ScriptStruct__Engine__CurveMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveMetaData, UnknownData_BQBZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveMetaData, 0x0018);
		}

		// struct FPassiveSoundMixModifier
		TEST_METHOD(ScriptStruct__Engine__PassiveSoundMixModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, SoundMix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, MinVolumeThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, MaxVolumeThreshold, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPassiveSoundMixModifier, 0x0010);
		}

		// struct FSoundClassProperties
		TEST_METHOD(ScriptStruct__Engine__SoundClassProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Volume, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Pitch, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LowPassFilterFrequency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, AttenuationDistanceScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, StereoBleed, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LFEBleed, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, VoiceCenterChannelVolume, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, RadioFilterVolume, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, RadioFilterVolumeThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_9GAF, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Default2DReverbSendAmount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_RBMX, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, ModulationSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, OutputTarget, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LoadingBehavior, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_RT0B, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, DefaultSubmix, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassProperties, 0x0080);
		}

		// struct FSoundClassEditorData
		TEST_METHOD(ScriptStruct__Engine__SoundClassEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassEditorData, UnknownData_GKWI, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassEditorData, 0x0008);
		}

		// struct FSoundNodeEditorData
		TEST_METHOD(ScriptStruct__Engine__SoundNodeEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundNodeEditorData, UnknownData_C6MA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundNodeEditorData, 0x0008);
		}

		// struct FSourceEffectChainEntry
		TEST_METHOD(ScriptStruct__Engine__SourceEffectChainEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChainEntry, Preset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChainEntry, UnknownData_HNNE, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectChainEntry, 0x0010);
		}

		// struct FSoundGroup
		TEST_METHOD(ScriptStruct__Engine__SoundGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, SoundGroup, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, UnknownData_VHCJ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, UnknownData_J1XU, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, DecompressedDuration, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundGroup, 0x0020);
		}

		// struct FSoundClassAdjuster
		TEST_METHOD(ScriptStruct__Engine__SoundClassAdjuster)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, SoundClassObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, VolumeAdjuster, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, PitchAdjuster, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, LowPassFilterFrequency, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, UnknownData_2DXJ, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, VoiceCenterChannelVolumeAdjuster, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, UnknownData_PB54, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassAdjuster, 0x0020);
		}

		// struct FAudioEQEffect : public FAudioEffectParameters
		TEST_METHOD(ScriptStruct__Engine__AudioEQEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, UnknownData_08ZE, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter0, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain0, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth0, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter1, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain1, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth1, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain2, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth2, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter3, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain3, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth3, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioEQEffect, 0x0040);
		}

		// struct FDistanceDatum
		TEST_METHOD(ScriptStruct__Engine__DistanceDatum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeInDistanceStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeInDistanceEnd, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeOutDistanceStart, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeOutDistanceEnd, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, Volume, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistanceDatum, 0x0014);
		}

		// struct FModulatorContinuousParams
		TEST_METHOD(ScriptStruct__Engine__ModulatorContinuousParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, Default, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MinInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MaxInput, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MinOutput, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MaxOutput, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, ParamMode, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, UnknownData_I96R, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModulatorContinuousParams, 0x0020);
		}

		// struct FSoundSubmixSpectralAnalysisBandSettings
		TEST_METHOD(ScriptStruct__Engine__SoundSubmixSpectralAnalysisBandSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSpectralAnalysisBandSettings, BandFrequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSpectralAnalysisBandSettings, AttackTimeMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSpectralAnalysisBandSettings, ReleaseTimeMsec, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSpectralAnalysisBandSettings, QFactor, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSubmixSpectralAnalysisBandSettings, 0x0010);
		}

		// struct FSoundWaveEnvelopeDataPerSound
		TEST_METHOD(ScriptStruct__Engine__SoundWaveEnvelopeDataPerSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeDataPerSound, Envelope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeDataPerSound, PlaybackTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeDataPerSound, SoundWave, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveEnvelopeDataPerSound, 0x0010);
		}

		// struct FSoundWaveSpectralData
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralData, FrequencyHz, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralData, Magnitude, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralData, NormalizedMagnitude, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralData, 0x000C);
		}

		// struct FSoundWaveSpectralDataPerSound
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralDataPerSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, SpectralData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, PlaybackTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, UnknownData_RB10, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, SoundWave, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralDataPerSound, 0x0020);
		}

		// struct FStreamedAudioPlatformData
		TEST_METHOD(ScriptStruct__Engine__StreamedAudioPlatformData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamedAudioPlatformData, UnknownData_KXAA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamedAudioPlatformData, 0x0020);
		}

		// struct FSplineInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__SplineInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, bSplineHasBeenEdited, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, UnknownData_QMHG, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, SplineCurves, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, SplineCurvesPreUCS, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineInstanceData, 0x01A0);
		}

		// struct FSplinePoint
		TEST_METHOD(ScriptStruct__Engine__SplinePoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, InputKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Position, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, ArriveTangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, LeaveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Scale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Type, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, UnknownData_UXIT, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplinePoint, 0x0044);
		}

		// struct FSplineMeshInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__SplineMeshInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, StartPos, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, EndPos, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, StartTangent, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, EndTangent, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineMeshInstanceData, 0x00E8);
		}

		// struct FSplineMeshParams
		TEST_METHOD(ScriptStruct__Engine__SplineMeshParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartPos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartScale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartRoll, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndPos, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndTangent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndRoll, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndOffset, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineMeshParams, 0x0058);
		}

		// struct FMaterialRemapIndex
		TEST_METHOD(ScriptStruct__Engine__MaterialRemapIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, ImportVersionKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, UnknownData_JXMK, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, MaterialRemap, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialRemapIndex, 0x0018);
		}

		// struct FStaticMaterial
		TEST_METHOD(ScriptStruct__Engine__StaticMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, MaterialInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, ImportedMaterialSlotName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, UVChannelData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, UnknownData_VR5F, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMaterial, 0x0030);
		}

		// struct FAssetEditorOrbitCameraPosition
		TEST_METHOD(ScriptStruct__Engine__AssetEditorOrbitCameraPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, bIsSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, UnknownData_C55M, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitPoint, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitZoom, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitRotation, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetEditorOrbitCameraPosition, 0x0028);
		}

		// struct FMeshSectionInfo
		TEST_METHOD(ScriptStruct__Engine__MeshSectionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, MaterialIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bEnableCollision, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bCastShadow, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bVisibleInRayTracing, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bForceOpaque, 0x0007);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshSectionInfo, 0x0008);
		}

		// struct FMeshSectionInfoMap
		TEST_METHOD(ScriptStruct__Engine__MeshSectionInfoMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfoMap, Map, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshSectionInfoMap, 0x0050);
		}

		// struct FStaticMeshSourceModel
		TEST_METHOD(ScriptStruct__Engine__StaticMeshSourceModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, BuildSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, ReductionSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, LODDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, ScreenSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, UnknownData_ME6Y, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, SourceImportFilename, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshSourceModel, 0x0070);
		}

		// struct FStaticMeshOptimizationSettings
		TEST_METHOD(ScriptStruct__Engine__StaticMeshOptimizationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, ReductionMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_CYBN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, NumOfTrianglesPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, MaxDeviationPercentage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, WeldingThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, bRecalcNormals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_EB1U, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, NormalsThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, SilhouetteImportance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, TextureImportance, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, ShadingImportance, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_8U30, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshOptimizationSettings, 0x001C);
		}

		// struct FPaintedVertex
		TEST_METHOD(ScriptStruct__Engine__PaintedVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Color, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Normal, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintedVertex, 0x0020);
		}

		// struct FStaticMeshVertexColorLODData
		TEST_METHOD(ScriptStruct__Engine__StaticMeshVertexColorLODData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, PaintedVertices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, VertexBufferColors, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, LODIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, UnknownData_0PNK, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshVertexColorLODData, 0x0028);
		}

		// struct FStaticMeshComponentInstanceData : public FPrimitiveComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__StaticMeshComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, StaticMesh, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, VertexColorLODs, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, CachedStaticLighting, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, StreamingTextureData, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, UnknownData_Y1PA, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshComponentInstanceData, 0x0140);
		}

		// struct FEquirectProps
		TEST_METHOD(ScriptStruct__Engine__EquirectProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, LeftUVRect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, RightUVRect, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, LeftScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, RightScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, LeftBias, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, RightBias, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEquirectProps, 0x0048);
		}

		// struct FSubsurfaceProfileStruct
		TEST_METHOD(ScriptStruct__Engine__SubsurfaceProfileStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, SurfaceAlbedo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, MeanFreePathColor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, MeanFreePathDistance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, WorldUnitScale, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, bEnableBurley, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, UnknownData_9R70, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ScatterRadius, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, SubsurfaceColor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, FalloffColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, BoundaryColorBleed, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ExtinctionScale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, NormalScale, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ScatteringDistribution, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, IOR, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, Roughness0, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, Roughness1, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, LobeMix, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, TransmissionTintColor, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubsurfaceProfileStruct, 0x008C);
		}

		// struct FTextureFormatSettings
		TEST_METHOD(ScriptStruct__Engine__TextureFormatSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureFormatSettings, CompressionSettings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureFormatSettings, 0x0002);
		}

		// struct FTexturePlatformData
		TEST_METHOD(ScriptStruct__Engine__TexturePlatformData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTexturePlatformData, UnknownData_SYTK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTexturePlatformData, 0x0030);
		}

		// struct FTextureSource
		TEST_METHOD(ScriptStruct__Engine__TextureSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSource, UnknownData_7OOT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureSource, 0x0038);
		}

		// struct FTextureSourceBlock
		TEST_METHOD(ScriptStruct__Engine__TextureSourceBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, BlockX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, BlockY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, SizeX, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, SizeY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, NumSlices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, NumMips, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureSourceBlock, 0x0018);
		}

		// struct FStreamingRenderAssetPrimitiveInfo
		TEST_METHOD(ScriptStruct__Engine__StreamingRenderAssetPrimitiveInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, RenderAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, Bounds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, TexelFactor, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, PackedRelativeBox, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, UnknownData_RESV, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingRenderAssetPrimitiveInfo, 0x0030);
		}

		// struct FTimelineEventEntry
		TEST_METHOD(ScriptStruct__Engine__TimelineEventEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, EventFunc, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineEventEntry, 0x0014);
		}

		// struct FTimelineVectorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, UnknownData_F4WJ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineVectorTrack, 0x0040);
		}

		// struct FTimelineFloatTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineFloatTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, UnknownData_IMQA, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineFloatTrack, 0x0040);
		}

		// struct FTimelineLinearColorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineLinearColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, UnknownData_L2WS, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineLinearColorTrack, 0x0040);
		}

		// struct FTimeline
		TEST_METHOD(ScriptStruct__Engine__Timeline)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, LengthMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_L8SH, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Length, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Position, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Events, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpVectors, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpFloats, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpLinearColors, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, TimelinePostUpdateFunc, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, TimelineFinishedFunc, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, PropertySetObject, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, DirectionPropertyName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_T5LG, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeline, 0x0098);
		}

		// struct FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTTrackBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, UnknownData_H41G, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, TrackName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, bIsExternalCurve, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, UnknownData_87KU, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTTrackBase, 0x0018);
		}

		// struct FTTPropertyTrack : public FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTPropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTPropertyTrack, PropertyName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTPropertyTrack, 0x0020);
		}

		// struct FTTLinearColorTrack : public FTTPropertyTrack
		TEST_METHOD(ScriptStruct__Engine__TTLinearColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTLinearColorTrack, CurveLinearColor, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTLinearColorTrack, 0x0028);
		}

		// struct FTTVectorTrack : public FTTPropertyTrack
		TEST_METHOD(ScriptStruct__Engine__TTVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTVectorTrack, CurveVector, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTVectorTrack, 0x0028);
		}

		// struct FTTFloatTrack : public FTTPropertyTrack
		TEST_METHOD(ScriptStruct__Engine__TTFloatTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTFloatTrack, CurveFloat, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTFloatTrack, 0x0028);
		}

		// struct FTTEventTrack : public FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTEventTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTEventTrack, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTEventTrack, CurveKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTEventTrack, 0x0028);
		}

		// struct FTTTrackId
		TEST_METHOD(ScriptStruct__Engine__TTTrackId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackId, TrackType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackId, TrackIndex, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTTrackId, 0x0008);
		}

		// struct FTimeStretchCurveInstance
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurveInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveInstance, bHasValidData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveInstance, UnknownData_NR0K, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurveInstance, 0x0030);
		}

		// struct FTouchInputControl
		TEST_METHOD(ScriptStruct__Engine__TouchInputControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Image1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Image2, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Center, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, VisualSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, ThumbSize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, InteractionSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, InputScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, MainInputKey, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, AltInputKey, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTouchInputControl, 0x0068);
		}

		// struct FUpdateLevelVisibilityLevelInfo
		TEST_METHOD(ScriptStruct__Engine__UpdateLevelVisibilityLevelInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, Filename, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, UnknownData_YZD2, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateLevelVisibilityLevelInfo, 0x0014);
		}

		// struct FHardwareCursorReference
		TEST_METHOD(ScriptStruct__Engine__HardwareCursorReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHardwareCursorReference, CursorPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHardwareCursorReference, HotSpot, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHardwareCursorReference, 0x0010);
		}

		// struct FVirtualTextureBuildSettings
		TEST_METHOD(ScriptStruct__Engine__VirtualTextureBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, TileSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, TileBorderSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, bEnableCompressCrunch, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, bEnableCompressZlib, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, UnknownData_UWPP, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualTextureBuildSettings, 0x000C);
		}

		// struct FVirtualTextureSpacePoolConfig
		TEST_METHOD(ScriptStruct__Engine__VirtualTextureSpacePoolConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, MinTileSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, MaxTileSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, Formats, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, SizeInMegabyte, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, bAllowSizeScale, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, UnknownData_5L6H, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, ScalabilityGroup, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, UnknownData_GWT4, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualTextureSpacePoolConfig, 0x0028);
		}

		// struct FVoiceSettings
		TEST_METHOD(ScriptStruct__Engine__VoiceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, ComponentToAttachTo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, AttenuationSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, SourceEffectChain, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVoiceSettings, 0x0018);
		}

		// struct FEndPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__EndPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEndPhysicsTickFunction, UnknownData_ZZC0, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEndPhysicsTickFunction, 0x0030);
		}

		// struct FStartPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__StartPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartPhysicsTickFunction, UnknownData_86V5, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartPhysicsTickFunction, 0x0030);
		}

		// struct FLevelViewportInfo
		TEST_METHOD(ScriptStruct__Engine__LevelViewportInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamRotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamOrthoZoom, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamUpdated, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, UnknownData_70PN, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelViewportInfo, 0x0020);
		}

		// struct FHierarchicalSimplification
		TEST_METHOD(ScriptStruct__Engine__HierarchicalSimplification)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, TransitionScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, OverrideDrawDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, UnknownData_RNFY, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, ProxySetting, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, MergeSetting, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, DesiredBoundRadius, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, DesiredFillingPercentage, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, MinNumberOfActorsToBuild, 0x015C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHierarchicalSimplification, 0x0160);
		}

		// struct FLightmassWorldInfoSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassWorldInfoSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, StaticLightingLevelScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, NumIndirectLightingBounces, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, NumSkyLightingBounces, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectLightingQuality, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectLightingSmoothness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EnvironmentColor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EnvironmentIntensity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EmissiveBoost, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, DiffuseBoost, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumeLightingMethod, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, UnknownData_2EKY, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapDetailCellSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapMaximumBrickMemoryMb, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapSphericalHarmonicSmoothing, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumeLightSamplePlacementScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, DirectIlluminationOcclusionFraction, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectIlluminationOcclusionFraction, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, OcclusionExponent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, FullyOccludedSamplesFraction, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, MaxOcclusionDistance, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassWorldInfoSettings, 0x004C);
		}

		// struct FBlueprintSessionResult
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__BlueprintSessionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintSessionResult, UnknownData_CNLZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintSessionResult, 0x0108);
		}

		// struct FInAppPurchaseReceiptInfo2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseReceiptInfo2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo2, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo2, ItemId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo2, ValidationInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseReceiptInfo2, 0x0030);
		}

		// struct FOnlineProxyStoreOffer
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__OnlineProxyStoreOffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, OfferId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, Title, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, Description, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, LongDescription, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, RegularPriceText, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, RegularPrice, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, UnknownData_XY2V, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, PriceText, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, NumericPrice, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, UnknownData_R6W3, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, CurrencyCode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, ReleaseDate, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, ExpirationDate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, DiscountType, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, UnknownData_7V2B, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, DynamicFields, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOnlineProxyStoreOffer, 0x0110);
		}

		// struct FInAppPurchaseRestoreInfo2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseRestoreInfo2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo2, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo2, ItemId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo2, ValidationInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseRestoreInfo2, 0x0030);
		}

		// struct FInAppPurchaseReceiptInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseReceiptInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo, ItemId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo, ValidationInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseReceiptInfo, 0x0030);
		}

		// struct FInAppPurchaseProductInfo2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseProductInfo2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, TransactionIdentifier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DisplayDescription, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DisplayPrice, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, RawPrice, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, UnknownData_QJS6, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, CurrencyCode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, CurrencySymbol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DecimalSeparator, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, GroupingSeparator, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, ReceiptData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DynamicFields, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductInfo2, 0x00F8);
		}

		// struct FInAppPurchaseProductRequest2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseProductRequest2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest2, ProductIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest2, bIsConsumable, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest2, UnknownData_87C9, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductRequest2, 0x0018);
		}

		// struct FPlayerReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PlayerReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, UniqueId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, ValidationStr, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, Platform, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, bAllowCrossplay, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, UnknownData_XPWA, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, ElapsedTime, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerReservation, 0x0050);
		}

		// struct FSpectatorReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__SpectatorReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpectatorReservation, SpectatorId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpectatorReservation, Spectator, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpectatorReservation, 0x0078);
		}

		// struct FPIELoginSettingsInternal
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PIELoginSettingsInternal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, Token, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, Type, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, TokenBytes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPIELoginSettingsInternal, 0x0040);
		}

		// struct FPartyReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PartyReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, TeamNum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, UnknownData_MV0M, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, PartyLeader, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, PartyMembers, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, RemovedPartyMembers, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyReservation, 0x0050);
		}

		// struct FNiagaraInputConditionMetadata
		TEST_METHOD(ScriptStruct__Niagara__NiagaraInputConditionMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraInputConditionMetadata, InputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraInputConditionMetadata, TargetValues, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraInputConditionMetadata, 0x0018);
		}

		// struct FNiagaraVariableMetaData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, Description, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, CategoryName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bAdvancedDisplay, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_R38S, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, EditorSortPriority, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bInlineEditConditionToggle, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_JIP9, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, EditCondition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, VisibleCondition, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, PropertyMetaData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, ParentAttribute, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, ScopeName, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, Usage, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_RELI, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bIsStaticSwitch, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_6M5C, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, StaticSwitchDefaultValue, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bAddedToNodeGraphDeepCopy, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bOutputIsPersistent, 0x00DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_5GI2, 0x00DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, CachedNamespacelessVariableName, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bCreatedInSystemEditor, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bUseLegacyNameString, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_EV9E, 0x00EA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableMetaData, 0x00F0);
		}

		// struct FNiagaraParameterScopeInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterScopeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, Scope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, UnknownData_215B, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, UnknownData_2Y4L, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, NamespaceString, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterScopeInfo, 0x0018);
		}

		// struct FNiagaraCompileHashVisitorDebugInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraCompileHashVisitorDebugInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHashVisitorDebugInfo, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHashVisitorDebugInfo, PropertyKeys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHashVisitorDebugInfo, PropertyValues, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCompileHashVisitorDebugInfo, 0x0030);
		}

		// struct FNiagaraID
		TEST_METHOD(ScriptStruct__Niagara__NiagaraID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraID, Index, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraID, AcquireTag, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraID, 0x0008);
		}

		// struct FNiagaraSpawnInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSpawnInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, Count, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, InterpStartDt, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, IntervalDt, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, SpawnGroup, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSpawnInfo, 0x0010);
		}

		// struct FNiagaraMatrix
		TEST_METHOD(ScriptStruct__Niagara__NiagaraMatrix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row1, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row2, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row3, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraMatrix, 0x0040);
		}

		// struct FNiagaraParameterMap
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterMap, UnknownData_RTM5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterMap, 0x0001);
		}

		// struct FNiagaraNumeric
		TEST_METHOD(ScriptStruct__Niagara__NiagaraNumeric)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraNumeric, UnknownData_L3F6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraNumeric, 0x0001);
		}

		// struct FNiagaraHalfVector4
		TEST_METHOD(ScriptStruct__Niagara__NiagaraHalfVector4)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector4, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector4, Y, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector4, Z, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector4, W, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraHalfVector4, 0x0008);
		}

		// struct FNiagaraHalfVector3
		TEST_METHOD(ScriptStruct__Niagara__NiagaraHalfVector3)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector3, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector3, Y, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector3, Z, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraHalfVector3, 0x0006);
		}

		// struct FNiagaraHalfVector2
		TEST_METHOD(ScriptStruct__Niagara__NiagaraHalfVector2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector2, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector2, Y, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraHalfVector2, 0x0004);
		}

		// struct FNiagaraHalf
		TEST_METHOD(ScriptStruct__Niagara__NiagaraHalf)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalf, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraHalf, 0x0002);
		}

		// struct FNiagaraBool
		TEST_METHOD(ScriptStruct__Niagara__NiagaraBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBool, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraBool, 0x0004);
		}

		// struct FNiagaraInt32
		TEST_METHOD(ScriptStruct__Niagara__NiagaraInt32)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraInt32, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraInt32, 0x0004);
		}

		// struct FNiagaraFloat
		TEST_METHOD(ScriptStruct__Niagara__NiagaraFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFloat, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraFloat, 0x0004);
		}

		// struct FNiagaraVariant
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, DataInterface, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, Bytes, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, CurrentMode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, UnknownData_RJXQ, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, UnknownData_PFCC, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariant, 0x0028);
		}

		// struct FNiagaraWorldManagerTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Niagara__NiagaraWorldManagerTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraWorldManagerTickFunction, UnknownData_MUL9, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraWorldManagerTickFunction, 0x0030);
		}

		// struct FNiagaraTypeDefinitionHandle
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTypeDefinitionHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinitionHandle, RegisteredTypeIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTypeDefinitionHandle, 0x0004);
		}

		// struct FNiagaraVariableBase
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableBase, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableBase, TypeDefHandle, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableBase, 0x000C);
		}

		// struct FNiagaraVariable : public FNiagaraVariableBase
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariable, UnknownData_04OA, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariable, VarData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariable, 0x0020);
		}

		// struct FNiagaraVariableWithOffset : public FNiagaraVariableBase
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableWithOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableWithOffset, Offset, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableWithOffset, 0x0010);
		}

		// struct FNiagaraParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterStore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, UnknownData_CLQD, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, Owner, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, SortedParameterOffsets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, ParameterData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, DataInterfaces, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, UObjects, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, UnknownData_X6N6, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterStore, 0x0078);
		}

		// struct FNiagaraUserRedirectionParameterStore : public FNiagaraParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraUserRedirectionParameterStore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraUserRedirectionParameterStore, UserParameterRedirects, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraUserRedirectionParameterStore, 0x00C8);
		}

		// struct FNiagaraMaterialOverride
		TEST_METHOD(ScriptStruct__Niagara__NiagaraMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialOverride, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialOverride, MaterialSubIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialOverride, UnknownData_K2OW, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialOverride, EmitterRendererProperty, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraMaterialOverride, 0x0018);
		}

		// struct FNCPoolElement
		TEST_METHOD(ScriptStruct__Niagara__NCPoolElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPoolElement, Component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPoolElement, UnknownData_M6GX, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNCPoolElement, 0x0010);
		}

		// struct FNCPool
		TEST_METHOD(ScriptStruct__Niagara__NCPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, FreeElements, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, InUseComponents_Auto, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, InUseComponents_Manual, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, UnknownData_26QR, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNCPool, 0x0038);
		}

		// struct FNiagaraDeviceProfileStateEntry
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDeviceProfileStateEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDeviceProfileStateEntry, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDeviceProfileStateEntry, QualityLevelMask, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDeviceProfileStateEntry, SetQualityLevelMask, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDeviceProfileStateEntry, 0x0010);
		}

		// struct FNiagaraPlatformSetCVarCondition
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSetCVarCondition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, CVarName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, UnknownData_ZLTR, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, MinInt, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, MaxInt, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, MinFloat, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, MaxFloat, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, UnknownData_SVE5, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSetCVarCondition, 0x0028);
		}

		// struct FNiagaraPlatformSet
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, QualityLevelMask, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, UnknownData_4HDJ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, DeviceProfileStates, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, CVarConditions, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, UnknownData_G0LZ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSet, 0x0030);
		}

		// struct FNiagaraVariableAttributeBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableAttributeBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, ParamMapVariable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, UnknownData_OA0I, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, DataSetVariable, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, RootVariable, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, BindingSourceMode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, UnknownData_BT3E, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, UnknownData_6RZF, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableAttributeBinding, 0x0058);
		}

		// struct FNiagaraTypeDefinition
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTypeDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinition, ClassStructOrEnum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinition, UnderlyingType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinition, UnknownData_26QC, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTypeDefinition, 0x0010);
		}

		// struct FNiagaraComponentPropertyBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraComponentPropertyBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, AttributeBinding, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, PropertyName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, PropertyType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, MetadataSetterName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, WritableValue, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, UnknownData_U1Z3, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraComponentPropertyBinding, 0x00A0);
		}

		// struct FNiagaraUserParameterBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraUserParameterBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraUserParameterBinding, Parameter, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraUserParameterBinding, 0x0020);
		}

		// struct FNDIStaticMeshSectionFilter
		TEST_METHOD(ScriptStruct__Niagara__NDIStaticMeshSectionFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNDIStaticMeshSectionFilter, AllowedMaterialSlots, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNDIStaticMeshSectionFilter, 0x0010);
		}

		// struct FNiagaraSystemScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, Platforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, UnknownData_A3I9, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxDistance, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxInstances, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxSystemInstances, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxTimeWithoutRender, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, UnknownData_Y29C, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilitySettings, 0x0048);
		}

		// struct FNiagaraSystemScalabilitySettingsArray
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilitySettingsArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettingsArray, Settings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilitySettingsArray, 0x0010);
		}

		// struct FNiagaraEmitterScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettings, Platforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettings, UnknownData_78SN, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettings, SpawnCountScale, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilitySettings, 0x0038);
		}

		// struct FNiagaraEmitterScalabilitySettingsArray
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilitySettingsArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettingsArray, Settings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilitySettingsArray, 0x0010);
		}

		// struct FNiagaraEventReceiverProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEventReceiverProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventReceiverProperties, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventReceiverProperties, SourceEventGenerator, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventReceiverProperties, SourceEmitter, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEventReceiverProperties, 0x0018);
		}

		// struct FNiagaraTypeLayoutInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTypeLayoutInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, FloatComponentByteOffsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, FloatComponentRegisterOffsets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, Int32ComponentByteOffsets, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, Int32ComponentRegisterOffsets, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, HalfComponentByteOffsets, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, HalfComponentRegisterOffsets, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTypeLayoutInfo, 0x0060);
		}

		// struct FNiagaraVariableLayoutInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableLayoutInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, FloatComponentStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, Int32ComponentStart, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, HalfComponentStart, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, UnknownData_FG0G, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, LayoutInfo, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableLayoutInfo, 0x0070);
		}

		// struct FNiagaraDataSetID
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDataSetID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetID, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetID, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetID, UnknownData_EARS, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataSetID, 0x000C);
		}

		// struct FNiagaraDataSetCompiledData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDataSetCompiledData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, Variables, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, VariableLayouts, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, ID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, TotalFloatComponents, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, TotalInt32Components, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, TotalHalfComponents, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, UnknownData_FGIA, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, SimTarget, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, UnknownData_EDV0, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataSetCompiledData, 0x0040);
		}

		// struct FNiagaraEventGeneratorProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEventGeneratorProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, MaxEventsPerFrame, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, ID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, UnknownData_WB37, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, DataSetCompiledData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEventGeneratorProperties, 0x0050);
		}

		// struct FNiagaraEmitterScriptProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScriptProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScriptProperties, Script, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScriptProperties, EventReceivers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScriptProperties, EventGenerators, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScriptProperties, 0x0028);
		}

		// struct FNiagaraDetailsLevelScaleOverrides
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDetailsLevelScaleOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Low, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Medium, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, High, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Epic, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Cine, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDetailsLevelScaleOverrides, 0x0014);
		}

		// struct FNiagaraEventScriptProperties : public FNiagaraEmitterScriptProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEventScriptProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, ExecutionMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, UnknownData_GF0K, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, SpawnNumber, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, MaxEventsPerFrame, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, SourceEmitterID, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, SourceEventName, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, bRandomSpawnNumber, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, UnknownData_J0ZU, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, MinSpawnNumber, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, UnknownData_WMCY, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEventScriptProperties, 0x0058);
		}

		// struct FNiagaraMeshMaterialOverride
		TEST_METHOD(ScriptStruct__Niagara__NiagaraMeshMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMeshMaterialOverride, ExplicitMat, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMeshMaterialOverride, UserParamBinding, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraMeshMaterialOverride, 0x0028);
		}

		// struct FNiagaraScriptExecutionPaddingInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptExecutionPaddingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, SrcOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, DestOffset, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, SrcSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, DestSize, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptExecutionPaddingInfo, 0x0008);
		}

		// struct FNiagaraScriptExecutionParameterStore : public FNiagaraParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptExecutionParameterStore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, ParameterSize, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, PaddedParameterSize, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, PaddingInfo, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, UnknownData_O8MF, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptExecutionParameterStore, 0x0098);
		}

		// struct FMovieSceneNiagaraParameterSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraParameterSectionTemplate, Parameter, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraParameterSectionTemplate, 0x0040);
		}

		// struct FMovieSceneNiagaraBoolParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraBoolParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraBoolParameterSectionTemplate, BoolChannel, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraBoolParameterSectionTemplate, 0x00D0);
		}

		// struct FMovieSceneNiagaraColorParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraColorParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, RedChannel, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, GreenChannel, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, BlueChannel, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, AlphaChannel, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraColorParameterSectionTemplate, 0x02C0);
		}

		// struct FMovieSceneNiagaraFloatParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraFloatParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraFloatParameterSectionTemplate, FloatChannel, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraFloatParameterSectionTemplate, 0x00E0);
		}

		// struct FMovieSceneNiagaraIntegerParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraIntegerParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraIntegerParameterSectionTemplate, IntegerChannel, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraIntegerParameterSectionTemplate, 0x00D0);
		}

		// struct FMovieSceneNiagaraSystemTrackImplementation : public FMovieSceneTrackImplementation
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraSystemTrackImplementation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionStartFrame, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionEndFrame, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionStartBehavior, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_TZ03, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionEvaluateBehavior, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_H4BD, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionEndBehavior, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_IASN, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, AgeUpdateMode, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_89RO, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraSystemTrackImplementation, 0x0028);
		}

		// struct FMovieSceneNiagaraSystemTrackTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraSystemTrackTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraSystemTrackTemplate, 0x0020);
		}

		// struct FMovieSceneNiagaraVectorParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraVectorParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, VectorChannels, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, ChannelsUsed, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, UnknownData_018U, 0x02C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, 0x02C8);
		}

		// struct FNiagaraRandInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraRandInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRandInfo, Seed1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRandInfo, Seed2, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRandInfo, Seed3, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraRandInfo, 0x000C);
		}

		// struct FNiagaraScriptVariableBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptVariableBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptVariableBinding, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptVariableBinding, 0x0008);
		}

		// struct FNiagaraVariableDataInterfaceBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableDataInterfaceBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableDataInterfaceBinding, BoundVariable, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableDataInterfaceBinding, 0x0020);
		}

		// struct FNiagaraMaterialAttributeBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraMaterialAttributeBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialAttributeBinding, MaterialParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialAttributeBinding, NiagaraVariable, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialAttributeBinding, ResolvedNiagaraVariable, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialAttributeBinding, NiagaraChildVariable, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraMaterialAttributeBinding, 0x002C);
		}

		// struct FNiagaraVariableInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableInfo, Variable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableInfo, Definition, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableInfo, DataInterface, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableInfo, 0x0040);
		}

		// struct FNiagaraSystemUpdateContext
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemUpdateContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, ComponentsToReset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, ComponentsToReInit, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, ComponentsToNotifySimDestroy, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, SystemSimsToDestroy, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, UnknownData_PP4N, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemUpdateContext, 0x0048);
		}

		// struct FVMFunctionSpecifier
		TEST_METHOD(ScriptStruct__Niagara__VMFunctionSpecifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMFunctionSpecifier, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMFunctionSpecifier, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVMFunctionSpecifier, 0x0010);
		}

		// struct FVMExternalFunctionBindingInfo
		TEST_METHOD(ScriptStruct__Niagara__VMExternalFunctionBindingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, OwnerName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, InputParamLocations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, NumOutputs, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, UnknownData_0TA9, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, FunctionSpecifiers, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVMExternalFunctionBindingInfo, 0x0038);
		}

		// struct FNiagaraStatScope
		TEST_METHOD(ScriptStruct__Niagara__NiagaraStatScope)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraStatScope, FullName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraStatScope, FriendlyName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraStatScope, 0x0010);
		}

		// struct FNiagaraScriptDataInterfaceCompileInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptDataInterfaceCompileInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, UserPtrIdx, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, UnknownData_QA78, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, Type, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, RegisteredParameterMapRead, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, RegisteredParameterMapWrite, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, bIsPlaceholder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, UnknownData_FAWI, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptDataInterfaceCompileInfo, 0x0038);
		}

		// struct FNiagaraScriptDataInterfaceInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptDataInterfaceInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, DataInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, UserPtrIdx, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, UnknownData_4YSF, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, Type, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, RegisteredParameterMapRead, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, RegisteredParameterMapWrite, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptDataInterfaceInfo, 0x0038);
		}

		// struct FNiagaraFunctionSignature
		TEST_METHOD(ScriptStruct__Niagara__NiagaraFunctionSignature)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, Inputs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, Outputs, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, OwnerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, UnknownData_MS57, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, ModuleUsageBitmask, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, ContextStageMinIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, ContextStageMaxIndex, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, FunctionSpecifiers, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraFunctionSignature, 0x0090);
		}

		// struct FNiagaraScriptDataUsageInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptDataUsageInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataUsageInfo, bReadsAttributeData, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptDataUsageInfo, 0x0001);
		}

		// struct FNiagaraDataSetProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDataSetProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetProperties, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetProperties, UnknownData_JVNK, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetProperties, Variables, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataSetProperties, 0x0020);
		}

		// struct FNiagaraEmitterNameSettingsRef
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterNameSettingsRef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterNameSettingsRef, SystemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterNameSettingsRef, EmitterName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterNameSettingsRef, 0x0018);
		}

		// struct FBasicParticleData
		TEST_METHOD(ScriptStruct__Niagara__BasicParticleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasicParticleData, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasicParticleData, Size, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasicParticleData, Velocity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasicParticleData, 0x001C);
		}

		// struct FMeshTriCoordinate
		TEST_METHOD(ScriptStruct__Niagara__MeshTriCoordinate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshTriCoordinate, Tri, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshTriCoordinate, BaryCoord, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshTriCoordinate, 0x0010);
		}

		// struct FNiagaraGraphViewSettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraGraphViewSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, Zoom, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, bIsValid, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, UnknownData_LKSX, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraGraphViewSettings, 0x0010);
		}

		// struct FNiagaraEmitterScalabilityOverride : public FNiagaraEmitterScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilityOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilityOverride, UnknownData_1B6R, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilityOverride, 0x0040);
		}

		// struct FNiagaraEmitterScalabilityOverrides
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilityOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilityOverrides, Overrides, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilityOverrides, 0x0010);
		}

		// struct FNiagaraSystemScalabilityOverride : public FNiagaraSystemScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilityOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilityOverride, UnknownData_4071, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilityOverride, 0x0050);
		}

		// struct FNiagaraSystemScalabilityOverrides
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilityOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilityOverrides, Overrides, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilityOverrides, 0x0010);
		}

		// struct FNiagaraEmitterHandle
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, IdName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, bIsEnabled, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, UnknownData_H4HJ, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, Name, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, UnknownData_9XUZ, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, Instance, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterHandle, 0x0030);
		}

		// struct FNiagaraCollisionEventPayload
		TEST_METHOD(ScriptStruct__Niagara__NiagaraCollisionEventPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, CollisionPos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, CollisionNormal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, CollisionVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, ParticleIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, PhysicalMaterialIndex, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCollisionEventPayload, 0x002C);
		}

		// struct FNiagaraParameters
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameters, Parameters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameters, 0x0010);
		}

		// struct FNiagaraBoundParameter
		TEST_METHOD(ScriptStruct__Niagara__NiagaraBoundParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBoundParameter, Parameter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBoundParameter, SrcOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBoundParameter, DestOffset, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraBoundParameter, 0x0028);
		}

		// struct FNiagaraPlatformSetConflictEntry
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSetConflictEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictEntry, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictEntry, QualityLevelMask, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSetConflictEntry, 0x000C);
		}

		// struct FNiagaraPlatformSetConflictInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSetConflictInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictInfo, SetAIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictInfo, SetBIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictInfo, Conflicts, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSetConflictInfo, 0x0018);
		}

		// struct FNiagaraRibbonUVSettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraRibbonUVSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, LeadingEdgeMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, UnknownData_J5MF, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, TrailingEdgeMode, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, UnknownData_W8BP, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, DistributionMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, UnknownData_BP7P, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, TilingLength, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, Offset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, Scale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, bEnablePerParticleUOverride, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, bEnablePerParticleVRangeOverride, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, UnknownData_48XX, 0x0022);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraRibbonUVSettings, 0x0024);
		}

		// struct FNiagaraScalabilityManager
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScalabilityManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScalabilityManager, EffectType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScalabilityManager, ManagedComponents, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScalabilityManager, UnknownData_09NM, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScalabilityManager, 0x0040);
		}

		// struct FNiagaraVMExecutableData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVMExecutableData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, ByteCode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, OptimizedByteCode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, NumTempRegisters, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, NumUserPtrs, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, ScriptLiterals, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, Attributes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DataUsage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, UnknownData_RYW9, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DataInterfaceInfo, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, CalledVMExternalFunctions, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, UnknownData_V9PX, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, ReadDataSets, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, WriteDataSets, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, StatScopes, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DIParamInfo, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, LastCompileStatus, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, UnknownData_UZV2, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, SimulationStageMetaData, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, UnknownData_FDRQ, 0x00D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVMExecutableData, 0x00E0);
		}

		// struct FNiagaraVMExecutableDataId
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVMExecutableDataId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, CompilerVersionID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, ScriptUsageType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, UnknownData_OHOF, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, ScriptUsageTypeID, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, UnknownData_E5QM, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, BaseScriptID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, BaseScriptCompileHash, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVMExecutableDataId, 0x0048);
		}

		// struct FNiagaraModuleDependency
		TEST_METHOD(ScriptStruct__Niagara__NiagaraModuleDependency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, ScriptConstraint, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, UnknownData_3KPD, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, Description, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraModuleDependency, 0x0028);
		}

		// struct FNiagaraScriptInstanceParameterStore : public FNiagaraParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptInstanceParameterStore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptInstanceParameterStore, UnknownData_LSAW, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptInstanceParameterStore, 0x0088);
		}

		// struct FNiagaraScriptHighlight
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptHighlight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptHighlight, Color, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptHighlight, DisplayName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptHighlight, 0x0028);
		}

		// struct FNiagaraSystemCompileRequest
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemCompileRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompileRequest, UnknownData_0IY4, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompileRequest, RootObjects, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompileRequest, UnknownData_OEX4, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemCompileRequest, 0x0080);
		}

		// struct FEmitterCompiledScriptPair
		TEST_METHOD(ScriptStruct__Niagara__EmitterCompiledScriptPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterCompiledScriptPair, UnknownData_881K, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmitterCompiledScriptPair, 0x0078);
		}

		// struct FNiagaraParameterDataSetBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterDataSetBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBinding, ParameterOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBinding, DataSetComponentOffset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterDataSetBinding, 0x0008);
		}

		// struct FNiagaraParameterDataSetBindingCollection
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterDataSetBindingCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBindingCollection, FloatOffsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBindingCollection, Int32Offsets, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterDataSetBindingCollection, 0x0020);
		}

		// struct FNiagaraSystemCompiledData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemCompiledData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, InstanceParamStore, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, DataSetCompiledData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceParamsDataSetCompiledData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceParamsDataSetCompiledData, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceGlobalBinding, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceSystemBinding, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceOwnerBinding, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceEmitterBindings, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceGlobalBinding, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceSystemBinding, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceOwnerBinding, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceEmitterBindings, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemCompiledData, 0x0218);
		}

		// struct FNiagaraEmitterCompiledData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterCompiledData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, SpawnAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterSpawnIntervalVar, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterInterpSpawnStartDTVar, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterSpawnGroupVar, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterAgeVar, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterRandomSeedVar, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterInstanceSeedVar, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterTotalSpawnedParticlesVar, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, DataSetCompiledData, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterCompiledData, 0x0130);
		}

		// struct FARVideoFormat
		TEST_METHOD(ScriptStruct__AugmentedReality__ARVideoFormat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARVideoFormat, FPS, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARVideoFormat, Width, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARVideoFormat, Height, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARVideoFormat, 0x000C);
		}

		// struct FTrackedGeometryGroup
		TEST_METHOD(ScriptStruct__AugmentedReality__TrackedGeometryGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackedGeometryGroup, ARActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackedGeometryGroup, ARComponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackedGeometryGroup, TrackedGeometry, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackedGeometryGroup, 0x0018);
		}

		// struct FARSessionPayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSessionPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionPayload, ConfigFlags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionPayload, UnknownData_GHD2, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionPayload, DefaultMeshMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionPayload, DefaultWireframeMeshMaterial, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSessionPayload, 0x0018);
		}

		// struct FARGeoAnchorUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARGeoAnchorUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, UnknownData_NVH7, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, WorldTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, Longitude, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, Latitude, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, AltitudeMeters, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, AltitudeSource, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, UnknownData_C17Z, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, AnchorName, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARGeoAnchorUpdatePayload, 0x0070);
		}

		// struct FARMeshUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARMeshUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARMeshUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARMeshUpdatePayload, UnknownData_4IBB, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARMeshUpdatePayload, WorldTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARMeshUpdatePayload, ObjectClassification, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARMeshUpdatePayload, UnknownData_W4HE, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARMeshUpdatePayload, 0x0060);
		}

		// struct FARObjectUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARObjectUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARObjectUpdatePayload, WorldTransform, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARObjectUpdatePayload, 0x0030);
		}

		// struct FAREnvironmentProbeUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__AREnvironmentProbeUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAREnvironmentProbeUpdatePayload, WorldTransform, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAREnvironmentProbeUpdatePayload, 0x0030);
		}

		// struct FARPoseUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPoseUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPoseUpdatePayload, WorldTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPoseUpdatePayload, JointTransforms, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPoseUpdatePayload, 0x0040);
		}

		// struct FARQRCodeUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARQRCodeUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, UnknownData_JF6C, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, WorldTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, Extents, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, UnknownData_QWMD, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, QRCode, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARQRCodeUpdatePayload, 0x0070);
		}

		// struct FARImageUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARImageUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARImageUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARImageUpdatePayload, UnknownData_K0O9, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARImageUpdatePayload, WorldTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARImageUpdatePayload, DetectedImage, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARImageUpdatePayload, EstimatedSize, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARImageUpdatePayload, 0x0060);
		}

		// struct FARFaceUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARFaceUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFaceUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFaceUpdatePayload, LeftEyePosition, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFaceUpdatePayload, RightEyePosition, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFaceUpdatePayload, LookAtTarget, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFaceUpdatePayload, UnknownData_SJ3J, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARFaceUpdatePayload, 0x0040);
		}

		// struct FARPointUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPointUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPointUpdatePayload, UnknownData_63EZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPointUpdatePayload, 0x0001);
		}

		// struct FARPlaneUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPlaneUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, UnknownData_IC5C, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, WorldTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, Center, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, Extents, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, BoundaryVertices, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, ObjectClassification, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, UnknownData_O8EE, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPlaneUpdatePayload, 0x0080);
		}

		// struct FARSharedWorldReplicationState
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSharedWorldReplicationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSharedWorldReplicationState, PreviewImageOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSharedWorldReplicationState, ARWorldOffset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSharedWorldReplicationState, 0x0008);
		}

		// struct FARTraceResult
		TEST_METHOD(ScriptStruct__AugmentedReality__ARTraceResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, DistanceFromCamera, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, TraceChannel, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, UnknownData_QJ0J, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, LocalTransform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, TrackedGeometry, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, UnknownData_JJT3, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARTraceResult, 0x0060);
		}

		// struct FARCameraIntrinsics
		TEST_METHOD(ScriptStruct__AugmentedReality__ARCameraIntrinsics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARCameraIntrinsics, ImageResolution, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARCameraIntrinsics, FocalLength, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARCameraIntrinsics, PrincipalPoint, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARCameraIntrinsics, 0x0018);
		}

		// struct FARSkeletonDefinition
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSkeletonDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, NumJoints, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, UnknownData_4BSM, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, JointNames, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, ParentIndices, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSkeletonDefinition, 0x0028);
		}

		// struct FARPose3D
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPose3D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, SkeletonDefinition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, JointTransforms, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, IsJointTracked, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, JointTransformSpace, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, UnknownData_AEZJ, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPose3D, 0x0050);
		}

		// struct FARPose2D
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPose2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose2D, SkeletonDefinition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose2D, JointLocations, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose2D, IsJointTracked, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPose2D, 0x0048);
		}

		// struct FARSessionStatus
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSessionStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionStatus, AdditionalInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionStatus, Status, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionStatus, UnknownData_0ACJ, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSessionStatus, 0x0018);
		}

		// struct FMagicLeapPlanesQuery
		TEST_METHOD(ScriptStruct__MagicLeapPlanes__MagicLeapPlanesQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, Flags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, SearchVolume, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, MaxResults, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, MinHoleLength, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, MinPlaneArea, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, SearchVolumePosition, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, SearchVolumeOrientation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, SearchVolumeExtents, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, SimilarityThreshold, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, bSearchVolumeTrackingSpace, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, bResultTrackingSpace, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, UnknownData_9243, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapPlanesQuery, 0x0060);
		}

		// struct FMagicLeapPolygon
		TEST_METHOD(ScriptStruct__MagicLeapPlanes__MagicLeapPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPolygon, Vertices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapPolygon, 0x0010);
		}

		// struct FMagicLeapPlaneBoundary
		TEST_METHOD(ScriptStruct__MagicLeapPlanes__MagicLeapPlaneBoundary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneBoundary, Polygon, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneBoundary, Holes, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapPlaneBoundary, 0x0020);
		}

		// struct FMagicLeapPlaneBoundaries
		TEST_METHOD(ScriptStruct__MagicLeapPlanes__MagicLeapPlaneBoundaries)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneBoundaries, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneBoundaries, Boundaries, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapPlaneBoundaries, 0x0020);
		}

		// struct FMagicLeapPlaneResult
		TEST_METHOD(ScriptStruct__MagicLeapPlanes__MagicLeapPlaneResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, PlanePosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, PlaneOrientation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, ContentOrientation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, PlaneDimensions, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, UnknownData_0EMH, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, PlaneFlags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, ID, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, InnerID, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapPlaneResult, 0x0060);
		}

		// struct FCommerceError
		TEST_METHOD(ScriptStruct__Frontiers__CommerceError)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCommerceError, Code, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCommerceError, UnknownData_IV8C, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCommerceError, Message, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCommerceError, Detail, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCommerceError, 0x0028);
		}

		// struct FCommerceBalance
		TEST_METHOD(ScriptStruct__Frontiers__CommerceBalance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCommerceBalance, CashReal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCommerceBalance, CashBonus, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCommerceBalance, CashTotal, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCommerceBalance, 0x000C);
		}

		// struct FCommerceProduct
		TEST_METHOD(ScriptStruct__Frontiers__CommerceProduct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCommerceProduct, TransactionId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCommerceProduct, Sku, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCommerceProduct, PurchaseDate, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCommerceProduct, Claimed, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCommerceProduct, UnknownData_QMLK, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCommerceProduct, 0x0038);
		}

		// struct FCommerceResponseData
		TEST_METHOD(ScriptStruct__Frontiers__CommerceResponseData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCommerceResponseData, Wallet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCommerceResponseData, UnknownData_GI94, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCommerceResponseData, Purchases, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCommerceResponseData, 0x0020);
		}

		// struct FCommerceResponse
		TEST_METHOD(ScriptStruct__Frontiers__CommerceResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCommerceResponse, Status, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCommerceResponse, Error, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCommerceResponse, Data, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCommerceResponse, 0x0058);
		}

		// struct FUnclaimedReward
		TEST_METHOD(ScriptStruct__Frontiers__UnclaimedReward)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnclaimedReward, UnknownData_0YNZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUnclaimedReward, 0x0018);
		}

		// struct FTLTableRowBase : public FTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__TLTableRowBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLTableRowBase, Notes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTLTableRowBase, 0x0018);
		}

		// struct FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__TLDataTableRowHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLDataTableRowHandle, UnknownData_7H3D, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLDataTableRowHandle, RowName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTLDataTableRowHandle, 0x0010);
		}

		// struct FCatalogTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__CatalogTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCatalogTableRowHandle, 0x0010);
		}

		// struct FContractData : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__ContractData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FContractData, UnknownData_OJZ8, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContractData, DisplayName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContractData, Description, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContractData, LockedDescription, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContractData, WelcomeText, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContractData, NonLoopedLevels, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContractData, LoopedLevels, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContractData, LevelUpSkill, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContractData, PaidStoreItem, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContractData, ContractStorePreview, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContractData, BannerImage, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContractData, ContractPickerBackground, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContractData, bIsDefaultContract, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContractData, bIsEnabled, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContractData, bIsActive, 0x015A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContractData, UnknownData_4U09, 0x015B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FContractData, 0x0160);
		}

		// struct FTLText
		TEST_METHOD(ScriptStruct__Frontiers__TLText)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLText, Text, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTLText, 0x0018);
		}

		// struct FItemTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__ItemTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemTableRowHandle, 0x0010);
		}

		// struct FFortPropTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__FortPropTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFortPropTableRowHandle, 0x0010);
		}

		// struct FFortPropSpawnTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__FortPropSpawnTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFortPropSpawnTableRowHandle, 0x0010);
		}

		// struct FTraitsTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__TraitsTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTraitsTableRowHandle, 0x0010);
		}

		// struct FCurrencyTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__CurrencyTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurrencyTableRowHandle, 0x0010);
		}

		// struct FMinionTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__MinionTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMinionTableRowHandle, 0x0010);
		}

		// struct FMinionSpawnTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__MinionSpawnTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMinionSpawnTableRowHandle, 0x0010);
		}

		// struct FItemSpawnTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__ItemSpawnTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemSpawnTableRowHandle, 0x0010);
		}

		// struct FAffixSpawnTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__AffixSpawnTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAffixSpawnTableRowHandle, 0x0010);
		}

		// struct FItemModifyTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__ItemModifyTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemModifyTableRowHandle, 0x0010);
		}

		// struct FCraftingRecipeUnit : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__CraftingRecipeUnit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, Type, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, UnknownData_RKTR, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, Item, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, Prop, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, PropSpawn, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, Trait, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, Currency, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, Pet, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, PetSpawn, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, Spawn, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, AffixSpawn, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, ItemModifySpawn, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, SpawnLevelFrom, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, UnknownData_SLEX, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, SpawnLevelFixed, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, SpawnLevelAdd, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, SpawnLevelMult, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, Query, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, UnknownData_7A7N, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, RequiredItemLevel, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, Tags, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, TagQuery, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, Quantity, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, bDropOnGround, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, bHidden, 0x0145);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, UnknownData_ZD5H, 0x0146);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, TraitParameterRowName, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, TraitParameterSource, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, TraitLimitBehavior, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, bLimitedTime, 0x0152);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, bApplyToFortProp, 0x0153);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, UnknownData_0KYL, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, StatusEffectClass, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, StatusEffectDuration, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipeUnit, UnknownData_38BT, 0x0184);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCraftingRecipeUnit, 0x01F0);
		}

		// struct FCraftingRecipe
		TEST_METHOD(ScriptStruct__Frontiers__CraftingRecipe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipe, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipe, Version, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipe, UnknownData_SLR5, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipe, Description, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipe, DescriptionLong, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipe, DisplayName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipe, bUseSortIndex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipe, UnknownData_LGYE, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipe, SortIndex, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipe, UnknownData_4UP1, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipe, Category, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipe, Rarity, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipe, CraftingTimeSeconds, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipe, Costs, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipe, Products, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipe, Props, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipe, bRequiresUnlock, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipe, UnknownData_IA3A, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRecipe, ChildRecipes, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCraftingRecipe, 0x00C0);
		}

		// struct FInventoryIdsToPay
		TEST_METHOD(ScriptStruct__Frontiers__InventoryIdsToPay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryIdsToPay, CostIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryIdsToPay, UnknownData_YYRE, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryIdsToPay, InventoryIds, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInventoryIdsToPay, 0x0018);
		}

		// struct FTraitKey
		TEST_METHOD(ScriptStruct__Frontiers__TraitKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitKey, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTraitKey, 0x0008);
		}

		// struct FTraitPair
		TEST_METHOD(ScriptStruct__Frontiers__TraitPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitPair, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitPair, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitPair, UnknownData_7CMS, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTraitPair, 0x0010);
		}

		// struct FInventoryEntry
		TEST_METHOD(ScriptStruct__Frontiers__InventoryEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntry, UnknownData_NGA8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntry, InventoryEntryId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntry, InventoryEntryGuid, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntry, UnknownData_3KO6, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInventoryEntry, 0x0020);
		}

		// struct FAppliedAffix
		TEST_METHOD(ScriptStruct__Frontiers__AppliedAffix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppliedAffix, RowName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppliedAffix, AppliedWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppliedAffix, Source, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppliedAffix, UnknownData_13TL, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAppliedAffix, 0x0010);
		}

		// struct FInventoryItemEntry : public FInventoryEntry
		TEST_METHOD(ScriptStruct__Frontiers__InventoryItemEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryItemEntry, UnknownData_NKKN, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryItemEntry, Affixes, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryItemEntry, bIsEquipped, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryItemEntry, UnknownData_KXWU, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryItemEntry, bIsNewThisSession, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryItemEntry, UnknownData_HMSM, 0x0093);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryItemEntry, SpokeTag, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryItemEntry, StackSize, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryItemEntry, Level, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryItemEntry, ChallengeLevel, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryItemEntry, DyeRowIndex, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryItemEntry, ItemRowIndex, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryItemEntry, TransmogItemRowIndex, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryItemEntry, TransmogDyeRowIndex, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryItemEntry, TransmogClassTag, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInventoryItemEntry, 0x00C8);
		}

		// struct FCraftingCostOutput
		TEST_METHOD(ScriptStruct__Frontiers__CraftingCostOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingCostOutput, CostIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingCostOutput, UnknownData_8PQB, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingCostOutput, Trait, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingCostOutput, CostType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingCostOutput, UnknownData_O96I, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingCostOutput, InventoryContainerClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingCostOutput, Item, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCraftingCostOutput, 0x00F8);
		}

		// struct FCraftingProductOutput
		TEST_METHOD(ScriptStruct__Frontiers__CraftingProductOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingProductOutput, Trait, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingProductOutput, InventoryEntryIds, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingProductOutput, FortStashRowNames, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingProductOutput, AffixesApplied, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingProductOutput, AffixesAppliedToInventoryId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingProductOutput, UnknownData_QBZ4, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingProductOutput, ModifiedItemIds, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingProductOutput, PremodifiedItems, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingProductOutput, bHidden, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingProductOutput, UnknownData_QWYH, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCraftingProductOutput, 0x0070);
		}

		// struct FCraftingRequest
		TEST_METHOD(ScriptStruct__Frontiers__CraftingRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRequest, RecipeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRequest, SourceProp, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRequest, SourceVendor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRequest, CraftCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRequest, UnknownData_RIRM, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRequest, InventoryIdsToPay, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRequest, SpokeRowName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRequest, bPrivilegedRequest, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRequest, UnknownData_U9GM, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRequest, PaidCosts, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRequest, Outputs, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRequest, ConfirmationType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRequest, bShowErrorModals, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingRequest, UnknownData_QXUM, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCraftingRequest, 0x0078);
		}

		// struct FCraftingQueueEntry
		TEST_METHOD(ScriptStruct__Frontiers__CraftingQueueEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingQueueEntry, StartTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingQueueEntry, FinishTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingQueueEntry, Request, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingQueueEntry, JobId, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingQueueEntry, CraftingFinishedTimer, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCraftingQueueEntry, 0x00A0);
		}

		// struct FCraftingQueue
		TEST_METHOD(ScriptStruct__Frontiers__CraftingQueue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingQueue, Entries, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingQueue, MaxNumSlots, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingQueue, UnknownData_3J1E, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCraftingQueue, 0x0018);
		}

		// struct FCraftableTableRowBase : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__CraftableTableRowBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCraftableTableRowBase, 0x0018);
		}

		// struct FCurrencyData : public FCraftableTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__CurrencyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyData, UnknownData_TJP5, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyData, bShouldDrop, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyData, bShowInResources, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyData, bSavePerAccount, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyData, UnknownData_M8QT, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyData, DisplayName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyData, Description, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyData, IconText, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyData, PickUpUIDuration, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyData, UnknownData_NBJE, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyData, Icon, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyData, Items, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyData, ValueMin, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyData, ValueMax, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyData, bAllowAddToAllCheat, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyData, UnknownData_8JFN, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyData, Tag, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyData, UnknownData_4RVO, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyData, QualityTags, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyData, TypeText, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyData, bUseItemFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyData, UnknownData_DRNO, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyData, PreviewActor, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyData, UnknownData_JZDT, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurrencyData, 0x0140);
		}

		// struct FCurrencyItemDropData
		TEST_METHOD(ScriptStruct__Frontiers__CurrencyItemDropData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyItemDropData, ItemRow, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyItemDropData, Value, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyItemDropData, UnknownData_TG6D, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurrencyItemDropData, 0x0018);
		}

		// struct FStaticDataVersion
		TEST_METHOD(ScriptStruct__Frontiers__StaticDataVersion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticDataVersion, Version, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticDataVersion, 0x0010);
		}

		// struct FDeathOptionCost
		TEST_METHOD(ScriptStruct__Frontiers__DeathOptionCost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeathOptionCost, DeathReviveOption, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeathOptionCost, UnknownData_WW2W, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeathOptionCost, PercentOfCurrentGold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeathOptionCost, MinimumCost, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDeathOptionCost, 0x000C);
		}

		// struct FQuestObjectTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__QuestObjectTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuestObjectTableRowHandle, 0x0010);
		}

		// struct FDialogueContextEntry
		TEST_METHOD(ScriptStruct__Frontiers__DialogueContextEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextEntry, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextEntry, UnknownData_D151, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextEntry, QuestId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextEntry, TaskId, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueContextEntry, 0x0014);
		}

		// struct FDialogueData : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__DialogueData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueData, UnknownData_2ZZ4, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueData, Speakers, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueData, Type, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueData, UnknownData_LRLP, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueData, TitleText, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueData, Text, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueData, ButtonText, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueData, Voiceover, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueData, AudioTableEntry, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueData, ContextType1, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueData, UnknownData_E3PZ, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueData, ContextParam1, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueData, ContextType2, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueData, UnknownData_YL9X, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueData, ContextParam2, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueData, ContextType3, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueData, UnknownData_WODP, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueData, ContextParam3, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueData, IconPortraitTag, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueData, UnknownData_Q8CH, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueData, Tags, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueData, Weight, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueData, UnknownData_633R, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueData, ContextEntries, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueData, bDefaultSet, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueData, UnknownData_Y7LS, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueData, 0x0118);
		}

		// struct FProbabilisticTagSet
		TEST_METHOD(ScriptStruct__Frontiers__ProbabilisticTagSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProbabilisticTagSet, Map, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProbabilisticTagSet, 0x0050);
		}

		// struct FDifficultyData : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__DifficultyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDifficultyData, UnknownData_X40G, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDifficultyData, Index, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDifficultyData, UnknownData_R61B, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDifficultyData, DisplayName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDifficultyData, Description, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDifficultyData, DeathMessage, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDifficultyData, AvailableAtLevel, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDifficultyData, MonsterHealthCurve, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDifficultyData, MonsterDamageCurve, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDifficultyData, PlayerDamage, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDifficultyData, PlayerVsChampionDamage, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDifficultyData, PlayerVsBossDamage, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDifficultyData, MonsterDamage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDifficultyData, ChampionDamage, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDifficultyData, BossDamage, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDifficultyData, bBossesResetOnDefeat, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDifficultyData, UnknownData_PC34, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDifficultyData, PlayerCountBonusInMonsterSpawn, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDifficultyData, UnknownData_G9QO, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDifficultyData, MonsterLuck, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDifficultyData, MonsterMoveSpeedBonus, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDifficultyData, bShowInHUD, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDifficultyData, UnknownData_5YKM, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDifficultyData, ShieldIcon, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDifficultyData, HighlightShieldIcon, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDifficultyData, FrameIcon, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDifficultyData, ShoulderIcon, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDifficultyData, BackgroundIcon, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDifficultyData, DifficultyColor, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDifficultyData, StatusEffectClass, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDifficultyData, TraitString, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDifficultyData, MonsterTraitString, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDifficultyData, UnknownData_EF7Q, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDifficultyData, 0x0220);
		}

		// struct FResistanceEffect
		TEST_METHOD(ScriptStruct__Frontiers__ResistanceEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FResistanceEffect, StatusEffect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResistanceEffect, ResistanceEffect, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResistanceEffect, Duration, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResistanceEffect, UnknownData_2YQE, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FResistanceEffect, 0x0018);
		}

		// struct FDRLGLevelInstance
		TEST_METHOD(ScriptStruct__Frontiers__DRLGLevelInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDRLGLevelInstance, InstanceId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDRLGLevelInstance, Origin, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDRLGLevelInstance, WorldMin, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDRLGLevelInstance, WorldMax, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDRLGLevelInstance, YawRotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDRLGLevelInstance, UnknownData_L8HA, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDRLGLevelInstance, LevelProxy, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDRLGLevelInstance, LevelAsset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDRLGLevelInstance, Name, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDRLGLevelInstance, 0x0068);
		}

		// struct FDRLGLevelProxyEntry
		TEST_METHOD(ScriptStruct__Frontiers__DRLGLevelProxyEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDRLGLevelProxyEntry, WorldAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDRLGLevelProxyEntry, Weight, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDRLGLevelProxyEntry, UnknownData_2E0D, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDRLGLevelProxyEntry, 0x0030);
		}

		// struct FDRLGSubLevelData
		TEST_METHOD(ScriptStruct__Frontiers__DRLGSubLevelData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDRLGSubLevelData, LevelProxy, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDRLGSubLevelData, UnknownData_S3KO, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDRLGSubLevelData, YawRotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDRLGSubLevelData, UnknownData_M4FX, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDRLGSubLevelData, Origin, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDRLGSubLevelData, MinBounds, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDRLGSubLevelData, MaxBounds, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDRLGSubLevelData, bAnyRotation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDRLGSubLevelData, UnknownData_WKD5, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDRLGSubLevelData, 0x0040);
		}

		// struct FDRLSubLevelSet
		TEST_METHOD(ScriptStruct__Frontiers__DRLSubLevelSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDRLSubLevelSet, Levels, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDRLSubLevelSet, Weight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDRLSubLevelSet, UnknownData_KZ7Q, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDRLSubLevelSet, 0x0018);
		}

		// struct FDRLGRuleData
		TEST_METHOD(ScriptStruct__Frontiers__DRLGRuleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDRLGRuleData, RuleName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDRLGRuleData, Replacements, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDRLGRuleData, Pattern, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDRLGRuleData, bIsPurelyAdditive, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDRLGRuleData, UnknownData_QDOS, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDRLGRuleData, 0x0030);
		}

		// struct FDRLGRules
		TEST_METHOD(ScriptStruct__Frontiers__DRLGRules)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDRLGRules, Rules, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDRLGRules, 0x0010);
		}

		// struct FMapWorksTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__MapWorksTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMapWorksTableRowHandle, 0x0010);
		}

		// struct FDungeonChallengeData : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__DungeonChallengeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonChallengeData, UnknownData_UI7I, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonChallengeData, MapworksAffixRows, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonChallengeData, NumChallenges, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonChallengeData, bIsBonusCluster, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonChallengeData, UnknownData_QW1G, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDungeonChallengeData, 0x0040);
		}

		// struct FSpawnDataBase : public FCraftableTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__SpawnDataBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, UnknownData_RWH7, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, RowType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, UnknownData_ZHXV, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, NoPickWeight, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, MinLevel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, bErrorIfOutputIsEmpty, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, bRetryIfPickIsEmpty, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, EntryType1, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, UnknownData_MS4F, 0x002F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, Entry1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, WeightOrCount1, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, EntryType2, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, UnknownData_LBV3, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, Entry2, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, WeightOrCount2, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, EntryType3, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, UnknownData_N34I, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, Entry3, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, WeightOrCount3, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, EntryType4, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, UnknownData_3IVT, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, Entry4, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, WeightOrCount4, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, EntryType5, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, UnknownData_O7H1, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, Entry5, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, WeightOrCount5, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, EntryType6, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, UnknownData_685E, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, Entry6, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, WeightOrCount6, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, EntryType7, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, UnknownData_FE6X, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, Entry7, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, WeightOrCount7, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, EntryType8, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, UnknownData_1M0Z, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, Entry8, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, WeightOrCount8, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, EntryType9, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, UnknownData_CHBD, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, Entry9, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, WeightOrCount9, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, EntryType10, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, UnknownData_J5QL, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, Entry10, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, WeightOrCount10, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, EntryType11, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, UnknownData_YYW9, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, Entry11, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, WeightOrCount11, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, EntryType12, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, UnknownData_ZTJJ, 0x0135);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, Entry12, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, WeightOrCount12, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, DataCurves, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, UnknownData_BYT1, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, Entries, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataBase, UnknownData_A6ZN, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpawnDataBase, 0x0178);
		}

		// struct FDungeonSpawnData : public FSpawnDataBase
		TEST_METHOD(ScriptStruct__Frontiers__DungeonSpawnData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDungeonSpawnData, 0x0178);
		}

		// struct FBossTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__BossTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBossTableRowHandle, 0x0010);
		}

		// struct FDungeonChallengeSelection
		TEST_METHOD(ScriptStruct__Frontiers__DungeonChallengeSelection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonChallengeSelection, ChallengeLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonChallengeSelection, Quality, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonChallengeSelection, UnknownData_GKX8, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonChallengeSelection, StartingAreaText, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonChallengeSelection, PrimaryElementTag, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonChallengeSelection, MonsterPopulationTag, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonChallengeSelection, BossRow, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDungeonChallengeSelection, 0x0048);
		}

		// struct FGradientData
		TEST_METHOD(ScriptStruct__Frontiers__GradientData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGradientData, Dark, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGradientData, Medium, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGradientData, Light, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGradientData, 0x0078);
		}

		// struct FDyeData : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__DyeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDyeData, DisplayName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDyeData, Type, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDyeData, UnknownData_UG5E, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDyeData, Dye, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDyeData, SkinHairGradient, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDyeData, Icon, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDyeData, MinLevel, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDyeData, MaxLevel, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDyeData, ItemHasAnyTags, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDyeData, PlayerClassTags, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDyeData, bIsPlayerDye, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDyeData, bHideInDyeList, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDyeData, UnknownData_091I, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDyeData, DropWeight, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDyeData, AreaTags, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDyeData, MainRowName, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDyeData, UnknownData_R6Y2, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDyeData, 0x0110);
		}

		// struct FEffectDefinition
		TEST_METHOD(ScriptStruct__Frontiers__EffectDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, Tag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, ParticleSystem, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, bUseCensoredParticle, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, UnknownData_DX9E, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, CensoredParticleSystem, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, SoundEvent, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, AudioTableEntry, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, TLEffect, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, bUseCensoredTLEffect, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, UnknownData_WXCW, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, CensoredTLEffect, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, bAttach, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, AttachLocationType, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, UnknownData_A6DB, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, SocketName, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, bSpawnAtBase, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, UnknownData_AN9R, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, LocationOffset, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, RotationOffset, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, bRotateInDirectionOfAttack, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, bAbsoluteRotation, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, UnknownData_ALXL, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, ScaleMultiplier, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, ScaleMethod, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, bUseLegacyScaling, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, UnknownData_F7UD, 0x009A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, TranslucencySortPriorityToAdd, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, bInitializedWithDefaultSettings, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, UnknownData_XUK6, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, bRandomizeTLEffectLifespan, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, UnknownData_WCNX, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, MinTLEffectLifespan, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, MaxTLEffectLifespan, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectDefinition, UnknownData_LHE4, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEffectDefinition, 0x00D0);
		}

		// struct FEffectCollection
		TEST_METHOD(ScriptStruct__Frontiers__EffectCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectCollection, Effects, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectCollection, DefaultSetting, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectCollection, UnknownData_K0HN, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEffectCollection, 0x0018);
		}

		// struct FWeaponElementalEffect
		TEST_METHOD(ScriptStruct__Frontiers__WeaponElementalEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponElementalEffect, SocketName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponElementalEffect, AffixEffect, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeaponElementalEffect, 0x0010);
		}

		// struct FWeaponAffixEffect
		TEST_METHOD(ScriptStruct__Frontiers__WeaponAffixEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponAffixEffect, FxType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponAffixEffect, UnknownData_AJQX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponAffixEffect, Effect, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeaponAffixEffect, 0x0018);
		}

		// struct FSkillsTabTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__SkillsTabTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillsTabTableRowHandle, 0x0010);
		}

		// struct FIconAsset
		TEST_METHOD(ScriptStruct__Frontiers__IconAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIconAsset, bUseAutoGeneratedIconMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIconAsset, UnknownData_T7OU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIconAsset, Texture, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIconAsset, TexturePtr, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIconAsset, 0x0038);
		}

		// struct FEmberWeaponData : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__EmberWeaponData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmberWeaponData, UnknownData_JUNQ, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmberWeaponData, PlayTestNPCsWeight, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmberWeaponData, ChargeTimeSeconds, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmberWeaponData, DrainTimeSeconds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmberWeaponData, UnknownData_IIPS, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmberWeaponData, SkillTab, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmberWeaponData, SkillTag, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmberWeaponData, CharacterCreateIcon, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmberWeaponData, bEnabled, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmberWeaponData, UnknownData_RXVB, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmberWeaponData, 0x0088);
		}

		// struct FCatalogArray
		TEST_METHOD(ScriptStruct__Frontiers__CatalogArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCatalogArray, TargetPlatform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCatalogArray, UnknownData_R5CV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCatalogArray, Exclusives, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCatalogArray, 0x0018);
		}

		// struct FHideableObjectMaterials
		TEST_METHOD(ScriptStruct__Frontiers__HideableObjectMaterials)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHideableObjectMaterials, StaticMeshComponent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHideableObjectMaterials, OpaqueMaterials, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHideableObjectMaterials, TranslucentMaterials, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHideableObjectMaterials, 0x0028);
		}

		// struct FReportUserContext
		TEST_METHOD(ScriptStruct__Frontiers__ReportUserContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReportUserContext, TlAccountID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReportUserContext, PlatformAccountName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReportUserContext, PlatformAccountId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReportUserContext, PlatformName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReportUserContext, CharacterID, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReportUserContext, CharacterName, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReportUserContext, 0x0060);
		}

		// struct FFoliageSoundData : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__FoliageSoundData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageSoundData, UnknownData_PCSO, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageSoundData, StaticMesh, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageSoundData, FMODEventReference, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageSoundData, 0x0060);
		}

		// struct FFootstepEntry
		TEST_METHOD(ScriptStruct__Frontiers__FootstepEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFootstepEntry, SurfaceType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFootstepEntry, UnknownData_RY7O, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFootstepEntry, FootstepSound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFootstepEntry, 0x0020);
		}

		// struct FFortPropToPlaceData
		TEST_METHOD(ScriptStruct__Frontiers__FortPropToPlaceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropToPlaceData, Prop, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropToPlaceData, bOriginalLocationSet, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropToPlaceData, UnknownData_DOJI, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropToPlaceData, OriginalLocation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropToPlaceData, OriginalRotationDegrees, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropToPlaceData, UnknownData_BEN8, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFortPropToPlaceData, 0x0028);
		}

		// struct FFortPropGroupTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__FortPropGroupTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFortPropGroupTableRowHandle, 0x0010);
		}

		// struct FFortPropData : public FCraftableTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__FortPropData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, Group, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, SubGroup, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, MaxCount, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, UnknownData_5WGC, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, DisplayName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, Description, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, Icon, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, bIsEnabled, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, bCanCraftDirectly, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, bRequiresUnlock, 0x009A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, bVisibleWhenLocked, 0x009B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, bRequired, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, UnknownData_W69K, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, Prop, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, Vendor, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, bAffectsGameplay, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, UnknownData_NO4S, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, StatusEffect, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, GameplayTagContainer, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, UpgradeTo, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, bShowCraftingConfirmation, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, bShowStorageTab, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, PropType, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, UnknownData_GQRQ, 0x012B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, CustomCraftingVerb, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, CustomCraftingUI, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, bCanCraftInOtherPlayersForts, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, UnknownData_04PW, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, PropComplexity, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, UpgradeChainIndex, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, DropWeight, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, UnknownData_46OL, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, QualityTags, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, CostType1, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, CostQuery1, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, UnknownData_ID6L, 0x01AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, Cost1, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, CostQuantity1, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, CostText1, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, CostIcon1, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, bApplyCost1ToFortProp, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, CostType2, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, CostQuery2, 0x01FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, UnknownData_MJLK, 0x01FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, Cost2, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, CostQuantity2, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, CostText2, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, CostIcon2, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, bApplyCost2ToFortProp, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropData, UnknownData_WSQT, 0x0249);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFortPropData, 0x0250);
		}

		// struct FFortPropGroupData : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__FortPropGroupData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropGroupData, DisplayName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropGroupData, MaxCount, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropGroupData, SortOrder, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropGroupData, UnknownData_U8AY, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFortPropGroupData, 0x0040);
		}

		// struct FFortPropSpawnData : public FSpawnDataBase
		TEST_METHOD(ScriptStruct__Frontiers__FortPropSpawnData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFortPropSpawnData, 0x0178);
		}

		// struct FSpawnPickerEntryBase
		TEST_METHOD(ScriptStruct__Frontiers__SpawnPickerEntryBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnPickerEntryBase, GameplayTagFilter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnPickerEntryBase, Weight, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnPickerEntryBase, UnknownData_WL2P, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpawnPickerEntryBase, 0x0028);
		}

		// struct FFortPropSpawnEntry : public FSpawnPickerEntryBase
		TEST_METHOD(ScriptStruct__Frontiers__FortPropSpawnEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortPropSpawnEntry, FortPropSpawnRow, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFortPropSpawnEntry, 0x0038);
		}

		// struct FPersistenceAppliedAffixEntry
		TEST_METHOD(ScriptStruct__Frontiers__PersistenceAppliedAffixEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceAppliedAffixEntry, AffixName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceAppliedAffixEntry, AppliedWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceAppliedAffixEntry, Source, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceAppliedAffixEntry, UnknownData_XQL3, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersistenceAppliedAffixEntry, 0x0018);
		}

		// struct FPersistenceTraitEntry
		TEST_METHOD(ScriptStruct__Frontiers__PersistenceTraitEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceTraitEntry, TraitName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceTraitEntry, PrimarySlot, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceTraitEntry, SecondarySlot, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceTraitEntry, Param, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceTraitEntry, Value, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceTraitEntry, UnknownData_KW5R, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersistenceTraitEntry, 0x0040);
		}

		// struct FPersistenceInventoryItemEntry
		TEST_METHOD(ScriptStruct__Frontiers__PersistenceInventoryItemEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceInventoryItemEntry, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceInventoryItemEntry, ItemDataRow, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceInventoryItemEntry, Level, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceInventoryItemEntry, UnknownData_LCJM, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceInventoryItemEntry, DyeDataRow, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceInventoryItemEntry, TransmogItemDataRow, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceInventoryItemEntry, TransmogDyeDataRow, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceInventoryItemEntry, TransmogClass, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceInventoryItemEntry, Spoke, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceInventoryItemEntry, Affixes, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceInventoryItemEntry, StoredTraits, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceInventoryItemEntry, Quantity, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceInventoryItemEntry, ChallengeLevel, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceInventoryItemEntry, LastSkillRespecTime, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersistenceInventoryItemEntry, 0x00A8);
		}

		// struct FPersistenceInventory
		TEST_METHOD(ScriptStruct__Frontiers__PersistenceInventory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceInventory, Entries, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceInventory, CurrentWeaponSuite, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceInventory, UnknownData_SMD9, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceInventory, DataVersion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceInventory, UnknownData_2JVR, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersistenceInventory, 0x0030);
		}

		// struct FFortInventoryEntry
		TEST_METHOD(ScriptStruct__Frontiers__FortInventoryEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoryEntry, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoryEntry, RowName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoryEntry, RelativePosition, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoryEntry, Extents, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoryEntry, Rotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoryEntry, UnknownData_9A9R, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoryEntry, PropRotationDegrees, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoryEntry, ItemInventory, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoryEntry, Traits, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoryEntry, AssignedPetGuid, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoryEntry, AssignedPetRow, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFortInventoryEntry, 0x0090);
		}

		// struct FDefaultFortData
		TEST_METHOD(ScriptStruct__Frontiers__DefaultFortData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDefaultFortData, InventoryEntries, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDefaultFortData, 0x0010);
		}

		// struct FFortInventoryResponse
		TEST_METHOD(ScriptStruct__Frontiers__FortInventoryResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoryResponse, InventoryEntries, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoryResponse, DataVersion, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFortInventoryResponse, 0x0020);
		}

		// struct FFortBothInventoriesResponse
		TEST_METHOD(ScriptStruct__Frontiers__FortBothInventoriesResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortBothInventoriesResponse, Active, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortBothInventoriesResponse, Stash, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFortBothInventoriesResponse, 0x0040);
		}

		// struct FGeneratedIcon
		TEST_METHOD(ScriptStruct__Frontiers__GeneratedIcon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedIcon, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedIcon, UnknownData_8VQJ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeneratedIcon, 0x0010);
		}

		// struct FPendingGeneratedIcon
		TEST_METHOD(ScriptStruct__Frontiers__PendingGeneratedIcon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPendingGeneratedIcon, ItemClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPendingGeneratedIcon, UnknownData_K3LX, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPendingGeneratedIcon, 0x0120);
		}

		// struct FGradientColorSample
		TEST_METHOD(ScriptStruct__Frontiers__GradientColorSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGradientColorSample, GradientColor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGradientColorSample, ColorPosition, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGradientColorSample, bIsDirty, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGradientColorSample, UnknownData_WFB1, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGradientColorSample, 0x0018);
		}

		// struct FGradientAlphaSample
		TEST_METHOD(ScriptStruct__Frontiers__GradientAlphaSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGradientAlphaSample, Alpha, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGradientAlphaSample, AlphaPosition, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGradientAlphaSample, 0x0008);
		}

		// struct FGradientColors
		TEST_METHOD(ScriptStruct__Frontiers__GradientColors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGradientColors, ColorGradientArray, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGradientColors, AlphaGradientArray, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGradientColors, Gamma, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGradientColors, Saturation, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGradientColors, bUseGradientTexture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGradientColors, UnknownData_X2P3, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGradientColors, GradientTextureOverride, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGradientColors, GradientBuiderMatInst, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGradientColors, PassThruMatInst, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGradientColors, 0x0048);
		}

		// struct FMaterialArray
		TEST_METHOD(ScriptStruct__Frontiers__MaterialArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialArray, MaterialsAssigned, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialArray, DynamicInstanceMat, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialArray, 0x0020);
		}

		// struct FMeshMaterialInfo
		TEST_METHOD(ScriptStruct__Frontiers__MeshMaterialInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMaterialInfo, OriginalMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMaterialInfo, HighlightMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMaterialInfo, DeactivatedMaterial, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMaterialInfo, MeshName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMaterialInfo, MatIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMaterialInfo, UnknownData_EOYT, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshMaterialInfo, 0x0030);
		}

		// struct FMeshMaterials
		TEST_METHOD(ScriptStruct__Frontiers__MeshMaterials)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMaterials, Materials, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshMaterials, 0x0010);
		}

		// struct FInteractionFilter
		TEST_METHOD(ScriptStruct__Frontiers__InteractionFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionFilter, RequireAll, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionFilter, RequireAny, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionFilter, ExcludeAny, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionFilter, RequiredStatusEffects, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionFilter, ExcludeStatusEffects, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionFilter, RequiredStatusEffectGameplayTags, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionFilter, ExcludedStatusEffectGameplayTags, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionFilter, bSelf, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionFilter, bAffectsOwner, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionFilter, bRequireSelectable, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionFilter, Allegiance, 0x00A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionFilter, LifeStatus, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionFilter, UnknownData_SKJI, 0x00A5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInteractionFilter, 0x00F0);
		}

		// struct FSetBonusTrait
		TEST_METHOD(ScriptStruct__Frontiers__SetBonusTrait)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSetBonusTrait, RequiredTag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSetBonusTrait, RequiredTagCount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSetBonusTrait, UnknownData_YNNV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSetBonusTrait, TraitPair, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSetBonusTrait, 0x0020);
		}

		// struct FInventoryEntryFortProp : public FInventoryEntry
		TEST_METHOD(ScriptStruct__Frontiers__InventoryEntryFortProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntryFortProp, RelativePosition, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntryFortProp, RotationDegrees, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntryFortProp, Extents, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntryFortProp, UnknownData_CSM5, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntryFortProp, Traits, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntryFortProp, SavedTraits, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntryFortProp, AssignedPetGuid, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntryFortProp, AssignedPetRow, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntryFortProp, ItemInventory, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntryFortProp, UnknownData_PHI9, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntryFortProp, PropRowIndex, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntryFortProp, UnknownData_O73D, 0x00BA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInventoryEntryFortProp, 0x00C0);
		}

		// struct FSkillAssignedEntry
		TEST_METHOD(ScriptStruct__Frontiers__SkillAssignedEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillAssignedEntry, Set, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillAssignedEntry, Slot, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillAssignedEntry, UnknownData_TWKR, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillAssignedEntry, RowName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillAssignedEntry, 0x000C);
		}

		// struct FSkillLevelEntry
		TEST_METHOD(ScriptStruct__Frontiers__SkillLevelEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillLevelEntry, SkillRowName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillLevelEntry, Level, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillLevelEntry, 0x000C);
		}

		// struct FPersistencePetSkills
		TEST_METHOD(ScriptStruct__Frontiers__PersistencePetSkills)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistencePetSkills, Entries, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistencePetSkills, Levels, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersistencePetSkills, 0x0020);
		}

		// struct FPersistencePetData
		TEST_METHOD(ScriptStruct__Frontiers__PersistencePetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistencePetData, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistencePetData, MinionRowName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistencePetData, PetName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistencePetData, Skills, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersistencePetData, 0x0048);
		}

		// struct FInventoryEntryInbox : public FInventoryEntry
		TEST_METHOD(ScriptStruct__Frontiers__InventoryEntryInbox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntryInbox, RecipientId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntryInbox, Timestamp, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntryInbox, ExpirationTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntryInbox, Subject, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntryInbox, Items, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntryInbox, pets, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntryInbox, FortProps, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntryInbox, Traits, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntryInbox, Purchase, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInventoryEntryInbox, 0x00D8);
		}

		// struct FUnixNanoTime
		TEST_METHOD(ScriptStruct__Frontiers__UnixNanoTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnixNanoTime, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUnixNanoTime, 0x0008);
		}

		// struct FInventoryStatusEffectEntry : public FInventoryEntry
		TEST_METHOD(ScriptStruct__Frontiers__InventoryStatusEffectEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryStatusEffectEntry, StatusEffectClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryStatusEffectEntry, Inflictor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryStatusEffectEntry, UnknownData_QTSN, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryStatusEffectEntry, Skill, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryStatusEffectEntry, StartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryStatusEffectEntry, ExpireTime, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryStatusEffectEntry, SkillInstanceId, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryStatusEffectEntry, UnknownData_JTP0, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryStatusEffectEntry, InstigatorTraitSnapshot, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryStatusEffectEntry, BlueprintRelevantInstigatorTraits, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInventoryStatusEffectEntry, 0x0070);
		}

		// struct FRepInventoryStatusEffect : public FFastArraySerializerItem
		TEST_METHOD(ScriptStruct__Frontiers__RepInventoryStatusEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepInventoryStatusEffect, UnknownData_U5KV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepInventoryStatusEffect, Entry, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepInventoryStatusEffect, 0x0080);
		}

		// struct FRepStatusEffectArray : public FFastArraySerializer
		TEST_METHOD(ScriptStruct__Frontiers__RepStatusEffectArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepStatusEffectArray, Items, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepStatusEffectArray, 0x0118);
		}

		// struct FItemElementalEffect
		TEST_METHOD(ScriptStruct__Frontiers__ItemElementalEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemElementalEffect, SocketName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemElementalEffect, ParticleAsset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemElementalEffect, 0x0010);
		}

		// struct FItemAppearanceData
		TEST_METHOD(ScriptStruct__Frontiers__ItemAppearanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemAppearanceData, PostProcessingStencilValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemAppearanceData, UnknownData_CUCJ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemAppearanceData, ItemClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemAppearanceData, DyeOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemAppearanceData, bHasAffixData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemAppearanceData, UnknownData_CULJ, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemAppearanceData, AffixEffectData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemAppearanceData, 0x0030);
		}

		// struct FEmberWeaponTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__EmberWeaponTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmberWeaponTableRowHandle, 0x0010);
		}

		// struct FItemWardrobeTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__ItemWardrobeTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemWardrobeTableRowHandle, 0x0010);
		}

		// struct FRecipeUnitTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__RecipeUnitTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecipeUnitTableRowHandle, 0x0010);
		}

		// struct FDyeTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__DyeTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDyeTableRowHandle, 0x0010);
		}

		// struct FItemData : public FCraftableTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__ItemData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, DisplayName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, Description, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, DescriptionLong, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, FlavorText, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, CustomTypeText, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, EmberWeaponData, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, OffHandWeaponToEquip, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, bUseAffixWithName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, UnknownData_WQ6I, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, LevelRangeString, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, MinLevel, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, MaxLevel, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, UnknownData_851S, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, DropWeight, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, GoldValue, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, ItemWardrobe, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, bCanBeDyed, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, UnknownData_A8Y8, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, DyeRow, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, GameplayTagContainer, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, AffixAnyTagContainer, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, AffixAllTagContainer, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, AffixSpawnRowName, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, ItemQuality, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, LootContent, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, LootContentRecipe, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, LootContentRecipeUnit, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, DamageTypeTag, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, SpokeTags, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, PlayerClassTags, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, ItemSetTag, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, AnimSlotPrefix, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, AnimSlotSuffix, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, bIsTwoHanded, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, bCanSell, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, bCanDestroy, 0x020A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, bCanBeUsed, 0x020B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, bCanBulkBuy, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, bIgnoreLevel, 0x020D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, bSaveOnGround, 0x020E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, bIgnoreSpoke, 0x020F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, bIgnoreDroppedArea, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, bHideInLegendaryCollection, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, bHideInTransmogList, 0x0212);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, UnknownData_4BII, 0x0213);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, AttackSpeedIndex, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, bIsStatStick, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, PickupAction, 0x021D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, UnknownData_CQ9O, 0x021E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, PickUpTraitString, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, MaxStackSize, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, UnknownData_ZXWP, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, IconOverride, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, UnknownData_EDVG, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, ItemClass, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemData, 0x02B0);
		}

		// struct FItemModifyData : public FSpawnDataBase
		TEST_METHOD(ScriptStruct__Frontiers__ItemModifyData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemModifyData, 0x0178);
		}

		// struct FItemQualityData : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__ItemQualityData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemQualityData, GameplayTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemQualityData, ItemOnGroundParticleSystem, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemQualityData, ItemOnGroundSelectedParticleSystem, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemQualityData, ItemNameColor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemQualityData, bShowElementalEffects, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemQualityData, UnknownData_F4CI, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemQualityData, DisplayName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemQualityData, SortIndex, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemQualityData, OcclusionColorIndex, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemQualityData, UnknownData_4EEJ, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemQualityData, PickUpWidgetDuration, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemQualityData, UnknownData_U46J, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemQualityData, IconBackground, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemQualityData, IconBorder, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemQualityData, MultiplayerPickUpMessages, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemQualityData, MapMarkerComponentClass, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemQualityData, DestroyHoldTime, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemQualityData, AudioParameterValue, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemQualityData, UnknownData_5U0I, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemQualityData, 0x00E0);
		}

		// struct FItemSpawnData : public FSpawnDataBase
		TEST_METHOD(ScriptStruct__Frontiers__ItemSpawnData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnData, QuestRewardText, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnData, QuestRewardIconGameplayTag, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnData, RequiredPlayerGameplayTags, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemSpawnData, QuestObjectFilter, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemSpawnData, 0x01C8);
		}

		// struct FItemRequest
		TEST_METHOD(ScriptStruct__Frontiers__ItemRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemRequest, Player, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemRequest, UnknownData_ZMWT, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemRequest, ContextString, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemRequest, ItemRow, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemRequest, Level, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemRequest, UnknownData_8ZTZ, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemRequest, DyeOverride, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemRequest, ExtraAffixes, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemRequest, LoadedItemActorClass, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemRequest, UnknownData_3WLE, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemRequest, 0x00D8);
		}

		// struct FItemWardrobeEntry : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__ItemWardrobeEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemWardrobeEntry, UnknownData_EPPG, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemWardrobeEntry, ItemWardrobeRow, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemWardrobeEntry, GameplayTag, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemWardrobeEntry, NameOverride, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemWardrobeEntry, DyeOverride, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemWardrobeEntry, ItemClass, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemWardrobeEntry, 0x0088);
		}

		// struct FItemWardrobe : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__ItemWardrobe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemWardrobe, UnknownData_36BW, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemWardrobe, 0x0030);
		}

		// struct FDynamicMaterials
		TEST_METHOD(ScriptStruct__Frontiers__DynamicMaterials)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicMaterials, InstancedDynMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicMaterials, AppliedSkeletalMesh, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicMaterials, 0x0010);
		}

		// struct FSlumberingActor
		TEST_METHOD(ScriptStruct__Frontiers__SlumberingActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlumberingActor, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlumberingActor, TickingComponents, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlumberingActor, 0x0018);
		}

		// struct FTLStreamingLevelWrapper
		TEST_METHOD(ScriptStruct__Frontiers__TLStreamingLevelWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLStreamingLevelWrapper, LevelInstance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLStreamingLevelWrapper, SlumberingActors, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLStreamingLevelWrapper, UnknownData_ECEA, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTLStreamingLevelWrapper, 0x00B0);
		}

		// struct FBlendTexture
		TEST_METHOD(ScriptStruct__Frontiers__BlendTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendTexture, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendTexture, Texture, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendTexture, 0x0010);
		}

		// struct FLevelRange
		TEST_METHOD(ScriptStruct__Frontiers__LevelRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelRange, UnknownData_APBO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelRange, 0x0010);
		}

		// struct FLevelRewardData : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__LevelRewardData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelRewardData, UnknownData_1NWE, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelRewardData, Type, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelRewardData, UnknownData_YCJX, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelRewardData, ParameterName, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelRewardData, UnknownData_9XGB, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelRewardData, Level, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelRewardData, bIsPaid, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelRewardData, bFeatured, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelRewardData, UnknownData_9VLA, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelRewardData, RewardRecipe1, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelRewardData, RewardRecipe2, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelRewardData, RewardRecipe3, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelRewardData, RewardRecipe4, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelRewardData, RewardRecipe5, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelRewardData, RewardRecipe6, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelRewardData, 0x00C0);
		}

		// struct FClientLevelSequenceRequest
		TEST_METHOD(ScriptStruct__Frontiers__ClientLevelSequenceRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLevelSequenceRequest, SequenceWrapper, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLevelSequenceRequest, SequenceActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLevelSequenceRequest, Video, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLevelSequenceRequest, bPlayOverLoadingScreen, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLevelSequenceRequest, UnknownData_HNJ0, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLevelSequenceRequest, 0x0040);
		}

		// struct FServerLevelSequenceRequest
		TEST_METHOD(ScriptStruct__Frontiers__ServerLevelSequenceRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLevelSequenceRequest, ClientRequest, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLevelSequenceRequest, StatusEffectClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLevelSequenceRequest, UnknownData_W9X3, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerLevelSequenceRequest, 0x0058);
		}

		// struct FLifetimeEventsInfo
		TEST_METHOD(ScriptStruct__Frontiers__LifetimeEventsInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLifetimeEventsInfo, BeginPlayTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLifetimeEventsInfo, OwnerLifespan, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLifetimeEventsInfo, 0x0008);
		}

		// struct FPlayerTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__PlayerTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerTableRowHandle, 0x0010);
		}

		// struct FAreaTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__AreaTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAreaTableRowHandle, 0x0010);
		}

		// struct FLoadingScreenData : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__LoadingScreenData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingScreenData, UnknownData_WNMN, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingScreenData, BackgroundWidget, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingScreenData, ForegroundWidget, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingScreenData, Text, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingScreenData, Platform, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingScreenData, UnknownData_OEMF, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingScreenData, PlayerClassAny, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingScreenData, AreaAny, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingScreenData, SpokeTagsAny, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingScreenData, RegionTagsAny, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingScreenData, PrimaryElementTagsAny, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingScreenData, AreaLoadingScreenTagsAny, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingScreenData, CompletedQuestsAny, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingScreenData, UncompletedQuestsAny, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingScreenData, HasQuestsAny, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingScreenData, CompletedQuestTasksAny, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingScreenData, HasQuestTasksAny, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingScreenData, Weight, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingScreenData, UnknownData_X6PD, 0x0184);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLoadingScreenData, 0x0188);
		}

		// struct FPersistenceMinionEntry
		TEST_METHOD(ScriptStruct__Frontiers__PersistenceMinionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceMinionEntry, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceMinionEntry, MinionDataRow, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceMinionEntry, MinionName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceMinionEntry, PetReturnTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceMinionEntry, bSellPetItemsOnReturn, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceMinionEntry, UnknownData_SGXQ, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceMinionEntry, ShoppingList, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersistenceMinionEntry, 0x0050);
		}

		// struct FPersistenceMinions
		TEST_METHOD(ScriptStruct__Frontiers__PersistenceMinions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceMinions, Minions, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersistenceMinions, 0x0010);
		}

		// struct FPersistenceCharacterCustomization
		TEST_METHOD(ScriptStruct__Frontiers__PersistenceCharacterCustomization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceCharacterCustomization, SkinDyeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceCharacterCustomization, HairDyeName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceCharacterCustomization, HeadItemName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceCharacterCustomization, HairItemName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersistenceCharacterCustomization, 0x0020);
		}

		// struct FFrontiersNewCharacterDataField
		TEST_METHOD(ScriptStruct__Frontiers__FrontiersNewCharacterDataField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersNewCharacterDataField, PlayerClassRowName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersNewCharacterDataField, char_name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersNewCharacterDataField, Hardcore, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersNewCharacterDataField, UnknownData_IDD0, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersNewCharacterDataField, Minions, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersNewCharacterDataField, Customization, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersNewCharacterDataField, Difficulty, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersNewCharacterDataField, EmberWeaponRowName, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersNewCharacterDataField, UnknownData_UXKW, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrontiersNewCharacterDataField, 0x0060);
		}

		// struct FMailLedgerEntry
		TEST_METHOD(ScriptStruct__Frontiers__MailLedgerEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMailLedgerEntry, MessageId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMailLedgerEntry, RecipientId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMailLedgerEntry, Timestamp, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMailLedgerEntry, ExpirationTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMailLedgerEntry, Subject, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMailLedgerEntry, JsonData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMailLedgerEntry, 0x0060);
		}

		// struct FPetOption
		TEST_METHOD(ScriptStruct__Frontiers__PetOption)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPetOption, UnknownData_5R8G, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPetOption, DisplayName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPetOption, UnknownData_0OX6, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPetOption, 0x0038);
		}

		// struct FClassOption
		TEST_METHOD(ScriptStruct__Frontiers__ClassOption)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassOption, UnknownData_CGB9, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassOption, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassOption, Description, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassOption, UnknownData_32QK, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClassOption, 0x0048);
		}

		// struct FMainMenuLevelSequenceMap
		TEST_METHOD(ScriptStruct__Frontiers__MainMenuLevelSequenceMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMainMenuLevelSequenceMap, IntroSequences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMainMenuLevelSequenceMap, UIEntranceTimeSeconds, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMainMenuLevelSequenceMap, UnknownData_UK1S, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMainMenuLevelSequenceMap, 0x0058);
		}

		// struct FCharacterCreateSelection
		TEST_METHOD(ScriptStruct__Frontiers__CharacterCreateSelection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterCreateSelection, UnknownData_F2X8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterCreateSelection, SkinDyeName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterCreateSelection, HairDyeName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterCreateSelection, HeadItemRow, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterCreateSelection, HairItemRow, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterCreateSelection, UnknownData_UVSH, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterCreateSelection, Pet, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterCreateSelection, EmberWeapon, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterCreateSelection, UnknownData_IF8I, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterCreateSelection, 0x00A8);
		}

		// struct FNameSelection
		TEST_METHOD(ScriptStruct__Frontiers__NameSelection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameSelection, UnknownData_Z3WU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameSelection, 0x0020);
		}

		// struct FMapMarkerIcon
		TEST_METHOD(ScriptStruct__Frontiers__MapMarkerIcon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarkerIcon, Pivot, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarkerIcon, Icon, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarkerIcon, LargeIcon, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMapMarkerIcon, 0x0018);
		}

		// struct FMapMarker
		TEST_METHOD(ScriptStruct__Frontiers__MapMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarker, bIsStatic, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarker, Type, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarker, UnknownData_J107, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarker, CustomIcon, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarker, CustomText, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarker, bLocalPlayerOnly, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarker, bShowPersistentLabel, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarker, UnknownData_C9PF, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarker, AreaSize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarker, UnknownData_YAJI, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMapMarker, 0x0048);
		}

		// struct FMapMarkerRecord
		TEST_METHOD(ScriptStruct__Frontiers__MapMarkerRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarkerRecord, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarkerRecord, AreaGuid, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarkerRecord, UnknownData_N3X8, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarkerRecord, MarkerData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarkerRecord, CachedText, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarkerRecord, AreaMarker, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarkerRecord, UnknownData_DCPU, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMapMarkerRecord, 0x0098);
		}

		// struct FLevelInstanceArray
		TEST_METHOD(ScriptStruct__Frontiers__LevelInstanceArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelInstanceArray, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelInstanceArray, 0x0010);
		}

		// struct FMapWorksData : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__MapWorksData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, UnknownData_7X56, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, AffixText, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, AffixTextDescription, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, bRequiresAreas, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, RowType, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, UnknownData_28LI, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, NoPickWeight, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, EntryType1, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, UnknownData_US6W, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, Entry1, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, EntryTags1, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, WeightOrCount1, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, UnknownData_42MW, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, RequireQuest1, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, EntryType2, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, UnknownData_PA8H, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, Entry2, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, EntryTags2, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, WeightOrCount2, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, UnknownData_43OJ, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, RequireQuest2, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, EntryType3, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, UnknownData_FPZ2, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, Entry3, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, EntryTags3, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, WeightOrCount3, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, UnknownData_LLXH, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, RequireQuest3, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, EntryType4, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, UnknownData_0R9Y, 0x0149);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, Entry4, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, EntryTags4, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, WeightOrCount4, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, UnknownData_GHF8, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, RequireQuest4, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, EntryType5, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, UnknownData_UWBN, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, Entry5, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, EntryTags5, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, WeightOrCount5, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, UnknownData_8WJD, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, RequireQuest5, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, EntryType6, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, UnknownData_N6WZ, 0x01E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, Entry6, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, EntryTags6, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, WeightOrCount6, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, UnknownData_AJ0E, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, RequireQuest6, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, EntryType7, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, UnknownData_FVPO, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, Entry7, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, EntryTags7, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, WeightOrCount7, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, UnknownData_Z7GQ, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, RequireQuest7, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, EntryType8, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, UnknownData_15PV, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, Entry8, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, EntryTags8, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, WeightOrCount8, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, UnknownData_Q20B, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, RequireQuest8, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, DataCurves, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, Weight, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, UnknownData_Z1SJ, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, OwnedGameplayTags, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, DungeonRequireAllTags, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, DungeonRequireAnyTags, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, DungeonExcludeAnyTags, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, Entries, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksData, UnknownData_XSMJ, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMapWorksData, 0x0388);
		}

		// struct FAttachMeshInfo
		TEST_METHOD(ScriptStruct__Frontiers__AttachMeshInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttachMeshInfo, Mesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttachMeshInfo, PositionOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttachMeshInfo, RotationOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttachMeshInfo, bAttachToNearestBone, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttachMeshInfo, UnknownData_LZ7L, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttachMeshInfo, Duration, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttachMeshInfo, MaxDistance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttachMeshInfo, UnknownData_CF3I, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttachMeshInfo, 0x0030);
		}

		// struct FLODAutomationTargetSetting
		TEST_METHOD(ScriptStruct__Frontiers__LODAutomationTargetSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLODAutomationTargetSetting, DevNotes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLODAutomationTargetSetting, MeshNameStrings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLODAutomationTargetSetting, LODSettingsFile, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLODAutomationTargetSetting, 0x0028);
		}

		// struct FMeshShellParameters
		TEST_METHOD(ScriptStruct__Frontiers__MeshShellParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshShellParameters, MaterialOverride, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshShellParameters, bSpawnDuplicates, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshShellParameters, UnknownData_9L1H, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshShellParameters, DuplicateInterstice, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshShellParameters, DuplicateDuration, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshShellParameters, FadeOverLifetime, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshShellParameters, ScaleOverLifetime, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshShellParameters, UnknownData_Q8LO, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshShellParameters, ShellScaleOffsetStart, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshShellParameters, ShellScaleOffsetEnd, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshShellParameters, InflateOverLifetime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshShellParameters, UnknownData_VI5M, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshShellParameters, ShellInflateOffsetStart, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshShellParameters, ShellInflateOffsetEnd, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshShellParameters, UnknownData_WMPB, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshShellParameters, 0x0030);
		}

		// struct FActorMetrics
		TEST_METHOD(ScriptStruct__Frontiers__ActorMetrics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorMetrics, SourceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorMetrics, SourceType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorMetrics, SourceGUID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorMetrics, 0x0018);
		}

		// struct FSkillsTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__SkillsTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillsTableRowHandle, 0x0010);
		}

		// struct FMinionData : public FCraftableTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__MinionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, UnknownData_TAID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, bSave, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, bStartingPet, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, bIgnoreSpawnCollision, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, UnknownData_GA2R, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, MinionOffset, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, MinionScaleMultiplier, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, UnknownData_PES9, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, Description, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, DefaultSkill, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, MinionClass, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, CharacterCreateMinionClass, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, ClosestDyeColor, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, bIsFlying, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, UnknownData_AN4U, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, CharacterSelectIdle, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, Hitpoints, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, Damage, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, LifetimeSeconds, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, UnknownData_UOV7, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, QualityTags, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, DropWeight, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, UnknownData_1CAI, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, GameplayTags, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, MinionTypeTag, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, AggroRadius, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, MinionGameplayTags, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, MinionTypeGameplayTag, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, UnknownData_TRE2, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, TraitString1, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, TraitString2, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, TraitString3, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, TraitString4, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionData, TraitString5, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMinionData, 0x01F0);
		}

		// struct FMinionSpawnData : public FSpawnDataBase
		TEST_METHOD(ScriptStruct__Frontiers__MinionSpawnData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMinionSpawnData, 0x0178);
		}

		// struct FFireMissilesData
		TEST_METHOD(ScriptStruct__Frontiers__FireMissilesData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireMissilesData, MissileClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireMissilesData, Offset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireMissilesData, RotationOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireMissilesData, RandomOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireMissilesData, ForwardOffset, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireMissilesData, bTurnOffsetTowardsTarget, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireMissilesData, UnknownData_QHD6, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireMissilesData, Count, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireMissilesData, bCluster, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireMissilesData, UnknownData_YSHI, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireMissilesData, Spread, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireMissilesData, MinDistance, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireMissilesData, bInFrontOnly, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireMissilesData, bAutoTrajectory, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireMissilesData, bEvenDistribution, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireMissilesData, bSpawnAtTargetWithOffset, 0x0047);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireMissilesData, bTargetOffsetHeight, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireMissilesData, UnknownData_VYZR, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireMissilesData, ActorsToIgnore, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireMissilesData, bUseOffsetAsSpawnLocation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireMissilesData, bShootTowardActorFacing, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireMissilesData, UnknownData_9AUZ, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireMissilesData, SkillInstanceId, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireMissilesData, InstanceCollisionSettings, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireMissilesData, UnknownData_59K2, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFireMissilesData, 0x0070);
		}

		// struct FMonsterAffixData : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__MonsterAffixData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterAffixData, StatusEffect, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterAffixData, Weight, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterAffixData, MinimumMonsterLevel, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterAffixData, MaximumMonsterLevel, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterAffixData, AreaApplyPercent, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterAffixData, UnknownData_KKWQ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterAffixData, RequireSpokeTags, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterAffixData, RequireAny, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterAffixData, RequireAll, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterAffixData, ExcludeAny, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMonsterAffixData, 0x0120);
		}

		// struct FMonsterData : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__MonsterData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, MonsterClass, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, MonsterGroup, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, DisplayName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, LevelRangeString, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, ChampionLevelRangeString, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, HitpointPercent, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, DamagePercent, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, UnknownData_51AJ, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, PickWeight, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, ItemSpawn, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, ChampionScaleMultiplier, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, ChampionDamage, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, ChampionSpeedBonusPercent, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, ChampionNameSpawnRow, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, ChampionPackNameSpawnRow, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, ChampionIgnoreMinionsChance, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, RecentDamageDecayRate, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, GetHitThreshold, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, GetHitCooldown, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, GetHitChance, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, GetHitChanceMelee, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, AggroRadius, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, bShouldTether, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, UnknownData_S0Q5, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, Drama, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, AudioDrama, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, AudioCategory, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, UnknownData_ZR84, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, TraitString1, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, TraitString2, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, TraitString3, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, MonsterTags, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, ItemSpawnGameplayTagFilter, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, ChampionItemSpawnGameplayTagFilter, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, UnknownData_SKGM, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, ExperiencePercent, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, DamageElement, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, ScaleMultiplier, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, PackSizeSmall, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, PackSizeMedium, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, PackSizeLarge, 0x01AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, PackSizeExtraLarge, 0x01AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, Defense, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, DefensePhysical, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, DefenseWater, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, DefenseFire, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, DefenseCold, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, DefensePoison, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, DefenseElectric, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, Skill00Cooldown, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, Skill00DamageFactor, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, Skill01Cooldown, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, Skill01DamageFactor, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, Skill02Cooldown, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, Skill02DamageFactor, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, Skill03Cooldown, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, Skill03DamageFactor, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, Skill04Cooldown, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, Skill04DamageFactor, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, Skill05Cooldown, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, Skill05DamageFactor, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, ExtraSkill00Cooldown, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, ExtraSkill00DamageFactor, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, ExtraSkill01Cooldown, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, ExtraSkill01DamageFactor, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, ExtraSkill02Cooldown, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, ExtraSkill02DamageFactor, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, ExtraSkill03Cooldown, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, ExtraSkill03DamageFactor, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, ExtraSkill04Cooldown, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, ExtraSkill04DamageFactor, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, ExtraSkill05Cooldown, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, ExtraSkill05DamageFactor, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, bUsePlayerCount, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, UnknownData_CM9H, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, MonsterDescription, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterData, Bank, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMonsterData, 0x0260);
		}

		// struct FMonsterManagerPerSpawnerData
		TEST_METHOD(ScriptStruct__Frontiers__MonsterManagerPerSpawnerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterManagerPerSpawnerData, UnknownData_TSZW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMonsterManagerPerSpawnerData, 0x0028);
		}

		// struct FMonsterSpawnData : public FSpawnDataBase
		TEST_METHOD(ScriptStruct__Frontiers__MonsterSpawnData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMonsterSpawnData, 0x0178);
		}

		// struct FMonsterSpawnRequest
		TEST_METHOD(ScriptStruct__Frontiers__MonsterSpawnRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterSpawnRequest, UnknownData_RHNM, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterSpawnRequest, RowName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterSpawnRequest, Type, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterSpawnRequest, MonsterSpawnType, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterSpawnRequest, UnknownData_Z5EM, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterSpawnRequest, AffixNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterSpawnRequest, Level, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterSpawnRequest, Location, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterSpawnRequest, AcceptanceRadius, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterSpawnRequest, bIgnoreSpawnCollision, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterSpawnRequest, bPawnIsOwner, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterSpawnRequest, SpawnSkillSlot, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterSpawnRequest, UnknownData_Z8ZD, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterSpawnRequest, StatusEffects, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMonsterSpawnRequest, 0x0048);
		}

		// struct FNameSpawnData : public FSpawnDataBase
		TEST_METHOD(ScriptStruct__Frontiers__NameSpawnData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameSpawnData, 0x0178);
		}

		// struct FNarratorQuipEntry
		TEST_METHOD(ScriptStruct__Frontiers__NarratorQuipEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNarratorQuipEntry, Quip, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNarratorQuipEntry, UnknownData_PC96, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNarratorQuipEntry, QuipEvent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNarratorQuipEntry, AudioTableEntry, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNarratorQuipEntry, 0x0030);
		}

		// struct FNarratorQuipGroup
		TEST_METHOD(ScriptStruct__Frontiers__NarratorQuipGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNarratorQuipGroup, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNarratorQuipGroup, Cooldown, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNarratorQuipGroup, MaxDelay, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNarratorQuipGroup, WhenLoadingScreenIsShowing, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNarratorQuipGroup, WhenSequenceOrCinematicIsPlaying, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNarratorQuipGroup, WhenLoreLineIsPlaying, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNarratorQuipGroup, WhenNarratorQuipIsPlaying, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNarratorQuipGroup, UnknownData_JQ0R, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNarratorQuipGroup, Quips, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNarratorQuipGroup, UnknownData_NX8W, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNarratorQuipGroup, 0x0030);
		}

		// struct FActorPool
		TEST_METHOD(ScriptStruct__Frontiers__ActorPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPool, Actors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPool, UnknownData_KS0A, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorPool, 0x0018);
		}

		// struct FOtherPlayerContext
		TEST_METHOD(ScriptStruct__Frontiers__OtherPlayerContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOtherPlayerContext, AccountId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOtherPlayerContext, AccountNickname, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOtherPlayerContext, CharacterName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOtherPlayerContext, ClassTag, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOtherPlayerContext, Gender, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOtherPlayerContext, bHardcore, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOtherPlayerContext, UnknownData_URUA, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOtherPlayerContext, CurrentDifficulty, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOtherPlayerContext, bIsCurrentlyOnline, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOtherPlayerContext, HostPlatform, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOtherPlayerContext, UnknownData_RQ43, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOtherPlayerContext, PlatformAccountId, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOtherPlayerContext, UnknownData_756W, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOtherPlayerContext, 0x0088);
		}

		// struct FTLSessionUserData
		TEST_METHOD(ScriptStruct__Frontiers__TLSessionUserData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLSessionUserData, ReferralPlatformAccountName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLSessionUserData, ReferralPlatformAccountId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTLSessionUserData, 0x0020);
		}

		// struct FJoinSessionResultEvent
		TEST_METHOD(ScriptStruct__Frontiers__JoinSessionResultEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinSessionResultEvent, SessionToJoin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinSessionResultEvent, Result, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinSessionResultEvent, UnknownData_E6HO, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJoinSessionResultEvent, 0x0028);
		}

		// struct FPartyMemberMetadata
		TEST_METHOD(ScriptStruct__Frontiers__PartyMemberMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberMetadata, AccountId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberMetadata, PlatformAccountId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberMetadata, HostPlatform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberMetadata, UnknownData_HAAI, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberMetadata, Name, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberMetadata, CharacterName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberMetadata, ClassTag, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberMetadata, Gender, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberMetadata, UnknownData_NFHE, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberMetadata, CurrentArea, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberMetadata, CurrentHealthPercent, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberMetadata, AreaRandomNameSeed, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberMetadata, bAreaIsMapworks, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberMetadata, bUsingMicrophone, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberMetadata, bHasUnlockedFort, 0x0082);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberMetadata, bCanUseUGC, 0x0083);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberMetadata, bHardcore, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberMetadata, UnknownData_X3EO, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberMetadata, Difficulty, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberMetadata, AreaChallengeLevel, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberMetadata, AreaDungeonSeed, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberMetadata, UnknownData_L89R, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberMetadata, AreaDungeonQuality, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberMetadata, bIsDead, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberMetadata, UnknownData_EO0L, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberMetadata, BlockedPartyMemberTLAccountIds, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyMemberMetadata, 0x00C0);
		}

		// struct FJoinSessionEvent
		TEST_METHOD(ScriptStruct__Frontiers__JoinSessionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinSessionEvent, JoiningPlayer, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinSessionEvent, SessionToJoin, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJoinSessionEvent, 0x00E0);
		}

		// struct FPartySwitchboardInvite
		TEST_METHOD(ScriptStruct__Frontiers__PartySwitchboardInvite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartySwitchboardInvite, PartySize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartySwitchboardInvite, UnknownData_H354, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartySwitchboardInvite, MetaData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartySwitchboardInvite, bAutoAccept, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartySwitchboardInvite, UnknownData_A7F5, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartySwitchboardInvite, 0x00D0);
		}

		// struct FPartyInstanceResetConfirmation
		TEST_METHOD(ScriptStruct__Frontiers__PartyInstanceResetConfirmation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyInstanceResetConfirmation, KickedPartyMemberMetadata, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyInstanceResetConfirmation, 0x0010);
		}

		// struct FPartyInstanceResetRequest
		TEST_METHOD(ScriptStruct__Frontiers__PartyInstanceResetRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyInstanceResetRequest, InstigatorMetadata, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyInstanceResetRequest, TravelToArea, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyInstanceResetRequest, 0x00D0);
		}

		// struct FServicePartyMember
		TEST_METHOD(ScriptStruct__Frontiers__ServicePartyMember)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServicePartyMember, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServicePartyMember, Data, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServicePartyMember, MetaData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServicePartyMember, 0x00E0);
		}

		// struct FPartyResponse
		TEST_METHOD(ScriptStruct__Frontiers__PartyResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyResponse, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyResponse, Leader, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyResponse, Members, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyResponse, 0x0030);
		}

		// struct FPartyFailedResponse
		TEST_METHOD(ScriptStruct__Frontiers__PartyFailedResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyFailedResponse, ErrorCode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyFailedResponse, Party, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyFailedResponse, 0x0040);
		}

		// struct FFrontiersAccountFlags
		TEST_METHOD(ScriptStruct__Frontiers__FrontiersAccountFlags)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersAccountFlags, admin, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrontiersAccountFlags, 0x0001);
		}

		// struct FAccountPrivileges
		TEST_METHOD(ScriptStruct__Frontiers__AccountPrivileges)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccountPrivileges, can_communiate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccountPrivileges, can_use_ugc, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccountPrivileges, can_cross_play, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAccountPrivileges, 0x0003);
		}

		// struct FFrontiersAccount
		TEST_METHOD(ScriptStruct__Frontiers__FrontiersAccount)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersAccount, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersAccount, nickname, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersAccount, platform_id, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersAccount, platform_environment, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersAccount, platform_name, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersAccount, arc_id, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersAccount, email, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersAccount, isEmailValidated, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersAccount, UnknownData_N0AG, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersAccount, shadowArcUserId, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersAccount, access_flags, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersAccount, privileges, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersAccount, UnknownData_CS20, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrontiersAccount, 0x0090);
		}

		// struct FFrontiersCharacterLite
		TEST_METHOD(ScriptStruct__Frontiers__FrontiersCharacterLite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersCharacterLite, char_id, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersCharacterLite, PlayerClassRowName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersCharacterLite, WardrobeInventory, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersCharacterLite, Minions, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersCharacterLite, Customization, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersCharacterLite, LastPlayed, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersCharacterLite, Traits, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrontiersCharacterLite, 0x0090);
		}

		// struct FFrontiersCharacter
		TEST_METHOD(ScriptStruct__Frontiers__FrontiersCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersCharacter, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersCharacter, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersCharacter, account_id, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersCharacter, character_lite, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersCharacter, Data, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersCharacter, bOffline, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersCharacter, bCharacterVersionValid, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersCharacter, UnknownData_2SLP, 0x0122);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrontiersCharacter, 0x0128);
		}

		// struct FFrontiersSession
		TEST_METHOD(ScriptStruct__Frontiers__FrontiersSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersSession, account, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersSession, session_id, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersSession, client_platform, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersSession, Key, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersSession, Character, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersSession, characters, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersSession, dlc, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrontiersSession, UnknownData_D10C, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrontiersSession, 0x0238);
		}

		// struct FPersistenceCraftingItemCost
		TEST_METHOD(ScriptStruct__Frontiers__PersistenceCraftingItemCost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceCraftingItemCost, CostIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceCraftingItemCost, UnknownData_D44A, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceCraftingItemCost, Item, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersistenceCraftingItemCost, 0x00B0);
		}

		// struct FPersistenceCraftingInputs
		TEST_METHOD(ScriptStruct__Frontiers__PersistenceCraftingInputs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceCraftingInputs, ItemCosts, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceCraftingInputs, SpokeRowName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersistenceCraftingInputs, 0x0018);
		}

		// struct FPersistenceCraftingEntry
		TEST_METHOD(ScriptStruct__Frontiers__PersistenceCraftingEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceCraftingEntry, StartTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceCraftingEntry, FinishTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceCraftingEntry, RecipeName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceCraftingEntry, Inputs, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceCraftingEntry, QueueName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceCraftingEntry, JobId, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersistenceCraftingEntry, 0x0048);
		}

		// struct FPersistenceCraftingData
		TEST_METHOD(ScriptStruct__Frontiers__PersistenceCraftingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceCraftingData, InProgress, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceCraftingData, SeenUnlockableRecipeNames, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersistenceCraftingData, 0x0020);
		}

		// struct FPersistenceContractEntryData
		TEST_METHOD(ScriptStruct__Frontiers__PersistenceContractEntryData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceContractEntryData, ContractName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceContractEntryData, MaxClaimedFreeLevel, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceContractEntryData, MaxClaimedPaidLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceContractEntryData, LastSeenContractLevel, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersistenceContractEntryData, 0x0014);
		}

		// struct FPersistenceContractData
		TEST_METHOD(ScriptStruct__Frontiers__PersistenceContractData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceContractData, ContractStates, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceContractData, CurrentContract, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersistenceContractData, 0x0018);
		}

		// struct FPersistenceInboxData
		TEST_METHOD(ScriptStruct__Frontiers__PersistenceInboxData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceInboxData, Entries, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceInboxData, LastSyncedEntryTime, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersistenceInboxData, 0x0020);
		}

		// struct FPersistenceSocialData
		TEST_METHOD(ScriptStruct__Frontiers__PersistenceSocialData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceSocialData, BlockedFortTLAccountIds, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersistenceSocialData, 0x0010);
		}

		// struct FPersistenceAccountwideData
		TEST_METHOD(ScriptStruct__Frontiers__PersistenceAccountwideData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceAccountwideData, Crafting, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceAccountwideData, Traits, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceAccountwideData, Contracts, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceAccountwideData, pets, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceAccountwideData, GameplayFortProps, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceAccountwideData, Inbox, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceAccountwideData, Social, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceAccountwideData, DataVersion, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersistenceAccountwideData, 0x00A8);
		}

		// struct FLoginRequestResponse
		TEST_METHOD(ScriptStruct__Frontiers__LoginRequestResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoginRequestResponse, session, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoginRequestResponse, account_gamedata, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoginRequestResponse, characters, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLoginRequestResponse, 0x02F0);
		}

		// struct FPersistenceSkills
		TEST_METHOD(ScriptStruct__Frontiers__PersistenceSkills)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceSkills, Entries, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceSkills, Levels, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceSkills, LastSkillRespecUnixSeconds, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersistenceSkills, 0x0028);
		}

		// struct FTravelParams
		TEST_METHOD(ScriptStruct__Frontiers__TravelParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTravelParams, AreaDataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTravelParams, AccountId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTravelParams, ZoneSessionId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTravelParams, RequestedFortAccountId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTravelParams, bTravelToPartyMember, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTravelParams, UnknownData_765V, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTravelParams, 0x0040);
		}

		// struct FDungeonParams
		TEST_METHOD(ScriptStruct__Frontiers__DungeonParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonParams, ChallengeLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonParams, Quality, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonParams, DungeonSeed, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonParams, OwnerAccountIdHash, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDungeonParams, 0x0018);
		}

		// struct FMapWorksParams
		TEST_METHOD(ScriptStruct__Frontiers__MapWorksParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksParams, Level, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksParams, SpokeTag, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksParams, UnknownData_JV1M, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksParams, OriginArea, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksParams, MapWorksDataRows, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksParams, MapWorksRandomSeed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksParams, UnknownData_IT7J, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksParams, MapWorksGuid, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksParams, DungeonParams, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksParams, AreaGroupNameOverride, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksParams, bIsOpen, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksParams, UnknownData_5Y6M, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksParams, Activator, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksParams, UnknownData_3XPI, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMapWorksParams, 0x00A8);
		}

		// struct FPersistenceTravelData
		TEST_METHOD(ScriptStruct__Frontiers__PersistenceTravelData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceTravelData, WaypointAreaDataNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceTravelData, SeenAreaNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceTravelData, CompletedTutorial, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceTravelData, UnknownData_5CQO, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceTravelData, ContentVersion, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceTravelData, SavedMapworksParams, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersistenceTravelData, 0x00D0);
		}

		// struct FSkillCooldownPersistenceData
		TEST_METHOD(ScriptStruct__Frontiers__SkillCooldownPersistenceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillCooldownPersistenceData, SkillRowName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillCooldownPersistenceData, CooldownSecondsRemaining, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillCooldownPersistenceData, 0x000C);
		}

		// struct FPersistenceItemOnGround
		TEST_METHOD(ScriptStruct__Frontiers__PersistenceItemOnGround)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceItemOnGround, RowName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceItemOnGround, Level, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceItemOnGround, UnknownData_LAIR, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceItemOnGround, ExtraAffixes, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceItemOnGround, SpawnOrigin, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceItemOnGround, DyeDataRowName, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceItemOnGround, ActorLocation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceItemOnGround, ItemSourceMetrics, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersistenceItemOnGround, 0x0058);
		}

		// struct FPersistenceItemsOnGround
		TEST_METHOD(ScriptStruct__Frontiers__PersistenceItemsOnGround)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceItemsOnGround, Zid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceItemsOnGround, AreaGroupName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceItemsOnGround, Timestamp, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceItemsOnGround, Items, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersistenceItemsOnGround, 0x0030);
		}

		// struct FStatusEffectPersistenceData
		TEST_METHOD(ScriptStruct__Frontiers__StatusEffectPersistenceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectPersistenceData, StatusEffectRowName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectPersistenceData, SecondsRemaining, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectPersistenceData, UnknownData_LFBD, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectPersistenceData, InstigatorTraitSnapshot, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatusEffectPersistenceData, 0x0020);
		}

		// struct FDungeonTransientPersistenceData
		TEST_METHOD(ScriptStruct__Frontiers__DungeonTransientPersistenceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonTransientPersistenceData, DungeonSeed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonTransientPersistenceData, PlayingChallengeLevel, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonTransientPersistenceData, PlayingQuality, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonTransientPersistenceData, PlayingStatus, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonTransientPersistenceData, UnknownData_3ADR, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonTransientPersistenceData, PlayingAccountIdHash, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonTransientPersistenceData, bChangedProgress, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonTransientPersistenceData, UnknownData_NP0O, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDungeonTransientPersistenceData, 0x0028);
		}

		// struct FPersistenceTransientData
		TEST_METHOD(ScriptStruct__Frontiers__PersistenceTransientData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceTransientData, OwnPortalAreaDataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceTransientData, OwnPortalSpawnLocationName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceTransientData, OwnPortalZoneId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceTransientData, OwnPortalZoneSessionId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceTransientData, PortalReturnAreaDataName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceTransientData, PortalReturnSpawnLocationName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceTransientData, PortalReturnOwnerName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceTransientData, TravelDestinationLocationName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceTransientData, EmberWeaponChargePercent, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceTransientData, EmberWeaponDrainPercent, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceTransientData, SkillCooldowns, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceTransientData, ItemsOnGround, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceTransientData, StatusEffects, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceTransientData, Dungeon, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersistenceTransientData, 0x00B8);
		}

		// struct FPersistenceServerRequest
		TEST_METHOD(ScriptStruct__Frontiers__PersistenceServerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest, PlayerClassRowName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest, Traits, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest, WardrobeInventories, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest, WardrobeIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest, UnknownData_SMKU, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest, WardrobeInventory, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest, ItemInventory, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest, ConsumableInventory, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest, PotionInventory, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest, PetInventory, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest, QuestInventory, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest, EquippedLegendaryAffixInventory, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest, BuybackInventory, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest, Skills, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest, Minions, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest, Customization, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest, Travel, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest, Accountwide, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest, Transient, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest, StartingAreaName, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest, DataVersion, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersistenceServerRequest, 0x0450);
		}

		// struct FPlayerAffixData : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__PlayerAffixData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerAffixData, PlayerStatusEffect, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerAffixData, PetStatusEffect, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerAffixData, Weight, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerAffixData, UnknownData_3YM5, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerAffixData, RequireAny, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerAffixData, RequireAll, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerAffixData, ExcludeAny, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerAffixData, 0x0120);
		}

		// struct FActiveTraitsTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__ActiveTraitsTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveTraitsTableRowHandle, 0x0010);
		}

		// struct FPlayerData : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__PlayerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, DisplayName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, Description, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, ClassTag, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, ItemWardrobeTag, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, ItemAffixTagFilter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, EnergyActiveTrait, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, ClassSkillObjectProp, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, SkillBuildingTags, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, CriticalChance, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, CriticalDamage, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, bIsEnabled, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, UnknownData_57ME, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, RandomNames, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, DefaultIcon, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, DefaultSkinDye, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, DefaultHairDye, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, DefaultHead, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, DefaultHair, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, CustomizationHeads, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, CustomizationHairs, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, ClassLastSkillRespecTime, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, ClassLastForceSkillRespecTime, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, ComboData, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, CharacterAssetPrefix, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, AnimationFolder, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, DefaultSkill, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, DefaultSkillSlot, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, UnknownData_JUHH, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, AudioParameterValue, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, UnknownData_V2Q3, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, PlayerClass, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, CharacterCreateClass, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, Gender, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, UnknownData_F6Y6, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, Hitpoints, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, HarvestingProcValue, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, RecentDamageDecayRate, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, GetHitThreshold, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, GetHitCooldown, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, GetHitChance, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, UnknownData_8D66, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, TraitString1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, TraitString2, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, TraitString3, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, TraitString4, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, TraitString5, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, Tab0, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, Tab1, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, Tab2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, Tab3, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerData, UnknownData_CZLZ, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerData, 0x02E0);
		}

		// struct FPreviewActorData
		TEST_METHOD(ScriptStruct__Frontiers__PreviewActorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewActorData, Class, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewActorData, ItemDataRow, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewActorData, 0x0018);
		}

		// struct FProcData : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__ProcData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcData, UnknownData_CKD0, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcData, TriggerType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcData, TriggerEvent, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcData, UnknownData_Y0CT, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcData, TagFilter, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcData, SkillTagFilter, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcData, RequiredStatusEffectTags, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcData, EventNameParam, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcData, Trait, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcData, AccumulateRandomChance, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcData, UnknownData_M6XN, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcData, TriggerSkill, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcData, CooldownTimeSeconds, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcData, bMinionsCanTrigger, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcData, UnknownData_Z7D4, 0x00CD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcData, 0x00E0);
		}

		// struct FQuestPoolEntry
		TEST_METHOD(ScriptStruct__Frontiers__QuestPoolEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestPoolEntry, QuestId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestPoolEntry, Weight, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuestPoolEntry, 0x000C);
		}

		// struct FAchievementQuestCompletedMsg
		TEST_METHOD(ScriptStruct__Frontiers__AchievementQuestCompletedMsg)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAchievementQuestCompletedMsg, QuestDefinitionId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAchievementQuestCompletedMsg, bShowCompletion, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAchievementQuestCompletedMsg, UnknownData_57F7, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAchievementQuestCompletedMsg, 0x0008);
		}

		// struct FAchievementQuestProgressMsg
		TEST_METHOD(ScriptStruct__Frontiers__AchievementQuestProgressMsg)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAchievementQuestProgressMsg, QuestDefinitionId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAchievementQuestProgressMsg, ProgressPointsComplete, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAchievementQuestProgressMsg, 0x0008);
		}

		// struct FQuestInstanceDataCompletedMsg
		TEST_METHOD(ScriptStruct__Frontiers__QuestInstanceDataCompletedMsg)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestInstanceDataCompletedMsg, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestInstanceDataCompletedMsg, UnknownData_B5TR, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestInstanceDataCompletedMsg, Start, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestInstanceDataCompletedMsg, Completed, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestInstanceDataCompletedMsg, bShowCompletion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestInstanceDataCompletedMsg, UnknownData_OTI0, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuestInstanceDataCompletedMsg, 0x0020);
		}

		// struct FQuestTaskInstanceDataMsg
		TEST_METHOD(ScriptStruct__Frontiers__QuestTaskInstanceDataMsg)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTaskInstanceDataMsg, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTaskInstanceDataMsg, bIsCompleted, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTaskInstanceDataMsg, bHasActivated, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTaskInstanceDataMsg, bShowProgress, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTaskInstanceDataMsg, UnknownData_8IZL, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTaskInstanceDataMsg, Counter, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTaskInstanceDataMsg, UnknownData_ICSG, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTaskInstanceDataMsg, TimeActivated, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuestTaskInstanceDataMsg, 0x0018);
		}

		// struct FQuestInstanceDataMsg
		TEST_METHOD(ScriptStruct__Frontiers__QuestInstanceDataMsg)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestInstanceDataMsg, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestInstanceDataMsg, UnknownData_9S00, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestInstanceDataMsg, Start, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestInstanceDataMsg, Completed, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestInstanceDataMsg, bShowAdded, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestInstanceDataMsg, bPinned, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestInstanceDataMsg, UnknownData_TV6W, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestInstanceDataMsg, Tasks, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuestInstanceDataMsg, 0x0030);
		}

		// struct FQuestTaskInstanceData
		TEST_METHOD(ScriptStruct__Frontiers__QuestTaskInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTaskInstanceData, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTaskInstanceData, bIsCompleted, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTaskInstanceData, bHasActivated, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTaskInstanceData, bShowProgress, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTaskInstanceData, bQuestTurnInTask, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTaskInstanceData, Counter, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTaskInstanceData, TimeActivated, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTaskInstanceData, Timer, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuestTaskInstanceData, 0x0020);
		}

		// struct FQuestObjectData : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__QuestObjectData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestObjectData, UnknownData_BCFL, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestObjectData, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestObjectData, CompletableTasks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestObjectData, OfferedQuests, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestObjectData, ActivatingTasks, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestObjectData, ActivatingCompletedTasks, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestObjectData, DeactivatingTasks, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestObjectData, DeactivatingCompletedTasks, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestObjectData, bAlwaysActive, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestObjectData, bMapMarkerIsArea, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestObjectData, UnknownData_EBL0, 0x009A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestObjectData, AreaSize, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuestObjectData, 0x00A0);
		}

		// struct FPersistenceQuestTask
		TEST_METHOD(ScriptStruct__Frontiers__PersistenceQuestTask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceQuestTask, TaskId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceQuestTask, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceQuestTask, bActivated, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceQuestTask, UnknownData_9OE0, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceQuestTask, TimeActivated, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersistenceQuestTask, 0x0018);
		}

		// struct FPersistenceQuestEntry
		TEST_METHOD(ScriptStruct__Frontiers__PersistenceQuestEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceQuestEntry, QuestId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceQuestEntry, StartTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceQuestEntry, IsCompleted, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceQuestEntry, UnknownData_A4GG, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceQuestEntry, CompletedTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceQuestEntry, CompletedCount, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceQuestEntry, FailedCount, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceQuestEntry, FailedLast, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceQuestEntry, bPinned, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceQuestEntry, UnknownData_F8LY, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceQuestEntry, QuestInstanceId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceQuestEntry, EpochTag, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceQuestEntry, Progress, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceQuestEntry, FrontiersDataVersion, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersistenceQuestEntry, 0x0070);
		}

		// struct FPersistenceQuestFile
		TEST_METHOD(ScriptStruct__Frontiers__PersistenceQuestFile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceQuestFile, Quests, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersistenceQuestFile, 0x0010);
		}

		// struct FSampleFortInventoryEntry_6001
		TEST_METHOD(ScriptStruct__Frontiers__SampleFortInventoryEntry_6001)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleFortInventoryEntry_6001, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleFortInventoryEntry_6001, RowName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleFortInventoryEntry_6001, RelativePosition, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleFortInventoryEntry_6001, Extents, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleFortInventoryEntry_6001, Rotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleFortInventoryEntry_6001, PropRotationDegrees, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleFortInventoryEntry_6001, UnknownData_A1M5, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleFortInventoryEntry_6001, ItemInventory, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleFortInventoryEntry_6001, Traits, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleFortInventoryEntry_6001, Coolness, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleFortInventoryEntry_6001, UnknownData_01KD, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSampleFortInventoryEntry_6001, 0x0080);
		}

		// struct FSampleFortInventoryResponse_6001
		TEST_METHOD(ScriptStruct__Frontiers__SampleFortInventoryResponse_6001)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleFortInventoryResponse_6001, InventoryEntries, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleFortInventoryResponse_6001, DataVersion, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSampleFortInventoryResponse_6001, 0x0020);
		}

		// struct FSampleFortInventoryEntry_5001
		TEST_METHOD(ScriptStruct__Frontiers__SampleFortInventoryEntry_5001)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleFortInventoryEntry_5001, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleFortInventoryEntry_5001, RowName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleFortInventoryEntry_5001, RelativePosition, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleFortInventoryEntry_5001, Extents, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleFortInventoryEntry_5001, Rotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleFortInventoryEntry_5001, PropRotationDegrees, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleFortInventoryEntry_5001, UnknownData_5PDO, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleFortInventoryEntry_5001, ItemInventory, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleFortInventoryEntry_5001, Traits, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSampleFortInventoryEntry_5001, 0x0078);
		}

		// struct FSampleFortInventoryResponse_5001
		TEST_METHOD(ScriptStruct__Frontiers__SampleFortInventoryResponse_5001)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleFortInventoryResponse_5001, InventoryEntries, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleFortInventoryResponse_5001, DataVersion, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSampleFortInventoryResponse_5001, 0x0020);
		}

		// struct FSampleQuestInstance_6001
		TEST_METHOD(ScriptStruct__Frontiers__SampleQuestInstance_6001)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleQuestInstance_6001, QuestId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleQuestInstance_6001, StartTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleQuestInstance_6001, IsCompleted, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleQuestInstance_6001, UnknownData_IW70, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleQuestInstance_6001, CompletedTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleQuestInstance_6001, CompletedCount, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleQuestInstance_6001, FailedCount, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleQuestInstance_6001, FailedLast, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleQuestInstance_6001, bPinned, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleQuestInstance_6001, UnknownData_LFUT, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleQuestInstance_6001, QuestInstanceId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleQuestInstance_6001, EpochTag, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleQuestInstance_6001, Progress, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleQuestInstance_6001, DataVersion, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleQuestInstance_6001, bIsCool, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleQuestInstance_6001, UnknownData_CGL9, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSampleQuestInstance_6001, 0x0078);
		}

		// struct FSampleQuestInstance_5001
		TEST_METHOD(ScriptStruct__Frontiers__SampleQuestInstance_5001)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleQuestInstance_5001, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleQuestInstance_5001, UnknownData_WTXK, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleQuestInstance_5001, Start, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleQuestInstance_5001, Completed, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleQuestInstance_5001, bShowCompletion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleQuestInstance_5001, bPinned, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleQuestInstance_5001, UnknownData_TJC0, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleQuestInstance_5001, Tasks, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSampleQuestInstance_5001, 0x0030);
		}

		// struct FSampleTrait_5001
		TEST_METHOD(ScriptStruct__Frontiers__SampleTrait_5001)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleTrait_5001, TraitName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleTrait_5001, PrimarySlot, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleTrait_5001, SecondarySlot, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleTrait_5001, Param, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleTrait_5001, Value, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleTrait_5001, UnknownData_GFC1, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSampleTrait_5001, 0x0040);
		}

		// struct FSampleCharacterCustomization_5001
		TEST_METHOD(ScriptStruct__Frontiers__SampleCharacterCustomization_5001)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleCharacterCustomization_5001, SkinDyeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleCharacterCustomization_5001, HairDyeName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleCharacterCustomization_5001, HeadItemName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleCharacterCustomization_5001, HairItemName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSampleCharacterCustomization_5001, 0x0020);
		}

		// struct FSampleAccountwide_6001
		TEST_METHOD(ScriptStruct__Frontiers__SampleAccountwide_6001)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleAccountwide_6001, Crafting, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleAccountwide_6001, Traits, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleAccountwide_6001, Contracts, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleAccountwide_6001, pets, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleAccountwide_6001, GameplayFortProps, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleAccountwide_6001, Inbox, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleAccountwide_6001, DataVersion, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSampleAccountwide_6001, 0x00A0);
		}

		// struct FSamplePersistenceServerRequest_6001
		TEST_METHOD(ScriptStruct__Frontiers__SamplePersistenceServerRequest_6001)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_6001, PlayerClassRowName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_6001, Traits, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_6001, WardrobeInventories, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_6001, WardrobeIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_6001, UnknownData_Q3TF, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_6001, WardrobeInventory, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_6001, ItemInventory, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_6001, ConsumableInventory, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_6001, PotionInventory, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_6001, PetInventory, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_6001, QuestInventory, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_6001, Skills, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_6001, Minions, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_6001, Customization, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_6001, Travel, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_6001, Accountwide, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_6001, Transient, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_6001, StartingAreaNames, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_6001, DataVersion, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSamplePersistenceServerRequest_6001, 0x0250);
		}

		// struct FSampleAccountwide_5001
		TEST_METHOD(ScriptStruct__Frontiers__SampleAccountwide_5001)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleAccountwide_5001, Crafting, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleAccountwide_5001, Traits, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleAccountwide_5001, Contracts, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleAccountwide_5001, pets, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleAccountwide_5001, GameplayFortProps, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleAccountwide_5001, Inbox, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleAccountwide_5001, DataVersion, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSampleAccountwide_5001, Coolness, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSampleAccountwide_5001, 0x00B0);
		}

		// struct FSamplePersistenceServerRequest_5001
		TEST_METHOD(ScriptStruct__Frontiers__SamplePersistenceServerRequest_5001)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_5001, PlayerClassRowName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_5001, Traits, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_5001, WardrobeInventories, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_5001, WardrobeIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_5001, UnknownData_CERY, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_5001, WardrobeInventory, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_5001, ItemInventory, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_5001, ConsumableInventory, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_5001, PotionInventory, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_5001, PetInventory, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_5001, QuestInventory, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_5001, Skills, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_5001, Minions, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_5001, Customization, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_5001, Travel, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_5001, Accountwide, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_5001, Transient, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_5001, StartingAreaName, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSamplePersistenceServerRequest_5001, DataVersion, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSamplePersistenceServerRequest_5001, 0x0258);
		}

		// struct FFortInventoryEntry_5001
		TEST_METHOD(ScriptStruct__Frontiers__FortInventoryEntry_5001)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoryEntry_5001, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoryEntry_5001, RowName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoryEntry_5001, RelativePosition, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoryEntry_5001, Extents, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoryEntry_5001, Rotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoryEntry_5001, UnknownData_TH1X, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoryEntry_5001, PropRotationDegrees, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoryEntry_5001, ItemInventory, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoryEntry_5001, Traits, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFortInventoryEntry_5001, 0x0068);
		}

		// struct FFortInventoryResponse_5001
		TEST_METHOD(ScriptStruct__Frontiers__FortInventoryResponse_5001)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoryResponse_5001, InventoryEntries, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFortInventoryResponse_5001, 0x0010);
		}

		// struct FQuestInstance_5001
		TEST_METHOD(ScriptStruct__Frontiers__QuestInstance_5001)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestInstance_5001, QuestId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestInstance_5001, StartTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestInstance_5001, IsCompleted, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestInstance_5001, UnknownData_AP73, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestInstance_5001, CompletedTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestInstance_5001, CompletedCount, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestInstance_5001, FailedCount, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestInstance_5001, FailedLast, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestInstance_5001, bPinned, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestInstance_5001, UnknownData_D2RV, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestInstance_5001, QuestInstanceId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestInstance_5001, EpochTag, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestInstance_5001, Progress, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestInstance_5001, DataVersion, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuestInstance_5001, 0x0070);
		}

		// struct FPersistenceCraftingData_6001
		TEST_METHOD(ScriptStruct__Frontiers__PersistenceCraftingData_6001)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceCraftingData_6001, InProgress, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceCraftingData_6001, SeenUnlockableRecipeNames, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersistenceCraftingData_6001, 0x0020);
		}

		// struct FAccountwideData_6001
		TEST_METHOD(ScriptStruct__Frontiers__AccountwideData_6001)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccountwideData_6001, Crafting, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccountwideData_6001, Traits, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccountwideData_6001, Contracts, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccountwideData_6001, pets, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccountwideData_6001, GameplayFortProps, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccountwideData_6001, Inbox, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccountwideData_6001, DataVersion, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAccountwideData_6001, 0x00A0);
		}

		// struct FPersistenceCraftingData_5001
		TEST_METHOD(ScriptStruct__Frontiers__PersistenceCraftingData_5001)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceCraftingData_5001, InProgress, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceCraftingData_5001, SeenUnlockableRecipes, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersistenceCraftingData_5001, 0x0020);
		}

		// struct FAccountwideData_5001
		TEST_METHOD(ScriptStruct__Frontiers__AccountwideData_5001)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccountwideData_5001, Crafting, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccountwideData_5001, Traits, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccountwideData_5001, Contracts, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccountwideData_5001, pets, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccountwideData_5001, GameplayFortProps, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccountwideData_5001, Inbox, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccountwideData_5001, DataVersion, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAccountwideData_5001, 0x00A0);
		}

		// struct FPersistenceSkills_6001
		TEST_METHOD(ScriptStruct__Frontiers__PersistenceSkills_6001)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceSkills_6001, Entries, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceSkills_6001, Levels, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceSkills_6001, LastSkillRespecUnixSeconds, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersistenceSkills_6001, 0x0028);
		}

		// struct FPersistenceServerRequest_6001
		TEST_METHOD(ScriptStruct__Frontiers__PersistenceServerRequest_6001)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_6001, PlayerClassRowName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_6001, Traits, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_6001, WardrobeInventories, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_6001, WardrobeIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_6001, UnknownData_5HTT, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_6001, WardrobeInventory, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_6001, ItemInventory, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_6001, ConsumableInventory, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_6001, PotionInventory, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_6001, PetInventory, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_6001, QuestInventory, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_6001, Skills, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_6001, Minions, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_6001, Customization, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_6001, Travel, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_6001, Accountwide, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_6001, Transient, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_6001, StartingAreaName, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_6001, DataVersion, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersistenceServerRequest_6001, 0x01D0);
		}

		// struct FPersistenceSkills_5001
		TEST_METHOD(ScriptStruct__Frontiers__PersistenceSkills_5001)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceSkills_5001, Entries, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceSkills_5001, Levels, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceSkills_5001, LastSkillRespec, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersistenceSkills_5001, 0x0028);
		}

		// struct FPersistenceServerRequest_5001
		TEST_METHOD(ScriptStruct__Frontiers__PersistenceServerRequest_5001)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_5001, PlayerClassRowName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_5001, Traits, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_5001, WardrobeInventories, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_5001, WardrobeIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_5001, UnknownData_WZJJ, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_5001, WardrobeInventory, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_5001, ItemInventory, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_5001, ConsumableInventory, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_5001, PotionInventory, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_5001, PetInventory, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_5001, QuestInventory, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_5001, Skills, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_5001, Minions, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_5001, Customization, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_5001, Travel, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_5001, Accountwide, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_5001, Transient, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_5001, StartingAreaName, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersistenceServerRequest_5001, DataVersion, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersistenceServerRequest_5001, 0x01D0);
		}

		// struct FSkillStartParams
		TEST_METHOD(ScriptStruct__Frontiers__SkillStartParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillStartParams, SkillStartType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillStartParams, RootMotionType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillStartParams, PriorityType, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillStartParams, OverrideCanSkillStart, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillStartParams, Param, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillStartParams, StartTimeOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillStartParams, SkillInstanceId, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillStartParams, 0x0010);
		}

		// struct FSkillHitHistory
		TEST_METHOD(ScriptStruct__Frontiers__SkillHitHistory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillHitHistory, SourceType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillHitHistory, UnknownData_PH22, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillHitHistory, HitTargets, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillHitHistory, 0x0040);
		}

		// struct FSpawnMinionParams
		TEST_METHOD(ScriptStruct__Frontiers__SpawnMinionParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnMinionParams, bSaveCharacterOnSpawn, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnMinionParams, UnknownData_YCK5, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnMinionParams, MinionName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnMinionParams, AcceptableRadius, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnMinionParams, Level, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnMinionParams, bChampion, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnMinionParams, bPawnIsOwner, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnMinionParams, bFindRandomPointNearTarget, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnMinionParams, SpawnSkillSlot, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnMinionParams, InventoryContainer, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnMinionParams, UnknownData_YDPE, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpawnMinionParams, 0x0030);
		}

		// struct FSkillRepArrayEntry
		TEST_METHOD(ScriptStruct__Frontiers__SkillRepArrayEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillRepArrayEntry, Set, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillRepArrayEntry, Slot, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillRepArrayEntry, UnknownData_0GIX, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillRepArrayEntry, SkillClass, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillRepArrayEntry, Animation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillRepArrayEntry, UnknownData_KCGT, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillRepArrayEntry, AnimationOverride, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillRepArrayEntry, 0x0060);
		}

		// struct FSkillsBalanceData : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__SkillsBalanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillsBalanceData, UnknownData_5H6Z, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillsBalanceData, DamageMultiplier, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillsBalanceData, UnknownData_IVFN, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillsBalanceData, 0x0028);
		}

		// struct FSkillData : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__SkillData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, UnknownData_KMM3, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, SkillClass, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, CharacterTag, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, DisplayName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, Animation, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, UnknownData_W6SA, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, AnimationOverride, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, MaximumSkillLevel, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, MinimumSkillLevel, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, bShowSkillLevel, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, UnknownData_TT1T, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, GameplayTags, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, ExclusiveTags, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, RequiredSkillTab, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, RequiredLevelInSkillTab, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, TraitMode, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, UnknownData_R189, 0x00E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, RequiredItemTags, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, TraitString, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, PerLevelDisplayTexts, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, PerLevelDisplayCategories, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, TraitCurve1, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, TraitCurve2, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, TraitCurve3, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, TraitCurve4, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, UnknownData_K4SO, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, Tier1TraitString, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, Tier1DisplayText, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, Tier2TraitString, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, Tier2DisplayText, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, Tier3TraitString, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, Tier3DisplayText, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, bCanNeverBeUnlocked, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, bHiddenBehindCheats, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, UnknownData_LQ4A, 0x0212);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, SkillPanelRow, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, SkillPanelColumn, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, DamageFactor, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, Cooldown, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, EnergyCost, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, Param1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, UnknownData_2MDC, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, Param1_DevNote, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, Param2, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, UnknownData_ZL47, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, Param2_DevNote, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, Param3, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, UnknownData_41UH, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, Param3_DevNote, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, DefaultSkillSet, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, DefaultSkillSlot, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, UnknownData_ZU6X, 0x0272);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, Icon, 0x0272);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillData, SecondaryEnergyCosts, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillData, 0x02B0);
		}

		// struct FSkillsTabData : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__SkillsTabData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillsTabData, UnknownData_MCZD, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillsTabData, AssignableSkillSet, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillsTabData, UnknownData_Z01E, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillsTabData, DisplayName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillsTabData, Description, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillsTabData, Icon, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillsTabData, Background, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillsTabData, EmberWeaponHeaderBackground, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillsTabData, EmberWeaponIcon, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillsTabData, EmberWeaponFlavorText, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillsTabData, UIColor, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillsTabData, SkillTabType, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillsTabData, UnknownData_W1HE, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillsTabData, DescriptionClass, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillsTabData, UnknownData_APT3, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillsTabData, GameplayTagRequireAny, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillsTabData, GameplayTagExcludeAny, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillsTabData, 0x0158);
		}

		// struct FSpokeData : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__SpokeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpokeData, UnknownData_TCMC, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpokeData, SpokeName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpokeData, GameplayTag, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpokeData, PrimaryMonsterGameplayTag, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpokeData, PrimaryElementGameplayTag, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpokeData, TownAreaRow, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpokeData, TownAreaLevel, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpokeData, bHiddenBehindCheats, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpokeData, UnknownData_K6A1, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpokeData, 0x0090);
		}

		// struct FStatusEffectData : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__StatusEffectData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectData, UnknownData_LL7Q, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectData, StatusEffectClass, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectData, bPersistAcrossTravel, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectData, UnknownData_CFP5, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatusEffectData, 0x0050);
		}

		// struct FServerPublisherPlayer
		TEST_METHOD(ScriptStruct__Frontiers__ServerPublisherPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerPublisherPlayer, AccountId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerPublisherPlayer, PlatformNickname, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerPublisherPlayer, PlatformAccountId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerPublisherPlayer, SessionId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerPublisherPlayer, CharacterID, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerPublisherPlayer, CharacterName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerPublisherPlayer, PartyId, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerPublisherPlayer, 0x0070);
		}

		// struct FSwitchboardUpdateInfo
		TEST_METHOD(ScriptStruct__Frontiers__SwitchboardUpdateInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwitchboardUpdateInfo, ZoneId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwitchboardUpdateInfo, Players, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwitchboardUpdateInfo, Platform, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSwitchboardUpdateInfo, 0x0030);
		}

		// struct FSwitchboardEvent
		TEST_METHOD(ScriptStruct__Frontiers__SwitchboardEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwitchboardEvent, EventType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwitchboardEvent, Key, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwitchboardEvent, ForCharacterId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwitchboardEvent, ForAccountId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwitchboardEvent, ForPlatformNickname, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwitchboardEvent, ForPlatformAccountId, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwitchboardEvent, ForZoneId, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwitchboardEvent, ForPartyId, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwitchboardEvent, ForSessionId, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwitchboardEvent, ForEveryone, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwitchboardEvent, UnknownData_TB9F, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwitchboardEvent, EventJsonData, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSwitchboardEvent, 0x00A8);
		}

		// struct FSwitchboardEventMessageBody
		TEST_METHOD(ScriptStruct__Frontiers__SwitchboardEventMessageBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwitchboardEventMessageBody, Language, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwitchboardEventMessageBody, Message, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSwitchboardEventMessageBody, 0x0020);
		}

		// struct FSwitchboardEventMessageDetails
		TEST_METHOD(ScriptStruct__Frontiers__SwitchboardEventMessageDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwitchboardEventMessageDetails, MessageType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwitchboardEventMessageDetails, ShowInChat, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwitchboardEventMessageDetails, UnknownData_2WAV, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwitchboardEventMessageDetails, Duration, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwitchboardEventMessageDetails, Message, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSwitchboardEventMessageDetails, 0x0028);
		}

		// struct FTermsOfServiceStaticData
		TEST_METHOD(ScriptStruct__Frontiers__TermsOfServiceStaticData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTermsOfServiceStaticData, Version, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTermsOfServiceStaticData, UnknownData_2DS3, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTermsOfServiceStaticData, Content, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTermsOfServiceStaticData, 0x0018);
		}

		// struct FTermsTarget : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__TermsTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTermsTarget, UnknownData_EYU7, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTermsTarget, Platforms, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTermsTarget, LocaleString, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTermsTarget, TermsType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTermsTarget, UnknownData_ANL8, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTermsTarget, LanguageString, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTermsTarget, TermsAddress, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTermsTarget, UnknownData_H0AA, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTermsTarget, 0x0088);
		}

		// struct FFuseSourceData
		TEST_METHOD(ScriptStruct__Frontiers__FuseSourceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFuseSourceData, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFuseSourceData, UnknownData_ZD7A, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFuseSourceData, 0x0020);
		}

		// struct FFuserRect
		TEST_METHOD(ScriptStruct__Frontiers__FuserRect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFuserRect, UnknownData_6VSV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFuserRect, 0x0014);
		}

		// struct FTimeOfDayMonsterManagerSettings
		TEST_METHOD(ScriptStruct__Frontiers__TimeOfDayMonsterManagerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayMonsterManagerSettings, PeakDramaMultiplier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayMonsterManagerSettings, PeakDramaAdded, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayMonsterManagerSettings, RelaxStateLengthMultiplier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayMonsterManagerSettings, RelaxStateLengthAdded, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeOfDayMonsterManagerSettings, 0x0010);
		}

		// struct FLightAccentSetting
		TEST_METHOD(ScriptStruct__Frontiers__LightAccentSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightAccentSetting, Tint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightAccentSetting, Notes, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightAccentSetting, 0x0020);
		}

		// struct FBlendSpaceList
		TEST_METHOD(ScriptStruct__Frontiers__BlendSpaceList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSpaceList, BlendSpaces, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendSpaceList, 0x0010);
		}

		// struct FInventoryBasedAnimGroup
		TEST_METHOD(ScriptStruct__Frontiers__InventoryBasedAnimGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryBasedAnimGroup, RequireAnyGameplayTags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryBasedAnimGroup, IdleMoveBlendSpace, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryBasedAnimGroup, UnknownData_LQNQ, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInventoryBasedAnimGroup, 0x0048);
		}

		// struct FSkillAnimationData
		TEST_METHOD(ScriptStruct__Frontiers__SkillAnimationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillAnimationData, Skill, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillAnimationData, UnknownData_DMXD, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillAnimationData, 0x0020);
		}

		// struct FInventoryCombo
		TEST_METHOD(ScriptStruct__Frontiers__InventoryCombo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryCombo, UnknownData_VYD2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInventoryCombo, 0x001C);
		}

		// struct FTLAnimInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__Frontiers__TLAnimInstanceProxy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTLAnimInstanceProxy, 0x0760);
		}

		// struct FTLAnimNode_Slot : public FAnimNode_Slot
		TEST_METHOD(ScriptStruct__Frontiers__TLAnimNode_Slot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLAnimNode_Slot, SlotNameOverride, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTLAnimNode_Slot, 0x0050);
		}

		// struct FFrontiers_FRunScript
		TEST_METHOD(ScriptStruct__Frontiers__RunScript)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRunScript, UnknownData_HTCM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRunScript, 0x0050);
		}

		// struct FTraitDisplayTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__TraitDisplayTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTraitDisplayTableRowHandle, 0x0010);
		}

		// struct FStatusEffectTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__StatusEffectTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatusEffectTableRowHandle, 0x0010);
		}

		// struct FNameSpawnTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__NameSpawnTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameSpawnTableRowHandle, 0x0010);
		}

		// struct FItemQualityTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__ItemQualityTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemQualityTableRowHandle, 0x0010);
		}

		// struct FFoliageSoundTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__FoliageSoundTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageSoundTableRowHandle, 0x0010);
		}

		// struct FDungeonChallengeTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__DungeonChallengeTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDungeonChallengeTableRowHandle, 0x0010);
		}

		// struct FDifficultyTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__DifficultyTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDifficultyTableRowHandle, 0x0010);
		}

		// struct FCinematicTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__CinematicTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCinematicTableRowHandle, 0x0010);
		}

		// struct FDecalCurveBase
		TEST_METHOD(ScriptStruct__Frontiers__DecalCurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDecalCurveBase, LoopStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDecalCurveBase, LoopEnd, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDecalCurveBase, bNormalizeToLifespan, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDecalCurveBase, UnknownData_KIKB, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDecalCurveBase, 0x000C);
		}

		// struct FDecalCurveColor : public FDecalCurveBase
		TEST_METHOD(ScriptStruct__Frontiers__DecalCurveColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDecalCurveColor, UnknownData_CADX, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDecalCurveColor, Curve, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDecalCurveColor, 0x0218);
		}

		// struct FDecalCurveColorEntry
		TEST_METHOD(ScriptStruct__Frontiers__DecalCurveColorEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDecalCurveColorEntry, Parameter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDecalCurveColorEntry, Curve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDecalCurveColorEntry, 0x0220);
		}

		// struct FDecalCurveFloat : public FDecalCurveBase
		TEST_METHOD(ScriptStruct__Frontiers__DecalCurveFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDecalCurveFloat, UnknownData_RC4N, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDecalCurveFloat, Curve, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDecalCurveFloat, 0x0098);
		}

		// struct FDecalCurveFloatEntry
		TEST_METHOD(ScriptStruct__Frontiers__DecalCurveFloatEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDecalCurveFloatEntry, Parameter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDecalCurveFloatEntry, Curve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDecalCurveFloatEntry, 0x00A0);
		}

		// struct FDecalTextureEntry
		TEST_METHOD(ScriptStruct__Frontiers__DecalTextureEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDecalTextureEntry, Parameter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDecalTextureEntry, Texture, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDecalTextureEntry, 0x0010);
		}

		// struct FClientFortStashEntry
		TEST_METHOD(ScriptStruct__Frontiers__ClientFortStashEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientFortStashEntry, PropRowIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientFortStashEntry, PropCount, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientFortStashEntry, 0x0004);
		}

		// struct FInventoryEntryMinion : public FInventoryEntry
		TEST_METHOD(ScriptStruct__Frontiers__InventoryEntryMinion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntryMinion, PetStoredGuid, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntryMinion, Minion, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntryMinion, PetRowName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntryMinion, PetName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntryMinion, ServerTimeAddedToInventory, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntryMinion, UnknownData_46N7, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInventoryEntryMinion, 0x0060);
		}

		// struct FActivatePetResult
		TEST_METHOD(ScriptStruct__Frontiers__ActivatePetResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActivatePetResult, UnknownData_8AL8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActivatePetResult, 0x0008);
		}

		// struct FInventoryEntryPetStored : public FInventoryEntry
		TEST_METHOD(ScriptStruct__Frontiers__InventoryEntryPetStored)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntryPetStored, MinionRowName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntryPetStored, PetName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntryPetStored, AssignedSkills, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntryPetStored, SkillLevels, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryEntryPetStored, Traits, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInventoryEntryPetStored, 0x00A8);
		}

		// struct FInventorySlotData
		TEST_METHOD(ScriptStruct__Frontiers__InventorySlotData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, RequireAll, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, RequireAny, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, ExcludeAny, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, UnknownData_87CA, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, AttachmentSlot, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, UnknownData_D0JW, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, SlotName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, bDisplayInInventory, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, bIgnoreInWardrobe, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, WeaponSuite, 0x00CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, WeaponSlot, 0x00CB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, bIsEmberWeapon, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, UnknownData_RDFT, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, SlotIcon, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInventorySlotData, 0x00D8);
		}

		// struct FVector2D_NetQuantizeDirection : public FVector2D
		TEST_METHOD(ScriptStruct__Frontiers__Vector2D_NetQuantizeDirection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2D_NetQuantizeDirection, 0x0008);
		}

		// struct FRotator_NetQuantizeByte : public FRotator
		TEST_METHOD(ScriptStruct__Frontiers__Rotator_NetQuantizeByte)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotator_NetQuantizeByte, 0x000C);
		}

		// struct FActivateSkillRequest
		TEST_METHOD(ScriptStruct__Frontiers__ActivateSkillRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActivateSkillRequest, Slot, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActivateSkillRequest, UnknownData_O9U7, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActivateSkillRequest, TargetActor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActivateSkillRequest, UnknownData_2D24, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActivateSkillRequest, bCommitted, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActivateSkillRequest, UnknownData_C2PR, 0x001F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActivateSkillRequest, 0x0028);
		}

		// struct FMaterialOverrideRequest
		TEST_METHOD(ScriptStruct__Frontiers__MaterialOverrideRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialOverrideRequest, OverrideMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialOverrideRequest, Priority, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialOverrideRequest, ParentGuid, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialOverrideRequest, bIsActive, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialOverrideRequest, UnknownData_KIV6, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialOverrideRequest, 0x0020);
		}

		// struct FCachedMaterialArray
		TEST_METHOD(ScriptStruct__Frontiers__CachedMaterialArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedMaterialArray, CachedMaterials, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedMaterialArray, 0x0010);
		}

		// struct FTLNetViewer : public FNetViewer
		TEST_METHOD(ScriptStruct__Frontiers__TLNetViewer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTLNetViewer, 0x0030);
		}

		// struct FTLConnectionAlwaysRelevantNodePair
		TEST_METHOD(ScriptStruct__Frontiers__TLConnectionAlwaysRelevantNodePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLConnectionAlwaysRelevantNodePair, NetConnection, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLConnectionAlwaysRelevantNodePair, Node, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTLConnectionAlwaysRelevantNodePair, 0x0010);
		}

		// struct FServerPerformanceData
		TEST_METHOD(ScriptStruct__Frontiers__ServerPerformanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerPerformanceData, FrameTimeMilliSeconds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerPerformanceData, GameThreadTimeMilliSeconds, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerPerformanceData, UsedPhysicalMemory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerPerformanceData, AvailablePhysicalMemory, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerPerformanceData, 0x0010);
		}

		// struct FServerPublisherData
		TEST_METHOD(ScriptStruct__Frontiers__ServerPublisherData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerPublisherData, Performance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerPublisherData, PlayerData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerPublisherData, LoadedAreaNames, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerPublisherData, ContentVersion, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerPublisherData, UnknownData_5M2G, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerPublisherData, 0x0038);
		}

		// struct FEnvironmentMapping
		TEST_METHOD(ScriptStruct__Frontiers__EnvironmentMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvironmentMapping, Version, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvironmentMapping, Environment, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvironmentMapping, 0x0020);
		}

		// struct FDirectorPlatforms
		TEST_METHOD(ScriptStruct__Frontiers__DirectorPlatforms)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorPlatforms, Platform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorPlatforms, EnvironmentMappings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectorPlatforms, 0x0020);
		}

		// struct FDirectorData
		TEST_METHOD(ScriptStruct__Frontiers__DirectorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorData, Platforms, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectorData, 0x0010);
		}

		// struct FLoginServiceAccountIds
		TEST_METHOD(ScriptStruct__Frontiers__LoginServiceAccountIds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoginServiceAccountIds, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoginServiceAccountIds, platform_id, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLoginServiceAccountIds, 0x0020);
		}

		// struct FLinkCodeResponse
		TEST_METHOD(ScriptStruct__Frontiers__LinkCodeResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinkCodeResponse, LinkCode, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinkCodeResponse, 0x0010);
		}

		// struct FPickCharacterResponse
		TEST_METHOD(ScriptStruct__Frontiers__PickCharacterResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPickCharacterResponse, Address, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPickCharacterResponse, Area, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPickCharacterResponse, ID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPickCharacterResponse, Players, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPickCharacterResponse, Port, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPickCharacterResponse, session, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPickCharacterResponse, Spawned, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPickCharacterResponse, Version, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPickCharacterResponse, MuxerToken, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPickCharacterResponse, ContentVersion, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPickCharacterResponse, UnknownData_OTFI, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPickCharacterResponse, 0x0080);
		}

		// struct FServerAddress
		TEST_METHOD(ScriptStruct__Frontiers__ServerAddress)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddress, Address, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddress, Port, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddress, UnknownData_U07M, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerAddress, 0x0018);
		}

		// struct FCameraRequest
		TEST_METHOD(ScriptStruct__Frontiers__CameraRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraRequest, CameraType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraRequest, UnknownData_TSM2, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraRequest, Length, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraRequest, Pitch, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraRequest, PlayerFaceYaw, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraRequest, ZoomRate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraRequest, TargetOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraRequest, OffsetRate, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraRequest, UnknownData_07X3, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraRequest, 0x0028);
		}

		// struct FTrapSpawnData : public FSpawnDataBase
		TEST_METHOD(ScriptStruct__Frontiers__TrapSpawnData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrapSpawnData, 0x0178);
		}

		// struct FTrackFollowingData
		TEST_METHOD(ScriptStruct__Frontiers__TrackFollowingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackFollowingData, ControlPointId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackFollowingData, ControlPointParameter, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackFollowingData, Timestamp, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackFollowingData, bIsStopped, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackFollowingData, UnknownData_IJ55, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackFollowingData, 0x0010);
		}

		// struct FTraitDisplayData : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__TraitDisplayData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitDisplayData, UnknownData_4DWX, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitDisplayData, TraitTextFormat, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitDisplayData, UnknownData_DED4, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitDisplayData, Icon, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitDisplayData, DisplayCategory, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitDisplayData, bShowAsNegative, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitDisplayData, UnknownData_EMKI, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitDisplayData, Trait, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitDisplayData, DisplayPrimarySlot, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitDisplayData, DisplaySecondarySlot, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitDisplayData, UnknownData_A7BH, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitDisplayData, DisplayName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitDisplayData, DisplayNameSingular, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitDisplayData, CategoryName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitDisplayData, UnknownData_0EG0, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTraitDisplayData, 0x00A0);
		}

		// struct FRepTraitPair : public FFastArraySerializerItem
		TEST_METHOD(ScriptStruct__Frontiers__RepTraitPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepTraitPair, UnknownData_UXZ3, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepTraitPair, TraitPair, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepTraitPair, 0x0020);
		}

		// struct FRepTraitPairArray : public FFastArraySerializer
		TEST_METHOD(ScriptStruct__Frontiers__RepTraitPairArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepTraitPairArray, Items, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepTraitPairArray, 0x0118);
		}

		// struct FTraitData : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__TraitData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitData, UnknownData_6Z5K, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitData, TwoCC, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitData, TraitType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitData, UnknownData_ERLY, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitData, ParamTagParents, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitData, ValueMin, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitData, ValueMax, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitData, ParamType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitData, ReplicateType, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitData, UnknownData_BIJJ, 0x0082);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitData, ShowAsCurrency, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitData, bShouldPersist, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitData, bPerAccount, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitData, bIsCombatTrait, 0x009A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitData, bInheritFromInstigator, 0x009B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitData, bRemoveFromTraitsIfZero, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitData, UnknownData_4C14, 0x009D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTraitData, 0x00A8);
		}

		// struct FGearModData
		TEST_METHOD(ScriptStruct__Frontiers__GearModData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGearModData, GearToModify, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGearModData, ModType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGearModData, UnknownData_P9LW, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGearModData, AttachOffset, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGearModData, 0x0018);
		}

		// struct FWardrobePart
		TEST_METHOD(ScriptStruct__Frontiers__WardrobePart)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWardrobePart, MeshComponent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWardrobePart, bAttachmentsCanOverride, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWardrobePart, bUsedAsParentMesh, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWardrobePart, UnknownData_RBOE, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWardrobePart, Dye, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWardrobePart, DyePreviewOverride, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWardrobePart, DefaultSkinTone, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWardrobePart, DefaultHair, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWardrobePart, DefaultEye, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWardrobePart, KeyableMaterial, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWardrobePart, MaterialParameters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWardrobePart, CustomSkinColorTextures, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWardrobePart, CustomOverrides, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWardrobePart, ItemTag, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWardrobePart, UnknownData_OIX9, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWardrobePart, 0x00C0);
		}

		// struct FAreaQueryResponse
		TEST_METHOD(ScriptStruct__Frontiers__AreaQueryResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaQueryResponse, Area, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaQueryResponse, Forts, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaQueryResponse, session, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaQueryResponse, Region, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaQueryResponse, Platform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaQueryResponse, Data, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaQueryResponse, UnknownData_HBMQ, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAreaQueryResponse, 0x0120);
		}

		// struct FAreaQueryResponseData
		TEST_METHOD(ScriptStruct__Frontiers__AreaQueryResponseData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaQueryResponseData, AreaDataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaQueryResponseData, bForceSetSeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaQueryResponseData, UnknownData_3FJ2, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaQueryResponseData, RandomSeed, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaQueryResponseData, bUseLegacyFractions, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaQueryResponseData, UnknownData_5M7D, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaQueryResponseData, MapWorks, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAreaQueryResponseData, 0x00C0);
		}

		// struct FAreaLookupResponse
		TEST_METHOD(ScriptStruct__Frontiers__AreaLookupResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaLookupResponse, UnknownData_6QZK, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaLookupResponse, Address, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaLookupResponse, Port, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaLookupResponse, ContentVersion, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaLookupResponse, MuxerToken, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAreaLookupResponse, 0x0030);
		}

		// struct FTravelSessionLookupResponse
		TEST_METHOD(ScriptStruct__Frontiers__TravelSessionLookupResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTravelSessionLookupResponse, Zone, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTravelSessionLookupResponse, 0x0010);
		}

		// struct FXboxUnidirectionalRecentPlayer
		TEST_METHOD(ScriptStruct__Frontiers__XboxUnidirectionalRecentPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXboxUnidirectionalRecentPlayer, encounterType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXboxUnidirectionalRecentPlayer, UnknownData_5RZH, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXboxUnidirectionalRecentPlayer, ID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXboxUnidirectionalRecentPlayer, network, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXboxUnidirectionalRecentPlayer, Timestamp, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXboxUnidirectionalRecentPlayer, 0x0038);
		}

		// struct FXboxRecentPlayersByXuid
		TEST_METHOD(ScriptStruct__Frontiers__XboxRecentPlayersByXuid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXboxRecentPlayersByXuid, xuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXboxRecentPlayersByXuid, recentPlayers, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXboxRecentPlayersByXuid, 0x0020);
		}

		// struct FXboxMultiplayerActivityServerRecentPlayers
		TEST_METHOD(ScriptStruct__Frontiers__XboxMultiplayerActivityServerRecentPlayers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXboxMultiplayerActivityServerRecentPlayers, recentPlayersByXuid, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXboxMultiplayerActivityServerRecentPlayers, 0x0010);
		}

		// struct FXboxBidirectionalRecentPlayer
		TEST_METHOD(ScriptStruct__Frontiers__XboxBidirectionalRecentPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXboxBidirectionalRecentPlayer, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXboxBidirectionalRecentPlayer, network, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXboxBidirectionalRecentPlayer, 0x0020);
		}

		// struct FXboxRecentPlayerGroup
		TEST_METHOD(ScriptStruct__Frontiers__XboxRecentPlayerGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXboxRecentPlayerGroup, encounterType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXboxRecentPlayerGroup, UnknownData_XQMV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXboxRecentPlayerGroup, recentPlayers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXboxRecentPlayerGroup, Timestamp, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXboxRecentPlayerGroup, 0x0028);
		}

		// struct FXboxMultiplayerActivityServerRecentPlayerGroups
		TEST_METHOD(ScriptStruct__Frontiers__XboxMultiplayerActivityServerRecentPlayerGroups)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXboxMultiplayerActivityServerRecentPlayerGroups, recentPlayerGroups, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXboxMultiplayerActivityServerRecentPlayerGroups, 0x0010);
		}

		// struct FXboxMultiplayerActivityDelete
		TEST_METHOD(ScriptStruct__Frontiers__XboxMultiplayerActivityDelete)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXboxMultiplayerActivityDelete, sequenceNumber, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXboxMultiplayerActivityDelete, 0x0010);
		}

		// struct FXboxMultiplayerActivityUpdate
		TEST_METHOD(ScriptStruct__Frontiers__XboxMultiplayerActivityUpdate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXboxMultiplayerActivityUpdate, connectionString, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXboxMultiplayerActivityUpdate, joinRestriction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXboxMultiplayerActivityUpdate, UnknownData_VI64, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXboxMultiplayerActivityUpdate, sequenceNumber, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXboxMultiplayerActivityUpdate, 0x0028);
		}

		// struct FActiveTraitValue
		TEST_METHOD(ScriptStruct__Frontiers__ActiveTraitValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveTraitValue, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveTraitValue, Timestamp, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveTraitValue, SkillInstanceId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveTraitValue, 0x000C);
		}

		// struct FActiveTraitMonitorRule
		TEST_METHOD(ScriptStruct__Frontiers__ActiveTraitMonitorRule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveTraitMonitorRule, ActiveTrait, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveTraitMonitorRule, Condition, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveTraitMonitorRule, UnknownData_F59Y, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveTraitMonitorRule, Value, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveTraitMonitorRule, 0x0018);
		}

		// struct FActiveTraitMonitorAction
		TEST_METHOD(ScriptStruct__Frontiers__ActiveTraitMonitorAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveTraitMonitorAction, Prerequisite, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveTraitMonitorAction, Rule, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveTraitMonitorAction, Data, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveTraitMonitorAction, UnknownData_2WH2, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveTraitMonitorAction, 0x0040);
		}

		// struct FPrePickedActorClass
		TEST_METHOD(ScriptStruct__Frontiers__PrePickedActorClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrePickedActorClass, ActorClass, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrePickedActorClass, 0x0028);
		}

		// struct FDeathInfo
		TEST_METHOD(ScriptStruct__Frontiers__DeathInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeathInfo, bIsAlive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeathInfo, UnknownData_49DV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeathInfo, Killer, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeathInfo, DeathType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeathInfo, UnknownData_ERU0, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDeathInfo, 0x0018);
		}

		// struct FActorProxyEntryBase
		TEST_METHOD(ScriptStruct__Frontiers__ActorProxyEntryBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorProxyEntryBase, UnknownData_Y5IL, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorProxyEntryBase, Weight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorProxyEntryBase, UnknownData_CURZ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorProxyEntryBase, GameplayTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorProxyEntryBase, ClassLineage, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorProxyEntryBase, 0x0040);
		}

		// struct FActorProxyEntry : public FActorProxyEntryBase
		TEST_METHOD(ScriptStruct__Frontiers__ActorProxyEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorProxyEntry, Proxy, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorProxyEntry, 0x0068);
		}

		// struct FActorProxyNodeMonsterSpawnerEntry : public FActorProxyEntryBase
		TEST_METHOD(ScriptStruct__Frontiers__ActorProxyNodeMonsterSpawnerEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorProxyNodeMonsterSpawnerEntry, Proxy, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorProxyNodeMonsterSpawnerEntry, 0x0068);
		}

		// struct FActorProxyNodeGadgetEntry : public FActorProxyEntryBase
		TEST_METHOD(ScriptStruct__Frontiers__ActorProxyNodeGadgetEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorProxyNodeGadgetEntry, Proxy, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorProxyNodeGadgetEntry, 0x0068);
		}

		// struct FActorProxyNodeBreakableEntry : public FActorProxyEntryBase
		TEST_METHOD(ScriptStruct__Frontiers__ActorProxyNodeBreakableEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorProxyNodeBreakableEntry, Proxy, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorProxyNodeBreakableEntry, 0x0068);
		}

		// struct FActorProxyNodeHazardEntry : public FActorProxyEntryBase
		TEST_METHOD(ScriptStruct__Frontiers__ActorProxyNodeHazardEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorProxyNodeHazardEntry, Proxy, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorProxyNodeHazardEntry, 0x0068);
		}

		// struct FActorProxyNodeGameplayTagEntry : public FActorProxyEntryBase
		TEST_METHOD(ScriptStruct__Frontiers__ActorProxyNodeGameplayTagEntry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorProxyNodeGameplayTagEntry, 0x0040);
		}

		// struct FActorStatusEffectPair
		TEST_METHOD(ScriptStruct__Frontiers__ActorStatusEffectPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorStatusEffectPair, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorStatusEffectPair, StatusEffect, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorStatusEffectPair, 0x0010);
		}

		// struct FTLCurveTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__TLCurveTableRowHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLCurveTableRowHandle, RowName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLCurveTableRowHandle, CurveTable, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTLCurveTableRowHandle, 0x0030);
		}

		// struct FTraitInitializer
		TEST_METHOD(ScriptStruct__Frontiers__TraitInitializer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitInitializer, Trait, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitInitializer, PrimarySlot, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitInitializer, SecondarySlot, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitInitializer, UnknownData_K7ZD, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitInitializer, GameplayTag, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitInitializer, ParamRowName, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitInitializer, Param, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitInitializer, UnknownData_DCCI, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitInitializer, Value, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitInitializer, UnknownData_FMEB, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitInitializer, PerLevelCurveRowHandle, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitInitializer, PerLevelMultiplier, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitInitializer, UnknownData_PRTS, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTraitInitializer, 0x0068);
		}

		// struct FNotifyCondition
		TEST_METHOD(ScriptStruct__Frontiers__NotifyCondition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNotifyCondition, TraitRequirement, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNotifyCondition, TraitCondition, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNotifyCondition, UnknownData_QPOJ, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNotifyCondition, 0x0070);
		}

		// struct FCameraShakeData
		TEST_METHOD(ScriptStruct__Frontiers__CameraShakeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeData, Shake, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeData, bUseSourceAsEpicenter, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeData, UnknownData_IJH0, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeData, InnerRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeData, OuterRadius, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeData, Intensity, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeData, Falloff, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeData, bOrientShakeTowardsEpicenter, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeData, bOnlyForOwner, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeData, UnknownData_V75U, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraShakeData, 0x0020);
		}

		// struct FAnimNotifyFMODEventContextData
		TEST_METHOD(ScriptStruct__Frontiers__AnimNotifyFMODEventContextData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyFMODEventContextData, Event, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyFMODEventContextData, SourceOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyFMODEventContextData, bAttached, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyFMODEventContextData, UnknownData_A2IN, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyFMODEventContextData, SocketName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyFMODEventContextData, UnknownData_7VHU, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyFMODEventContextData, 0x0038);
		}

		// struct FMapWorksSpawnEntry : public FSpawnPickerEntryBase
		TEST_METHOD(ScriptStruct__Frontiers__MapWorksSpawnEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapWorksSpawnEntry, MapWorksDataRows, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMapWorksSpawnEntry, 0x0038);
		}

		// struct FMinionSpawnEntry : public FSpawnPickerEntryBase
		TEST_METHOD(ScriptStruct__Frontiers__MinionSpawnEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinionSpawnEntry, MinionSpawnRow, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMinionSpawnEntry, 0x0038);
		}

		// struct FActorLimit
		TEST_METHOD(ScriptStruct__Frontiers__ActorLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorLimit, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorLimit, UnknownData_4B42, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorLimit, ActorClass, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorLimit, bMatchChildClasses, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorLimit, UnknownData_BERS, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorLimit, TagsToMatch, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorLimit, Number, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorLimit, UnknownData_9KWX, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorLimit, 0x00D0);
		}

		// struct FRuleSetMetaData
		TEST_METHOD(ScriptStruct__Frontiers__RuleSetMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuleSetMetaData, Notes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuleSetMetaData, RuleSetClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuleSetMetaData, UnknownData_XZUN, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuleSetMetaData, Method, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuleSetMetaData, UnknownData_AN6C, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuleSetMetaData, Attempts, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuleSetMetaData, RequiredSuccessfulAttempts, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuleSetMetaData, bSkipToNextAfterRequiredRuleSuccess, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuleSetMetaData, bAttemptsTimesSize, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuleSetMetaData, bRequiredTimesSize, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuleSetMetaData, bAttemptsTimesForts, 0x002F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuleSetMetaData, bRequiredTimesFortCount, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuleSetMetaData, WarpAddedByRuleSet, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuleSetMetaData, bStopHere, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuleSetMetaData, UnknownData_5BWX, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuleSetMetaData, 0x0038);
		}

		// struct FTLLevelInstance
		TEST_METHOD(ScriptStruct__Frontiers__TLLevelInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLLevelInstance, LevelAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLLevelInstance, LevelProxy, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLLevelInstance, UnknownData_K3PY, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTLLevelInstance, 0x0070);
		}

		// struct FFortInventoryWithOwner
		TEST_METHOD(ScriptStruct__Frontiers__FortInventoryWithOwner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoryWithOwner, AccountId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoryWithOwner, AccountName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoryWithOwner, PlatformAccountId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoryWithOwner, Value, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFortInventoryWithOwner, 0x0050);
		}

		// struct FMissingFortInventory
		TEST_METHOD(ScriptStruct__Frontiers__MissingFortInventory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissingFortInventory, AccountId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMissingFortInventory, AccountName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMissingFortInventory, 0x0020);
		}

		// struct FFortInventoriesResponse
		TEST_METHOD(ScriptStruct__Frontiers__FortInventoriesResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoriesResponse, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoriesResponse, Missing, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFortInventoriesResponse, 0x0020);
		}

		// struct FAreaRecord
		TEST_METHOD(ScriptStruct__Frontiers__AreaRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaRecord, Loader, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaRecord, LastActiveTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaRecord, Seed, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaRecord, UnknownData_YTJB, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAreaRecord, 0x0030);
		}

		// struct FRulesFilter
		TEST_METHOD(ScriptStruct__Frontiers__RulesFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRulesFilter, ContainsElements, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRulesFilter, ContainsRule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRulesFilter, UnknownData_PADU, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRulesFilter, EndsWith, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRulesFilter, StartsWith, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRulesFilter, 0x0038);
		}

		// struct FTextureRules
		TEST_METHOD(ScriptStruct__Frontiers__TextureRules)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureRules, NameFilter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureRules, Compression, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureRules, bSRGBEnabled, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureRules, TextureFilterType, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureRules, MipGenSettings, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureRules, Group, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureRules, UnknownData_FQDP, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureRules, MaxTextureSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureRules, LODBias, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureRules, XAddress, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureRules, YAddress, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureRules, UnknownData_BSOZ, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureRules, 0x0050);
		}

		// struct FFBXRules
		TEST_METHOD(ScriptStruct__Frontiers__FBXRules)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFBXRules, NameFilter, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFBXRules, 0x0038);
		}

		// struct FFMODBanks
		TEST_METHOD(ScriptStruct__Frontiers__FMODBanks)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFMODBanks, MonsterGameplayTags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFMODBanks, Banks, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFMODBanks, BankSets, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFMODBanks, 0x0040);
		}

		// struct FAudioAmbianceMonsterValues
		TEST_METHOD(ScriptStruct__Frontiers__AudioAmbianceMonsterValues)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioAmbianceMonsterValues, PopcornMonsterValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioAmbianceMonsterValues, MediumMonsterValue, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioAmbianceMonsterValues, BruteMonsterValue, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioAmbianceMonsterValues, 0x000C);
		}

		// struct FAudioEventEntry
		TEST_METHOD(ScriptStruct__Frontiers__AudioEventEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEventEntry, EventName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEventEntry, FMODReference, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioEventEntry, 0x0020);
		}

		// struct FCharacterCustomization
		TEST_METHOD(ScriptStruct__Frontiers__CharacterCustomization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterCustomization, HairGradient, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterCustomization, EyeGradient, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterCustomization, SkinGradient, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterCustomization, HeadItemRowIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterCustomization, HairItemRowIndex, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterCustomization, 0x0020);
		}

		// struct FCharacterSelectAnimations
		TEST_METHOD(ScriptStruct__Frontiers__CharacterSelectAnimations)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSelectAnimations, Idle, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSelectAnimations, Transitions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterSelectAnimations, 0x0078);
		}

		// struct FLerpArray
		TEST_METHOD(ScriptStruct__Frontiers__LerpArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLerpArray, UnknownData_41YM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLerpArray, 0x0008);
		}

		// struct FCombatDamageSetting : public FLerpArray
		TEST_METHOD(ScriptStruct__Frontiers__CombatDamageSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCombatDamageSetting, HealthPercent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCombatDamageSetting, VignetteIntensity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCombatDamageSetting, VignetteColor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCombatDamageSetting, UnknownData_ALKT, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCombatDamageSetting, 0x0018);
		}

		// struct FCombatNotifyWidgetComponentArray
		TEST_METHOD(ScriptStruct__Frontiers__CombatNotifyWidgetComponentArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCombatNotifyWidgetComponentArray, Components, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCombatNotifyWidgetComponentArray, 0x0010);
		}

		// struct FContractTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__ContractTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FContractTableRowHandle, 0x0010);
		}

		// struct FDungeonSpawnTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__DungeonSpawnTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDungeonSpawnTableRowHandle, 0x0010);
		}

		// struct FDepthOfFieldOverrideRequest
		TEST_METHOD(ScriptStruct__Frontiers__DepthOfFieldOverrideRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthOfFieldOverrideRequest, bEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthOfFieldOverrideRequest, UnknownData_ETLD, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthOfFieldOverrideRequest, FocalDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthOfFieldOverrideRequest, Fstop, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDepthOfFieldOverrideRequest, 0x000C);
		}

		// struct FTLUserAccount
		TEST_METHOD(ScriptStruct__Frontiers__TLUserAccount)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLUserAccount, AccountId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLUserAccount, PlatformAccountName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLUserAccount, PlatformAccountId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTLUserAccount, 0x0030);
		}

		// struct FAffixTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__AffixTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAffixTableRowHandle, 0x0010);
		}

		// struct FCharacterSave
		TEST_METHOD(ScriptStruct__Frontiers__CharacterSave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSave, CharacterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSave, bIsHardcore, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSave, bIsNewCharacter, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSave, UnknownData_J9IC, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSave, OriginalDifficulty, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSave, ContentVersion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSave, UnknownData_D1M3, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSave, LastPlayedTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSave, NewCharacterData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSave, CharacterData, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSave, CharacterQuests, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterSave, 0x00A8);
		}

		// struct FDialogueTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__DialogueTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueTableRowHandle, 0x0010);
		}

		// struct FMainMenuPlayerData
		TEST_METHOD(ScriptStruct__Frontiers__MainMenuPlayerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMainMenuPlayerData, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMainMenuPlayerData, UnknownData_40FD, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMainMenuPlayerData, 0x0180);
		}

		// struct FLoadingScreenRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__LoadingScreenRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLoadingScreenRowHandle, 0x0010);
		}

		// struct FMonsterSpawnTypeTuning
		TEST_METHOD(ScriptStruct__Frontiers__MonsterSpawnTypeTuning)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterSpawnTypeTuning, SpawnType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterSpawnTypeTuning, UnknownData_UPMZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterSpawnTypeTuning, DamageMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterSpawnTypeTuning, HitpointMultiplier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterSpawnTypeTuning, ExperienceMultiplier, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterSpawnTypeTuning, DramaMultiplier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterSpawnTypeTuning, UnknownData_CRHP, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterSpawnTypeTuning, DisplayName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterSpawnTypeTuning, ItemSpawn, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterSpawnTypeTuning, StatusEffectClass, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMonsterSpawnTypeTuning, 0x0048);
		}

		// struct FMonsterSpawnComponentData
		TEST_METHOD(ScriptStruct__Frontiers__MonsterSpawnComponentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterSpawnComponentData, Weight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterSpawnComponentData, MaximumSpawns, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterSpawnComponentData, SpawnDelayMin, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterSpawnComponentData, SpawnDelayMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterSpawnComponentData, Skill, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterSpawnComponentData, UnknownData_Q489, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMonsterSpawnComponentData, 0x0018);
		}

		// struct FMonsterSpawnTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__MonsterSpawnTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMonsterSpawnTableRowHandle, 0x0010);
		}

		// struct FMonsterSpawnEntry : public FSpawnPickerEntryBase
		TEST_METHOD(ScriptStruct__Frontiers__MonsterSpawnEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMonsterSpawnEntry, MonsterSpawnRowName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMonsterSpawnEntry, 0x0038);
		}

		// struct FPartyMember
		TEST_METHOD(ScriptStruct__Frontiers__PartyMember)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMember, AccountId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMember, MetaData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMember, Character, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMember, LastHeartbeat, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMember, UnknownData_I3CW, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyMember, 0x00E0);
		}

		// struct FParty
		TEST_METHOD(ScriptStruct__Frontiers__Party)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParty, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParty, LeaderAccountId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParty, Members, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParty, 0x0030);
		}

		// struct FPartyInvite
		TEST_METHOD(ScriptStruct__Frontiers__PartyInvite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyInvite, PartyId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyInvite, InviterInfo, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyInvite, InviterName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyInvite, UnknownData_2U2N, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyInvite, 0x00B0);
		}

		// struct FPlayerPortalDestination
		TEST_METHOD(ScriptStruct__Frontiers__PlayerPortalDestination)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerPortalDestination, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerPortalDestination, UnknownData_UKOI, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerPortalDestination, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerPortalDestination, UnknownData_WQ3N, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerPortalDestination, 0x0048);
		}

		// struct FTLRepMovement
		TEST_METHOD(ScriptStruct__Frontiers__TLRepMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLRepMovement, LinearVelocity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLRepMovement, Location, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLRepMovement, RotationYaw, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTLRepMovement, 0x001C);
		}

		// struct FChildPortalEntry
		TEST_METHOD(ScriptStruct__Frontiers__ChildPortalEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildPortalEntry, Portal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildPortalEntry, AccountIdHash, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChildPortalEntry, 0x0010);
		}

		// struct FActiveProcKey
		TEST_METHOD(ScriptStruct__Frontiers__ActiveProcKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveProcKey, UnknownData_8MLQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveProcKey, 0x000C);
		}

		// struct FActiveProcData
		TEST_METHOD(ScriptStruct__Frontiers__ActiveProcData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveProcData, UnknownData_RGN2, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveProcData, SkillClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveProcData, 0x0010);
		}

		// struct FProcTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__ProcTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcTableRowHandle, 0x0010);
		}

		// struct FSpokeTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__SpokeTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpokeTableRowHandle, 0x0010);
		}

		// struct FQuestActivationRequirement
		TEST_METHOD(ScriptStruct__Frontiers__QuestActivationRequirement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestActivationRequirement, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestActivationRequirement, UnknownData_GC7C, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestActivationRequirement, RowName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestActivationRequirement, bTimeOfDayIsDay, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestActivationRequirement, UnknownData_Y629, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestActivationRequirement, StartDate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestActivationRequirement, EndDate, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestActivationRequirement, DayOfWeek, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestActivationRequirement, PlayerLevel, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestActivationRequirement, AreaRow, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestActivationRequirement, AreaTags, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestActivationRequirement, bOnlyShowIfRequirementMet, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestActivationRequirement, bAddQuestWhenRequirementMet, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestActivationRequirement, bOnlyUseToAddQuest, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestActivationRequirement, UnknownData_EMEW, 0x006B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuestActivationRequirement, 0x0078);
		}

		// struct FQuestActivationRequirementArray
		TEST_METHOD(ScriptStruct__Frontiers__QuestActivationRequirementArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestActivationRequirementArray, ActivationRequirements, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuestActivationRequirementArray, 0x0010);
		}

		// struct FMonstersTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__MonstersTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMonstersTableRowHandle, 0x0010);
		}

		// struct FQuestReward
		TEST_METHOD(ScriptStruct__Frontiers__QuestReward)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestReward, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestReward, UnknownData_YZRI, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestReward, PlayerGameplayTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestReward, RewardArea, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestReward, Amount, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestReward, ItemLevel, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestReward, bUsePlayerLevel, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestReward, UnknownData_0YWH, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestReward, RowName, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestReward, bRewardChoice, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestReward, UnknownData_CXWS, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuestReward, 0x0050);
		}

		// struct FQuestTask
		TEST_METHOD(ScriptStruct__Frontiers__QuestTask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, UnknownData_9K0A, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, ID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, UnknownData_N3PX, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, PlayerRequireAllGameplayTags, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, PlayerRequireAnyGameplayTags, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, PlayerExcludeAnyGameplayTags, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, bConsiderCompleteIfNotApplicable, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, UnknownData_NAMQ, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, PlayerGameplayTagQuery, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, DialogueRow, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, RequiredCount, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, RequiredChallengeLevel, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, RowName, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, AreaTableRowHandle, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, MonsterTableRowHandle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, BossTableRowHandle, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, ItemTableRowHandle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, TraitTableRowHandle, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, GameplayTagContainer, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, SkillsTableRowHandle, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, QuestName, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, RecipeName, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, TraitsString, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, bUseChildTraits, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, UnknownData_WSMO, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, RequiredLevel, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, bMustCompleteInArea, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, bOnTimerFailQuest, 0x01A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, bOnTimerCompleteTask, 0x01A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, UnknownData_KMOV, 0x01A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, TimerSeconds, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, ActorClass, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, QuestEvent, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, Widget, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, Video, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, CinematicStatusEffect, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, CinematicDelay, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, WidgetDelay, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, Rewards, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, bHideInUI, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, bShowAsPercent, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, bIsOptional, 0x028A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, bSkipCleanup, 0x028B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, bCountProgressAfterActivationOnly, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, UnknownData_KID6, 0x028D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, Prerequisites, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, CompletedWithTasks, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, MapMarkerType, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, UnknownData_I83C, 0x02F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestTask, SpawnerOverrideChance, 0x02F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuestTask, 0x02F8);
		}

		// struct FQuestItemDrop
		TEST_METHOD(ScriptStruct__Frontiers__QuestItemDrop)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestItemDrop, TaskId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestItemDrop, AreaRequired, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestItemDrop, ItemSourceFilter, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestItemDrop, MonsterSourceRow, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestItemDrop, BossSourceRow, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestItemDrop, ItemTableRow, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestItemDrop, ItemSpawnTableRow, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestItemDrop, bOverrideAreaQuestDropChance, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestItemDrop, UnknownData_CPDW, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestItemDrop, DropChance, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestItemDrop, DropChanceDelta, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestItemDrop, bAdjustChanceByPlayers, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestItemDrop, UnknownData_97GX, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestItemDrop, GadgetSource, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestItemDrop, bFilterByPlayerWardrobe, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestItemDrop, UnknownData_6EJM, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuestItemDrop, 0x00B8);
		}

		// struct FQuestDefinition
		TEST_METHOD(ScriptStruct__Frontiers__QuestDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestDefinition, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestDefinition, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestDefinition, SpokeOverrideRow, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestDefinition, OfferDialogueRow, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestDefinition, Notes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestDefinition, Type, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestDefinition, UnknownData_WUMO, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestDefinition, ActivationRequirements, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestDefinition, AlternateActivationRequirements, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestDefinition, Tasks, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestDefinition, QuestItemDrops, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestDefinition, Rewards, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestDefinition, QuestPoolTag, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestDefinition, QuestPoolWeight, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestDefinition, bIsEnabled, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestDefinition, bIsRepeatable, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestDefinition, bSavePerAccount, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestDefinition, bHideAllOtherQuests, 0x00B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestDefinition, bIsStoryQuest, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestDefinition, bChooseReward, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestDefinition, ProgressTrackingType, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestDefinition, bRewardSpawnsQuestChest, 0x00BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestDefinition, bHideInUI, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestDefinition, bPlayNarratorVO, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestDefinition, UnknownData_3VEG, 0x00BE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuestDefinition, 0x03C8);
		}

		// struct FObjectArrayHolder
		TEST_METHOD(ScriptStruct__Frontiers__ObjectArrayHolder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FObjectArrayHolder, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FObjectArrayHolder, 0x0010);
		}

		// struct FSplineMeshData
		TEST_METHOD(ScriptStruct__Frontiers__SplineMeshData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshData, StaticMeshComponent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshData, SplinePointId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshData, UnknownData_WW7D, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineMeshData, 0x0010);
		}

		// struct FReplicatedSplinePoint
		TEST_METHOD(ScriptStruct__Frontiers__ReplicatedSplinePoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedSplinePoint, Point, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedSplinePoint, ID, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedSplinePoint, UnknownData_MXVY, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedSplinePoint, 0x0018);
		}

		// struct FSkillsBalanceTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__SkillsBalanceTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillsBalanceTableRowHandle, 0x0010);
		}

		// struct FSkillEffectEntry
		TEST_METHOD(ScriptStruct__Frontiers__SkillEffectEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillEffectEntry, Effect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillEffectEntry, AttachPointName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillEffectEntry, Offset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillEffectEntry, UnknownData_Z41T, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillEffectEntry, 0x0020);
		}

		// struct FSkillCostEntry
		TEST_METHOD(ScriptStruct__Frontiers__SkillCostEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillCostEntry, EnergyCost, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillCostEntry, UnknownData_PL17, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillCostEntry, EnergyPool, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillCostEntry, EnergyRequirement, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillCostEntry, bUseSoftEnergyCost, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillCostEntry, UnknownData_MYMX, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillCostEntry, 0x0020);
		}

		// struct FBeamImpactEffectRecord
		TEST_METHOD(ScriptStruct__Frontiers__BeamImpactEffectRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamImpactEffectRecord, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamImpactEffectRecord, ImpactPoint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamImpactEffectRecord, UnknownData_NGZP, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamImpactEffectRecord, EffectClass, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamImpactEffectRecord, Effect, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamImpactEffectRecord, ImpactSoundEvent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamImpactEffectRecord, ImpactSoundInstance, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamImpactEffectRecord, UnknownData_8W7F, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeamImpactEffectRecord, 0x0048);
		}

		// struct FFireSkillBeamData
		TEST_METHOD(ScriptStruct__Frontiers__FireSkillBeamData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireSkillBeamData, SkillBeamClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireSkillBeamData, MaxDistance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireSkillBeamData, MaxHits, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireSkillBeamData, bIsCosmeticOnly, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireSkillBeamData, UnknownData_1EKC, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireSkillBeamData, AttachSocket, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireSkillBeamData, bUseRotationForDirection, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireSkillBeamData, BeamDirection, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireSkillBeamData, UnknownData_BFJ7, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireSkillBeamData, AlternateSourceActor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireSkillBeamData, SourceOffset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireSkillBeamData, TargetOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireSkillBeamData, TargetAttachSocket, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireSkillBeamData, TargetActor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireSkillBeamData, bUseBeamPulse, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireSkillBeamData, UnknownData_15WE, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFireSkillBeamData, BeamPulseInterval, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFireSkillBeamData, 0x0058);
		}

		// struct FSkillOverride
		TEST_METHOD(ScriptStruct__Frontiers__SkillOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillOverride, AnimSource, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillOverride, UnknownData_DVX6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillOverride, Animation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillOverride, bUseAsFallback, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillOverride, UnknownData_OU1T, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillOverride, 0x0018);
		}

		// struct FSkillListEntry : public FSkillOverride
		TEST_METHOD(ScriptStruct__Frontiers__SkillListEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillListEntry, SkillSlot, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillListEntry, UnknownData_2M1V, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillListEntry, SkillClass, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillListEntry, 0x0028);
		}

		// struct FUnlockSlotLevelContainer
		TEST_METHOD(ScriptStruct__Frontiers__UnlockSlotLevelContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnlockSlotLevelContainer, SlotLevelMap, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUnlockSlotLevelContainer, 0x0050);
		}

		// struct FSkillActivationParams : public FSkillOverride
		TEST_METHOD(ScriptStruct__Frontiers__SkillActivationParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillActivationParams, RowName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillActivationParams, Skill, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillActivationParams, 0x0028);
		}

		// struct FActivationParamsMap
		TEST_METHOD(ScriptStruct__Frontiers__ActivationParamsMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActivationParamsMap, Map, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActivationParamsMap, 0x0050);
		}

		// struct FStatusEffectCounter
		TEST_METHOD(ScriptStruct__Frontiers__StatusEffectCounter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectCounter, Count, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectCounter, UnknownData_XZPH, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatusEffectCounter, 0x0020);
		}

		// struct FSkillReplicationData
		TEST_METHOD(ScriptStruct__Frontiers__SkillReplicationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillReplicationData, TargetActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillReplicationData, TargetLocation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillReplicationData, Slot, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillReplicationData, Set, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillReplicationData, UnknownData_Y6A0, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillReplicationData, SkillInstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillReplicationData, StartTimestamp, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillReplicationData, 0x0020);
		}

		// struct FSkillEventData
		TEST_METHOD(ScriptStruct__Frontiers__SkillEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillEventData, World, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillEventData, SourceActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillEventData, CharacterMeshComponent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillEventData, TargetActor, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillEventData, UnknownData_1H3N, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillEventData, TargetLocation, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillEventData, UnknownData_6C3X, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillEventData, Animation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillEventData, Skill, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillEventData, UnknownData_UPQZ, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillEventData, 0x0068);
		}

		// struct FSkillCooldownEntry
		TEST_METHOD(ScriptStruct__Frontiers__SkillCooldownEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillCooldownEntry, Skill, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillCooldownEntry, CooldownEndTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillCooldownEntry, TimeRemaining, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillCooldownEntry, LockedRefCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillCooldownEntry, UnknownData_R4Z6, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillCooldownEntry, 0x0018);
		}

		// struct FDisabledSkillSlotEntry
		TEST_METHOD(ScriptStruct__Frontiers__DisabledSkillSlotEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDisabledSkillSlotEntry, Slot, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDisabledSkillSlotEntry, UnknownData_M6UP, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDisabledSkillSlotEntry, Counter, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDisabledSkillSlotEntry, 0x0028);
		}

		// struct FSkillAssetsToLoad
		TEST_METHOD(ScriptStruct__Frontiers__SkillAssetsToLoad)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillAssetsToLoad, AssetsLoaded, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillAssetsToLoad, 0x0010);
		}

		// struct FPlaceSkillShapeData
		TEST_METHOD(ScriptStruct__Frontiers__PlaceSkillShapeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlaceSkillShapeData, ShapeClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlaceSkillShapeData, Offset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlaceSkillShapeData, bTurnTowardsTarget, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlaceSkillShapeData, UnknownData_P4BT, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlaceSkillShapeData, Rotation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlaceSkillShapeData, bAttached, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlaceSkillShapeData, UnknownData_DYJK, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlaceSkillShapeData, AttachActor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlaceSkillShapeData, RandomRange, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlaceSkillShapeData, bSpawnOnClient, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlaceSkillShapeData, bAllowSecondaryOverlaps, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlaceSkillShapeData, bStartActive, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlaceSkillShapeData, bSpawnAtSkillTarget, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlaceSkillShapeData, SecondaryOverlapMax, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlaceSkillShapeData, bSpawnOnGround, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlaceSkillShapeData, bApplySourceActorScale, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlaceSkillShapeData, bScaleOffsetBySourceActorScale, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlaceSkillShapeData, UnknownData_1JUI, 0x003F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlaceSkillShapeData, ScaleMultiplier, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlaceSkillShapeData, UnknownData_N76J, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlaceSkillShapeData, 0x0050);
		}

		// struct FDataTableDefinition
		TEST_METHOD(ScriptStruct__Frontiers__DataTableDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableDefinition, Table, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableDefinition, bIsCurveTable, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableDefinition, UnknownData_D4XM, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableDefinition, RowStruct, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableDefinition, PropertyName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableDefinition, bAlsoSaveAsJSON, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableDefinition, UnknownData_PC8B, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableDefinition, 0x0050);
		}

		// struct FPurchaseHistoryItem
		TEST_METHOD(ScriptStruct__Frontiers__PurchaseHistoryItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseHistoryItem, CatalogRowName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseHistoryItem, Count, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPurchaseHistoryItem, 0x000C);
		}

		// struct FStartRandomSkillData
		TEST_METHOD(ScriptStruct__Frontiers__StartRandomSkillData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartRandomSkillData, SkillSlot, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartRandomSkillData, UnknownData_1AUZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartRandomSkillData, Weight, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartRandomSkillData, 0x0008);
		}

		// struct FTimeOfDaySetting : public FLerpArray
		TEST_METHOD(ScriptStruct__Frontiers__TimeOfDaySetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDaySetting, Hour, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDaySetting, Minute, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeOfDaySetting, 0x0010);
		}

		// struct FTimeOfDayRotationSetting : public FTimeOfDaySetting
		TEST_METHOD(ScriptStruct__Frontiers__TimeOfDayRotationSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayRotationSetting, RotationVector, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayRotationSetting, UnknownData_OHOL, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeOfDayRotationSetting, 0x0020);
		}

		// struct FTimeOfDayFogSetting : public FTimeOfDaySetting
		TEST_METHOD(ScriptStruct__Frontiers__TimeOfDayFogSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayFogSetting, Color, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayFogSetting, Density, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayFogSetting, FloorHeight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayFogSetting, HeightFalloff, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayFogSetting, MaxOpacity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayFogSetting, StartDistance, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeOfDayFogSetting, 0x0028);
		}

		// struct FItemReplicatedData
		TEST_METHOD(ScriptStruct__Frontiers__ItemReplicatedData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemReplicatedData, ItemDataRow, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemReplicatedData, DyeDataRow, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemReplicatedData, ElementTag, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemReplicatedData, 0x0018);
		}

		// struct FWeaponSlotData
		TEST_METHOD(ScriptStruct__Frontiers__WeaponSlotData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponSlotData, EquipSlot, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponSlotData, UnknownData_899H, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponSlotData, ItemDataRow, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponSlotData, InventoryId, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeaponSlotData, 0x0010);
		}

		// struct FTrapSpawnTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__TrapSpawnTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrapSpawnTableRowHandle, 0x0010);
		}

		// struct FEditorOnlyAchievementEntry
		TEST_METHOD(ScriptStruct__Frontiers__EditorOnlyAchievementEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorOnlyAchievementEntry, AchievementName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorOnlyAchievementEntry, Progress, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorOnlyAchievementEntry, 0x000C);
		}

		// struct FEditorOnlyAchievementData
		TEST_METHOD(ScriptStruct__Frontiers__EditorOnlyAchievementData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorOnlyAchievementData, Achievements, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorOnlyAchievementData, 0x0010);
		}

		// struct FActiveTraitData : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__ActiveTraitData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveTraitData, Trait, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveTraitData, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveTraitData, SkillCostFormat, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveTraitData, bHideSkillCost, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveTraitData, bNegateSkillCostInUI, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveTraitData, ReplicateType, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveTraitData, SupportsMin, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveTraitData, SupportsMax, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveTraitData, SupportsRegen, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveTraitData, SupportsRegenMax, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveTraitData, ResetType, 0x0057);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveTraitData, ValueType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveTraitData, NoResourceNarratorQuip, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveTraitData, bLockOnDeath, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveTraitData, bResetOnRevive, 0x005B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveTraitData, UnknownData_JUZN, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveTraitData, 0x0060);
		}

		// struct FAffixData : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__AffixData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, LevelRangeString, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, UnknownData_LHWW, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, DropWeight, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, MaxCount, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, TextFormat, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, ItemTextFormat, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, bAlwaysShowAffixName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, bIsPrimaryAffix, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, TraitType, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, UnknownData_43JK, 0x0073);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, AffixTags, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, SkillNameTag, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, ElementTag, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, UnknownData_HRTN, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, AffixCurveValue1, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, ChallengeMinCurve1, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, ChallengeMaxCurve1, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, AffixCurveValue2, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, ChallengeMinCurve2, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, ChallengeMaxCurve2, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, AffixCurveValue3, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, ChallengeMinCurve3, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, ChallengeMaxCurve3, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, AffixCurveValue4, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, ChallengeMinCurve4, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, ChallengeMaxCurve4, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, AffixCurveValue5, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, ChallengeMinCurve5, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, ChallengeMaxCurve5, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, AffixCurveValue6, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, ChallengeMinCurve6, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, ChallengeMaxCurve6, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, AffixCurveValue7, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, ChallengeMinCurve7, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, ChallengeMaxCurve7, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, AffixCurveValue8, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, ChallengeMinCurve8, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, ChallengeMaxCurve8, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, AffixCurveValue9, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, ChallengeMinCurve9, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, ChallengeMaxCurve9, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, AffixCurveValue10, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, ChallengeMinCurve10, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, ChallengeMaxCurve10, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, TraitString, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, Normal, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, Magic, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, Rare, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, Legendary, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, Unique, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, SetBonusTag, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, SetBonusCountRequired, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, UnknownData_O9BV, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, EnchantingMagicMultipliers, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, EnchantingRareMultipliers, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, EnchantingLegendaryMultipliers, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, LifeboundMultiplier, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, bRound, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, UnknownData_FSMR, 0x028D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, TextOnDrop, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffixData, UnknownData_JL6R, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAffixData, 0x0358);
		}

		// struct FAffixSpawnData : public FSpawnDataBase
		TEST_METHOD(ScriptStruct__Frontiers__AffixSpawnData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAffixSpawnData, 0x0178);
		}

		// struct FSpawnAnimatedMeshParams
		TEST_METHOD(ScriptStruct__Frontiers__SpawnAnimatedMeshParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnAnimatedMeshParams, bWorldSpace, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnAnimatedMeshParams, UnknownData_S47Y, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnAnimatedMeshParams, PlayRateMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnAnimatedMeshParams, MeshToSpawn, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnAnimatedMeshParams, Material, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnAnimatedMeshParams, AnimationToPlay, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnAnimatedMeshParams, SocketName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnAnimatedMeshParams, OwnerSkeletalMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnAnimatedMeshParams, TransformOverride, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnAnimatedMeshParams, ScaleMethod, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnAnimatedMeshParams, UnknownData_NO5K, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnAnimatedMeshParams, ScaleMultiplier, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpawnAnimatedMeshParams, 0x0070);
		}

		// struct FActorLimitActorProxyEntry : public FActorProxyEntryBase
		TEST_METHOD(ScriptStruct__Frontiers__ActorLimitActorProxyEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorLimitActorProxyEntry, UnknownData_SCD3, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorLimitActorProxyEntry, 0x0070);
		}

		// struct FMonsterAffixTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__MonsterAffixTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMonsterAffixTableRowHandle, 0x0010);
		}

		// struct FPlayerAffixTableRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__PlayerAffixTableRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerAffixTableRowHandle, 0x0010);
		}

		// struct FAreaData : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__AreaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, AreaName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, AreaName_MapWorks, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, NameSpawn_MapWorks, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, UnknownData_WO09, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, AreaGroup, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, AreaGroupType, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, UnknownData_XQ1Q, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, AreaClass, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, AreaSize, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, UnknownData_L1QJ, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, PrevAreaRow0, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, NextAreaRow1, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, NextAreaRow2, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, NextAreaRow3, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, NextAreaRow4, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, NextAreaRow5, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, NextAreaRow6, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, QuestObjectFilterNextArea1, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, AltNextAreaRow1, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, QuestObjectFilterNextArea2, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, AltNextAreaRow2, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, QuestObjectFilterNextArea3, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, AltNextAreaRow3, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, QuestObjectFilterNextArea4, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, AltNextAreaRow4, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, QuestObjectFilterNextArea5, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, AltNextAreaRow5, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, QuestObjectFilterNextArea6, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, AltNextAreaRow6, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, OverrideYouAreHere, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, RequiredQuestTask, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, bRequireCompletingAreaQuestToProceed, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, UnknownData_TDIZ, 0x01D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, FortCount, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, bCanDestroyItems, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, bRequirePartyLeadersFort, 0x01E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, bShowClockUI, 0x01E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, bIsOutdoors, 0x01E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, bIsBossArea, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, bShowOnFrontierMap, 0x01E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, bMonstersCanTargetNPC, 0x01E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, UnknownData_BT79, 0x01E7);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, MonsterLevel, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, MonsterLevelDelta, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, MonstersRespawn, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, MonstersDisabledByDistance, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, bGadgetsReset, 0x01F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, bIsWarpBackArea, 0x01F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, UnknownData_KEE9, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, DefaultWarpBackClass, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, bShutdownQuicklyWithNoPlayers, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, bShutdownQuicklyAfterBeingCleared, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, UnknownData_5U63, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, BossMonsters, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, bTriggerSpawnersHelpDrama, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, bTriggerSpawnersCheckDrama, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, UnknownData_WI4L, 0x023A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, MonsterAffixes, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, MonsterSpawnRow, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, PlayerAffixes, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, DefaultTrap, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, TrapDefaultMonsterSpawnRow, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, TrapDefaultMonsterSpawner, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, GadgetItemLevel, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, GadgetItemLevelDelta, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, ItemLevelBonus, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, HazardDamageMultiplier, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, ItemSpokeMaxDelta, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, bOverrideQuestDropChance, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, UnknownData_5H81, 0x02CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, QuestItemDropChance, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, QuestItemDropChanceDelta, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, bIgnoreCameraDistanceVolumes, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, UnknownData_2N43, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, CameraDistance, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, DepthOfFieldDistance, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, PrimaryElement, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, SpokeTag, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, UnknownData_TPF0, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, BossAffixOverrides, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, UnknownData_OXFK, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, MapworksMonsterAffixTags, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, MonsterManagerDaytimeTags, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, MonsterManagerNighttimeTags, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, MonsterLuck, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, ThemedPropTags, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, QuestPoolTags, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, LootLuck, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, CritterDensity, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, UnknownData_GFJ9, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, Critter1, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, Critter2, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, Critter3, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, AreaSkill1, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, AreaSkill2, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, AreaSkill3, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, CameraYawRandomRange, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, HandheldTonemapperGamma, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, bCanSendPetToTown, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, bReviveInTown, 0x0515);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, bCanReviveInPlace, 0x0516);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, bCanReviveAtLevelEntrance, 0x0517);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, bCanReviveInTown, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, bCanReviveInPreviousArea, 0x0519);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, bLifeBoundItemsOnly, 0x051A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, UnknownData_FDTR, 0x051B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, DisallowedSkillTags, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, LoadingScreenBackgroundOverride, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, LoadingScreenForegroundOverride, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, LoadingScreenTextOverride, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, LoadingScreenTags, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, ItemQualityLevelBoost, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, UnknownData_J1DC, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, MapworksTags, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, SelectionWeight, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, UnknownData_T84D, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, QuestTags, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, UnknownData_6EOM, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, ItemTags, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, ItemExcludeTags, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, AffixTags, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, MonsterTags, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, MonsterPopulationTag, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, RegionTag, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, bCanPlayCutscenes, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, UnknownData_FR7Y, 0x06B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, MonsterSpawnerActiveChance, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, MonsterSpawnerNightActiveChance, 0x0704);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, bPvPEnabled, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAreaData, UnknownData_YDQ4, 0x0709);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAreaData, 0x0710);
		}

		// struct FAudioInputDevice
		TEST_METHOD(ScriptStruct__Frontiers__AudioInputDevice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioInputDevice, UnknownData_8NVH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioInputDevice, 0x0020);
		}

		// struct FBossData : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__BossData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossData, UnknownData_PWWQ, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossData, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossData, BaseMonster, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossData, AffixString, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossData, ShouldSpawnReturnPortal, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossData, DestroyAllMonstersOnDie, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossData, UnknownData_95F2, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossData, ScaleMultiplier, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossData, HitpointBonusMultiplier, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossData, DamageBonusMultiplier, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossData, SpeedBonusMultiplier, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossData, ExperienceBonusMultiplier, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossData, AggroRadius, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossData, bShouldTether, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossData, UnknownData_YQRA, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossData, ChaseRadius, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossData, IgnoreMinionChance, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossData, StatusEffect, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossData, ItemSpawn, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossData, TraitString1, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossData, TraitString2, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossData, TraitString3, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossData, UnknownData_K1JU, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossData, ItemSpawnGameplayTags, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBossData, 0x0118);
		}

		// struct FActorKeyPair
		TEST_METHOD(ScriptStruct__Frontiers__ActorKeyPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorKeyPair, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorKeyPair, Key, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorKeyPair, UnknownData_VC3J, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorKeyPair, 0x0010);
		}

		// struct FRotationGroupRowHandle : public FTLDataTableRowHandle
		TEST_METHOD(ScriptStruct__Frontiers__RotationGroupRowHandle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationGroupRowHandle, 0x0010);
		}

		// struct FCatalogData : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__CatalogData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCatalogData, UnknownData_J3EZ, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCatalogData, Category, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCatalogData, InternalDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCatalogData, IsDisplayed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCatalogData, UnknownData_IUKB, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCatalogData, ItemTableRowHandle, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCatalogData, FortPropTableRowHandle, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCatalogData, RecipeName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCatalogData, GrantedByDlcId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCatalogData, UnknownData_XYS6, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCatalogData, MailboxFrom, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCatalogData, MailboxBody, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCatalogData, PurchaseDetails, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCatalogData, RotationGroup, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCatalogData, RealMoneyCost, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCatalogData, DeliveryType, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCatalogData, SyncToCommerce, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCatalogData, UnknownData_F5X7, 0x00CE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCatalogData, 0x00D0);
		}

		// struct FRotationGroupData : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__RotationGroupData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationGroupData, UnknownData_MOEB, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationGroupData, Description, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationGroupData, StartDate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationGroupData, EditDate, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationGroupData, 0x0040);
		}

		// struct FTLChatMessage
		TEST_METHOD(ScriptStruct__Frontiers__TLChatMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLChatMessage, UnknownData_8VXY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTLChatMessage, 0x00B8);
		}

		// struct FTLChatMessageMetadata
		TEST_METHOD(ScriptStruct__Frontiers__TLChatMessageMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLChatMessageMetadata, CharacterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLChatMessageMetadata, OnlinePlatform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLChatMessageMetadata, PlatformId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLChatMessageMetadata, CurrentDifficultyIndex, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLChatMessageMetadata, LowestDifficultyIndex, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLChatMessageMetadata, CurrentLevel, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLChatMessageMetadata, UnknownData_96O7, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTLChatMessageMetadata, 0x0040);
		}

		// struct FChatHandle
		TEST_METHOD(ScriptStruct__Frontiers__ChatHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatHandle, PlatformAccountId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatHandle, PlatformAccountName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatHandle, HostPlatform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatHandle, UnknownData_45J6, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChatHandle, 0x0028);
		}

		// struct FCinematicData : public FTLTableRowBase
		TEST_METHOD(ScriptStruct__Frontiers__CinematicData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCinematicData, UnknownData_R7HO, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCinematicData, VideoSource, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCinematicData, 0x0048);
		}

		// struct FTLBulkDataWrapper
		TEST_METHOD(ScriptStruct__Frontiers__TLBulkDataWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTLBulkDataWrapper, UnknownData_VEEA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTLBulkDataWrapper, 0x0008);
		}

		// struct FStateResponse
		TEST_METHOD(ScriptStruct__Frontiers__StateResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStateResponse, GameCode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStateResponse, MinimumContentVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStateResponse, UnknownData_7V4P, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStateResponse, 0x0018);
		}

		// struct FAddBonus
		TEST_METHOD(ScriptStruct__Frontiers__AddBonus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAddBonus, Currency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAddBonus, CurrencyAmount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAddBonus, UnknownData_ELIH, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAddBonus, reason, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAddBonus, 0x0028);
		}

		// struct FClaimPurchase
		TEST_METHOD(ScriptStruct__Frontiers__ClaimPurchase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClaimPurchase, Transaction_Id, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClaimPurchase, User_Id, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClaimPurchase, Sku, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClaimPurchase, Creation_Reason, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClaimPurchase, External_Id, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClaimPurchase, Status, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClaimPurchase, Fullfilled_Date, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClaimPurchase, 0x0070);
		}

		// struct FPurchaseTransaction
		TEST_METHOD(ScriptStruct__Frontiers__PurchaseTransaction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseTransaction, IpAddress, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseTransaction, CharacterName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseTransaction, ItemId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseTransaction, ItemQuantity, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseTransaction, CurrencyAmount, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPurchaseTransaction, 0x0030);
		}

		// struct FItemListResponseItem
		TEST_METHOD(ScriptStruct__Frontiers__ItemListResponseItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemListResponseItem, ProdItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemListResponseItem, ProdItemNo, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemListResponseItem, OrgPrice, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemListResponseItem, Price, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemListResponseItem, CategoryName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemListResponseItem, MaxAllowedPurchases, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemListResponseItem, UnknownData_72KY, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemListResponseItem, AvailabilityStartDate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemListResponseItem, AvailabilityEndDate, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemListResponseItem, 0x0048);
		}

		// struct FItemListResponseData
		TEST_METHOD(ScriptStruct__Frontiers__ItemListResponseData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemListResponseData, Items, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemListResponseData, 0x0010);
		}

		// struct FItemListResponse
		TEST_METHOD(ScriptStruct__Frontiers__ItemListResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemListResponse, Status, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemListResponse, Data, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemListResponse, 0x0020);
		}

		// struct FLegendaryItemDescription
		TEST_METHOD(ScriptStruct__FrontiersTests__LegendaryItemDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegendaryItemDescription, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegendaryItemDescription, Description, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLegendaryItemDescription, 0x0030);
		}

		// struct FLegendaryBundle
		TEST_METHOD(ScriptStruct__FrontiersTests__LegendaryBundle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegendaryBundle, LegendaryItems, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLegendaryBundle, 0x0010);
		}

		// struct FSkillLevelDescription
		TEST_METHOD(ScriptStruct__FrontiersTests__SkillLevelDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillLevelDescription, Description, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillLevelDescription, CooldownText, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillLevelDescription, EnergyCostText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillLevelDescription, BonusAmounts, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillLevelDescription, 0x0058);
		}

		// struct FSkillDescription
		TEST_METHOD(ScriptStruct__FrontiersTests__SkillDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillDescription, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillDescription, RequiredLevelInSkillTab, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillDescription, SkillTabRow, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillDescription, SkillTabColumn, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillDescription, UnknownData_53BH, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillDescription, SkillType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillDescription, PerLevelBonusTexts, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillDescription, PerLevelDescriptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillDescription, TierBonusDescriptions, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillDescription, 0x00F0);
		}

		// struct FSkillTabDescription
		TEST_METHOD(ScriptStruct__FrontiersTests__SkillTabDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillTabDescription, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillTabDescription, Skills, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillTabDescription, 0x0028);
		}

		// struct FSkillDescriptionBundle
		TEST_METHOD(ScriptStruct__FrontiersTests__SkillDescriptionBundle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillDescriptionBundle, SkillTabs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillDescriptionBundle, 0x0010);
		}

		// struct FTestDataRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__FrontiersTests__TestDataRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTestDataRow, Text, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTestDataRow, Time, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTestDataRow, UnknownData_LPHR, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTestDataRow, 0x0028);
		}

		// struct FTraitEntry_Test3000
		TEST_METHOD(ScriptStruct__FrontiersTests__TraitEntry_Test3000)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitEntry_Test3000, TraitName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitEntry_Test3000, PrimarySlot, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitEntry_Test3000, SecondarySlot, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitEntry_Test3000, Param, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitEntry_Test3000, Value, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTraitEntry_Test3000, UnknownData_YKJH, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTraitEntry_Test3000, 0x0040);
		}

		// struct FCharacterData_Test3000
		TEST_METHOD(ScriptStruct__FrontiersTests__CharacterData_Test3000)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterData_Test3000, PlayerClassRowName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterData_Test3000, Extra1000Bool, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterData_Test3000, UnknownData_VYEN, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterData_Test3000, Extra2000Value, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterData_Test3000, Extra3000String, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterData_Test3000, Traits, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterData_Test3000, DataVersion, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterData_Test3000, 0x0040);
		}

		// struct FAccountwideData_Test3000
		TEST_METHOD(ScriptStruct__FrontiersTests__AccountwideData_Test3000)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccountwideData_Test3000, Traits, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccountwideData_Test3000, DataVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccountwideData_Test3000, Extra1000BoolAccount, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccountwideData_Test3000, UnknownData_XT2X, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccountwideData_Test3000, Extra2000ValueAccount, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAccountwideData_Test3000, 0x0028);
		}

		// struct FCharacterAccountwide_Test3000 : public FCharacterData_Test3000
		TEST_METHOD(ScriptStruct__FrontiersTests__CharacterAccountwide_Test3000)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterAccountwide_Test3000, Accountwide, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterAccountwide_Test3000, 0x0068);
		}

		// struct FFortInventoryEntry_Test3000
		TEST_METHOD(ScriptStruct__FrontiersTests__FortInventoryEntry_Test3000)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoryEntry_Test3000, RenamedId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFortInventoryEntry_Test3000, 0x0004);
		}

		// struct FFortInventoryResponse_Test3000
		TEST_METHOD(ScriptStruct__FrontiersTests__FortInventoryResponse_Test3000)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoryResponse_Test3000, DataVersion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoryResponse_Test3000, Entries, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFortInventoryResponse_Test3000, 0x0020);
		}

		// struct FFortInventoryEntry_Test2000
		TEST_METHOD(ScriptStruct__FrontiersTests__FortInventoryEntry_Test2000)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoryEntry_Test2000, ID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFortInventoryEntry_Test2000, 0x0004);
		}

		// struct FFortInventoryResponse_Test2000
		TEST_METHOD(ScriptStruct__FrontiersTests__FortInventoryResponse_Test2000)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoryResponse_Test2000, DataVersion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFortInventoryResponse_Test2000, Entries, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFortInventoryResponse_Test2000, 0x0020);
		}

		// struct FAccountwideData_Test2000
		TEST_METHOD(ScriptStruct__FrontiersTests__AccountwideData_Test2000)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccountwideData_Test2000, DataVersion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccountwideData_Test2000, Extra1000BoolAccount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccountwideData_Test2000, UnknownData_TOHJ, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccountwideData_Test2000, Extra2000ValueAccount, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAccountwideData_Test2000, 0x0018);
		}

		// struct FCharacterData_Test2000
		TEST_METHOD(ScriptStruct__FrontiersTests__CharacterData_Test2000)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterData_Test2000, PlayerClassRowName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterData_Test2000, Extra2000Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterData_Test2000, Extra1000Bool, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterData_Test2000, UnknownData_RI7D, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterData_Test2000, DataVersion, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterData_Test2000, 0x0020);
		}

		// struct FQuestInstanceData_Test1000
		TEST_METHOD(ScriptStruct__FrontiersTests__QuestInstanceData_Test1000)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestInstanceData_Test1000, DataVersion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestInstanceData_Test1000, bCompleted, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestInstanceData_Test1000, UnknownData_CQFA, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuestInstanceData_Test1000, 0x0018);
		}

		// struct FAccountwideData_Test1000
		TEST_METHOD(ScriptStruct__FrontiersTests__AccountwideData_Test1000)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccountwideData_Test1000, DataVersion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccountwideData_Test1000, Extra1000BoolAccount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccountwideData_Test1000, UnknownData_RYX4, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAccountwideData_Test1000, 0x0018);
		}

		// struct FCharacterData_Test1000
		TEST_METHOD(ScriptStruct__FrontiersTests__CharacterData_Test1000)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterData_Test1000, PlayerClassRowName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterData_Test1000, Extra1000Bool, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterData_Test1000, UnknownData_A1QV, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterData_Test1000, DataVersion, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterData_Test1000, 0x0020);
		}

		// struct FUIButtonAction
		TEST_METHOD(ScriptStruct__FrontiersUI__UIButtonAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIButtonAction, UnknownData_FIZ7, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIButtonAction, bEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIButtonAction, bCustomText, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIButtonAction, StandardActionText, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIButtonAction, UnknownData_BKN5, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIButtonAction, Text, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIButtonAction, HiddenVisibility, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIButtonAction, UnknownData_CGUT, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIButtonAction, AudioEvent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIButtonAction, HoldAudioEvent, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIButtonAction, HoldTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIButtonAction, bHideInChildWidgets, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIButtonAction, UnknownData_BKWP, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIButtonAction, ActionDelegate, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIButtonAction, UnknownData_VZ45, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIButtonAction, Keys, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIButtonAction, UnknownData_1O1W, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIButtonAction, SpecialKey, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIButtonAction, UnknownData_CGII, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUIButtonAction, 0x00F8);
		}

		// struct FWidgetTickHandle
		TEST_METHOD(ScriptStruct__FrontiersUI__WidgetTickHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTickHandle, UnknownData_AND9, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTickHandle, TickInterval, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTickHandle, UnknownData_VE1O, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetTickHandle, 0x0028);
		}

		// struct FModalWidgetDefinition
		TEST_METHOD(ScriptStruct__FrontiersUI__ModalWidgetDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModalWidgetDefinition, Title, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModalWidgetDefinition, TitleStyle, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModalWidgetDefinition, Body, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModalWidgetDefinition, BodyStyle, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModalWidgetDefinition, bCustomAcceptAction, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModalWidgetDefinition, UnknownData_BE5Z, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModalWidgetDefinition, AcceptAction, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModalWidgetDefinition, bCustomRejectAction, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModalWidgetDefinition, UnknownData_DV77, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModalWidgetDefinition, RejectAction, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModalWidgetDefinition, bShowOverLoadingScreen, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModalWidgetDefinition, UnknownData_THD6, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModalWidgetDefinition, FrameWidgetClass, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModalWidgetDefinition, ContentWidgetClass, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModalWidgetDefinition, bFocusContent, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModalWidgetDefinition, RejectButtonType, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModalWidgetDefinition, UnknownData_S5B9, 0x025A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModalWidgetDefinition, AutoCloseTimer, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModalWidgetDefinition, 0x0260);
		}

		// struct FClassSkillBarDefinition
		TEST_METHOD(ScriptStruct__FrontiersUI__ClassSkillBarDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassSkillBarDefinition, ResourceBarWidgetClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassSkillBarDefinition, ClassGameplayTag, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClassSkillBarDefinition, 0x0010);
		}

		// struct FWidgetElementArray
		TEST_METHOD(ScriptStruct__FrontiersUI__WidgetElementArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetElementArray, Widgets, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetElementArray, 0x0010);
		}

		// struct FChampionTargetDisplayData
		TEST_METHOD(ScriptStruct__FrontiersUI__ChampionTargetDisplayData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChampionTargetDisplayData, Color, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChampionTargetDisplayData, ProgressBarStyle, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChampionTargetDisplayData, BGBrush, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChampionTargetDisplayData, FiligreeBrush, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChampionTargetDisplayData, EndcapBrush, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChampionTargetDisplayData, GlowBrush, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChampionTargetDisplayData, 0x03D0);
		}

		// struct FCanvasWidget
		TEST_METHOD(ScriptStruct__FrontiersUI__CanvasWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasWidget, WidgetClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasWidget, Widget, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasWidget, Anchors, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasWidget, Alignment, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasWidget, bAutoSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasWidget, UnknownData_L96D, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasWidget, ManualSize, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasWidget, ZOrder, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanvasWidget, 0x0038);
		}

		// struct FTabbedMenuOption
		TEST_METHOD(ScriptStruct__FrontiersUI__TabbedMenuOption)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTabbedMenuOption, Widgets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTabbedMenuOption, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTabbedMenuOption, TabId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTabbedMenuOption, ParentTabId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTabbedMenuOption, Icon, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTabbedMenuOption, AlertTextDelegateName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTabbedMenuOption, AlertVisibilityDelegateName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTabbedMenuOption, CustomAlertWidget, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTabbedMenuOption, AlertType, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTabbedMenuOption, bChangeCamera, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTabbedMenuOption, CameraType, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTabbedMenuOption, bEnabled, 0x006B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTabbedMenuOption, UnknownData_YKVX, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTabbedMenuOption, 0x0070);
		}

		// struct FChannelUIDefinition
		TEST_METHOD(ScriptStruct__FrontiersUI__ChannelUIDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelUIDefinition, ChannelType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelUIDefinition, UnknownData_JLBD, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelUIDefinition, Commands, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelUIDefinition, Color, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelUIDefinition, UnknownData_XTAU, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelUIDefinition, ChannelMessageFormat, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelUIDefinition, ChannelOwnMessageFormat, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelUIDefinition, ChannelHeader, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelUIDefinition, Order, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelUIDefinition, bCanBeCycledTo, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelUIDefinition, UnknownData_JMRE, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChannelUIDefinition, 0x0070);
		}

		// struct FSharpshooterTrinketAppearanceData
		TEST_METHOD(ScriptStruct__FrontiersUI__SharpshooterTrinketAppearanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSharpshooterTrinketAppearanceData, TrinketSprite, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSharpshooterTrinketAppearanceData, TrinketBackgroundColor, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSharpshooterTrinketAppearanceData, 0x0030);
		}

		// struct FKeyUIData
		TEST_METHOD(ScriptStruct__FrontiersUI__KeyUIData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyUIData, bFlipBG, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyUIData, bShowText, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyUIData, UnknownData_VPAS, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyUIData, ShortName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyUIData, bUseCustomTextColor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyUIData, UnknownData_974G, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyUIData, CustomTextColor, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyUIData, bUseCustomButtonBG, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyUIData, UnknownData_BW7Z, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyUIData, CustomButtonBG, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyUIData, 0x02B0);
		}

		// struct FSpecialKeyPlatformMapping
		TEST_METHOD(ScriptStruct__FrontiersUI__SpecialKeyPlatformMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialKeyPlatformMapping, KeyMapping, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpecialKeyPlatformMapping, 0x0050);
		}

		// struct FPlatformUIKeyMapping
		TEST_METHOD(ScriptStruct__FrontiersUI__PlatformUIKeyMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformUIKeyMapping, MappingName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformUIKeyMapping, KeyMapping, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformUIKeyMapping, 0x0058);
		}

		// struct FInventoryGridCategoryData
		TEST_METHOD(ScriptStruct__FrontiersUI__InventoryGridCategoryData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryGridCategoryData, ContainerClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryGridCategoryData, WidgetToSelect, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryGridCategoryData, ListWidgets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryGridCategoryData, UnknownData_P90W, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInventoryGridCategoryData, 0x0030);
		}

		// struct FDeathOption
		TEST_METHOD(ScriptStruct__FrontiersUI__DeathOption)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeathOption, Label, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDeathOption, ButtonImage, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDeathOption, 0x0020);
		}

		// struct FDungeonUIResponse
		TEST_METHOD(ScriptStruct__FrontiersUI__DungeonUIResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonUIResponse, AnimationName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonUIResponse, AudioEvent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonUIResponse, CustomEventName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDungeonUIResponse, 0x0038);
		}

		// struct FMCDialogueInteraction
		TEST_METHOD(ScriptStruct__FrontiersUI__MCDialogueInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMCDialogueInteraction, DialogueRow, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMCDialogueInteraction, CustomEventOnStarted, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMCDialogueInteraction, CustomEventOnEnded, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMCDialogueInteraction, 0x0030);
		}

		// struct FMCDialogueChoices
		TEST_METHOD(ScriptStruct__FrontiersUI__MCDialogueChoices)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMCDialogueChoices, Dialogues, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMCDialogueChoices, 0x0010);
		}

		// struct FDungeonUIStateTransition
		TEST_METHOD(ScriptStruct__FrontiersUI__DungeonUIStateTransition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonUIStateTransition, OldState, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonUIStateTransition, NewState, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDungeonUIStateTransition, 0x0002);
		}

		// struct FMCIdleAnimation
		TEST_METHOD(ScriptStruct__FrontiersUI__MCIdleAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMCIdleAnimation, AnimationName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMCIdleAnimation, MinWaitTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMCIdleAnimation, MaxWaitTime, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMCIdleAnimation, 0x0018);
		}

		// struct FMCIdleAnimationGroup
		TEST_METHOD(ScriptStruct__FrontiersUI__MCIdleAnimationGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMCIdleAnimationGroup, MutuallyExclusiveAnimations, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMCIdleAnimationGroup, UnknownData_4VCQ, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMCIdleAnimationGroup, 0x0020);
		}

		// struct FDungeonCachedStateWidget
		TEST_METHOD(ScriptStruct__FrontiersUI__DungeonCachedStateWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonCachedStateWidget, State, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonCachedStateWidget, UnknownData_TSRV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonCachedStateWidget, Widget, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDungeonCachedStateWidget, 0x0010);
		}

		// struct FSpringArmRequestOverride
		TEST_METHOD(ScriptStruct__FrontiersUI__SpringArmRequestOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpringArmRequestOverride, bActive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpringArmRequestOverride, UnknownData_JHLF, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpringArmRequestOverride, Length, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpringArmRequestOverride, Pitch, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpringArmRequestOverride, ZoomRate, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpringArmRequestOverride, 0x0010);
		}

		// struct FDebugTextKeyCombo
		TEST_METHOD(ScriptStruct__FrontiersUI__DebugTextKeyCombo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextKeyCombo, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextKeyCombo, UnknownData_Q61F, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugTextKeyCombo, 0x0020);
		}

		// struct FKeyBindingData
		TEST_METHOD(ScriptStruct__FrontiersUI__KeyBindingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBindingData, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBindingData, DisplayName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyBindingData, 0x0020);
		}

		// struct FLegendaryAffixItemSubCategory
		TEST_METHOD(ScriptStruct__FrontiersUI__LegendaryAffixItemSubCategory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegendaryAffixItemSubCategory, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegendaryAffixItemSubCategory, GameplayTag, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegendaryAffixItemSubCategory, UnknownData_C0NH, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLegendaryAffixItemSubCategory, 0x0028);
		}

		// struct FCustomizeSection
		TEST_METHOD(ScriptStruct__FrontiersUI__CustomizeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizeSection, SectionId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizeSection, WidgetToFocus, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizeSection, HighlightWidget, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizeSection, DimWidget, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizeSection, 0x0020);
		}

		// struct FMapMarkerConstraint
		TEST_METHOD(ScriptStruct__FrontiersUI__MapMarkerConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarkerConstraint, bConstrainInWorldSpace, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarkerConstraint, bShowOnMinimap, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarkerConstraint, UnknownData_L5PW, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarkerConstraint, Padding, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarkerConstraint, Radius2D, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarkerConstraint, WorldSpaceRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarkerConstraint, BumpPastEdge, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarkerConstraint, RotationAdjust, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarkerConstraint, UnknownData_ETTV, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMapMarkerConstraint, 0x002C);
		}

		// struct FOptionWidgetData
		TEST_METHOD(ScriptStruct__FrontiersUI__OptionWidgetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionWidgetData, OptionAction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionWidgetData, UnknownData_CS7J, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionWidgetData, PlatformOverrideText, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionWidgetData, DisabledPlatforms, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionWidgetData, DisabledPlayModes, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionWidgetData, OptionName, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOptionWidgetData, 0x0090);
		}

		// struct FListedButton
		TEST_METHOD(ScriptStruct__FrontiersUI__ListedButton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FListedButton, Text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FListedButton, Icon, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FListedButton, OnClicked, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FListedButton, UnknownData_JDSA, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FListedButton, 0x0040);
		}

		// struct FStoreCategory
		TEST_METHOD(ScriptStruct__FrontiersUI__StoreCategory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreCategory, CategoryName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreCategory, GameplayTag, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreCategory, Rows, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreCategory, Columns, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreCategory, bDisplaySubCategoryContents, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreCategory, bDisplayTime, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreCategory, UnknownData_D7S0, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreCategory, NPCClass, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreCategory, UnknownData_HOC9, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStoreCategory, 0x0060);
		}

		// struct FUserFacingText
		TEST_METHOD(ScriptStruct__FrontiersUI__UserFacingText)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserFacingText, Text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserFacingText, Color, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserFacingText, UnknownData_AH2B, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserFacingText, 0x0020);
		}

		// struct FUserFacingError
		TEST_METHOD(ScriptStruct__FrontiersUI__UserFacingError)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserFacingError, ModalTitle, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserFacingError, ModalBody, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserFacingError, 0x0030);
		}

		// struct FUserFacingQuery
		TEST_METHOD(ScriptStruct__FrontiersUI__UserFacingQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserFacingQuery, ModalTitle, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserFacingQuery, ModalBody, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserFacingQuery, AcceptText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserFacingQuery, RejectText, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserFacingQuery, 0x0060);
		}

		// struct FCraftingEntryData
		TEST_METHOD(ScriptStruct__FrontiersUI__CraftingEntryData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingEntryData, Prop, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingEntryData, PropName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingEntryData, Recipe, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingEntryData, QueueEntry, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingEntryData, bIsEnabled, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCraftingEntryData, UnknownData_NOJ5, 0x0171);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCraftingEntryData, 0x0178);
		}

		// struct FDungeonChallengeCardData
		TEST_METHOD(ScriptStruct__FrontiersUI__DungeonChallengeCardData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonChallengeCardData, Quality, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonChallengeCardData, StartingAreaText, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonChallengeCardData, PrimaryElementTag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonChallengeCardData, MonsterPopulationTag, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonChallengeCardData, BossRow, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonChallengeCardData, bIsBossLevel, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonChallengeCardData, UnknownData_N8TM, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonChallengeCardData, DungeonSpawnOutput, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDungeonChallengeCardData, 0x0058);
		}

		// struct FDungeonChallengeCardParams
		TEST_METHOD(ScriptStruct__FrontiersUI__DungeonChallengeCardParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonChallengeCardParams, Quality, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonChallengeCardParams, ChallengeLevel, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonChallengeCardParams, DungeonSeed, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonChallengeCardParams, bIsBossLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonChallengeCardParams, UnknownData_GQI3, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDungeonChallengeCardParams, 0x0014);
		}

		// struct FDungeonUIStateMetadata
		TEST_METHOD(ScriptStruct__FrontiersUI__DungeonUIStateMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonUIStateMetadata, State, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonUIStateMetadata, bIsBossCardSelected, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDungeonUIStateMetadata, 0x0002);
		}

		// struct FDungeonUIActionMetadata
		TEST_METHOD(ScriptStruct__FrontiersUI__DungeonUIActionMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonUIActionMetadata, ActionType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonUIActionMetadata, OldState, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonUIActionMetadata, NewState, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDungeonUIActionMetadata, UnknownData_TOU4, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDungeonUIActionMetadata, 0x0010);
		}

		// struct FStatusEffectWidgetEntry
		TEST_METHOD(ScriptStruct__FrontiersUI__StatusEffectWidgetEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectWidgetEntry, UnknownData_TRME, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatusEffectWidgetEntry, 0x0008);
		}

		// struct FWidgetSet
		TEST_METHOD(ScriptStruct__FrontiersUI__WidgetSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetSet, bBlacklist, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetSet, UnknownData_A2WH, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetSet, Widgets, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetSet, 0x0018);
		}

		// struct FVector
		TEST_METHOD(ScriptStruct__CoreUObject__Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, Z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector, 0x000C);
		}

		// struct FTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__TwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoVectors, v1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoVectors, v2, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwoVectors, 0x0018);
		}

		// struct FInterpCurvePointTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointTwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, ArriveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, LeaveTangent, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, InterpMode, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, UnknownData_VOMN, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointTwoVectors, 0x0050);
		}

		// struct FInterpCurveTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveTwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, UnknownData_3AXX, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveTwoVectors, 0x0018);
		}

		// struct FLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__LinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, G, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, B, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, A, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearColor, 0x0010);
		}

		// struct FInterpCurvePointLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, ArriveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, LeaveTangent, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, InterpMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, UnknownData_YQSS, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointLinearColor, 0x0038);
		}

		// struct FInterpCurveLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, UnknownData_UIJ1, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveLinearColor, 0x0018);
		}

		// struct FQuat
		TEST_METHOD(ScriptStruct__CoreUObject__Quat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, Z, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuat, 0x0010);
		}

		// struct FTransform
		TEST_METHOD(ScriptStruct__CoreUObject__Transform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Rotation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Translation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, UnknownData_5C9Y, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Scale3D, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, UnknownData_WCIJ, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransform, 0x0030);
		}

		// struct FRandomStream
		TEST_METHOD(ScriptStruct__CoreUObject__RandomStream)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomStream, InitialSeed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomStream, Seed, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomStream, 0x0008);
		}

		// struct FDateTime
		TEST_METHOD(ScriptStruct__CoreUObject__DateTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDateTime, UnknownData_7OLD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDateTime, 0x0008);
		}

		// struct FFrameNumber
		TEST_METHOD(ScriptStruct__CoreUObject__FrameNumber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumber, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameNumber, 0x0004);
		}

		// struct FFrameRate
		TEST_METHOD(ScriptStruct__CoreUObject__FrameRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameRate, Numerator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameRate, Denominator, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameRate, 0x0008);
		}

		// struct FFrameTime
		TEST_METHOD(ScriptStruct__CoreUObject__FrameTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTime, FrameNumber, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTime, SubFrame, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameTime, 0x0008);
		}

		// struct FQualifiedFrameTime
		TEST_METHOD(ScriptStruct__CoreUObject__QualifiedFrameTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQualifiedFrameTime, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQualifiedFrameTime, Rate, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQualifiedFrameTime, 0x0010);
		}

		// struct FTimecode
		TEST_METHOD(ScriptStruct__CoreUObject__Timecode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Hours, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Minutes, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Seconds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Frames, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, bDropFrameFormat, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, UnknownData_M8ES, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimecode, 0x0014);
		}

		// struct FTimespan
		TEST_METHOD(ScriptStruct__CoreUObject__Timespan)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimespan, UnknownData_NLCB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimespan, 0x0008);
		}

		// struct FSoftObjectPath
		TEST_METHOD(ScriptStruct__CoreUObject__SoftObjectPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoftObjectPath, AssetPathName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoftObjectPath, SubPathString, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoftObjectPath, 0x0018);
		}

		// struct FSoftClassPath : public FSoftObjectPath
		TEST_METHOD(ScriptStruct__CoreUObject__SoftClassPath)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoftClassPath, 0x0018);
		}

		// struct FPrimaryAssetType
		TEST_METHOD(ScriptStruct__CoreUObject__PrimaryAssetType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetType, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetType, 0x0008);
		}

		// struct FPrimaryAssetId
		TEST_METHOD(ScriptStruct__CoreUObject__PrimaryAssetId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetId, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetId, PrimaryAssetName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetId, 0x0010);
		}

		// struct FFallbackStruct
		TEST_METHOD(ScriptStruct__CoreUObject__FallbackStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFallbackStruct, UnknownData_D32J, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFallbackStruct, 0x0001);
		}

		// struct FFloatRangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__FloatRangeBound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, UnknownData_ARYP, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRangeBound, 0x0008);
		}

		// struct FFloatRange
		TEST_METHOD(ScriptStruct__CoreUObject__FloatRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRange, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRange, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRange, 0x0010);
		}

		// struct FInt32RangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__Int32RangeBound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, UnknownData_ZZYP, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32RangeBound, 0x0008);
		}

		// struct FInt32Range
		TEST_METHOD(ScriptStruct__CoreUObject__Int32Range)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Range, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Range, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32Range, 0x0010);
		}

		// struct FFrameNumberRangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__FrameNumberRangeBound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumberRangeBound, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumberRangeBound, UnknownData_4PLU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumberRangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameNumberRangeBound, 0x0008);
		}

		// struct FFrameNumberRange
		TEST_METHOD(ScriptStruct__CoreUObject__FrameNumberRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumberRange, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumberRange, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameNumberRange, 0x0010);
		}

		// struct FFloatInterval
		TEST_METHOD(ScriptStruct__CoreUObject__FloatInterval)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatInterval, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatInterval, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatInterval, 0x0008);
		}

		// struct FInt32Interval
		TEST_METHOD(ScriptStruct__CoreUObject__Int32Interval)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Interval, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Interval, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32Interval, 0x0008);
		}

		// struct FPolyglotTextData
		TEST_METHOD(ScriptStruct__CoreUObject__PolyglotTextData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, UnknownData_028K, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, NativeCulture, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Namespace, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Key, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, NativeString, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, LocalizedStrings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, bIsMinimalPatch, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, UnknownData_ROIF, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, CachedText, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolyglotTextData, 0x00B8);
		}

		// struct FGuid
		TEST_METHOD(ScriptStruct__CoreUObject__Guid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, B, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, C, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, D, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGuid, 0x0010);
		}

		// struct FAutomationEvent
		TEST_METHOD(ScriptStruct__CoreUObject__AutomationEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, UnknownData_6B1I, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Message, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Context, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Artifact, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationEvent, 0x0038);
		}

		// struct FAutomationExecutionEntry
		TEST_METHOD(ScriptStruct__CoreUObject__AutomationExecutionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Event, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Filename, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, LineNumber, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, UnknownData_JTJF, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Timestamp, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationExecutionEntry, 0x0058);
		}

		// struct FARFilter
		TEST_METHOD(ScriptStruct__CoreUObject__ARFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, PackageNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, PackagePaths, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, ObjectPaths, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, ClassNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, UnknownData_9SPH, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, RecursiveClassesExclusionSet, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bRecursivePaths, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bRecursiveClasses, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bIncludeOnlyOnDiskAssets, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, UnknownData_AY8N, 0x00E3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARFilter, 0x00F0);
		}

		// struct FAssetBundleEntry
		TEST_METHOD(ScriptStruct__CoreUObject__AssetBundleEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleScope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleAssets, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetBundleEntry, 0x0028);
		}

		// struct FAssetBundleData
		TEST_METHOD(ScriptStruct__CoreUObject__AssetBundleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleData, Bundles, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetBundleData, 0x0010);
		}

		// struct FAssetData
		TEST_METHOD(ScriptStruct__CoreUObject__AssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, ObjectPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, PackageName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, PackagePath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, AssetName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, AssetClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, UnknownData_D2P1, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetData, 0x0050);
		}

		// struct FJoinabilitySettings
		TEST_METHOD(ScriptStruct__CoreUObject__JoinabilitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, SessionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bPublicSearchable, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bAllowInvites, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bJoinViaPresence, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bJoinViaPresenceFriendsOnly, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, MaxPlayers, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, MaxPartySize, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJoinabilitySettings, 0x0014);
		}

		// struct FUniqueNetIdWrapper
		TEST_METHOD(ScriptStruct__CoreUObject__UniqueNetIdWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdWrapper, UnknownData_4OM5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUniqueNetIdWrapper, 0x0001);
		}

		// struct FVector4
		TEST_METHOD(ScriptStruct__CoreUObject__Vector4)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, Z, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector4, 0x0010);
		}

		// struct FVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__Vector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2D, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2D, Y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2D, 0x0008);
		}

		// struct FPlane : public FVector
		TEST_METHOD(ScriptStruct__CoreUObject__Plane)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlane, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlane, 0x0010);
		}

		// struct FRotator
		TEST_METHOD(ScriptStruct__CoreUObject__Rotator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Pitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Yaw, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Roll, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotator, 0x000C);
		}

		// struct FPackedNormal
		TEST_METHOD(ScriptStruct__CoreUObject__PackedNormal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, Y, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, Z, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, W, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedNormal, 0x0004);
		}

		// struct FPackedRGB10A2N
		TEST_METHOD(ScriptStruct__CoreUObject__PackedRGB10A2N)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGB10A2N, Packed, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedRGB10A2N, 0x0004);
		}

		// struct FPackedRGBA16N
		TEST_METHOD(ScriptStruct__CoreUObject__PackedRGBA16N)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGBA16N, XY, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGBA16N, ZW, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedRGBA16N, 0x0008);
		}

		// struct FIntPoint
		TEST_METHOD(ScriptStruct__CoreUObject__IntPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntPoint, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntPoint, Y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntPoint, 0x0008);
		}

		// struct FIntVector
		TEST_METHOD(ScriptStruct__CoreUObject__IntVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, Z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntVector, 0x000C);
		}

		// struct FColor
		TEST_METHOD(ScriptStruct__CoreUObject__Color)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, B, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, G, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, R, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, A, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColor, 0x0004);
		}

		// struct FBox
		TEST_METHOD(ScriptStruct__CoreUObject__Box)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, Max, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, IsValid, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, UnknownData_X1WA, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBox, 0x001C);
		}

		// struct FBox2D
		TEST_METHOD(ScriptStruct__CoreUObject__Box2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, Max, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, bIsValid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, UnknownData_9G1J, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBox2D, 0x0014);
		}

		// struct FBoxSphereBounds
		TEST_METHOD(ScriptStruct__CoreUObject__BoxSphereBounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, Origin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, BoxExtent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, SphereRadius, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoxSphereBounds, 0x001C);
		}

		// struct FOrientedBox
		TEST_METHOD(ScriptStruct__CoreUObject__OrientedBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, Center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisX, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisZ, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentY, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentZ, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOrientedBox, 0x003C);
		}

		// struct FMatrix
		TEST_METHOD(ScriptStruct__CoreUObject__Matrix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, XPlane, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, YPlane, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, ZPlane, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, WPlane, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatrix, 0x0040);
		}

		// struct FInterpCurvePointFloat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, ArriveTangent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, LeaveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, InterpMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, UnknownData_P62Q, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointFloat, 0x0014);
		}

		// struct FInterpCurveFloat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, UnknownData_ZQZX, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveFloat, 0x0018);
		}

		// struct FInterpCurvePointVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, ArriveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, LeaveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, InterpMode, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, UnknownData_FH2H, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointVector2D, 0x0020);
		}

		// struct FInterpCurveVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, UnknownData_HCD7, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveVector2D, 0x0018);
		}

		// struct FInterpCurvePointVector
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, ArriveTangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, LeaveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, InterpMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, UnknownData_O3KW, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointVector, 0x002C);
		}

		// struct FInterpCurveVector
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, UnknownData_GXLA, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveVector, 0x0018);
		}

		// struct FInterpCurvePointQuat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointQuat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, UnknownData_9AMF, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, OutVal, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, ArriveTangent, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, LeaveTangent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, InterpMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, UnknownData_REXI, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointQuat, 0x0050);
		}

		// struct FInterpCurveQuat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveQuat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, UnknownData_2KRP, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveQuat, 0x0018);
		}

		// struct FTimedDataInputEvaluationData
		TEST_METHOD(ScriptStruct__TimeManagement__TimedDataInputEvaluationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedDataInputEvaluationData, DistanceToNewestSampleSeconds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedDataInputEvaluationData, DistanceToOldestSampleSeconds, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimedDataInputEvaluationData, 0x0008);
		}

		// struct FTimedDataChannelSampleTime
		TEST_METHOD(ScriptStruct__TimeManagement__TimedDataChannelSampleTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedDataChannelSampleTime, UnknownData_OLO9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimedDataChannelSampleTime, 0x0018);
		}

		// struct FNodeChain
		TEST_METHOD(ScriptStruct__AnimationCore__NodeChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeChain, Nodes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeChain, 0x0010);
		}

		// struct FNodeObject
		TEST_METHOD(ScriptStruct__AnimationCore__NodeObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeObject, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeObject, ParentName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeObject, 0x0010);
		}

		// struct FNodeHierarchyData
		TEST_METHOD(ScriptStruct__AnimationCore__NodeHierarchyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, Nodes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, Transforms, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, NodeNameToIndexMapping, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeHierarchyData, 0x0070);
		}

		// struct FNodeHierarchyWithUserData
		TEST_METHOD(ScriptStruct__AnimationCore__NodeHierarchyWithUserData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyWithUserData, UnknownData_H8NF, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyWithUserData, Hierarchy, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeHierarchyWithUserData, 0x0078);
		}

		// struct FTransformNoScale
		TEST_METHOD(ScriptStruct__AnimationCore__TransformNoScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformNoScale, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformNoScale, UnknownData_FSW0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformNoScale, Rotation, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformNoScale, 0x0020);
		}

		// struct FConstraintDescriptor
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescriptor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptor, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptor, UnknownData_8HX7, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescriptor, 0x0010);
		}

		// struct FConstraintData
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Constraint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Weight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, bMaintainOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, UnknownData_EDGP, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Offset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, CurrentTransform, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintData, 0x0080);
		}

		// struct FFilterOptionPerAxis
		TEST_METHOD(ScriptStruct__AnimationCore__FilterOptionPerAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bZ, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilterOptionPerAxis, 0x0003);
		}

		// struct FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescriptionEx)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, UnknownData_TPAC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, AxesFilterOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, UnknownData_Q3JD, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescriptionEx, 0x0010);
		}

		// struct FAxis
		TEST_METHOD(ScriptStruct__AnimationCore__Axis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, Axis, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, bInLocalSpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, UnknownData_WW2D, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAxis, 0x0010);
		}

		// struct FAimConstraintDescription : public FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__AimConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookAt_Axis, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookUp_Axis, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, bUseLookUp, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, UnknownData_WBIK, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookUpTarget, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAimConstraintDescription, 0x0040);
		}

		// struct FTransformConstraintDescription : public FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__TransformConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraintDescription, TransformType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraintDescription, UnknownData_TKPS, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformConstraintDescription, 0x0018);
		}

		// struct FCCDIKChainLink
		TEST_METHOD(ScriptStruct__AnimationCore__CCDIKChainLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCCDIKChainLink, UnknownData_C72V, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCCDIKChainLink, 0x0080);
		}

		// struct FConstraintDescription
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bTranslation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bRotation, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bScale, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bParent, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, TranslationAxes, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, RotationAxes, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, ScaleAxes, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescription, 0x000D);
		}

		// struct FTransformConstraint
		TEST_METHOD(ScriptStruct__AnimationCore__TransformConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, Operator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, UnknownData_113Z, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, SourceNode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, TargetNode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, Weight, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, bMaintainOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, UnknownData_K8P6, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformConstraint, 0x0028);
		}

		// struct FConstraintOffset
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Translation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, UnknownData_NSH7, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, UnknownData_SVA1, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Parent, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintOffset, 0x0060);
		}

		// struct FTransformFilter
		TEST_METHOD(ScriptStruct__AnimationCore__TransformFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, TranslationFilter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, RotationFilter, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, ScaleFilter, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformFilter, 0x0009);
		}

		// struct FEulerTransform
		TEST_METHOD(ScriptStruct__AnimationCore__EulerTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Scale, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEulerTransform, 0x0024);
		}

		// struct FFABRIKChainLink
		TEST_METHOD(ScriptStruct__AnimationCore__FABRIKChainLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFABRIKChainLink, UnknownData_GURL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFABRIKChainLink, 0x0038);
		}

		// struct FAnimNode_Slot : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Slot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, Source, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, SlotName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, bAlwaysUpdateSourcePose, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, UnknownData_4DYL, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Slot, 0x0048);
		}

		// struct FAnimNode_BlendSpacePlayer : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendSpacePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, X, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, Y, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, Z, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, PlayRate, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, bLoop, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, bResetPlayTimeWhenBlendSpaceChanges, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, UnknownData_TQAE, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, StartPosition, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, BlendSpace, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, UnknownData_ACRS, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, PreviousBlendSpace, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendSpacePlayer, 0x00E8);
		}

		// struct FAnimNode_AimOffsetLookAt : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_AimOffsetLookAt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_1BG9, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, BasePose, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, LODThreshold, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SourceSocketName, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, PivotSocketName, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, LookAtLocation, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SocketAxis, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, Alpha, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_T6ZU, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AimOffsetLookAt, 0x01C0);
		}

		// struct FAnimPhysConstraintSetup
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysConstraintSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearXLimitType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearYLimitType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearZLimitType, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_TP0W, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearAxesMin, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearAxesMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularConstraintType, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, TwistAxis, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularTargetAxis, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_8RT5, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, ConeAngle, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularLimitsMin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularLimitsMax, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularTarget, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysConstraintSetup, 0x0048);
		}

		// struct FAnimPhysSphericalLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysSphericalLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, DrivingBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, SphereLocalOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, LimitRadius, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, LimitType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, UnknownData_KZGV, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysSphericalLimit, 0x0024);
		}

		// struct FRotationRetargetingInfo
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RotationRetargetingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_EEDR, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, Source, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, Target, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, RotationComponent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_ZVE3, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, TwistAxis, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bUseAbsoluteAngle, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_AM5Q, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, SourceMinimum, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, SourceMaximum, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, TargetMinimum, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, TargetMaximum, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, EasingType, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_D4OI, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, CustomCurve, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bFlipEasing, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_GOCI, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, EasingWeight, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bClamp, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_PN3R, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationRetargetingInfo, 0x0130);
		}

		// struct FAnimNode_SkeletalControlBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SkeletalControlBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, ComponentPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, LODThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, ActualAlpha, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaInputType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, bAlphaBoolEnabled, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, UnknownData_M7GJ, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, Alpha, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaScaleBias, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaBoolBlend, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaCurveName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaScaleBiasClamp, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, UnknownData_H8NC, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SkeletalControlBase, 0x00C8);
		}

		// struct FAnimPhysPlanarLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysPlanarLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, DrivingBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, PlaneTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysPlanarLimit, 0x0040);
		}

		// struct FAnimNode_AnimDynamics : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_AnimDynamics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LinearDampingOverride, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularDampingOverride, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_7P3P, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, RelativeSpaceBone, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, BoundBone, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ChainEnd, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, BoxExtents, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LocalJointOffset, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, GravityScale, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, GravityOverride, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LinearSpringConstant, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularSpringConstant, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, WindScale, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentLinearAccScale, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentLinearVelScale, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentAppliedLinearAccClamp, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularBiasOverride, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, NumSolverIterationsPreUpdate, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, NumSolverIterationsPostUpdate, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ConstraintSetup, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_HQL9, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SphericalLimits, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SphereCollisionRadius, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ExternalForce, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, PlanarLimits, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, CollisionType, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SimulationSpace, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_YM5V, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_LVFP, 0x0246);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, RetargetingSettings, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_7WBD, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AnimDynamics, 0x0440);
		}

		// struct FAnimNode_ApplyAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ApplyAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Alpha, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaScaleBias, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, LODThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaBoolBlend, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaCurveName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaScaleBiasClamp, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, UnknownData_BHC3, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaInputType, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, bAlphaBoolEnabled, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, UnknownData_LA3A, 0x00C6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyAdditive, 0x00C8);
		}

		// struct FAngularRangeLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AngularRangeLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, LimitMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, LimitMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, Bone, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAngularRangeLimit, 0x0028);
		}

		// struct FAnimNode_ApplyLimits : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ApplyLimits)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyLimits, AngularRangeLimits, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyLimits, AngularOffsets, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyLimits, 0x00E8);
		}

		// struct FBlendBoneByChannelEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__BlendBoneByChannelEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, SourceBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, TargetBone, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendTranslation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendRotation, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendScale, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, UnknownData_2VBL, 0x0023);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendBoneByChannelEntry, 0x0024);
		}

		// struct FAnimNode_BlendBoneByChannel : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendBoneByChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, A, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, B, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, BoneDefinitions, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_EKYB, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_RUX8, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, AlphaScaleBias, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, TransformsSpace, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_W9V3, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendBoneByChannel, 0x0068);
		}

		// struct FAnimNode_BlendListBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, TransitionType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendType, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, bResetChildOnActivation, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_35YP, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, CustomBlendCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendProfile, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_U9T3, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListBase, 0x0098);
		}

		// struct FAnimNode_BlendListByBool : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByBool, bActiveValue, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByBool, UnknownData_X47G, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByBool, 0x00A0);
		}

		// struct FAnimNode_BlendListByEnum : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, EnumToPoseIndex, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, ActiveEnumValue, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, UnknownData_6YEH, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByEnum, 0x00B0);
		}

		// struct FAnimNode_BlendListByInt : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByInt, ActiveChildIndex, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByInt, UnknownData_HMRE, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByInt, 0x00A0);
		}

		// struct FAnimNode_BlendSpaceEvaluator : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendSpaceEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpaceEvaluator, NormalizedTime, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpaceEvaluator, UnknownData_5HNW, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendSpaceEvaluator, 0x00F0);
		}

		// struct FAnimNode_BoneDrivenController : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BoneDrivenController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, SourceBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, DrivingCurve, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, Multiplier, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RangeMin, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RangeMax, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RemappedMin, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RemappedMax, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, ParameterName, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, TargetBone, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, DestinationMode, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, ModificationMode, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, SourceComponent, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_RSV6, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BoneDrivenController, 0x0118);
		}

		// struct FSocketReference
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SocketReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, UnknownData_TTTC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, SocketName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, UnknownData_7L0X, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSocketReference, 0x0040);
		}

		// struct FBoneSocketTarget
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__BoneSocketTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, bUseSocket, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, UnknownData_0PDZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, BoneReference, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, UnknownData_G9FJ, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, SocketReference, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneSocketTarget, 0x0060);
		}

		// struct FAnimNode_CCDIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CCDIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorLocation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorLocationSpace, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, UnknownData_4K0S, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorTarget, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, TipBone, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, RootBone, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, Precision, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, MaxIterations, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, bStartFromTail, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, bEnableRotationLimit, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, UnknownData_XLKZ, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, RotationLimitPerJoints, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CCDIK, 0x0180);
		}

		// struct FConstraint
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__Constraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, TargetBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, OffsetOption, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, TransformType, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, PerAxis, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, UnknownData_KR0P, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraint, 0x001C);
		}

		// struct FAnimNode_Constraint : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Constraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, BoneToModify, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, ConstraintSetup, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, ConstraintWeights, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, UnknownData_HV2J, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Constraint, 0x0108);
		}

		// struct FAnimNode_CopyBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, SourceBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, TargetBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyTranslation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyRotation, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyScale, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, ControlSpace, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, UnknownData_RVDL, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyBone, 0x00F0);
		}

		// struct FAnimNode_CopyBoneDelta : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyBoneDelta)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, SourceBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, TargetBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyTranslation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyRotation, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyScale, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, CopyMode, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, TranslationMultiplier, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, RotationMultiplier, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, ScaleMultiplier, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyBoneDelta, 0x00F8);
		}

		// struct FAnimNode_CopyPoseFromMesh : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyPoseFromMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, SourceMeshComponent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, bCopyCustomAttributes, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, UnknownData_0WKF, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, RootBoneToCopy, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, UnknownData_I6WY, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyPoseFromMesh, 0x01D8);
		}

		// struct FAnimNode_CurveSource : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CurveSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, SourcePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, SourceBinding, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, Alpha, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, UnknownData_1QB9, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, CurveSource, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CurveSource, 0x0040);
		}

		// struct FAnimNode_Fabrik : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Fabrik)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_KUG9, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransform, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTarget, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, TipBone, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, RootBone, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, Precision, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, MaxIterations, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransformSpace, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorRotationSource, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_XQU6, 0x018A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Fabrik, 0x0190);
		}

		// struct FAnimNode_HandIKRetargeting : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_HandIKRetargeting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, RightHandFK, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, LeftHandFK, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, RightHandIK, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, LeftHandIK, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, IKBonesToMove, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, HandFKWeight, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, UnknownData_I8V6, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_HandIKRetargeting, 0x0120);
		}

		// struct FAnimNode_LayeredBoneBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LayeredBoneBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BasePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BlendPoses, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, LayerSetup, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BlendWeights, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bMeshSpaceRotationBlend, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bMeshSpaceScaleBlend, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, CurveBlendOption, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bBlendRootMotionBasedOnRootBone, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_Y7KI, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, LODThreshold, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_LCHA, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, PerBoneBlendWeights, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, SkeletonGuid, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, VirtualBoneGuid, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_76ZU, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LayeredBoneBlend, 0x00C0);
		}

		// struct FAnimLegIKDefinition
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimLegIKDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, IKFootBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, FKFootBone, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, NumBonesInLimb, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, MinRotationAngle, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, FootBoneForwardAxis, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, HingeRotationAxis, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, bEnableRotationLimit, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, bEnableKneeTwistCorrection, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLegIKDefinition, 0x002C);
		}

		// struct FAnimNode_LegIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LegIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, ReachPrecision, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, MaxIterations, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, LegsDefinition, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, UnknownData_G0Z7, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LegIK, 0x00F8);
		}

		// struct FAnimLegIKData
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimLegIKData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKData, UnknownData_VLUF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLegIKData, 0x00A0);
		}

		// struct FIKChain
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__IKChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKChain, UnknownData_BK5S, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIKChain, 0x0038);
		}

		// struct FIKChainLink
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__IKChainLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKChainLink, UnknownData_V61Q, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIKChainLink, 0x003C);
		}

		// struct FAnimNode_LookAt : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LookAt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, BoneToModify, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_I0LF, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtTarget, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtLocation, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAt_Axis, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, bUseLookUpAxis, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationType, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_2BJ3, 0x015E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookUp_Axis, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtClamp, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationTime, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationTriggerThreashold, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_2D6P, 0x017C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LookAt, 0x01B0);
		}

		// struct FAnimNode_MakeDynamicAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MakeDynamicAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, Additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, bMeshSpaceAdditive, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, UnknownData_9Y1I, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MakeDynamicAdditive, 0x0038);
		}

		// struct FAnimNode_ModifyBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ModifyBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, BoneToModify, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Translation, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Rotation, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Scale, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, TranslationMode, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, RotationMode, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, ScaleMode, 0x00FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, TranslationSpace, 0x00FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, RotationSpace, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, ScaleSpace, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, UnknownData_MKYS, 0x0102);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ModifyBone, 0x0108);
		}

		// struct FAnimNode_ModifyCurve : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ModifyCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, SourcePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, CurveValues, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, CurveNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, UnknownData_UNJ5, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, ApplyMode, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, UnknownData_9Y3Q, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ModifyCurve, 0x0058);
		}

		// struct FAnimNode_MultiWayBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MultiWayBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, Poses, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, DesiredAlphas, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, UnknownData_YAIL, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, AlphaScaleBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, bAdditiveNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, bNormalizeAlpha, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, UnknownData_O06B, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MultiWayBlend, 0x0050);
		}

		// struct FAnimNode_ObserveBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ObserveBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, BoneToObserve, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, DisplaySpace, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, bRelativeToRefPose, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, UnknownData_H2G7, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Translation, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Rotation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Scale, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ObserveBone, 0x0100);
		}

		// struct FAnimNode_PoseHandler : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseHandler, PoseAsset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseHandler, UnknownData_MJPJ, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseHandler, 0x0080);
		}

		// struct FAnimNode_PoseBlendNode : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseBlendNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, SourcePose, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, BlendOption, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, UnknownData_ULWT, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, CustomCurve, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseBlendNode, 0x00A0);
		}

		// struct FAnimNode_PoseByName : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseByName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, PoseName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, PoseWeight, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, UnknownData_YV6C, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseByName, 0x0098);
		}

		// struct FPoseDriverTransform
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PoseDriverTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTransform, TargetTranslation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTransform, TargetRotation, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDriverTransform, 0x0018);
		}

		// struct FPoseDriverTarget
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PoseDriverTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, BoneTransforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, TargetRotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, TargetScale, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, DistanceMethod, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, FunctionType, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, bApplyCustomCurve, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_Z1QN, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, CustomCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, DrivenName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_5T03, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, bIsHidden, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_YEHV, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDriverTarget, 0x00C0);
		}

		// struct FRBFParams
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, TargetDimensions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, SolverType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, UnknownData_Q1F5, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, Radius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, bAutomaticRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, Function, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, DistanceMethod, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, TwistAxis, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, WeightThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, NormalizeMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, UnknownData_LQA7, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, MedianReference, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, MedianMin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, MedianMax, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFParams, 0x002C);
		}

		// struct FAnimNode_PoseDriver : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourcePose, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourceBones, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, OnlyDriveBones, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, PoseTargets, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_GOMR, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, EvalSpaceBone, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, RBFParams, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, DriveSource, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, DriveOutput, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_OUZ2, 0x012F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, LODThreshold, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_SF7F, 0x0134);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseDriver, 0x0138);
		}

		// struct FAnimNode_PoseSnapshot : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, SnapshotName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, Snapshot, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, Mode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, UnknownData_4DON, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseSnapshot, 0x0090);
		}

		// struct FRandomPlayerSequenceEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RandomPlayerSequenceEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, Sequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, ChanceToPlay, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MinLoopCount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MaxLoopCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MinPlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MaxPlayRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, UnknownData_1T5N, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, BlendIn, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomPlayerSequenceEntry, 0x0050);
		}

		// struct FAnimNode_RandomPlayer : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RandomPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, Entries, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, UnknownData_84WJ, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, bShuffleMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, UnknownData_20HL, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RandomPlayer, 0x0078);
		}

		// struct FAnimNode_MeshSpaceRefPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MeshSpaceRefPose)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MeshSpaceRefPose, 0x0010);
		}

		// struct FAnimNode_RefPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RefPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RefPose, RefPoseType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RefPose, UnknownData_4ABB, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RefPose, 0x0018);
		}

		// struct FAnimNode_ResetRoot : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ResetRoot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ResetRoot, UnknownData_Y6J2, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ResetRoot, 0x00D8);
		}

		// struct FSimSpaceSettings
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SimSpaceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, MasterAlpha, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, VelocityScaleZ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, MaxLinearVelocity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, MaxAngularVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, MaxLinearAcceleration, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, MaxAngularAcceleration, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, ExternalLinearDrag, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, ExternalLinearDragV, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, ExternalLinearVelocity, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, ExternalAngularVelocity, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimSpaceSettings, 0x0040);
		}

		// struct FAnimNode_RigidBody : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RigidBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverridePhysicsAsset, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_E8HY, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverrideWorldGravity, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ExternalForce, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentLinearAccScale, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentLinearVelScale, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentAppliedLinearAccClamp, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, SimSpaceSettings, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, CachedBoundsScale, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, BaseBoneRef, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverlapChannel, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, SimulationSpace, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, bForceDisableCollisionBetweenConstraintBodies, 0x01FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_OPUH, 0x01FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_U1SE, 0x01FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, WorldSpaceMinimumScale, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, EvaluationResetTime, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_JZEB, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RigidBody, 0x0650);
		}

		// struct FAnimNode_RotateRootBone : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotateRootBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, BasePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, Pitch, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, Yaw, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, PitchScaleBiasClamp, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, YawScaleBiasClamp, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, MeshToComponent, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, UnknownData_RPTA, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotateRootBone, 0x00A0);
		}

		// struct FAnimNode_RotationMultiplier : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotationMultiplier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, TargetBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, SourceBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, Multiplier, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, RotationAxisToRefer, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, bIsAdditive, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, UnknownData_UEBJ, 0x00EE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotationMultiplier, 0x00F0);
		}

		// struct FAnimNode_RotationOffsetBlendSpace : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotationOffsetBlendSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, BasePose, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, LODThreshold, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, Alpha, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaScaleBias, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaBoolBlend, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaCurveName, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaScaleBiasClamp, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, UnknownData_3BNK, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaInputType, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, bAlphaBoolEnabled, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, UnknownData_CNBJ, 0x018E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotationOffsetBlendSpace, 0x0190);
		}

		// struct FAnimNode_ScaleChainLength : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ScaleChainLength)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, InputPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, DefaultChainLength, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainStartBone, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainEndBone, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, TargetLocation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_PF1Z, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, AlphaScaleBias, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainInitialLength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_5YOY, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ScaleChainLength, 0x0078);
		}

		// struct FAnimNode_SequenceEvaluator : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SequenceEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, Sequence, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, ExplicitTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bShouldLoop, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bTeleportToExplicitTime, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, ReinitializationBehavior, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, UnknownData_PGEJ, 0x0047);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, StartPosition, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, UnknownData_OKNT, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SequenceEvaluator, 0x0050);
		}

		// struct FAnimNode_SplineIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SplineIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, StartBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, EndBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, BoneAxis, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, bAutoCalculateSpline, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_Y5NK, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, PointCount, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, ControlPoints, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Roll, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistStart, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistEnd, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_XMUP, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistBlend, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Stretch, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Offset, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_HTCY, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SplineIK, 0x0270);
		}

		// struct FSplineIKCachedBoneData
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SplineIKCachedBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, Bone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, RefSkeletonIndex, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineIKCachedBoneData, 0x0014);
		}

		// struct FAnimNode_SpringBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SpringBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, MaxDisplacement, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringStiffness, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringDamping, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, ErrorResetThresh, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, UnknownData_27MQ, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, UnknownData_4TZS, 0x0125);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SpringBone, 0x0128);
		}

		// struct FAnimNode_StateResult : public FAnimNode_Root
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_StateResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_StateResult, 0x0030);
		}

		// struct FRotationLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RotationLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationLimit, LimitMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationLimit, LimitMax, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationLimit, 0x0018);
		}

		// struct FAnimNode_Trail : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Trail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_UJZR, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, TrailBone, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, ChainLength, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, ChainBoneAxis, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_VM83, 0x0116);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, MaxDeltaTime, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RelaxationSpeedScale, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, TrailRelaxationSpeed, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RelaxationSpeedScaleInputProcessor, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RotationLimits, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RotationOffsets, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, PlanarLimits, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, StretchLimit, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, FakeVelocity, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, BaseJoint, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, LastBoneRotationAnimAlphaBlend, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_NDM6, 0x022C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Trail, 0x0260);
		}

		// struct FReferenceBoneFrame
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__ReferenceBoneFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferenceBoneFrame, Bone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferenceBoneFrame, Axis, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReferenceBoneFrame, 0x0020);
		}

		// struct FAnimNode_TwistCorrectiveNode : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwistCorrectiveNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, BaseFrame, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, TwistFrame, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, TwistPlaneNormalAxis, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RangeMax, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RemappedMin, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RemappedMax, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, Curve, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, UnknownData_3CUB, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwistCorrectiveNode, 0x0138);
		}

		// struct FAnimNode_TwoBoneIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwoBoneIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, IKBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, StartStretchRatio, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, MaxStretchScale, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorLocation, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_273Y, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorTarget, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetLocation, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_MD1E, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTarget, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, TwistAxis, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorLocationSpace, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetLocationSpace, 0x01D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_W4PG, 0x01D3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwoBoneIK, 0x01E0);
		}

		// struct FAnimNode_TwoWayBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwoWayBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, A, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, B, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaInputType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, UnknownData_CKVM, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, Alpha, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaScaleBias, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaBoolBlend, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaCurveName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaScaleBiasClamp, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, UnknownData_85L9, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwoWayBlend, 0x00C8);
		}

		// struct FAnimSequencerInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimSequencerInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequencerInstanceProxy, UnknownData_ML6O, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSequencerInstanceProxy, 0x0A00);
		}

		// struct FPositionHistory
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PositionHistory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPositionHistory, Positions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPositionHistory, Range, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPositionHistory, UnknownData_0TW1, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPositionHistory, 0x0030);
		}

		// struct FRBFEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFEntry, Values, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFEntry, 0x0010);
		}

		// struct FRBFTarget : public FRBFEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, ScaleFactor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, bApplyCustomCurve, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, UnknownData_QITX, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, CustomCurve, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, DistanceMethod, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, FunctionType, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, UnknownData_2PZR, 0x009A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFTarget, 0x00A0);
		}

		// struct FSubmixEffectDynamicProcessorFilterSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectDynamicProcessorFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicProcessorFilterSettings, UnknownData_E9R5, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicProcessorFilterSettings, Cutoff, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicProcessorFilterSettings, GainDb, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDynamicProcessorFilterSettings, 0x000C);
		}

		// struct FSubmixEffectDynamicsProcessorSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectDynamicsProcessorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, DynamicsProcessorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, PeakMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, LinkMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_EQ46, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, InputGainDb, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ThresholdDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, Ratio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KneeBandwidthDb, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, LookAheadMsec, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, AttackTimeMsec, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ReleaseTimeMsec, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ExternalSubmix, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_QZK0, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KeyGainDb, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, OutputGainDb, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KeyHighshelf, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KeyLowshelf, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_3Y6L, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDynamicsProcessorSettings, 0x0050);
		}

		// struct FSubmixEffectEQBand
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectEQBand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, Bandwidth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, GainDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, UnknownData_RT0T, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectEQBand, 0x0010);
		}

		// struct FSubmixEffectSubmixEQSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectSubmixEQSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectSubmixEQSettings, EQBands, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectSubmixEQSettings, 0x0010);
		}

		// struct FSubmixEffectReverbSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, bBypassEarlyReflections, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, UnknownData_VK62, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, ReflectionsDelay, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, GainHF, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, ReflectionsGain, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, bBypassLateReflections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, UnknownData_V6J9, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, LateDelay, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DecayTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Density, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Diffusion, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, AirAbsorptionGainHF, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DecayHFRatio, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, LateGain, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Gain, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, WetLevel, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DryLevel, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, bBypass, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, UnknownData_58NM, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectReverbSettings, 0x0040);
		}

		// struct FPropertyPathSegment
		TEST_METHOD(ScriptStruct__PropertyPath__PropertyPathSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, ArrayIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, UnknownData_WJLG, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Struct, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, UnknownData_3RF6, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyPathSegment, 0x0028);
		}

		// struct FCachedPropertyPath
		TEST_METHOD(ScriptStruct__PropertyPath__CachedPropertyPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, Segments, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, UnknownData_9QAV, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, CachedFunction, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, UnknownData_I780, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedPropertyPath, 0x0028);
		}

		// struct FFractureMaterial
		TEST_METHOD(ScriptStruct__ApexDestruction__FractureMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, UVScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, UVOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, Tangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, UAngle, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, InteriorElementIndex, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFractureMaterial, 0x0024);
		}

		// struct FDestructibleChunkParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleChunkParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bIsSupportChunk, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bDoNotFracture, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bDoNotDamage, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bDoNotCrumble, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleChunkParameters, 0x0004);
		}

		// struct FDestructibleDamageParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleDamageParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, DamageThreshold, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, DamageSpread, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, bEnableImpactDamage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, UnknownData_WOE6, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, ImpactDamage, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, DefaultImpactDamageDepth, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, bCustomImpactResistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, UnknownData_0909, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, ImpactResistance, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleDamageParameters, 0x001C);
		}

		// struct FDestructibleSpecialHierarchyDepths
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleSpecialHierarchyDepths)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, SupportDepth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, MinimumFractureDepth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, bEnableDebris, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, UnknownData_ARWQ, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, DebrisDepth, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, EssentialDepth, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleSpecialHierarchyDepths, 0x0014);
		}

		// struct FDestructibleDepthParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleDepthParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDepthParameters, ImpactDamageOverride, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleDepthParameters, 0x0001);
		}

		// struct FDestructibleParametersFlag
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleParametersFlag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParametersFlag, UnknownData_Y9A0, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleParametersFlag, 0x0004);
		}

		// struct FDestructibleDebrisParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleDebrisParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisLifetimeMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisLifetimeMax, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisMaxSeparationMin, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisMaxSeparationMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, ValidBounds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleDebrisParameters, 0x002C);
		}

		// struct FDestructibleAdvancedParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleAdvancedParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, DamageCap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, ImpactVelocityThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, MaxChunkSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, FractureImpulseScale, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleAdvancedParameters, 0x0010);
		}

		// struct FDestructibleParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, DamageParameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, DebrisParameters, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, AdvancedParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, SpecialHierarchyDepths, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, UnknownData_GSE4, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, DepthParameters, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, Flags, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, UnknownData_PS6U, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleParameters, 0x0088);
		}

		// struct FMagicLeapAudioDummyStruct
		TEST_METHOD(ScriptStruct__MagicLeapAudio__MagicLeapAudioDummyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapAudioDummyStruct, UnknownData_XJKR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapAudioDummyStruct, 0x0001);
		}

		// struct FNiagaraCompileHash
		TEST_METHOD(ScriptStruct__NiagaraCore__NiagaraCompileHash)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHash, DataHash, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCompileHash, 0x0010);
		}

		// struct FMagicLeapSharedWorldAlignmentTransforms
		TEST_METHOD(ScriptStruct__MagicLeapSharedWorld__MagicLeapSharedWorldAlignmentTransforms)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapSharedWorldAlignmentTransforms, AlignmentTransforms, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapSharedWorldAlignmentTransforms, 0x0010);
		}

		// struct FMagicLeapSharedWorldSharedData
		TEST_METHOD(ScriptStruct__MagicLeapSharedWorld__MagicLeapSharedWorldSharedData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapSharedWorldSharedData, PinIDs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapSharedWorldSharedData, 0x0010);
		}

		// struct FMagicLeapSharedWorldPinData
		TEST_METHOD(ScriptStruct__MagicLeapSharedWorld__MagicLeapSharedWorldPinData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapSharedWorldPinData, PinId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapSharedWorldPinData, PinState, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapSharedWorldPinData, 0x0024);
		}

		// struct FMagicLeapSharedWorldLocalData
		TEST_METHOD(ScriptStruct__MagicLeapSharedWorld__MagicLeapSharedWorldLocalData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapSharedWorldLocalData, LocalPins, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapSharedWorldLocalData, 0x0010);
		}

		// struct FMovieSceneMediaPlayerPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MediaCompositing__MovieSceneMediaPlayerPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, MediaSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, SectionStartFrame, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, bLoop, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, UnknownData_GB4V, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMediaPlayerPropertySectionTemplate, 0x0048);
		}

		// struct FMovieSceneMediaSectionParams
		TEST_METHOD(ScriptStruct__MediaCompositing__MovieSceneMediaSectionParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaSoundComponent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaSource, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaPlayer, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, SectionStartFrame, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, SectionEndFrame, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, bLooping, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, UnknownData_2SG5, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, StartFrameOffset, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMediaSectionParams, 0x0030);
		}

		// struct FMovieSceneMediaSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MediaCompositing__MovieSceneMediaSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMediaSectionTemplate, 0x0050);
		}

		// struct FClothConstraintSetupNv
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeNv__ClothConstraintSetupNv)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, StiffnessMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, StretchLimit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, CompressionLimit, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConstraintSetupNv, 0x0010);
		}

		// struct FOverlayItem
		TEST_METHOD(ScriptStruct__Overlay__OverlayItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, StartTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, EndTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, Text, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, Position, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlayItem, 0x0028);
		}

		// struct FCustomMeshTriangle
		TEST_METHOD(ScriptStruct__CustomMeshComponent__CustomMeshTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex2, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomMeshTriangle, 0x0024);
		}

		// struct FLightPropagationVolumeSettings
		TEST_METHOD(ScriptStruct__Renderer__LightPropagationVolumeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, UnknownData_FM0X, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVIntensity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVVplInjectionBias, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSecondaryOcclusionIntensity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSecondaryBounceIntensity, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVGeometryVolumeBias, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVEmissiveInjectionIntensity, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionIntensity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionRadius, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDiffuseOcclusionExponent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSpecularOcclusionExponent, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDiffuseOcclusionIntensity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSpecularOcclusionIntensity, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVFadeRange, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionFadeRange, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightPropagationVolumeSettings, 0x0040);
		}

		// struct FEngineServiceTerminate
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceTerminate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceTerminate, UserName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceTerminate, 0x0010);
		}

		// struct FEngineServiceExecuteCommand
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceExecuteCommand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceExecuteCommand, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceExecuteCommand, UserName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceExecuteCommand, 0x0020);
		}

		// struct FEngineServicePong
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServicePong)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, CurrentLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, EngineVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, HasBegunPlay, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, UnknownData_ESDS, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, InstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, InstanceType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, SessionId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, WorldTimeSeconds, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, UnknownData_IYHN, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServicePong, 0x0050);
		}

		// struct FEngineServicePing
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServicePing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePing, UnknownData_0R2K, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServicePing, 0x0001);
		}

		// struct FEngineServiceNotification
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceNotification)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceNotification, Text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceNotification, TimeSeconds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceNotification, 0x0018);
		}

		// struct FEngineServiceAuthGrant
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceAuthGrant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthGrant, UserName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthGrant, UserToGrant, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceAuthGrant, 0x0020);
		}

		// struct FEngineServiceAuthDeny
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceAuthDeny)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthDeny, UserName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthDeny, UserToDeny, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceAuthDeny, 0x0020);
		}

		// struct FActorLayer
		TEST_METHOD(ScriptStruct__ActorLayerUtilities__ActorLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorLayer, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorLayer, 0x0008);
		}
	};
}
